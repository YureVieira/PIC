

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Mar 24 15:50:21 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     	;# 
    15  0001                     	;# 
    16  0002                     	;# 
    17  0003                     	;# 
    18  0004                     	;# 
    19  0005                     	;# 
    20  0006                     	;# 
    21  000A                     	;# 
    22  000B                     	;# 
    23  000C                     	;# 
    24  000E                     	;# 
    25  000E                     	;# 
    26  000F                     	;# 
    27  0010                     	;# 
    28  0011                     	;# 
    29  0012                     	;# 
    30  0015                     	;# 
    31  0015                     	;# 
    32  0016                     	;# 
    33  0017                     	;# 
    34  0018                     	;# 
    35  0019                     	;# 
    36  001A                     	;# 
    37  001F                     	;# 
    38  0081                     	;# 
    39  0085                     	;# 
    40  0086                     	;# 
    41  008C                     	;# 
    42  008E                     	;# 
    43  0092                     	;# 
    44  0098                     	;# 
    45  0099                     	;# 
    46  009A                     	;# 
    47  009B                     	;# 
    48  009C                     	;# 
    49  009D                     	;# 
    50  009F                     	;# 
    51                           
    52                           	psect	strings
    53  0001                     __pstrings:	
    54  0001                     stringtab:	
    55  0001                     __stringtab:	
    56  0001                     stringcode:	
    57                           ;	String table - string pointers are 1 byte each
    58                           
    59  0001                     stringdir:	
    60  0001  3000               	movlw	high stringdir
    61  0002  008A               	movwf	10
    62  0003  0804               	movf	4,w
    63  0004  0A84               	incf	4,f
    64  0005  0782               	addwf	2,f
    65  0006                     __stringbase:	
    66  0006  3400               	retlw	0
    67  0007                     __end_of__stringtab:	
    68  0007                     _hexpowers:	
    69  0007  3401               	retlw	1
    70  0008  3400               	retlw	0
    71  0009  3410               	retlw	16
    72  000A  3400               	retlw	0
    73  000B  3400               	retlw	0
    74  000C  3401               	retlw	1
    75  000D  3400               	retlw	0
    76  000E  3410               	retlw	16
    77  000F                     __end_of_hexpowers:	
    78  0018                     _RCSTAbits	set	24
    79  0019                     _TXREG	set	25
    80  0064                     _TXIF	set	100
    81  008E                     _PCONbits	set	142
    82  0099                     _SPBRG	set	153
    83  0086                     _TRISBbits	set	134
    84  0098                     _TXSTAbits	set	152
    85  0086                     _TRISB	set	134
    86  000F                     __stringdata:	
    87  000F                     STR_1:	
    88  000F  3441               	retlw	65	;'A'
    89  0010  3464               	retlw	100	;'d'
    90  0011  3464               	retlw	100	;'d'
    91  0012  3472               	retlw	114	;'r'
    92  0013  3465               	retlw	101	;'e'
    93  0014  3473               	retlw	115	;'s'
    94  0015  3473               	retlw	115	;'s'
    95  0016  3420               	retlw	32	;' '
    96  0017  3450               	retlw	80	;'P'
    97  0018  344F               	retlw	79	;'O'
    98  0019  3452               	retlw	82	;'R'
    99  001A  3454               	retlw	84	;'T'
   100  001B  3442               	retlw	66	;'B'
   101  001C  3420               	retlw	32	;' '
   102  001D  343D               	retlw	61	;'='
   103  001E  3420               	retlw	32	;' '
   104  001F  3430               	retlw	48	;'0'
   105  0020  3478               	retlw	120	;'x'
   106  0021  3425               	retlw	37	;'%'
   107  0022  3458               	retlw	88	;'X'
   108  0023  340A               	retlw	10
   109  0024  3400               	retlw	0
   110  0025                     STR_2:	
   111  0025  3430               	retlw	48	;'0'
   112  0026  3431               	retlw	49	;'1'
   113  0027  3432               	retlw	50	;'2'
   114  0028  3433               	retlw	51	;'3'
   115  0029  3434               	retlw	52	;'4'
   116  002A  3435               	retlw	53	;'5'
   117  002B  3436               	retlw	54	;'6'
   118  002C  3437               	retlw	55	;'7'
   119  002D  3438               	retlw	56	;'8'
   120  002E  3439               	retlw	57	;'9'
   121  002F  3441               	retlw	65	;'A'
   122  0030  3442               	retlw	66	;'B'
   123  0031  3443               	retlw	67	;'C'
   124  0032  3444               	retlw	68	;'D'
   125  0033  3445               	retlw	69	;'E'
   126  0034  3446               	retlw	70	;'F'
   127  0035  3400               	retlw	0
   128  0036                     __end_of__stringdata:	
   129                           
   130                           ; #config settings
   131  0000                     
   132                           	psect	cinit
   133  07FE                     start_initialization:	
   134  07FE                     __initialization:	
   135  07FE                     end_of_initialization:	
   136                           ;End of C runtime variable initialization code
   137                           
   138  07FE                     __end_of__initialization:	
   139  07FE  0183               	clrf	3
   140  07FF  2EFF               	ljmp	_main	;jump to C main() function
   141                           
   142                           	psect	cstackCOMMON
   143  0070                     __pcstackCOMMON:	
   144  0070                     ?_putch:	
   145  0070                     ??_putch:	
   146                           ; 0 bytes @ 0x0
   147                           
   148  0070                     ?_UART_init:	
   149                           ; 0 bytes @ 0x0
   150                           
   151  0070                     ??_UART_init:	
   152                           ; 0 bytes @ 0x0
   153                           
   154  0070                     ?_main:	
   155                           ; 0 bytes @ 0x0
   156                           
   157  0070                     ?___lwdiv:	
   158                           ; 0 bytes @ 0x0
   159                           
   160  0070                     putch@data:	
   161                           ; 2 bytes @ 0x0
   162                           
   163  0070                     ___lwdiv@divisor:	
   164                           ; 1 bytes @ 0x0
   165                           
   166                           
   167                           ; 2 bytes @ 0x0
   168  0070                     	ds	2
   169  0072                     ___lwdiv@dividend:	
   170                           
   171                           ; 2 bytes @ 0x2
   172  0072                     	ds	2
   173  0074                     ??___lwdiv:	
   174                           
   175                           ; 0 bytes @ 0x4
   176  0074                     	ds	1
   177  0075                     ___lwdiv@quotient:	
   178                           
   179                           ; 2 bytes @ 0x5
   180  0075                     	ds	2
   181  0077                     ___lwdiv@counter:	
   182                           
   183                           ; 1 bytes @ 0x7
   184  0077                     	ds	1
   185  0078                     ?_printf:	
   186                           
   187                           ; 2 bytes @ 0x8
   188  0078                     	ds	2
   189  007A                     ??_printf:	
   190                           
   191                           ; 0 bytes @ 0xA
   192  007A                     	ds	3
   193                           
   194                           	psect	cstackBANK0
   195  0020                     __pcstackBANK0:	
   196  0020                     printf@flag:	
   197                           
   198                           ; 1 bytes @ 0x0
   199  0020                     	ds	1
   200  0021                     printf@idx:	
   201                           
   202                           ; 1 bytes @ 0x1
   203  0021                     	ds	1
   204  0022                     printf@ap:	
   205                           
   206                           ; 1 bytes @ 0x2
   207  0022                     	ds	1
   208  0023                     printf@_val:	
   209                           
   210                           ; 4 bytes @ 0x3
   211  0023                     	ds	4
   212  0027                     printf@prec:	
   213                           
   214                           ; 1 bytes @ 0x7
   215  0027                     	ds	1
   216  0028                     printf@f:	
   217                           
   218                           ; 1 bytes @ 0x8
   219  0028                     	ds	1
   220  0029                     printf@c:	
   221                           
   222                           ; 1 bytes @ 0x9
   223  0029                     	ds	1
   224  002A                     ??_main:	
   225                           
   226                           ; 0 bytes @ 0xA
   227  002A                     	ds	2
   228  002C                     main@p:	
   229                           
   230                           ; 2 bytes @ 0xC
   231  002C                     	ds	2
   232  002E                     main@i:	
   233                           
   234                           ; 2 bytes @ 0xE
   235  002E                     	ds	2
   236                           
   237                           	psect	maintext
   238  06FF                     __pmaintext:	
   239 ;;
   240 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   241 ;;
   242 ;; *************** function _main *****************
   243 ;; Defined at:
   244 ;;		line 59 in file "main.c"
   245 ;; Parameters:    Size  Location     Type
   246 ;;		None
   247 ;; Auto vars:     Size  Location     Type
   248 ;;  i               2   14[BANK0 ] int 
   249 ;;  p               2   12[BANK0 ] PTR unsigned char 
   250 ;;		 -> TRISB(1), 
   251 ;; Return value:  Size  Location     Type
   252 ;;		None               void
   253 ;; Registers used:
   254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   255 ;; Tracked objects:
   256 ;;		On entry : 17F/0
   257 ;;		On exit  : 0/0
   258 ;;		Unchanged: 0/0
   259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   260 ;;      Params:         0       0       0       0
   261 ;;      Locals:         0       4       0       0
   262 ;;      Temps:          0       2       0       0
   263 ;;      Totals:         0       6       0       0
   264 ;;Total ram usage:        6 bytes
   265 ;; Hardware stack levels required when called:    2
   266 ;; This function calls:
   267 ;;		_UART_init
   268 ;;		_printf
   269 ;; This function is called by:
   270 ;;		Startup code after reset
   271 ;; This function uses a non-reentrant model
   272 ;;
   273                           
   274                           
   275                           ;psect for function _main
   276  06FF                     _main:	
   277                           
   278                           ;main.c: 61: PCONbits.OSCF = 1;
   279                           
   280                           ;incstack = 0
   281                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   282  06FF  1683               	bsf	3,5	;RP0=1, select bank1
   283  0700  1303               	bcf	3,6	;RP1=0, select bank1
   284  0701  158E               	bsf	14,3	;volatile
   285                           
   286                           ;main.c: 62: char* p;
   287                           ;main.c: 63: p = &TRISB;
   288  0702  3000               	movlw	0
   289  0703  1283               	bcf	3,5	;RP0=0, select bank0
   290  0704  1303               	bcf	3,6	;RP1=0, select bank0
   291  0705  00AD               	movwf	main@p+1
   292  0706  3086               	movlw	134
   293  0707  00AC               	movwf	main@p
   294                           
   295                           ;main.c: 64: UART_init();
   296  0708  26D7               	fcall	_UART_init
   297  0709                     l717:	
   298                           ;main.c: 65: while(1)
   299                           
   300                           
   301                           ;main.c: 66: {
   302                           ;main.c: 67: printf("Address PORTB = 0x%X\n",p);
   303  0709  1283               	bcf	3,5	;RP0=0, select bank0
   304  070A  1303               	bcf	3,6	;RP1=0, select bank0
   305  070B  082D               	movf	main@p+1,w
   306  070C  01F9               	clrf	?_printf+1
   307  070D  07F9               	addwf	?_printf+1,f
   308  070E  082C               	movf	main@p,w
   309  070F  01F8               	clrf	?_printf
   310  0710  07F8               	addwf	?_printf,f
   311  0711  3009               	movlw	(STR_1-__stringbase)& (0+255)
   312  0712  2774               	fcall	_printf
   313                           
   314                           ;main.c: 68: for(int i=0;i<50;i++)_delay((unsigned long)((100)*(4000000/4000.0)));
   315  0713  1283               	bcf	3,5	;RP0=0, select bank0
   316  0714  1303               	bcf	3,6	;RP1=0, select bank0
   317  0715  01AE               	clrf	main@i
   318  0716  01AF               	clrf	main@i+1
   319  0717                     L1:	
   320  0717  082F               	movf	main@i+1,w
   321  0718  3A80               	xorlw	128
   322  0719  00FF               	movwf	127
   323  071A  3080               	movlw	128
   324  071B  027F               	subwf	127,w
   325  071C  1D03               	skipz
   326  071D  2F20               	goto	u375
   327  071E  3032               	movlw	50
   328  071F  022E               	subwf	main@i,w
   329  0720                     u375:	
   330  0720  1803               	btfsc	3,0
   331  0721  2F09               	goto	l717
   332  0722  3082               	movlw	130
   333  0723  1283               	bcf	3,5	;RP0=0, select bank0
   334  0724  1303               	bcf	3,6	;RP1=0, select bank0
   335  0725  00AB               	movwf	??_main+1
   336  0726  30DD               	movlw	221
   337  0727  00AA               	movwf	??_main
   338  0728                     u397:	
   339  0728  0BAA               	decfsz	??_main,f
   340  0729  2F28               	goto	u397
   341  072A  0BAB               	decfsz	??_main+1,f
   342  072B  2F28               	goto	u397
   343  072C  2F2D               	nop2
   344  072D  3001               	movlw	1
   345  072E  1283               	bcf	3,5	;RP0=0, select bank0
   346  072F  1303               	bcf	3,6	;RP1=0, select bank0
   347  0730  07AE               	addwf	main@i,f
   348  0731  1803               	skipnc
   349  0732  0AAF               	incf	main@i+1,f
   350  0733  3000               	movlw	0
   351  0734  07AF               	addwf	main@i+1,f
   352  0735  2F17               	goto	L1
   353  0736                     __end_of_main:	
   354                           
   355                           	psect	text1
   356  0774                     __ptext1:	
   357 ;; *************** function _printf *****************
   358 ;; Defined at:
   359 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
   360 ;; Parameters:    Size  Location     Type
   361 ;;  f               1    wreg     PTR const unsigned char 
   362 ;;		 -> STR_1(22), 
   363 ;; Auto vars:     Size  Location     Type
   364 ;;  f               1    8[BANK0 ] PTR const unsigned char 
   365 ;;		 -> STR_1(22), 
   366 ;;  idx             1    1[BANK0 ] unsigned char 
   367 ;;  _val            4    3[BANK0 ] struct .
   368 ;;  c               1    9[BANK0 ] char 
   369 ;;  prec            1    7[BANK0 ] char 
   370 ;;  ap              1    2[BANK0 ] PTR void [1]
   371 ;;		 -> ?_printf(2), 
   372 ;;  flag            1    0[BANK0 ] unsigned char 
   373 ;; Return value:  Size  Location     Type
   374 ;;                  2    8[COMMON] int 
   375 ;; Registers used:
   376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   377 ;; Tracked objects:
   378 ;;		On entry : 0/0
   379 ;;		On exit  : 0/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   382 ;;      Params:         2       0       0       0
   383 ;;      Locals:         0      10       0       0
   384 ;;      Temps:          3       0       0       0
   385 ;;      Totals:         5      10       0       0
   386 ;;Total ram usage:       15 bytes
   387 ;; Hardware stack levels used:    1
   388 ;; Hardware stack levels required when called:    1
   389 ;; This function calls:
   390 ;;		___lwdiv
   391 ;;		_putch
   392 ;; This function is called by:
   393 ;;		_main
   394 ;; This function uses a non-reentrant model
   395 ;;
   396                           
   397                           
   398                           ;psect for function _printf
   399  0774                     _printf:	
   400                           
   401                           ;incstack = 0
   402                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   403                           ;printf@f stored from wreg
   404  0774  1283               	bcf	3,5	;RP0=0, select bank0
   405  0775  1303               	bcf	3,6	;RP1=0, select bank0
   406  0776  00A8               	movwf	printf@f
   407                           
   408                           ;doprnt.c: 466: va_list ap;
   409                           ;doprnt.c: 499: signed char c;
   410                           ;doprnt.c: 506: signed char prec;
   411                           ;doprnt.c: 508: unsigned char flag;
   412                           ;doprnt.c: 527: union {
   413                           ;doprnt.c: 528: unsigned int _val;
   414                           ;doprnt.c: 529: struct {
   415                           ;doprnt.c: 530: const char * _cp;
   416                           ;doprnt.c: 531: unsigned _len;
   417                           ;doprnt.c: 532: } _str;
   418                           ;doprnt.c: 533: } _val;
   419                           ;doprnt.c: 542: *ap = __va_start();
   420  0777  3078               	movlw	?_printf& (0+255)
   421  0778  00FA               	movwf	??_printf
   422  0779  087A               	movf	??_printf,w
   423  077A  00A2               	movwf	printf@ap
   424  077B                     l711:	
   425                           ;doprnt.c: 545: while(c = *f++) {
   426                           
   427  077B  3001               	movlw	1
   428  077C  1283               	bcf	3,5	;RP0=0, select bank0
   429  077D  1303               	bcf	3,6	;RP1=0, select bank0
   430  077E  07A8               	addwf	printf@f,f
   431  077F  30FF               	movlw	-1
   432  0780  0728               	addwf	printf@f,w
   433  0781  0084               	movwf	4
   434  0782  2001               	fcall	stringdir
   435  0783  00FA               	movwf	??_printf
   436  0784  087A               	movf	??_printf,w
   437  0785  00A9               	movwf	printf@c
   438  0786  08A9               	movf	printf@c,f
   439  0787  1903               	btfsc	3,2
   440  0788  0008               	return
   441                           
   442                           ;doprnt.c: 547: if(c != '%')
   443  0789  0829               	movf	printf@c,w
   444  078A  3A25               	xorlw	37
   445  078B  1903               	skipnz
   446  078C  2F90               	goto	l677
   447                           
   448                           ;doprnt.c: 549: {
   449                           ;doprnt.c: 550: (putch(c) );
   450  078D  0829               	movf	printf@c,w
   451  078E  26E8               	fcall	_putch
   452                           
   453                           ;doprnt.c: 551: continue;
   454  078F  2F7B               	goto	l711
   455  0790                     l677:	
   456                           
   457                           ;doprnt.c: 552: }
   458                           ;doprnt.c: 557: flag = 0;
   459  0790  1283               	bcf	3,5	;RP0=0, select bank0
   460  0791  1303               	bcf	3,6	;RP1=0, select bank0
   461  0792  01A0               	clrf	printf@flag
   462                           
   463                           ;doprnt.c: 831: }
   464                           
   465                           ;doprnt.c: 822: continue;
   466                           
   467                           ;doprnt.c: 811: default:
   468                           
   469                           ;doprnt.c: 727: case 'x':
   470                           ;doprnt.c: 732: break;
   471                           
   472                           ;doprnt.c: 721: case 'X':
   473                           
   474                           ;doprnt.c: 647: goto alldone;
   475                           
   476                           ;doprnt.c: 646: case 0:
   477                           
   478                           ;doprnt.c: 644: switch(c = *f++) {
   479  0793  3001               	movlw	1
   480  0794  07A8               	addwf	printf@f,f
   481  0795  30FF               	movlw	-1
   482  0796  0728               	addwf	printf@f,w
   483  0797  0084               	movwf	4
   484  0798  2001               	fcall	stringdir
   485  0799  00A9               	movwf	printf@c
   486                           
   487                           ; Switch size 1, requested type "space"
   488                           ; Number of cases is 3, Range of values is 0 to 120
   489                           ; switch strategies available:
   490                           ; Name         Instructions Cycles
   491                           ; simple_byte           10     6 (average)
   492                           ; direct_byte          127     6 (fixed)
   493                           ; jumptable            260     6 (fixed)
   494                           ;	Chosen strategy is simple_byte
   495  079A  3A00               	xorlw	0	; case 0
   496  079B  1903               	skipnz
   497  079C  2FFD               	goto	l72
   498  079D  3A58               	xorlw	88	; case 88
   499  079E  1903               	skipnz
   500  079F  2FA4               	goto	l683
   501  07A0  3A20               	xorlw	32	; case 120
   502  07A1  1903               	skipnz
   503  07A2  2FA4               	goto	l683
   504  07A3  2F7B               	goto	l711
   505  07A4                     l683:	
   506                           
   507                           ;doprnt.c: 1282: {
   508                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
   509  07A4  0822               	movf	printf@ap,w
   510  07A5  0084               	movwf	4
   511  07A6  0800               	movf	0,w
   512  07A7  00A3               	movwf	printf@_val
   513  07A8  0A84               	incf	4,f
   514  07A9  0800               	movf	0,w
   515  07AA  00A4               	movwf	printf@_val+1
   516  07AB  3002               	movlw	2
   517  07AC  00FA               	movwf	??_printf
   518  07AD  087A               	movf	??_printf,w
   519  07AE  07A2               	addwf	printf@ap,f
   520                           
   521                           ;doprnt.c: 1296: }
   522                           ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
   523  07AF  01A9               	clrf	printf@c
   524  07B0  0AA9               	incf	printf@c,f
   525  07B1  0829               	movf	printf@c,w
   526  07B2  3A04               	xorlw	4
   527  07B3  1903               	btfsc	3,2
   528  07B4  2FCE               	goto	l701
   529  07B5                     l693:	
   530                           
   531                           ;doprnt.c: 1326: if(_val._val < hexpowers[c])
   532  07B5  0829               	movf	printf@c,w
   533  07B6  00FA               	movwf	??_printf
   534  07B7  077A               	addwf	??_printf,w
   535  07B8  3E01               	addlw	low (_hexpowers-__stringbase)
   536  07B9  0084               	movwf	4
   537  07BA  2001               	fcall	stringdir
   538  07BB  00FB               	movwf	??_printf+1
   539  07BC  2001               	fcall	stringdir
   540  07BD  00FC               	movwf	??_printf+2
   541  07BE  087C               	movf	??_printf+2,w
   542  07BF  0224               	subwf	printf@_val+1,w
   543  07C0  1D03               	skipz
   544  07C1  2FC4               	goto	u335
   545  07C2  087B               	movf	??_printf+1,w
   546  07C3  0223               	subwf	printf@_val,w
   547  07C4                     u335:	
   548  07C4  1C03               	btfss	3,0
   549  07C5  2FCE               	goto	l701
   550                           
   551                           ;doprnt.c: 1327: break;
   552  07C6  3001               	movlw	1
   553  07C7  00FA               	movwf	??_printf
   554  07C8  087A               	movf	??_printf,w
   555  07C9  07A9               	addwf	printf@c,f
   556  07CA  0829               	movf	printf@c,w
   557  07CB  3A04               	xorlw	4
   558  07CC  1D03               	skipz
   559  07CD  2FB5               	goto	l693
   560  07CE                     l701:	
   561                           
   562                           ;doprnt.c: 1431: {
   563                           ;doprnt.c: 1478: }
   564                           ;doprnt.c: 1481: prec = c;
   565  07CE  0829               	movf	printf@c,w
   566  07CF  00FA               	movwf	??_printf
   567  07D0  087A               	movf	??_printf,w
   568  07D1  00A7               	movwf	printf@prec
   569  07D2                     l709:	
   570                           ;doprnt.c: 1483: while(prec--) {
   571                           
   572  07D2  30FF               	movlw	-1
   573  07D3  00FA               	movwf	??_printf
   574  07D4  087A               	movf	??_printf,w
   575  07D5  1283               	bcf	3,5	;RP0=0, select bank0
   576  07D6  1303               	bcf	3,6	;RP1=0, select bank0
   577  07D7  07A7               	addwf	printf@prec,f
   578  07D8  0827               	movf	printf@prec,w
   579  07D9  3AFF               	xorlw	-1
   580  07DA  1903               	btfsc	3,2
   581  07DB  2F7B               	goto	l711
   582                           
   583                           ;doprnt.c: 1487: {
   584                           ;doprnt.c: 1508: {
   585                           ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
   586  07DC  0827               	movf	printf@prec,w
   587  07DD  00FA               	movwf	??_printf
   588  07DE  077A               	addwf	??_printf,w
   589  07DF  3E01               	addlw	low (_hexpowers-__stringbase)
   590  07E0  0084               	movwf	4
   591  07E1  2001               	fcall	stringdir
   592  07E2  00F0               	movwf	___lwdiv@divisor
   593  07E3  2001               	fcall	stringdir
   594  07E4  00F1               	movwf	___lwdiv@divisor+1
   595  07E5  0824               	movf	printf@_val+1,w
   596  07E6  01F3               	clrf	___lwdiv@dividend+1
   597  07E7  07F3               	addwf	___lwdiv@dividend+1,f
   598  07E8  0823               	movf	printf@_val,w
   599  07E9  01F2               	clrf	___lwdiv@dividend
   600  07EA  07F2               	addwf	___lwdiv@dividend,f
   601  07EB  2736               	fcall	___lwdiv
   602  07EC  0870               	movf	?___lwdiv,w
   603  07ED  390F               	andlw	15
   604  07EE  00FB               	movwf	??_printf+1
   605  07EF  087B               	movf	??_printf+1,w
   606  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   607  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   608  07F2  00A1               	movwf	printf@idx
   609                           
   610                           ;doprnt.c: 1513: c = "0123456789ABCDEF"[idx];
   611  07F3  0821               	movf	printf@idx,w
   612  07F4  3E1F               	addlw	low (STR_2-__stringbase)
   613  07F5  0084               	movwf	4
   614  07F6  2001               	fcall	stringdir
   615  07F7  00FA               	movwf	??_printf
   616  07F8  087A               	movf	??_printf,w
   617  07F9  00A9               	movwf	printf@c
   618                           
   619                           ;doprnt.c: 1517: }
   620                           ;doprnt.c: 1532: }
   621                           ;doprnt.c: 1533: (putch(c) );
   622  07FA  0829               	movf	printf@c,w
   623  07FB  26E8               	fcall	_putch
   624  07FC  2FD2               	goto	l709
   625  07FD                     l72:	
   626                           ;doprnt.c: 1549: return 0;
   627                           ;	Return value of _printf is never used
   628                           
   629                           ;doprnt.c: 1534: }
   630                           ;doprnt.c: 1542: }
   631                           ;doprnt.c: 1544: alldone:
   632                           
   633  07FD  0008               	return
   634  07FE                     __end_of_printf:	
   635                           
   636                           	psect	text2
   637  06E8                     __ptext2:	
   638 ;; *************** function _putch *****************
   639 ;; Defined at:
   640 ;;		line 16 in file "main.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;  data            1    wreg     unsigned char 
   643 ;; Auto vars:     Size  Location     Type
   644 ;;  data            1    0[COMMON] unsigned char 
   645 ;; Return value:  Size  Location     Type
   646 ;;		None               void
   647 ;; Registers used:
   648 ;;		wreg
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   654 ;;      Params:         0       0       0       0
   655 ;;      Locals:         1       0       0       0
   656 ;;      Temps:          0       0       0       0
   657 ;;      Totals:         1       0       0       0
   658 ;;Total ram usage:        1 bytes
   659 ;; Hardware stack levels used:    1
   660 ;; This function calls:
   661 ;;		Nothing
   662 ;; This function is called by:
   663 ;;		_printf
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           
   668                           ;psect for function _putch
   669  06E8                     _putch:	
   670                           
   671                           ;incstack = 0
   672                           ; Regs used in _putch: [wreg]
   673                           ;putch@data stored from wreg
   674  06E8  00F0               	movwf	putch@data
   675                           
   676                           ;main.c: 18: if(data == 10)
   677  06E9  0870               	movf	putch@data,w
   678  06EA  3A0A               	xorlw	10
   679  06EB  1D03               	skipz
   680  06EC  2EF8               	goto	l31
   681  06ED                     l24:	
   682                           ;main.c: 21: continue;
   683                           
   684                           ;main.c: 19: {
   685                           ;main.c: 20: while(!TXIF)
   686                           
   687  06ED  1283               	bcf	3,5	;RP0=0, select bank0
   688  06EE  1303               	bcf	3,6	;RP1=0, select bank0
   689  06EF  1E0C               	btfss	12,4	;volatile
   690  06F0  2EED               	goto	l24
   691                           
   692                           ;main.c: 22: TXREG = 10;
   693  06F1  300A               	movlw	10
   694  06F2  0099               	movwf	25	;volatile
   695  06F3                     l27:	
   696                           ;main.c: 24: continue;
   697                           
   698                           ;main.c: 23: while(!TXIF)
   699                           
   700  06F3  1E0C               	btfss	12,4	;volatile
   701  06F4  2EF3               	goto	l27
   702                           
   703                           ;main.c: 25: TXREG = 13;
   704  06F5  300D               	movlw	13
   705  06F6  0099               	movwf	25	;volatile
   706                           
   707                           ;main.c: 26: return;
   708  06F7  0008               	return
   709  06F8                     l31:	
   710                           ;main.c: 29: continue;
   711                           
   712                           ;main.c: 27: }
   713                           ;main.c: 28: while(!TXIF)
   714                           
   715  06F8  1283               	bcf	3,5	;RP0=0, select bank0
   716  06F9  1303               	bcf	3,6	;RP1=0, select bank0
   717  06FA  1E0C               	btfss	12,4	;volatile
   718  06FB  2EF8               	goto	l31
   719                           
   720                           ;main.c: 30: TXREG = data;
   721  06FC  0870               	movf	putch@data,w
   722  06FD  0099               	movwf	25	;volatile
   723  06FE  0008               	return
   724  06FF                     __end_of_putch:	
   725                           
   726                           	psect	text3
   727  0736                     __ptext3:	
   728 ;; *************** function ___lwdiv *****************
   729 ;; Defined at:
   730 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;  divisor         2    0[COMMON] unsigned int 
   733 ;;  dividend        2    2[COMMON] unsigned int 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  quotient        2    5[COMMON] unsigned int 
   736 ;;  counter         1    7[COMMON] unsigned char 
   737 ;; Return value:  Size  Location     Type
   738 ;;                  2    0[COMMON] unsigned int 
   739 ;; Registers used:
   740 ;;		wreg, status,2, status,0
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   746 ;;      Params:         4       0       0       0
   747 ;;      Locals:         3       0       0       0
   748 ;;      Temps:          1       0       0       0
   749 ;;      Totals:         8       0       0       0
   750 ;;Total ram usage:        8 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; This function calls:
   753 ;;		Nothing
   754 ;; This function is called by:
   755 ;;		_printf
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           
   760                           ;psect for function ___lwdiv
   761  0736                     ___lwdiv:	
   762                           
   763                           ;incstack = 0
   764                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   765  0736  01F5               	clrf	___lwdiv@quotient
   766  0737  01F6               	clrf	___lwdiv@quotient+1
   767  0738  0871               	movf	___lwdiv@divisor+1,w
   768  0739  0470               	iorwf	___lwdiv@divisor,w
   769  073A  1903               	skipnz
   770  073B  2F6D               	goto	l663
   771  073C  01F7               	clrf	___lwdiv@counter
   772  073D  0AF7               	incf	___lwdiv@counter,f
   773  073E                     l651:	
   774  073E  1BF1               	btfsc	___lwdiv@divisor+1,7
   775  073F  2F4C               	goto	l653
   776  0740  3001               	movlw	1
   777  0741                     u255:	
   778  0741  1003               	clrc
   779  0742  0DF0               	rlf	___lwdiv@divisor,f
   780  0743  0DF1               	rlf	___lwdiv@divisor+1,f
   781  0744  3EFF               	addlw	-1
   782  0745  1D03               	skipz
   783  0746  2F41               	goto	u255
   784  0747  3001               	movlw	1
   785  0748  00F4               	movwf	??___lwdiv
   786  0749  0874               	movf	??___lwdiv,w
   787  074A  07F7               	addwf	___lwdiv@counter,f
   788  074B  2F3E               	goto	l651
   789  074C                     l653:	
   790  074C  3001               	movlw	1
   791  074D                     u275:	
   792  074D  1003               	clrc
   793  074E  0DF5               	rlf	___lwdiv@quotient,f
   794  074F  0DF6               	rlf	___lwdiv@quotient+1,f
   795  0750  3EFF               	addlw	-1
   796  0751  1D03               	skipz
   797  0752  2F4D               	goto	u275
   798  0753  0871               	movf	___lwdiv@divisor+1,w
   799  0754  0273               	subwf	___lwdiv@dividend+1,w
   800  0755  1D03               	skipz
   801  0756  2F59               	goto	u285
   802  0757  0870               	movf	___lwdiv@divisor,w
   803  0758  0272               	subwf	___lwdiv@dividend,w
   804  0759                     u285:	
   805  0759  1C03               	skipc
   806  075A  2F62               	goto	l659
   807  075B  0870               	movf	___lwdiv@divisor,w
   808  075C  02F2               	subwf	___lwdiv@dividend,f
   809  075D  0871               	movf	___lwdiv@divisor+1,w
   810  075E  1C03               	skipc
   811  075F  03F3               	decf	___lwdiv@dividend+1,f
   812  0760  02F3               	subwf	___lwdiv@dividend+1,f
   813  0761  1475               	bsf	___lwdiv@quotient,0
   814  0762                     l659:	
   815  0762  3001               	movlw	1
   816  0763                     u295:	
   817  0763  1003               	clrc
   818  0764  0CF1               	rrf	___lwdiv@divisor+1,f
   819  0765  0CF0               	rrf	___lwdiv@divisor,f
   820  0766  3EFF               	addlw	-1
   821  0767  1D03               	skipz
   822  0768  2F63               	goto	u295
   823  0769  3001               	movlw	1
   824  076A  02F7               	subwf	___lwdiv@counter,f
   825  076B  1D03               	btfss	3,2
   826  076C  2F4C               	goto	l653
   827  076D                     l663:	
   828  076D  0876               	movf	___lwdiv@quotient+1,w
   829  076E  01F1               	clrf	?___lwdiv+1
   830  076F  07F1               	addwf	?___lwdiv+1,f
   831  0770  0875               	movf	___lwdiv@quotient,w
   832  0771  01F0               	clrf	?___lwdiv
   833  0772  07F0               	addwf	?___lwdiv,f
   834  0773  0008               	return
   835  0774                     __end_of___lwdiv:	
   836                           
   837                           	psect	text4
   838  06D7                     __ptext4:	
   839 ;; *************** function _UART_init *****************
   840 ;; Defined at:
   841 ;;		line 32 in file "main.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;		None
   846 ;; Return value:  Size  Location     Type
   847 ;;		None               void
   848 ;; Registers used:
   849 ;;		wreg
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   855 ;;      Params:         0       0       0       0
   856 ;;      Locals:         0       0       0       0
   857 ;;      Temps:          0       0       0       0
   858 ;;      Totals:         0       0       0       0
   859 ;;Total ram usage:        0 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; This function calls:
   862 ;;		Nothing
   863 ;; This function is called by:
   864 ;;		_main
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           
   869                           ;psect for function _UART_init
   870  06D7                     _UART_init:	
   871                           
   872                           ;main.c: 35: TRISBbits.TRISB1 = 1;
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _UART_init: [wreg]
   876  06D7  1683               	bsf	3,5	;RP0=1, select bank1
   877  06D8  1303               	bcf	3,6	;RP1=0, select bank1
   878  06D9  1486               	bsf	6,1	;volatile
   879                           
   880                           ;main.c: 36: TRISBbits.TRISB2 = 1;
   881  06DA  1506               	bsf	6,2	;volatile
   882                           
   883                           ;main.c: 38: TXSTAbits.CSRC = 1;
   884  06DB  1798               	bsf	24,7	;volatile
   885                           
   886                           ;main.c: 39: TXSTAbits.TXEN = 1;
   887  06DC  1698               	bsf	24,5	;volatile
   888                           
   889                           ;main.c: 40: TXSTAbits.SYNC = 0;
   890  06DD  1218               	bcf	24,4	;volatile
   891                           
   892                           ;main.c: 43: RCSTAbits.SPEN = 1;
   893  06DE  1283               	bcf	3,5	;RP0=0, select bank0
   894  06DF  1303               	bcf	3,6	;RP1=0, select bank0
   895  06E0  1798               	bsf	24,7	;volatile
   896                           
   897                           ;main.c: 44: RCSTAbits.CREN = 1;
   898  06E1  1618               	bsf	24,4	;volatile
   899                           
   900                           ;main.c: 48: TXSTAbits.BRGH = 0;
   901  06E2  1683               	bsf	3,5	;RP0=1, select bank1
   902  06E3  1303               	bcf	3,6	;RP1=0, select bank1
   903  06E4  1118               	bcf	24,2	;volatile
   904                           
   905                           ;main.c: 49: SPBRG = 25;
   906  06E5  3019               	movlw	25
   907  06E6  0099               	movwf	25	;volatile
   908  06E7  0008               	return
   909  06E8                     __end_of_UART_init:	
   910  007E                     btemp	set	126	;btemp
   911  007E                     wtemp	set	126
   912  007E                     wtemp0	set	126
   913  0080                     wtemp1	set	128
   914  0082                     wtemp2	set	130
   915  0084                     wtemp3	set	132
   916  0086                     wtemp4	set	134
   917  0088                     wtemp5	set	136
   918  007F                     wtemp6	set	127
   919  007E                     ttemp	set	126
   920  007E                     ttemp0	set	126
   921  0081                     ttemp1	set	129
   922  0084                     ttemp2	set	132
   923  0087                     ttemp3	set	135
   924  007F                     ttemp4	set	127
   925  007E                     ltemp	set	126
   926  007E                     ltemp0	set	126
   927  0082                     ltemp1	set	130
   928  0086                     ltemp2	set	134
   929  0080                     ltemp3	set	128


Data Sizes:
    Strings     39
    Constant    8
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     16      16
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 22
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    S180$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    main@p	PTR unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR1[1]), 


Critical Paths under _main in COMMON

    _main->_printf
    _printf->___lwdiv

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     749
                                             10 BANK0      6     6      0
                          _UART_init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              15    13      2     680
                                              8 COMMON     5     3      2
                                              0 BANK0     10    10      0
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_init
   _printf
     ___lwdiv
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     10      10       3       20.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Mar 24 15:50:21 2015

                      pc 0002              __CFG_CP$OFF 0000                       l31 06F8  
                     l24 06ED                       l27 06F3                       l72 07FD  
                     fsr 0004              __CFG_LVP$ON 0000                      l701 07CE  
                    l711 077B                      l651 073E                      l653 074C  
                    l709 07D2                      l717 0709                      l663 076D  
                    l659 0762                      l683 07A4                      l693 07B5  
                    l677 0790                      u255 0741                      u335 07C4  
           __CFG_CPD$OFF 0000                      u275 074D                      u285 0759  
                    u295 0763                      u375 0720                      u397 0728  
                    fsr0 0004                      indf 0000                     STR_1 000F  
                   STR_2 0025                     _TXIF 0064                     _main 06FF  
                   btemp 007E            __CFG_BOREN$ON 0000                     ltemp 007E  
                   start 0000                     ttemp 007E                     wtemp 007E  
                  ?_main 0070            __CFG_WDTE$OFF 0000          __end_of___lwdiv 0774  
                  _SPBRG 0099                    _TRISB 0086                    _TXREG 0019  
     __size_of_UART_init 0011                    _putch 06E8                    main@i 002E  
                  main@p 002C                    pclath 000A                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
                  ttemp0 007E                    ttemp1 0081                    ttemp2 0084  
                  ttemp3 0087                    ttemp4 007F                    status 0003  
                  wtemp0 007E                    wtemp1 0080                    wtemp2 0082  
                  wtemp3 0084                    wtemp4 0086                    wtemp5 0088  
                  wtemp6 007F           __CFG_MCLRE$OFF 0000          __initialization 07FE  
           __end_of_main 0736                   ??_main 002A                   ?_putch 0070  
         __CFG_PWRTE$OFF 0000        __end_of_UART_init 06E8                ??___lwdiv 0074  
                 _printf 0774  __end_of__initialization 07FE           __pcstackCOMMON 0070  
          __end_of_putch 06FF                  ??_putch 0070               __pmaintext 06FF  
                ?_printf 0078               __stringtab 0001                  ___lwdiv 0736  
                __ptext1 0774                  __ptext2 06E8                  __ptext3 0736  
                __ptext4 06D7          __size_of_printf 008A        __end_of_hexpowers 000F  
   end_of_initialization 07FE                _RCSTAbits 0018                  printf@c 0029  
                printf@f 0028                _UART_init 06D7                _TRISBbits 0086  
              _TXSTAbits 0098               ?_UART_init 0070           __end_of_printf 07FE  
    start_initialization 07FE                 ??_printf 007A                ___latbits 0000  
          __pcstackBANK0 0020      __end_of__stringdata 0036         ___lwdiv@dividend 0072  
               ?___lwdiv 0070                __pstrings 0001              ??_UART_init 0070  
              _hexpowers 0007         ___lwdiv@quotient 0075           __size_of_putch 0017  
               _PCONbits 008E              __stringbase 0006              __stringdata 000F  
             printf@_val 0023               printf@flag 0020               printf@prec 0027  
       __size_of___lwdiv 003E       __end_of__stringtab 0007          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0077            __size_of_main 0037                printf@idx 0021  
              putch@data 0070                stringcode 0001                 printf@ap 0022  
               stringdir 0001                 stringtab 0001       __CFG_FOSC$INTOSCIO 0000  
