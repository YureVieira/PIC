

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Apr 01 16:59:40 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	jmp_tab__PICC_ReadCardSerial,global,class=ENTRY,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	jmp_tab__PICC_Select,global,class=ENTRY,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000E                     	;# 
    52  000E                     	;# 
    53  000F                     	;# 
    54  0010                     	;# 
    55  0011                     	;# 
    56  0012                     	;# 
    57  0015                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0017                     	;# 
    61  0018                     	;# 
    62  0019                     	;# 
    63  001A                     	;# 
    64  001F                     	;# 
    65  0081                     	;# 
    66  0085                     	;# 
    67  0086                     	;# 
    68  008C                     	;# 
    69  008E                     	;# 
    70  0092                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009F                     	;# 
    78                           
    79                           	psect	idataBANK0
    80  0000'                    __pidataBANK0:	
    81                           
    82                           ;initializer for MIFARE_SetUid@F1269
    83  0000' 34FF               	retlw	255
    84  0001' 34FF               	retlw	255
    85  0002' 34FF               	retlw	255
    86  0003' 34FF               	retlw	255
    87  0004' 34FF               	retlw	255
    88  0005' 34FF               	retlw	255
    89                           
    90                           	psect	idataBANK1
    91  0000'                    __pidataBANK1:	
    92                           
    93                           ;initializer for MIFARE_UnbrickUidSector@F1283
    94  0000' 3401               	retlw	1
    95  0001' 3402               	retlw	2
    96  0002' 3403               	retlw	3
    97  0003' 3404               	retlw	4
    98  0004' 3404               	retlw	4
    99  0005' 3400               	retlw	0
   100  0006' 3400               	retlw	0
   101  0007' 3400               	retlw	0
   102  0008' 3400               	retlw	0
   103  0009' 3400               	retlw	0
   104  000A' 3400               	retlw	0
   105  000B' 3400               	retlw	0
   106  000C' 3400               	retlw	0
   107  000D' 3400               	retlw	0
   108  000E' 3400               	retlw	0
   109  000F' 3400               	retlw	0
   110                           
   111                           	psect	stringtext
   112  0000'                    __pstringtext:	
   113  0000'                    stringtab:	
   114  0000'                    __stringtab:	
   115  0000'                    stringcode:	
   116                           ;	String table - string pointers are 2 bytes each
   117                           
   118  0000' 087F               	movf	btemp+1,w
   119  0001' 397F               	andlw	127
   120  0002' 008A               	movwf	10
   121  0003' 0804               	movf	4,w
   122  0004' 0A84               	incf	4,f
   123  0005' 1903               	skipnz
   124  0006' 0AFF               	incf	btemp+1,f
   125  0007' 0082               	movwf	2
   126  0008'                    __stringbase:	
   127  0008'                    __end_of__stringtab:	
   128  0008'                    _FIFO_SIZE:	
   129  0008' 3440               	retlw	64
   130  0009'                    __end_of_FIFO_SIZE:	
   131  0009'                    __stringdata:	
   132  0009'                    STR_6:	
   133  0009' 3449               	retlw	73	;'I'
   134  000A' 346E               	retlw	110	;'n'
   135  000B' 3474               	retlw	116	;'t'
   136  000C' 3465               	retlw	101	;'e'
   137  000D' 3472               	retlw	114	;'r'
   138  000E' 346E               	retlw	110	;'n'
   139  000F' 3461               	retlw	97	;'a'
   140  0010' 346C               	retlw	108	;'l'
   141  0011' 3420               	retlw	32	;' '
   142  0012' 3465               	retlw	101	;'e'
   143  0013' 3472               	retlw	114	;'r'
   144  0014' 3472               	retlw	114	;'r'
   145  0015' 346F               	retlw	111	;'o'
   146  0016' 3472               	retlw	114	;'r'
   147  0017' 3420               	retlw	32	;' '
   148  0018' 3469               	retlw	105	;'i'
   149  0019' 346E               	retlw	110	;'n'
   150  001A' 3420               	retlw	32	;' '
   151  001B' 3474               	retlw	116	;'t'
   152  001C' 3468               	retlw	104	;'h'
   153  001D' 3465               	retlw	101	;'e'
   154  001E' 3420               	retlw	32	;' '
   155  001F' 3463               	retlw	99	;'c'
   156  0020' 346F               	retlw	111	;'o'
   157  0021' 3464               	retlw	100	;'d'
   158  0022' 3465               	retlw	101	;'e'
   159  0023' 342E               	retlw	46	;'.'
   160  0024' 3420               	retlw	32	;' '
   161  0025' 3453               	retlw	83	;'S'
   162  0026' 3468               	retlw	104	;'h'
   163  0027' 346F               	retlw	111	;'o'
   164  0028' 3475               	retlw	117	;'u'
   165  0029' 346C               	retlw	108	;'l'
   166  002A' 3464               	retlw	100	;'d'
   167  002B' 3420               	retlw	32	;' '
   168  002C' 346E               	retlw	110	;'n'
   169  002D' 346F               	retlw	111	;'o'
   170  002E' 3474               	retlw	116	;'t'
   171  002F' 3420               	retlw	32	;' '
   172  0030' 3468               	retlw	104	;'h'
   173  0031' 3461               	retlw	97	;'a'
   174  0032' 3470               	retlw	112	;'p'
   175  0033' 3470               	retlw	112	;'p'
   176  0034' 3465               	retlw	101	;'e'
   177  0035' 346E               	retlw	110	;'n'
   178  0036' 342E               	retlw	46	;'.'
   179  0037' 3400               	retlw	0
   180  0038'                    STR_12:	
   181  0038' 3450               	retlw	80	;'P'
   182  0039' 3449               	retlw	73	;'I'
   183  003A' 3443               	retlw	67	;'C'
   184  003B' 3443               	retlw	67	;'C'
   185  003C' 3420               	retlw	32	;' '
   186  003D' 3463               	retlw	99	;'c'
   187  003E' 346F               	retlw	111	;'o'
   188  003F' 346D               	retlw	109	;'m'
   189  0040' 3470               	retlw	112	;'p'
   190  0041' 346C               	retlw	108	;'l'
   191  0042' 3469               	retlw	105	;'i'
   192  0043' 3461               	retlw	97	;'a'
   193  0044' 346E               	retlw	110	;'n'
   194  0045' 3474               	retlw	116	;'t'
   195  0046' 3420               	retlw	32	;' '
   196  0047' 3477               	retlw	119	;'w'
   197  0048' 3469               	retlw	105	;'i'
   198  0049' 3474               	retlw	116	;'t'
   199  004A' 3468               	retlw	104	;'h'
   200  004B' 3420               	retlw	32	;' '
   201  004C' 3449               	retlw	73	;'I'
   202  004D' 3453               	retlw	83	;'S'
   203  004E' 344F               	retlw	79	;'O'
   204  004F' 342F               	retlw	47	;'/'
   205  0050' 3449               	retlw	73	;'I'
   206  0051' 3445               	retlw	69	;'E'
   207  0052' 3443               	retlw	67	;'C'
   208  0053' 3420               	retlw	32	;' '
   209  0054' 3431               	retlw	49	;'1'
   210  0055' 3438               	retlw	56	;'8'
   211  0056' 3430               	retlw	48	;'0'
   212  0057' 3439               	retlw	57	;'9'
   213  0058' 3432               	retlw	50	;'2'
   214  0059' 3420               	retlw	32	;' '
   215  005A' 3428               	retlw	40	;'('
   216  005B' 344E               	retlw	78	;'N'
   217  005C' 3446               	retlw	70	;'F'
   218  005D' 3443               	retlw	67	;'C'
   219  005E' 3429               	retlw	41	;')'
   220  005F' 3400               	retlw	0
   221  0060'                    STR_11:	
   222  0060' 3450               	retlw	80	;'P'
   223  0061' 3449               	retlw	73	;'I'
   224  0062' 3443               	retlw	67	;'C'
   225  0063' 3443               	retlw	67	;'C'
   226  0064' 3420               	retlw	32	;' '
   227  0065' 3463               	retlw	99	;'c'
   228  0066' 346F               	retlw	111	;'o'
   229  0067' 346D               	retlw	109	;'m'
   230  0068' 3470               	retlw	112	;'p'
   231  0069' 346C               	retlw	108	;'l'
   232  006A' 3469               	retlw	105	;'i'
   233  006B' 3461               	retlw	97	;'a'
   234  006C' 346E               	retlw	110	;'n'
   235  006D' 3474               	retlw	116	;'t'
   236  006E' 3420               	retlw	32	;' '
   237  006F' 3477               	retlw	119	;'w'
   238  0070' 3469               	retlw	105	;'i'
   239  0071' 3474               	retlw	116	;'t'
   240  0072' 3468               	retlw	104	;'h'
   241  0073' 3420               	retlw	32	;' '
   242  0074' 3449               	retlw	73	;'I'
   243  0075' 3453               	retlw	83	;'S'
   244  0076' 344F               	retlw	79	;'O'
   245  0077' 342F               	retlw	47	;'/'
   246  0078' 3449               	retlw	73	;'I'
   247  0079' 3445               	retlw	69	;'E'
   248  007A' 3443               	retlw	67	;'C'
   249  007B' 3420               	retlw	32	;' '
   250  007C' 3431               	retlw	49	;'1'
   251  007D' 3434               	retlw	52	;'4'
   252  007E' 3434               	retlw	52	;'4'
   253  007F' 3434               	retlw	52	;'4'
   254  0080' 3433               	retlw	51	;'3'
   255  0081' 342D               	retlw	45	;'-'
   256  0082' 3434               	retlw	52	;'4'
   257  0083' 3400               	retlw	0
   258  0084'                    STR_19:	
   259  0084' 3453               	retlw	83	;'S'
   260  0085' 3441               	retlw	65	;'A'
   261  0086' 344B               	retlw	75	;'K'
   262  0087' 3420               	retlw	32	;' '
   263  0088' 3469               	retlw	105	;'i'
   264  0089' 346E               	retlw	110	;'n'
   265  008A' 3464               	retlw	100	;'d'
   266  008B' 3469               	retlw	105	;'i'
   267  008C' 3463               	retlw	99	;'c'
   268  008D' 3461               	retlw	97	;'a'
   269  008E' 3474               	retlw	116	;'t'
   270  008F' 3465               	retlw	101	;'e'
   271  0090' 3473               	retlw	115	;'s'
   272  0091' 3420               	retlw	32	;' '
   273  0092' 3455               	retlw	85	;'U'
   274  0093' 3449               	retlw	73	;'I'
   275  0094' 3444               	retlw	68	;'D'
   276  0095' 3420               	retlw	32	;' '
   277  0096' 3469               	retlw	105	;'i'
   278  0097' 3473               	retlw	115	;'s'
   279  0098' 3420               	retlw	32	;' '
   280  0099' 346E               	retlw	110	;'n'
   281  009A' 346F               	retlw	111	;'o'
   282  009B' 3474               	retlw	116	;'t'
   283  009C' 3420               	retlw	32	;' '
   284  009D' 3463               	retlw	99	;'c'
   285  009E' 346F               	retlw	111	;'o'
   286  009F' 346D               	retlw	109	;'m'
   287  00A0' 3470               	retlw	112	;'p'
   288  00A1' 346C               	retlw	108	;'l'
   289  00A2' 3465               	retlw	101	;'e'
   290  00A3' 3474               	retlw	116	;'t'
   291  00A4' 3465               	retlw	101	;'e'
   292  00A5' 342E               	retlw	46	;'.'
   293  00A6' 3400               	retlw	0
   294  00A7'                    STR_9:	
   295  00A7' 3441               	retlw	65	;'A'
   296  00A8' 3420               	retlw	32	;' '
   297  00A9' 344D               	retlw	77	;'M'
   298  00AA' 3449               	retlw	73	;'I'
   299  00AB' 3446               	retlw	70	;'F'
   300  00AC' 3441               	retlw	65	;'A'
   301  00AD' 3452               	retlw	82	;'R'
   302  00AE' 3445               	retlw	69	;'E'
   303  00AF' 3420               	retlw	32	;' '
   304  00B0' 3450               	retlw	80	;'P'
   305  00B1' 3449               	retlw	73	;'I'
   306  00B2' 3443               	retlw	67	;'C'
   307  00B3' 3443               	retlw	67	;'C'
   308  00B4' 3420               	retlw	32	;' '
   309  00B5' 3472               	retlw	114	;'r'
   310  00B6' 3465               	retlw	101	;'e'
   311  00B7' 3473               	retlw	115	;'s'
   312  00B8' 3470               	retlw	112	;'p'
   313  00B9' 346F               	retlw	111	;'o'
   314  00BA' 346E               	retlw	110	;'n'
   315  00BB' 3464               	retlw	100	;'d'
   316  00BC' 3465               	retlw	101	;'e'
   317  00BD' 3464               	retlw	100	;'d'
   318  00BE' 3420               	retlw	32	;' '
   319  00BF' 3477               	retlw	119	;'w'
   320  00C0' 3469               	retlw	105	;'i'
   321  00C1' 3474               	retlw	116	;'t'
   322  00C2' 3468               	retlw	104	;'h'
   323  00C3' 3420               	retlw	32	;' '
   324  00C4' 344E               	retlw	78	;'N'
   325  00C5' 3441               	retlw	65	;'A'
   326  00C6' 344B               	retlw	75	;'K'
   327  00C7' 342E               	retlw	46	;'.'
   328  00C8' 3400               	retlw	0
   329  00C9'                    STR_16:	
   330  00C9' 344D               	retlw	77	;'M'
   331  00CA' 3449               	retlw	73	;'I'
   332  00CB' 3446               	retlw	70	;'F'
   333  00CC' 3441               	retlw	65	;'A'
   334  00CD' 3452               	retlw	82	;'R'
   335  00CE' 3445               	retlw	69	;'E'
   336  00CF' 3420               	retlw	32	;' '
   337  00D0' 3455               	retlw	85	;'U'
   338  00D1' 346C               	retlw	108	;'l'
   339  00D2' 3474               	retlw	116	;'t'
   340  00D3' 3472               	retlw	114	;'r'
   341  00D4' 3461               	retlw	97	;'a'
   342  00D5' 346C               	retlw	108	;'l'
   343  00D6' 3469               	retlw	105	;'i'
   344  00D7' 3467               	retlw	103	;'g'
   345  00D8' 3468               	retlw	104	;'h'
   346  00D9' 3474               	retlw	116	;'t'
   347  00DA' 3420               	retlw	32	;' '
   348  00DB' 346F               	retlw	111	;'o'
   349  00DC' 3472               	retlw	114	;'r'
   350  00DD' 3420               	retlw	32	;' '
   351  00DE' 3455               	retlw	85	;'U'
   352  00DF' 346C               	retlw	108	;'l'
   353  00E0' 3474               	retlw	116	;'t'
   354  00E1' 3472               	retlw	114	;'r'
   355  00E2' 3461               	retlw	97	;'a'
   356  00E3' 346C               	retlw	108	;'l'
   357  00E4' 3469               	retlw	105	;'i'
   358  00E5' 3467               	retlw	103	;'g'
   359  00E6' 3468               	retlw	104	;'h'
   360  00E7' 3474               	retlw	116	;'t'
   361  00E8' 3420               	retlw	32	;' '
   362  00E9' 3443               	retlw	67	;'C'
   363  00EA' 3400               	retlw	0
   364  00EB'                    STR_13:	
   365  00EB' 344D               	retlw	77	;'M'
   366  00EC' 3449               	retlw	73	;'I'
   367  00ED' 3446               	retlw	70	;'F'
   368  00EE' 3441               	retlw	65	;'A'
   369  00EF' 3452               	retlw	82	;'R'
   370  00F0' 3445               	retlw	69	;'E'
   371  00F1' 3420               	retlw	32	;' '
   372  00F2' 344D               	retlw	77	;'M'
   373  00F3' 3469               	retlw	105	;'i'
   374  00F4' 346E               	retlw	110	;'n'
   375  00F5' 3469               	retlw	105	;'i'
   376  00F6' 342C               	retlw	44	;','
   377  00F7' 3420               	retlw	32	;' '
   378  00F8' 3433               	retlw	51	;'3'
   379  00F9' 3432               	retlw	50	;'2'
   380  00FA' 3430               	retlw	48	;'0'
   381  00FB' 3420               	retlw	32	;' '
   382  00FC' 3475               	retlw	117	;'u'
   383  00FD' 346E               	retlw	110	;'n'
   384  00FE' 3473               	retlw	115	;'s'
   385  00FF' 3469               	retlw	105	;'i'
   386  0100' 3467               	retlw	103	;'g'
   387  0101' 346E               	retlw	110	;'n'
   388  0102' 3465               	retlw	101	;'e'
   389  0103' 3464               	retlw	100	;'d'
   390  0104' 3420               	retlw	32	;' '
   391  0105' 3463               	retlw	99	;'c'
   392  0106' 3468               	retlw	104	;'h'
   393  0107' 3461               	retlw	97	;'a'
   394  0108' 3472               	retlw	114	;'r'
   395  0109' 3473               	retlw	115	;'s'
   396  010A' 3400               	retlw	0
   397  010B'                    STR_5:	
   398  010B' 3441               	retlw	65	;'A'
   399  010C' 3420               	retlw	32	;' '
   400  010D' 3462               	retlw	98	;'b'
   401  010E' 3475               	retlw	117	;'u'
   402  010F' 3466               	retlw	102	;'f'
   403  0110' 3466               	retlw	102	;'f'
   404  0111' 3465               	retlw	101	;'e'
   405  0112' 3472               	retlw	114	;'r'
   406  0113' 3420               	retlw	32	;' '
   407  0114' 3469               	retlw	105	;'i'
   408  0115' 3473               	retlw	115	;'s'
   409  0116' 3420               	retlw	32	;' '
   410  0117' 346E               	retlw	110	;'n'
   411  0118' 346F               	retlw	111	;'o'
   412  0119' 3474               	retlw	116	;'t'
   413  011A' 3420               	retlw	32	;' '
   414  011B' 3462               	retlw	98	;'b'
   415  011C' 3469               	retlw	105	;'i'
   416  011D' 3467               	retlw	103	;'g'
   417  011E' 3420               	retlw	32	;' '
   418  011F' 3465               	retlw	101	;'e'
   419  0120' 346E               	retlw	110	;'n'
   420  0121' 346F               	retlw	111	;'o'
   421  0122' 3475               	retlw	117	;'u'
   422  0123' 3467               	retlw	103	;'g'
   423  0124' 3468               	retlw	104	;'h'
   424  0125' 342E               	retlw	46	;'.'
   425  0126' 3400               	retlw	0
   426  0127'                    STR_8:	
   427  0127' 3454               	retlw	84	;'T'
   428  0128' 3468               	retlw	104	;'h'
   429  0129' 3465               	retlw	101	;'e'
   430  012A' 3420               	retlw	32	;' '
   431  012B' 3443               	retlw	67	;'C'
   432  012C' 3452               	retlw	82	;'R'
   433  012D' 3443               	retlw	67	;'C'
   434  012E' 345F               	retlw	95	;'_'
   435  012F' 3441               	retlw	65	;'A'
   436  0130' 3420               	retlw	32	;' '
   437  0131' 3464               	retlw	100	;'d'
   438  0132' 346F               	retlw	111	;'o'
   439  0133' 3465               	retlw	101	;'e'
   440  0134' 3473               	retlw	115	;'s'
   441  0135' 3420               	retlw	32	;' '
   442  0136' 346E               	retlw	110	;'n'
   443  0137' 346F               	retlw	111	;'o'
   444  0138' 3474               	retlw	116	;'t'
   445  0139' 3420               	retlw	32	;' '
   446  013A' 346D               	retlw	109	;'m'
   447  013B' 3461               	retlw	97	;'a'
   448  013C' 3474               	retlw	116	;'t'
   449  013D' 3463               	retlw	99	;'c'
   450  013E' 3468               	retlw	104	;'h'
   451  013F' 342E               	retlw	46	;'.'
   452  0140' 3400               	retlw	0
   453  0141'                    STR_4:	
   454  0141' 3454               	retlw	84	;'T'
   455  0142' 3469               	retlw	105	;'i'
   456  0143' 346D               	retlw	109	;'m'
   457  0144' 3465               	retlw	101	;'e'
   458  0145' 346F               	retlw	111	;'o'
   459  0146' 3475               	retlw	117	;'u'
   460  0147' 3474               	retlw	116	;'t'
   461  0148' 3420               	retlw	32	;' '
   462  0149' 3469               	retlw	105	;'i'
   463  014A' 346E               	retlw	110	;'n'
   464  014B' 3420               	retlw	32	;' '
   465  014C' 3463               	retlw	99	;'c'
   466  014D' 346F               	retlw	111	;'o'
   467  014E' 346D               	retlw	109	;'m'
   468  014F' 346D               	retlw	109	;'m'
   469  0150' 3475               	retlw	117	;'u'
   470  0151' 346E               	retlw	110	;'n'
   471  0152' 3469               	retlw	105	;'i'
   472  0153' 3463               	retlw	99	;'c'
   473  0154' 3461               	retlw	97	;'a'
   474  0155' 3474               	retlw	116	;'t'
   475  0156' 3469               	retlw	105	;'i'
   476  0157' 346F               	retlw	111	;'o'
   477  0158' 346E               	retlw	110	;'n'
   478  0159' 342E               	retlw	46	;'.'
   479  015A' 3400               	retlw	0
   480  015B'                    STR_2:	
   481  015B' 3445               	retlw	69	;'E'
   482  015C' 3472               	retlw	114	;'r'
   483  015D' 3472               	retlw	114	;'r'
   484  015E' 346F               	retlw	111	;'o'
   485  015F' 3472               	retlw	114	;'r'
   486  0160' 3420               	retlw	32	;' '
   487  0161' 3469               	retlw	105	;'i'
   488  0162' 346E               	retlw	110	;'n'
   489  0163' 3420               	retlw	32	;' '
   490  0164' 3463               	retlw	99	;'c'
   491  0165' 346F               	retlw	111	;'o'
   492  0166' 346D               	retlw	109	;'m'
   493  0167' 346D               	retlw	109	;'m'
   494  0168' 3475               	retlw	117	;'u'
   495  0169' 346E               	retlw	110	;'n'
   496  016A' 3469               	retlw	105	;'i'
   497  016B' 3463               	retlw	99	;'c'
   498  016C' 3461               	retlw	97	;'a'
   499  016D' 3474               	retlw	116	;'t'
   500  016E' 3469               	retlw	105	;'i'
   501  016F' 346F               	retlw	111	;'o'
   502  0170' 346E               	retlw	110	;'n'
   503  0171' 342E               	retlw	46	;'.'
   504  0172' 3400               	retlw	0
   505  0173'                    STR_3:	
   506  0173' 3443               	retlw	67	;'C'
   507  0174' 346F               	retlw	111	;'o'
   508  0175' 346C               	retlw	108	;'l'
   509  0176' 346C               	retlw	108	;'l'
   510  0177' 3469               	retlw	105	;'i'
   511  0178' 3473               	retlw	115	;'s'
   512  0179' 3473               	retlw	115	;'s'
   513  017A' 3469               	retlw	105	;'i'
   514  017B' 346F               	retlw	111	;'o'
   515  017C' 346E               	retlw	110	;'n'
   516  017D' 3420               	retlw	32	;' '
   517  017E' 3464               	retlw	100	;'d'
   518  017F' 3465               	retlw	101	;'e'
   519  0180' 3474               	retlw	116	;'t'
   520  0181' 3465               	retlw	101	;'e'
   521  0182' 3463               	retlw	99	;'c'
   522  0183' 3474               	retlw	116	;'t'
   523  0184' 3465               	retlw	101	;'e'
   524  0185' 3464               	retlw	100	;'d'
   525  0186' 342E               	retlw	46	;'.'
   526  0187' 3400               	retlw	0
   527  0188'                    STR_7:	
   528  0188' 3449               	retlw	73	;'I'
   529  0189' 346E               	retlw	110	;'n'
   530  018A' 3476               	retlw	118	;'v'
   531  018B' 3461               	retlw	97	;'a'
   532  018C' 346C               	retlw	108	;'l'
   533  018D' 3469               	retlw	105	;'i'
   534  018E' 3464               	retlw	100	;'d'
   535  018F' 3420               	retlw	32	;' '
   536  0190' 3461               	retlw	97	;'a'
   537  0191' 3472               	retlw	114	;'r'
   538  0192' 3467               	retlw	103	;'g'
   539  0193' 3475               	retlw	117	;'u'
   540  0194' 346D               	retlw	109	;'m'
   541  0195' 3465               	retlw	101	;'e'
   542  0196' 346E               	retlw	110	;'n'
   543  0197' 3474               	retlw	116	;'t'
   544  0198' 342E               	retlw	46	;'.'
   545  0199' 3400               	retlw	0
   546  019A'                    STR_18:	
   547  019A' 344D               	retlw	77	;'M'
   548  019B' 3449               	retlw	73	;'I'
   549  019C' 3446               	retlw	70	;'F'
   550  019D' 3441               	retlw	65	;'A'
   551  019E' 3452               	retlw	82	;'R'
   552  019F' 3445               	retlw	69	;'E'
   553  01A0' 3420               	retlw	32	;' '
   554  01A1' 3454               	retlw	84	;'T'
   555  01A2' 344E               	retlw	78	;'N'
   556  01A3' 3450               	retlw	80	;'P'
   557  01A4' 3433               	retlw	51	;'3'
   558  01A5' 3458               	retlw	88	;'X'
   559  01A6' 3458               	retlw	88	;'X'
   560  01A7' 3458               	retlw	88	;'X'
   561  01A8' 3400               	retlw	0
   562  01A9'                    STR_10:	
   563  01A9' 3455               	retlw	85	;'U'
   564  01AA' 346E               	retlw	110	;'n'
   565  01AB' 346B               	retlw	107	;'k'
   566  01AC' 346E               	retlw	110	;'n'
   567  01AD' 346F               	retlw	111	;'o'
   568  01AE' 3477               	retlw	119	;'w'
   569  01AF' 346E               	retlw	110	;'n'
   570  01B0' 3420               	retlw	32	;' '
   571  01B1' 3465               	retlw	101	;'e'
   572  01B2' 3472               	retlw	114	;'r'
   573  01B3' 3472               	retlw	114	;'r'
   574  01B4' 346F               	retlw	111	;'o'
   575  01B5' 3472               	retlw	114	;'r'
   576  01B6' 3400               	retlw	0
   577  01B7'                    STR_20:	
   578  01B7' 3455               	retlw	85	;'U'
   579  01B8' 346E               	retlw	110	;'n'
   580  01B9' 346B               	retlw	107	;'k'
   581  01BA' 346E               	retlw	110	;'n'
   582  01BB' 346F               	retlw	111	;'o'
   583  01BC' 3477               	retlw	119	;'w'
   584  01BD' 346E               	retlw	110	;'n'
   585  01BE' 3420               	retlw	32	;' '
   586  01BF' 3474               	retlw	116	;'t'
   587  01C0' 3479               	retlw	121	;'y'
   588  01C1' 3470               	retlw	112	;'p'
   589  01C2' 3465               	retlw	101	;'e'
   590  01C3' 3400               	retlw	0
   591  01C4'                    STR_17:	
   592  01C4' 344D               	retlw	77	;'M'
   593  01C5' 3449               	retlw	73	;'I'
   594  01C6' 3446               	retlw	70	;'F'
   595  01C7' 3441               	retlw	65	;'A'
   596  01C8' 3452               	retlw	82	;'R'
   597  01C9' 3445               	retlw	69	;'E'
   598  01CA' 3420               	retlw	32	;' '
   599  01CB' 3450               	retlw	80	;'P'
   600  01CC' 346C               	retlw	108	;'l'
   601  01CD' 3475               	retlw	117	;'u'
   602  01CE' 3473               	retlw	115	;'s'
   603  01CF' 3400               	retlw	0
   604  01D0'                    STR_14:	
   605  01D0' 344D               	retlw	77	;'M'
   606  01D1' 3449               	retlw	73	;'I'
   607  01D2' 3446               	retlw	70	;'F'
   608  01D3' 3441               	retlw	65	;'A'
   609  01D4' 3452               	retlw	82	;'R'
   610  01D5' 3445               	retlw	69	;'E'
   611  01D6' 3420               	retlw	32	;' '
   612  01D7' 3431               	retlw	49	;'1'
   613  01D8' 344B               	retlw	75	;'K'
   614  01D9' 3442               	retlw	66	;'B'
   615  01DA' 3400               	retlw	0
   616  01DB'                    STR_15:	
   617  01DB' 344D               	retlw	77	;'M'
   618  01DC' 3449               	retlw	73	;'I'
   619  01DD' 3446               	retlw	70	;'F'
   620  01DE' 3441               	retlw	65	;'A'
   621  01DF' 3452               	retlw	82	;'R'
   622  01E0' 3445               	retlw	69	;'E'
   623  01E1' 3420               	retlw	32	;' '
   624  01E2' 3434               	retlw	52	;'4'
   625  01E3' 344B               	retlw	75	;'K'
   626  01E4' 3442               	retlw	66	;'B'
   627  01E5' 3400               	retlw	0
   628  01E6'                    STR_1:	
   629  01E6' 3453               	retlw	83	;'S'
   630  01E7' 3475               	retlw	117	;'u'
   631  01E8' 3463               	retlw	99	;'c'
   632  01E9' 3463               	retlw	99	;'c'
   633  01EA' 3465               	retlw	101	;'e'
   634  01EB' 3473               	retlw	115	;'s'
   635  01EC' 3473               	retlw	115	;'s'
   636  01ED' 342E               	retlw	46	;'.'
   637  01EE' 3400               	retlw	0
   638  01EF'                    __end_of__stringdata:	
   639                           
   640                           ; #config settings
   641  0000                     
   642                           	psect	nvBANK0
   643  0000'                    __pnvBANK0:	
   644  0000'                    __mode:	
   645  0000'                    	ds	1
   646  0005                     _PORTA	set	5
   647  001A                     _RCREG	set	26
   648  0018                     _RCSTAbits	set	24
   649  0019                     _TXREG	set	25
   650  0065                     _RCIF	set	101
   651  0064                     _TXIF	set	100
   652  0099                     _SPBRG	set	153
   653  0085                     _TRISA	set	133
   654  0086                     _TRISBbits	set	134
   655  0098                     _TXSTAbits	set	152
   656                           
   657                           	psect	cinit
   658  0000'                    start_initialization:	
   659  0000'                    __initialization:	
   660                           
   661                           ; Clear objects allocated to COMMON
   662  0000' 0180'              	clrf	__pbssCOMMON& (0+127)
   663  0001' 0180'              	clrf	(__pbssCOMMON+1)& (0+127)
   664                           
   665                           ; Clear objects allocated to BANK1
   666  0002' 1383               	bcf	3,7	;select IRP bank0
   667  0003' 3000'              	movlw	low __pbssBANK1
   668  0004' 0084               	movwf	4
   669  0005' 3000'              	movlw	low (__pbssBANK1+28)
   670  0006' 2000'              	fcall	clear_ram0
   671                           
   672                           ; Initialize objects allocated to BANK1
   673  0007' 1683               	bsf	3,5	;RP0=1, select bank1
   674  0008' 1303               	bcf	3,6	;RP1=0, select bank1
   675  0009' 2000'              	fcall	__pidataBANK1	;fetch initializer
   676  000A' 0080'              	movwf	__pdataBANK1& (0+127)
   677  000B' 2000'              	fcall	__pidataBANK1+1	;fetch initializer
   678  000C' 0080'              	movwf	(__pdataBANK1+1)& (0+127)
   679  000D' 2000'              	fcall	__pidataBANK1+2	;fetch initializer
   680  000E' 0080'              	movwf	(__pdataBANK1+2)& (0+127)
   681  000F' 2000'              	fcall	__pidataBANK1+3	;fetch initializer
   682  0010' 0080'              	movwf	(__pdataBANK1+3)& (0+127)
   683  0011' 2000'              	fcall	__pidataBANK1+4	;fetch initializer
   684  0012' 0080'              	movwf	(__pdataBANK1+4)& (0+127)
   685  0013' 2000'              	fcall	__pidataBANK1+5	;fetch initializer
   686  0014' 0080'              	movwf	(__pdataBANK1+5)& (0+127)
   687  0015' 2000'              	fcall	__pidataBANK1+6	;fetch initializer
   688  0016' 0080'              	movwf	(__pdataBANK1+6)& (0+127)
   689  0017' 2000'              	fcall	__pidataBANK1+7	;fetch initializer
   690  0018' 0080'              	movwf	(__pdataBANK1+7)& (0+127)
   691  0019' 2000'              	fcall	__pidataBANK1+8	;fetch initializer
   692  001A' 0080'              	movwf	(__pdataBANK1+8)& (0+127)
   693  001B' 2000'              	fcall	__pidataBANK1+9	;fetch initializer
   694  001C' 0080'              	movwf	(__pdataBANK1+9)& (0+127)
   695  001D' 2000'              	fcall	__pidataBANK1+10	;fetch initializer
   696  001E' 0080'              	movwf	(__pdataBANK1+10)& (0+127)
   697  001F' 2000'              	fcall	__pidataBANK1+11	;fetch initializer
   698  0020' 0080'              	movwf	(__pdataBANK1+11)& (0+127)
   699  0021' 2000'              	fcall	__pidataBANK1+12	;fetch initializer
   700  0022' 0080'              	movwf	(__pdataBANK1+12)& (0+127)
   701  0023' 2000'              	fcall	__pidataBANK1+13	;fetch initializer
   702  0024' 0080'              	movwf	(__pdataBANK1+13)& (0+127)
   703  0025' 2000'              	fcall	__pidataBANK1+14	;fetch initializer
   704  0026' 0080'              	movwf	(__pdataBANK1+14)& (0+127)
   705  0027' 2000'              	fcall	__pidataBANK1+15	;fetch initializer
   706  0028' 0080'              	movwf	(__pdataBANK1+15)& (0+127)
   707                           
   708                           ; Initialize objects allocated to BANK0
   709  0029' 1283               	bcf	3,5	;RP0=0, select bank0
   710  002A' 1303               	bcf	3,6	;RP1=0, select bank0
   711  002B' 2000'              	fcall	__pidataBANK0	;fetch initializer
   712  002C' 0080'              	movwf	__pdataBANK0& (0+127)
   713  002D' 2000'              	fcall	__pidataBANK0+1	;fetch initializer
   714  002E' 0080'              	movwf	(__pdataBANK0+1)& (0+127)
   715  002F' 2000'              	fcall	__pidataBANK0+2	;fetch initializer
   716  0030' 0080'              	movwf	(__pdataBANK0+2)& (0+127)
   717  0031' 2000'              	fcall	__pidataBANK0+3	;fetch initializer
   718  0032' 0080'              	movwf	(__pdataBANK0+3)& (0+127)
   719  0033' 2000'              	fcall	__pidataBANK0+4	;fetch initializer
   720  0034' 0080'              	movwf	(__pdataBANK0+4)& (0+127)
   721  0035' 2000'              	fcall	__pidataBANK0+5	;fetch initializer
   722  0036' 0080'              	movwf	(__pdataBANK0+5)& (0+127)
   723  0037'                    end_of_initialization:	
   724                           ;End of C runtime variable initialization code
   725                           
   726  0037'                    __end_of__initialization:	
   727  0037' 0183               	clrf	3
   728  0038' 2800'              	ljmp	_main	;jump to C main() function
   729                           
   730                           	psect	bssCOMMON
   731  0000'                    __pbssCOMMON:	
   732  0000'                    _count:	
   733  0000'                    	ds	2
   734                           
   735                           	psect	dataBANK0
   736  0000'                    __pdataBANK0:	
   737  0000'                    MIFARE_SetUid@F1269:	
   738  0000'                    	ds	6
   739                           
   740                           	psect	bssBANK1
   741  0000'                    __pbssBANK1:	
   742  0000'                    _buffer:	
   743  0000'                    	ds	16
   744  0010'                    _uid:	
   745  0010'                    	ds	12
   746                           
   747                           	psect	dataBANK1
   748  0000'                    __pdataBANK1:	
   749  0000'                    MIFARE_UnbrickUidSector@F1283:	
   750  0000'                    	ds	16
   751                           
   752                           	psect	clrtext
   753  0000'                    clear_ram0:	
   754                           ;	Called with FSR containing the base address, and
   755                           ;	W with the last address+1
   756                           
   757  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
   758  0001'                    clrloop0:	
   759  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
   760  0002' 0A84               	incf	4,f	;increment pointer
   761  0003' 0604               	xorwf	4,w	;XOR with final address
   762  0004' 1903               	btfsc	3,2	;have we reached the end yet?
   763  0005' 3400               	retlw	0	;all done for this memory range, return
   764  0006' 0604               	xorwf	4,w	;XOR again to restore value
   765  0007' 2801'              	goto	clrloop0	;do the next byte
   766                           
   767                           	psect	cstackBANK1
   768  0000'                    __pcstackBANK1:	
   769  0000'                    _PICC_Select$433:	
   770                           
   771                           ; 2 bytes @ 0x0
   772  0000'                    	ds	2
   773  0002'                    _PICC_Select$435:	
   774                           
   775                           ; 2 bytes @ 0x2
   776  0002'                    	ds	2
   777  0004'                    _PICC_Select$436:	
   778                           
   779                           ; 2 bytes @ 0x4
   780  0004'                    	ds	2
   781  0006'                    PICC_Select@uidComplete:	
   782                           
   783                           ; 1 bytes @ 0x6
   784  0006'                    	ds	1
   785  0007'                    PICC_Select@selectDone:	
   786                           
   787                           ; 1 bytes @ 0x7
   788  0007'                    	ds	1
   789  0008'                    PICC_Select@bufferUsed:	
   790                           
   791                           ; 1 bytes @ 0x8
   792  0008'                    	ds	1
   793  0009'                    _PICC_Select$429:	
   794                           
   795                           ; 1 bytes @ 0x9
   796  0009'                    	ds	1
   797  000A'                    _PICC_Select$430:	
   798                           
   799                           ; 1 bytes @ 0xA
   800  000A'                    	ds	1
   801  000B'                    PICC_Select@rxAlign:	
   802                           
   803                           ; 1 bytes @ 0xB
   804  000B'                    	ds	1
   805  000C'                    PICC_Select@maxbytes:	
   806                           
   807                           ; 1 bytes @ 0xC
   808  000C'                    	ds	1
   809  000D'                    PICC_Select@cascadeLevel:	
   810                           
   811                           ; 1 bytes @ 0xD
   812  000D'                    	ds	1
   813  000E'                    PICC_Select@buffer:	
   814                           
   815                           ; 9 bytes @ 0xE
   816  000E'                    	ds	9
   817  0017'                    PICC_Select@collisionPos:	
   818                           
   819                           ; 1 bytes @ 0x17
   820  0017'                    	ds	1
   821  0018'                    PICC_Select@useCascadeTag:	
   822                           
   823                           ; 1 bytes @ 0x18
   824  0018'                    	ds	1
   825  0019'                    PICC_Select@uidIndex:	
   826                           
   827                           ; 1 bytes @ 0x19
   828  0019'                    	ds	1
   829  001A'                    PICC_Select@bytesToCopy:	
   830                           
   831                           ; 1 bytes @ 0x1A
   832  001A'                    	ds	1
   833  001B'                    PICC_Select@responseLength:	
   834                           
   835                           ; 1 bytes @ 0x1B
   836  001B'                    	ds	1
   837  001C'                    PICC_Select@responseBuffer:	
   838                           
   839                           ; 1 bytes @ 0x1C
   840  001C'                    	ds	1
   841  001D'                    PICC_Select@txLastBits:	
   842                           
   843                           ; 1 bytes @ 0x1D
   844  001D'                    	ds	1
   845  001E'                    PICC_Select@count:	
   846                           
   847                           ; 1 bytes @ 0x1E
   848  001E'                    	ds	1
   849  001F'                    PICC_Select@index:	
   850                           
   851                           ; 1 bytes @ 0x1F
   852  001F'                    	ds	1
   853  0020'                    PICC_Select@result:	
   854                           
   855                           ; 1 bytes @ 0x20
   856  0020'                    	ds	1
   857  0021'                    PICC_Select@currentLevelKnownBits:	
   858                           
   859                           ; 1 bytes @ 0x21
   860  0021'                    	ds	1
   861  0022'                    PICC_ReadCardSerial@result:	
   862                           
   863                           ; 1 bytes @ 0x22
   864  0022'                    	ds	1
   865                           
   866                           	psect	cstackCOMMON
   867  0000'                    __pcstackCOMMON:	
   868  0000'                    ?_UART_init:	
   869  0000'                    ?__ISR_UART:	
   870                           ; 0 bytes @ 0x0
   871                           
   872  0000'                    ??__ISR_UART:	
   873                           ; 0 bytes @ 0x0
   874                           
   875  0000'                    ?_SPI_init:	
   876                           ; 0 bytes @ 0x0
   877                           
   878  0000'                    ?_RFID_init:	
   879                           ; 0 bytes @ 0x0
   880                           
   881  0000'                    ?_main:	
   882                           ; 0 bytes @ 0x0
   883                           
   884  0000'                    ?__ISR:	
   885                           ; 0 bytes @ 0x0
   886                           
   887  0000'                    ?_SPI_transfer:	
   888                           ; 0 bytes @ 0x0
   889                           
   890  0000'                    ?_PCD_ReadRegister:	
   891                           ; 1 bytes @ 0x0
   892                           
   893                           
   894                           ; 1 bytes @ 0x0
   895  0000'                    	ds	1
   896  0001'                    ??__ISR:	
   897                           
   898                           ; 0 bytes @ 0x1
   899  0001'                    	ds	4
   900  0005'                    ??_UART_init:	
   901  0005'                    ??_SPI_init:	
   902                           ; 0 bytes @ 0x5
   903                           
   904  0005'                    ??_SPI_transfer:	
   905                           ; 0 bytes @ 0x5
   906                           
   907  0005'                    ??_RFID_init:	
   908                           ; 0 bytes @ 0x5
   909                           
   910  0005'                    ??___awdiv:	
   911                           ; 0 bytes @ 0x5
   912                           
   913  0005'                    ?___bmul:	
   914                           ; 0 bytes @ 0x5
   915                           
   916  0005'                    ___bmul@multiplicand:	
   917                           ; 1 bytes @ 0x5
   918                           
   919                           
   920                           ; 1 bytes @ 0x5
   921  0005'                    	ds	1
   922  0006'                    ?_PCD_WriteRegister:	
   923  0006'                    ??_PCD_WriteRegisterVector:	
   924                           ; 0 bytes @ 0x6
   925                           
   926  0006'                    ??_PCD_ReadRegister:	
   927                           ; 0 bytes @ 0x6
   928                           
   929  0006'                    ??___bmul:	
   930                           ; 0 bytes @ 0x6
   931                           
   932  0006'                    SPI_init@mode:	
   933                           ; 0 bytes @ 0x6
   934                           
   935  0006'                    PCD_WriteRegister@value:	
   936                           ; 1 bytes @ 0x6
   937                           
   938                           
   939                           ; 1 bytes @ 0x6
   940  0006'                    	ds	1
   941  0007'                    ??_main:	
   942                           
   943                           	psect	cstackBANK0
   944  0000'                    __pcstackBANK0:	
   945                           ; 0 bytes @ 0x7
   946                           
   947  0000'                    ?___awdiv:	
   948  0000'                    SPI_transfer@ret_302:	
   949                           ; 2 bytes @ 0x0
   950                           
   951  0000'                    ___bmul@product:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0000'                    ___awdiv@divisor:	
   955                           ; 1 bytes @ 0x0
   956                           
   957                           
   958                           ; 2 bytes @ 0x0
   959  0000'                    	ds	1
   960  0001'                    SPI_transfer@ret:	
   961  0001'                    ___bmul@multiplier:	
   962                           ; 1 bytes @ 0x1
   963                           
   964                           
   965                           ; 1 bytes @ 0x1
   966  0001'                    	ds	1
   967  0002'                    SPI_transfer@i:	
   968  0002'                    ___awdiv@dividend:	
   969                           ; 2 bytes @ 0x2
   970                           
   971                           
   972                           ; 2 bytes @ 0x2
   973  0002'                    	ds	2
   974  0004'                    ___awdiv@counter:	
   975  0004'                    SPI_transfer@i_303:	
   976                           ; 1 bytes @ 0x4
   977                           
   978                           
   979                           ; 2 bytes @ 0x4
   980  0004'                    	ds	1
   981  0005'                    ___awdiv@sign:	
   982                           
   983                           ; 1 bytes @ 0x5
   984  0005'                    	ds	1
   985  0006'                    SPI_transfer@data:	
   986  0006'                    ___awdiv@quotient:	
   987                           ; 1 bytes @ 0x6
   988                           
   989                           
   990                           ; 2 bytes @ 0x6
   991  0006'                    	ds	1
   992  0007'                    ??_PCD_WriteRegister:	
   993  0007'                    ?_PCD_WriteRegisterVector:	
   994                           ; 0 bytes @ 0x7
   995                           
   996  0007'                    ?_PCD_ReadRegisterVector:	
   997                           ; 0 bytes @ 0x7
   998                           
   999  0007'                    PCD_WriteRegisterVector@count:	
  1000                           ; 0 bytes @ 0x7
  1001                           
  1002  0007'                    PCD_ReadRegister@reg:	
  1003                           ; 1 bytes @ 0x7
  1004                           
  1005  0007'                    PCD_ReadRegisterVector@count:	
  1006                           ; 1 bytes @ 0x7
  1007                           
  1008                           
  1009                           ; 1 bytes @ 0x7
  1010  0007'                    	ds	1
  1011  0008'                    PCD_WriteRegister@reg:	
  1012  0008'                    PCD_WriteRegisterVector@values:	
  1013                           ; 1 bytes @ 0x8
  1014                           
  1015  0008'                    PCD_ReadRegister@value:	
  1016                           ; 1 bytes @ 0x8
  1017                           
  1018  0008'                    PCD_ReadRegisterVector@values:	
  1019                           ; 1 bytes @ 0x8
  1020                           
  1021                           
  1022                           ; 1 bytes @ 0x8
  1023  0008'                    	ds	1
  1024  0009'                    ?_PCD_SetRegisterBitMask:	
  1025  0009'                    ?_PCD_ClearRegisterBitMask:	
  1026                           ; 0 bytes @ 0x9
  1027                           
  1028  0009'                    PCD_WriteRegisterVector@reg:	
  1029                           ; 0 bytes @ 0x9
  1030                           
  1031  0009'                    PCD_ReadRegisterVector@rxAlign:	
  1032                           ; 1 bytes @ 0x9
  1033                           
  1034  0009'                    PCD_SetRegisterBitMask@mask:	
  1035                           ; 1 bytes @ 0x9
  1036                           
  1037  0009'                    PCD_ClearRegisterBitMask@mask:	
  1038                           ; 1 bytes @ 0x9
  1039                           
  1040                           
  1041                           ; 1 bytes @ 0x9
  1042  0009'                    	ds	1
  1043  000A'                    ??_PCD_ReadRegisterVector:	
  1044  000A'                    ??_PCD_SetRegisterBitMask:	
  1045                           ; 0 bytes @ 0xA
  1046                           
  1047  000A'                    ??_PCD_ClearRegisterBitMask:	
  1048                           ; 0 bytes @ 0xA
  1049                           
  1050  000A'                    PCD_WriteRegisterVector@index:	
  1051                           ; 0 bytes @ 0xA
  1052                           
  1053                           
  1054                           ; 1 bytes @ 0xA
  1055  000A'                    	ds	1
  1056  000B'                    PCD_SetRegisterBitMask@tmp:	
  1057  000B'                    PCD_ClearRegisterBitMask@tmp:	
  1058                           ; 1 bytes @ 0xB
  1059                           
  1060                           
  1061                           ; 1 bytes @ 0xB
  1062  000B'                    	ds	1
  1063  000C'                    PCD_SetRegisterBitMask@reg:	
  1064  000C'                    PCD_ClearRegisterBitMask@reg:	
  1065                           ; 1 bytes @ 0xC
  1066                           
  1067                           
  1068                           ; 1 bytes @ 0xC
  1069  000C'                    	ds	1
  1070  000D'                    ?_PCD_CalculateCRC:	
  1071  000D'                    PCD_ReadRegisterVector@reg:	
  1072                           ; 1 bytes @ 0xD
  1073                           
  1074  000D'                    PCD_CalculateCRC@length:	
  1075                           ; 1 bytes @ 0xD
  1076                           
  1077                           
  1078                           ; 1 bytes @ 0xD
  1079  000D'                    	ds	1
  1080  000E'                    PCD_ReadRegisterVector@value:	
  1081  000E'                    PCD_CalculateCRC@result:	
  1082                           ; 1 bytes @ 0xE
  1083                           
  1084                           
  1085                           ; 1 bytes @ 0xE
  1086  000E'                    	ds	1
  1087  000F'                    ??_PCD_CalculateCRC:	
  1088  000F'                    PCD_ReadRegisterVector@mask:	
  1089                           ; 0 bytes @ 0xF
  1090                           
  1091                           
  1092                           ; 1 bytes @ 0xF
  1093  000F'                    	ds	1
  1094  0010'                    PCD_ReadRegisterVector@address:	
  1095                           
  1096                           ; 1 bytes @ 0x10
  1097  0010'                    	ds	1
  1098  0011'                    PCD_ReadRegisterVector@i:	
  1099  0011'                    PCD_CalculateCRC@i:	
  1100                           ; 1 bytes @ 0x11
  1101                           
  1102                           
  1103                           ; 2 bytes @ 0x11
  1104  0011'                    	ds	1
  1105  0012'                    PCD_ReadRegisterVector@index:	
  1106                           
  1107                           ; 1 bytes @ 0x12
  1108  0012'                    	ds	1
  1109  0013'                    PCD_CalculateCRC@n:	
  1110                           
  1111                           ; 1 bytes @ 0x13
  1112  0013'                    	ds	1
  1113  0014'                    PCD_CalculateCRC@data:	
  1114                           
  1115                           ; 1 bytes @ 0x14
  1116  0014'                    	ds	1
  1117  0015'                    ?_PCD_CommunicateWithPICC:	
  1118  0015'                    PCD_CommunicateWithPICC@waitIRq:	
  1119                           ; 1 bytes @ 0x15
  1120                           
  1121                           
  1122                           ; 1 bytes @ 0x15
  1123  0015'                    	ds	1
  1124  0016'                    PCD_CommunicateWithPICC@sendData:	
  1125                           
  1126                           ; 1 bytes @ 0x16
  1127  0016'                    	ds	1
  1128  0017'                    PCD_CommunicateWithPICC@sendLen:	
  1129                           
  1130                           ; 1 bytes @ 0x17
  1131  0017'                    	ds	1
  1132  0018'                    PCD_CommunicateWithPICC@backData:	
  1133                           
  1134                           ; 1 bytes @ 0x18
  1135  0018'                    	ds	1
  1136  0019'                    PCD_CommunicateWithPICC@backLen:	
  1137                           
  1138                           ; 1 bytes @ 0x19
  1139  0019'                    	ds	1
  1140  001A'                    PCD_CommunicateWithPICC@validBits:	
  1141                           
  1142                           ; 1 bytes @ 0x1A
  1143  001A'                    	ds	1
  1144  001B'                    PCD_CommunicateWithPICC@rxAlign:	
  1145                           
  1146                           ; 1 bytes @ 0x1B
  1147  001B'                    	ds	1
  1148  001C'                    PCD_CommunicateWithPICC@checkCRC:	
  1149                           
  1150                           ; 1 bytes @ 0x1C
  1151  001C'                    	ds	1
  1152  001D'                    ??_PCD_CommunicateWithPICC:	
  1153                           
  1154                           ; 0 bytes @ 0x1D
  1155  001D'                    	ds	3
  1156  0020'                    PCD_CommunicateWithPICC@i:	
  1157                           
  1158                           ; 2 bytes @ 0x20
  1159  0020'                    	ds	2
  1160  0022'                    PCD_CommunicateWithPICC@txLastBits:	
  1161                           
  1162                           ; 1 bytes @ 0x22
  1163  0022'                    	ds	1
  1164  0023'                    PCD_CommunicateWithPICC@bitFraming:	
  1165                           
  1166                           ; 1 bytes @ 0x23
  1167  0023'                    	ds	1
  1168  0024'                    _PCD_CommunicateWithPICC$378:	
  1169                           
  1170                           ; 2 bytes @ 0x24
  1171  0024'                    	ds	2
  1172  0026'                    PCD_CommunicateWithPICC@command:	
  1173                           
  1174                           ; 1 bytes @ 0x26
  1175  0026'                    	ds	1
  1176  0027'                    PCD_CommunicateWithPICC@controlBuffer:	
  1177                           
  1178                           ; 2 bytes @ 0x27
  1179  0027'                    	ds	2
  1180  0029'                    PCD_CommunicateWithPICC@errorRegValue:	
  1181                           
  1182                           ; 1 bytes @ 0x29
  1183  0029'                    	ds	1
  1184  002A'                    PCD_CommunicateWithPICC@_validBits:	
  1185                           
  1186                           ; 1 bytes @ 0x2A
  1187  002A'                    	ds	1
  1188  002B'                    PCD_CommunicateWithPICC@n:	
  1189                           
  1190                           ; 1 bytes @ 0x2B
  1191  002B'                    	ds	1
  1192  002C'                    ?_PCD_TransceiveData:	
  1193  002C'                    PCD_TransceiveData@sendLen:	
  1194                           ; 1 bytes @ 0x2C
  1195                           
  1196                           
  1197                           ; 1 bytes @ 0x2C
  1198  002C'                    	ds	1
  1199  002D'                    PCD_TransceiveData@backData:	
  1200                           
  1201                           ; 1 bytes @ 0x2D
  1202  002D'                    	ds	1
  1203  002E'                    PCD_TransceiveData@backLen:	
  1204                           
  1205                           ; 1 bytes @ 0x2E
  1206  002E'                    	ds	1
  1207  002F'                    PCD_TransceiveData@validBits:	
  1208                           
  1209                           ; 1 bytes @ 0x2F
  1210  002F'                    	ds	1
  1211  0030'                    PCD_TransceiveData@rxAlign:	
  1212                           
  1213                           ; 1 bytes @ 0x30
  1214  0030'                    	ds	1
  1215  0031'                    PCD_TransceiveData@checkCRC:	
  1216                           
  1217                           ; 1 bytes @ 0x31
  1218  0031'                    	ds	1
  1219  0032'                    ??_PCD_TransceiveData:	
  1220                           
  1221                           ; 0 bytes @ 0x32
  1222  0032'                    	ds	8
  1223  003A'                    PCD_TransceiveData@waitIRq:	
  1224                           
  1225                           ; 1 bytes @ 0x3A
  1226  003A'                    	ds	1
  1227  003B'                    PCD_TransceiveData@sendData:	
  1228                           
  1229                           ; 1 bytes @ 0x3B
  1230  003B'                    	ds	1
  1231  003C'                    ?_PICC_Select:	
  1232  003C'                    PICC_Select@uid:	
  1233                           ; 1 bytes @ 0x3C
  1234                           
  1235                           
  1236                           ; 1 bytes @ 0x3C
  1237  003C'                    	ds	1
  1238  003D'                    PICC_Select@validBits:	
  1239                           
  1240                           ; 1 bytes @ 0x3D
  1241  003D'                    	ds	2
  1242  003F'                    ??_PICC_Select:	
  1243                           
  1244                           ; 0 bytes @ 0x3F
  1245  003F'                    	ds	6
  1246  0045'                    ?_PICC_ReadCardSerial:	
  1247                           
  1248                           ; 1 bytes @ 0x45
  1249  0045'                    	ds	2
  1250  0047'                    ??_PICC_ReadCardSerial:	
  1251                           
  1252                           ; 0 bytes @ 0x47
  1253  0047'                    	ds	2
  1254                           
  1255                           	psect	maintext
  1256  0000'                    __pmaintext:	
  1257 ;;
  1258 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1259 ;;
  1260 ;; *************** function _main *****************
  1261 ;; Defined at:
  1262 ;;		line 31 in file "main.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;		None
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;		None               void
  1269 ;; Registers used:
  1270 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 17F/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1276 ;;      Params:         0       0       0       0
  1277 ;;      Locals:         0       0       0       0
  1278 ;;      Temps:          0       0       0       0
  1279 ;;      Totals:         0       0       0       0
  1280 ;;Total ram usage:        0 bytes
  1281 ;; Hardware stack levels required when called:    8
  1282 ;; This function calls:
  1283 ;;		_PICC_ReadCardSerial
  1284 ;;		_RFID_init
  1285 ;;		_SPI_init
  1286 ;;		_UART_init
  1287 ;; This function is called by:
  1288 ;;		Startup code after reset
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           
  1293                           ;psect for function _main
  1294  0000'                    _main:	
  1295                           
  1296                           ;main.c: 33: UART_init();
  1297                           
  1298                           ;incstack = 0
  1299                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1300  0000' 2000'              	fcall	_UART_init
  1301                           
  1302                           ;main.c: 34: SPI_init(0);
  1303  0001' 3000               	movlw	0
  1304  0002' 2000'              	fcall	_SPI_init
  1305                           
  1306                           ;main.c: 35: RFID_init();
  1307  0003' 2000'              	fcall	_RFID_init
  1308  0004'                    l5039:	
  1309                           ;main.c: 38: {
  1310                           ;main.c: 39: inicio:
  1311                           
  1312                           ;main.c: 37: while(1)
  1313                           
  1314  0004' 3000'              	movlw	low u6127jt
  1315  0005' 2800'              	ljmp	_PICC_ReadCardSerial
  1316  0006'                    u6127jf:	
  1317                           
  1318                           ;main.c: 47: {
  1319                           ;main.c: 48: goto inicio;
  1320  0006' 2804'              	goto	l5039
  1321  0007'                    __end_of_main:	
  1322                           
  1323                           	psect	jmp_tab__PICC_ReadCardSerial
  1324  0000'                    __pjmp_tab__PICC_ReadCardSerial:	
  1325                           ;main.c: 46: if (PICC_ReadCardSerial()!=0)
  1326                           
  1327  0000'                    u6127jt:	
  1328  0000' 2806'              	ljmp	u6127jf
  1329                           
  1330                           	psect	text1
  1331  0000'                    __ptext1:	
  1332 ;; *************** function _UART_init *****************
  1333 ;; Defined at:
  1334 ;;		line 24 in file "UART.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;		None
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;		None
  1339 ;; Return value:  Size  Location     Type
  1340 ;;		None               void
  1341 ;; Registers used:
  1342 ;;		wreg
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1348 ;;      Params:         0       0       0       0
  1349 ;;      Locals:         0       0       0       0
  1350 ;;      Temps:          0       0       0       0
  1351 ;;      Totals:         0       0       0       0
  1352 ;;Total ram usage:        0 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; Hardware stack levels required when called:    2
  1355 ;; This function calls:
  1356 ;;		Nothing
  1357 ;; This function is called by:
  1358 ;;		_main
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           
  1363                           ;psect for function _UART_init
  1364  0000'                    _UART_init:	
  1365                           
  1366                           ;UART.c: 27: TRISBbits.TRISB1 = 1;
  1367                           
  1368                           ;incstack = 0
  1369                           ; Regs used in _UART_init: [wreg]
  1370  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  1371  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  1372  0002' 1486               	bsf	6,1	;volatile
  1373                           
  1374                           ;UART.c: 28: TRISBbits.TRISB2 = 1;
  1375  0003' 1506               	bsf	6,2	;volatile
  1376                           
  1377                           ;UART.c: 30: TXSTAbits.CSRC = 1;
  1378  0004' 1798               	bsf	24,7	;volatile
  1379                           
  1380                           ;UART.c: 31: TXSTAbits.TXEN = 1;
  1381  0005' 1698               	bsf	24,5	;volatile
  1382                           
  1383                           ;UART.c: 32: TXSTAbits.SYNC = 0;
  1384  0006' 1218               	bcf	24,4	;volatile
  1385                           
  1386                           ;UART.c: 35: RCSTAbits.SPEN = 1;
  1387  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  1388  0008' 1303               	bcf	3,6	;RP1=0, select bank0
  1389  0009' 1798               	bsf	24,7	;volatile
  1390                           
  1391                           ;UART.c: 36: RCSTAbits.CREN = 1;
  1392  000A' 1618               	bsf	24,4	;volatile
  1393                           
  1394                           ;UART.c: 40: TXSTAbits.BRGH = 0;
  1395  000B' 1683               	bsf	3,5	;RP0=1, select bank1
  1396  000C' 1303               	bcf	3,6	;RP1=0, select bank1
  1397  000D' 1118               	bcf	24,2	;volatile
  1398                           
  1399                           ;UART.c: 41: SPBRG = 25;
  1400  000E' 3019               	movlw	25
  1401  000F' 0099               	movwf	25	;volatile
  1402  0010' 0008               	return
  1403  0011'                    __end_of_UART_init:	
  1404                           
  1405                           	psect	text2
  1406  0000'                    __ptext2:	
  1407 ;; *************** function _SPI_init *****************
  1408 ;; Defined at:
  1409 ;;		line 32 in file "SPI.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  mode            1    wreg     unsigned char 
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  mode            1    6[COMMON] unsigned char 
  1414 ;; Return value:  Size  Location     Type
  1415 ;;		None               void
  1416 ;; Registers used:
  1417 ;;		wreg, status,2, status,0
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1423 ;;      Params:         0       0       0       0
  1424 ;;      Locals:         1       0       0       0
  1425 ;;      Temps:          1       0       0       0
  1426 ;;      Totals:         2       0       0       0
  1427 ;;Total ram usage:        2 bytes
  1428 ;; Hardware stack levels used:    1
  1429 ;; Hardware stack levels required when called:    2
  1430 ;; This function calls:
  1431 ;;		Nothing
  1432 ;; This function is called by:
  1433 ;;		_main
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           
  1438                           ;psect for function _SPI_init
  1439  0000'                    _SPI_init:	
  1440                           
  1441                           ;incstack = 0
  1442                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  1443                           ;SPI_init@mode stored from wreg
  1444  0000' 0086'              	movwf	SPI_init@mode
  1445                           
  1446                           ;SPI.c: 34: _mode = mode;
  1447  0001' 0806'              	movf	SPI_init@mode,w
  1448  0002' 0085'              	movwf	??_SPI_init
  1449  0003' 0805'              	movf	??_SPI_init,w
  1450  0004' 1283               	bcf	3,5	;RP0=0, select bank0
  1451  0005' 1303               	bcf	3,6	;RP1=0, select bank0
  1452  0006' 0080'              	movwf	__mode
  1453                           
  1454                           ;SPI.c: 35: TRISA &= ~(1<<7 | 1<<6);
  1455  0007' 303F               	movlw	63
  1456  0008' 0085'              	movwf	??_SPI_init
  1457  0009' 0805'              	movf	??_SPI_init,w
  1458  000A' 1683               	bsf	3,5	;RP0=1, select bank1
  1459  000B' 1303               	bcf	3,6	;RP1=0, select bank1
  1460  000C' 0585               	andwf	5,f	;volatile
  1461                           
  1462                           ;SPI.c: 36: TRISA |= (1<<5);
  1463  000D' 1685               	bsf	5,5	;volatile
  1464                           
  1465                           ;SPI.c: 37: if(mode == 2 || mode == 3)
  1466  000E' 0806'              	movf	SPI_init@mode,w
  1467  000F' 3A02               	xorlw	2
  1468  0010' 1903               	skipnz
  1469  0011' 2816'              	goto	l78
  1470  0012' 0806'              	movf	SPI_init@mode,w
  1471  0013' 3A03               	xorlw	3
  1472  0014' 1D03               	skipz
  1473  0015' 281A'              	goto	l3169
  1474  0016'                    l78:	
  1475                           
  1476                           ;SPI.c: 38: PORTA |= (1<<7);
  1477  0016' 1283               	bcf	3,5	;RP0=0, select bank0
  1478  0017' 1303               	bcf	3,6	;RP1=0, select bank0
  1479  0018' 1785               	bsf	5,7	;volatile
  1480  0019' 0008               	return
  1481  001A'                    l3169:	
  1482                           
  1483                           ;SPI.c: 39: else
  1484                           ;SPI.c: 40: PORTA &= ~(1<<7);
  1485  001A' 307F               	movlw	127
  1486  001B' 0085'              	movwf	??_SPI_init
  1487  001C' 0805'              	movf	??_SPI_init,w
  1488  001D' 1283               	bcf	3,5	;RP0=0, select bank0
  1489  001E' 0585               	andwf	5,f	;volatile
  1490  001F' 0008               	return
  1491  0020'                    __end_of_SPI_init:	
  1492                           
  1493                           	psect	text3
  1494  0000'                    __ptext3:	
  1495 ;; *************** function _RFID_init *****************
  1496 ;; Defined at:
  1497 ;;		line 37 in file "RFID.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;		None               void
  1504 ;; Registers used:
  1505 ;;		wreg, status,2, status,0
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1511 ;;      Params:         0       0       0       0
  1512 ;;      Locals:         0       0       0       0
  1513 ;;      Temps:          1       0       0       0
  1514 ;;      Totals:         1       0       0       0
  1515 ;;Total ram usage:        1 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; Hardware stack levels required when called:    2
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_main
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           
  1526                           ;psect for function _RFID_init
  1527  0000'                    _RFID_init:	
  1528                           
  1529                           ;RFID.c: 39: TRISA&=~(1<<4);
  1530                           
  1531                           ;incstack = 0
  1532                           ; Regs used in _RFID_init: [wreg+status,2+status,0]
  1533  0000' 30EF               	movlw	239
  1534  0001' 0085'              	movwf	??_RFID_init
  1535  0002' 0805'              	movf	??_RFID_init,w
  1536  0003' 1683               	bsf	3,5	;RP0=1, select bank1
  1537  0004' 1303               	bcf	3,6	;RP1=0, select bank1
  1538  0005' 0585               	andwf	5,f	;volatile
  1539                           
  1540                           ;RFID.c: 40: PORTA|=(1<<4) ;
  1541  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  1542  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  1543  0008' 1605               	bsf	5,4	;volatile
  1544                           
  1545                           ;RFID.c: 43: TRISA&=~(1<<3);
  1546  0009' 30F7               	movlw	247
  1547  000A' 0085'              	movwf	??_RFID_init
  1548  000B' 0805'              	movf	??_RFID_init,w
  1549  000C' 1683               	bsf	3,5	;RP0=1, select bank1
  1550  000D' 1303               	bcf	3,6	;RP1=0, select bank1
  1551  000E' 0585               	andwf	5,f	;volatile
  1552                           
  1553                           ;RFID.c: 44: PORTA&=~(1<<3) ;
  1554  000F' 30F7               	movlw	247
  1555  0010' 0085'              	movwf	??_RFID_init
  1556  0011' 0805'              	movf	??_RFID_init,w
  1557  0012' 1283               	bcf	3,5	;RP0=0, select bank0
  1558  0013' 1303               	bcf	3,6	;RP1=0, select bank0
  1559  0014' 0585               	andwf	5,f	;volatile
  1560  0015' 0008               	return
  1561  0016'                    __end_of_RFID_init:	
  1562                           
  1563                           	psect	text4
  1564  0000'                    __ptext4:	
  1565 ;; *************** function _PICC_ReadCardSerial *****************
  1566 ;; Defined at:
  1567 ;;		line 1746 in file "RFID.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;		None
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;  result          1   34[BANK1 ] unsigned char 
  1572 ;; Return value:  Size  Location     Type
  1573 ;;                  1   69[BANK0 ] unsigned char 
  1574 ;; Registers used:
  1575 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1576 ;; Tracked objects:
  1577 ;;		On entry : 0/0
  1578 ;;		On exit  : 0/0
  1579 ;;		Unchanged: 0/0
  1580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1581 ;;      Params:         0       2       0       0
  1582 ;;      Locals:         0       0       1       0
  1583 ;;      Temps:          0       2       0       0
  1584 ;;      Totals:         0       4       1       0
  1585 ;;Total ram usage:        5 bytes
  1586 ;; Hardware stack levels required when called:    8
  1587 ;; This function calls:
  1588 ;;		_PICC_Select
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;;		_MIFARE_SetUid
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           
  1596                           ;psect for function _PICC_ReadCardSerial
  1597  0000'                    _PICC_ReadCardSerial:	
  1598                           
  1599                           ;incstack = 0
  1600                           ; Regs used in _PICC_ReadCardSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1601  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1602  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1603  0002' 0080'              	movwf	(?_PICC_ReadCardSerial+1)^0
  1604                           
  1605                           ;RFID.c: 1747: unsigned char result = PICC_Select(&uid,0);
  1606  0003' 3000'              	movlw	_uid& (0+255)
  1607  0004' 00C7'              	movwf	??_PICC_ReadCardSerial
  1608  0005' 0847'              	movf	??_PICC_ReadCardSerial,w
  1609  0006' 00BC'              	movwf	PICC_Select@uid
  1610  0007' 01BD'              	clrf	PICC_Select@validBits
  1611  0008' 3000'              	movlw	low u5407jt
  1612  0009' 2800'              	ljmp	_PICC_Select
  1613  000A'                    u5407jf:	
  1614  000A' 1283               	bcf	3,5	;RP0=0, select bank0
  1615  000B' 1303               	bcf	3,6	;RP1=0, select bank0
  1616  000C' 083C'              	movf	?_PICC_Select,w
  1617  000D' 00C8'              	movwf	??_PICC_ReadCardSerial+1
  1618  000E' 0848'              	movf	??_PICC_ReadCardSerial+1,w
  1619  000F' 1683               	bsf	3,5	;RP0=1, select bank1
  1620  0010' 1303               	bcf	3,6	;RP1=0, select bank1
  1621  0011' 0080'              	movwf	PICC_ReadCardSerial@result^(0+128)
  1622                           
  1623                           ;RFID.c: 1748: return (result == STATUS_OK);
  1624  0012' 0800'              	movf	PICC_ReadCardSerial@result^(0+128),w
  1625  0013' 3A01               	xorlw	1
  1626  0014' 3000               	movlw	0
  1627  0015' 1903               	skipnz
  1628  0016' 3001               	movlw	1
  1629  0017' 1283               	bcf	3,5	;RP0=0, select bank0
  1630  0018' 1303               	bcf	3,6	;RP1=0, select bank0
  1631  0019' 00C7'              	movwf	??_PICC_ReadCardSerial
  1632  001A' 0847'              	movf	??_PICC_ReadCardSerial,w
  1633  001B' 00C5'              	movwf	?_PICC_ReadCardSerial
  1634  001C' 3000'              	movlw	high __pjmp_tab__PICC_ReadCardSerial
  1635  001D' 008A               	movwf	10
  1636  001E' 0800'              	movf	(?_PICC_ReadCardSerial+1)^0,w
  1637  001F' 0082               	movwf	2
  1638  0020'                    __end_of_PICC_ReadCardSerial:	
  1639                           
  1640                           	psect	jmp_tab__PICC_Select
  1641  0000'                    __pjmp_tab__PICC_Select:	
  1642  0000'                    u5407jt:	
  1643  0000' 280A'              	ljmp	u5407jf
  1644                           
  1645                           	psect	text5
  1646  0000'                    __ptext5:	
  1647 ;; *************** function _PICC_Select *****************
  1648 ;; Defined at:
  1649 ;;		line 551 in file "RFID.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  uid             1   60[BANK0 ] PTR struct .
  1652 ;;		 -> uid(12), 
  1653 ;;  validBits       1   61[BANK0 ] unsigned char 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  collisionPos    1   23[BANK1 ] unsigned char 
  1656 ;;  maxbytes        1   12[BANK1 ] unsigned char 
  1657 ;;  bytesToCopy     1   26[BANK1 ] unsigned char 
  1658 ;;  buffer          9   14[BANK1 ] unsigned char [9]
  1659 ;;  currentLevel    1   33[BANK1 ] unsigned char 
  1660 ;;  result          1   32[BANK1 ] unsigned char 
  1661 ;;  index           1   31[BANK1 ] unsigned char 
  1662 ;;  count           1   30[BANK1 ] unsigned char 
  1663 ;;  txLastBits      1   29[BANK1 ] unsigned char 
  1664 ;;  responseBuff    1   28[BANK1 ] PTR unsigned char 
  1665 ;;		 -> PICC_Select@buffer(9), 
  1666 ;;  responseLeng    1   27[BANK1 ] unsigned char 
  1667 ;;  uidIndex        1   25[BANK1 ] unsigned char 
  1668 ;;  useCascadeTa    1   24[BANK1 ] unsigned char 
  1669 ;;  cascadeLevel    1   13[BANK1 ] unsigned char 
  1670 ;;  rxAlign         1   11[BANK1 ] unsigned char 
  1671 ;;  bufferUsed      1    8[BANK1 ] unsigned char 
  1672 ;;  selectDone      1    7[BANK1 ] unsigned char 
  1673 ;;  uidComplete     1    6[BANK1 ] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1   60[BANK0 ] unsigned char 
  1676 ;; Registers used:
  1677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1683 ;;      Params:         0       3       0       0
  1684 ;;      Locals:         0       0      34       0
  1685 ;;      Temps:          0       6       0       0
  1686 ;;      Totals:         0       9      34       0
  1687 ;;Total ram usage:       43 bytes
  1688 ;; Hardware stack levels required when called:    8
  1689 ;; This function calls:
  1690 ;;		_PCD_CalculateCRC
  1691 ;;		_PCD_ClearRegisterBitMask
  1692 ;;		_PCD_ReadRegister
  1693 ;;		_PCD_TransceiveData
  1694 ;;		_PCD_WriteRegister
  1695 ;;		___awdiv
  1696 ;;		___bmul
  1697 ;; This function is called by:
  1698 ;;		_PICC_ReadCardSerial
  1699 ;; This function uses a non-reentrant model
  1700 ;;
  1701                           
  1702                           
  1703                           ;psect for function _PICC_Select
  1704  0000'                    _PICC_Select:	
  1705                           
  1706                           ;incstack = 0
  1707                           ; Regs used in _PICC_Select: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1708  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1709  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1710  0002' 0080'              	movwf	(?_PICC_Select+2)^0
  1711                           
  1712                           ;RFID.c: 554: unsigned char uidComplete;
  1713                           ;RFID.c: 555: unsigned char selectDone;
  1714                           ;RFID.c: 556: unsigned char useCascadeTag;
  1715                           ;RFID.c: 557: unsigned char cascadeLevel = 1;
  1716  0003' 1683               	bsf	3,5	;RP0=1, select bank1
  1717  0004' 1303               	bcf	3,6	;RP1=0, select bank1
  1718  0005' 0180'              	clrf	PICC_Select@cascadeLevel^(0+128)
  1719  0006' 0A80'              	incf	PICC_Select@cascadeLevel^(0+128),f
  1720                           
  1721                           ;RFID.c: 558: unsigned char result;
  1722                           ;RFID.c: 559: unsigned char count;
  1723                           ;RFID.c: 560: unsigned char index;
  1724                           ;RFID.c: 561: unsigned char uidIndex;
  1725                           ;RFID.c: 562: char currentLevelKnownBits;
  1726                           ;RFID.c: 563: unsigned char buffer[9];
  1727                           ;RFID.c: 564: unsigned char bufferUsed;
  1728                           ;RFID.c: 565: unsigned char rxAlign;
  1729                           ;RFID.c: 566: unsigned char txLastBits;
  1730                           ;RFID.c: 567: unsigned char *responseBuffer;
  1731                           ;RFID.c: 568: unsigned char responseLength;
  1732                           ;RFID.c: 593: if (validBits > 80) {
  1733  0007' 3051               	movlw	81
  1734  0008' 1283               	bcf	3,5	;RP0=0, select bank0
  1735  0009' 1303               	bcf	3,6	;RP1=0, select bank0
  1736  000A' 023D'              	subwf	PICC_Select@validBits,w
  1737  000B' 1C03               	skipc
  1738  000C' 280F'              	goto	l4161
  1739                           
  1740                           ;RFID.c: 594: return STATUS_INVALID;
  1741  000D' 3007               	movlw	7
  1742  000E' 2B47'              	goto	L13
  1743  000F'                    l4161:	
  1744                           
  1745                           ;RFID.c: 595: }
  1746                           ;RFID.c: 598: PCD_ClearRegisterBitMask(CollReg, 0x80);
  1747  000F' 3080               	movlw	128
  1748  0010' 00BF'              	movwf	??_PICC_Select
  1749  0011' 083F'              	movf	??_PICC_Select,w
  1750  0012' 0089'              	movwf	PCD_ClearRegisterBitMask@mask
  1751  0013' 301C               	movlw	28
  1752  0014' 2000'              	fcall	_PCD_ClearRegisterBitMask
  1753                           
  1754                           ;RFID.c: 601: uidComplete = 0;
  1755  0015' 1683               	bsf	3,5	;RP0=1, select bank1
  1756  0016' 1303               	bcf	3,6	;RP1=0, select bank1
  1757  0017' 0180'              	clrf	PICC_Select@uidComplete^(0+128)
  1758                           
  1759                           ;RFID.c: 602: while ( ! uidComplete) {
  1760  0018' 2B67'              	goto	l4379
  1761  0019'                    l4165:	
  1762                           ;RFID.c: 605: case 1:
  1763                           
  1764                           ;RFID.c: 604: switch (cascadeLevel) {
  1765                           
  1766                           
  1767                           ;RFID.c: 606: buffer[0] = PICC_CMD_SEL_CL1;
  1768  0019' 3093               	movlw	147
  1769  001A' 1283               	bcf	3,5	;RP0=0, select bank0
  1770  001B' 1303               	bcf	3,6	;RP1=0, select bank0
  1771  001C' 00BF'              	movwf	??_PICC_Select
  1772  001D' 083F'              	movf	??_PICC_Select,w
  1773  001E' 1683               	bsf	3,5	;RP0=1, select bank1
  1774  001F' 1303               	bcf	3,6	;RP1=0, select bank1
  1775  0020' 0080'              	movwf	PICC_Select@buffer^(0+128)
  1776                           
  1777                           ;RFID.c: 607: uidIndex = 0;
  1778  0021' 0180'              	clrf	PICC_Select@uidIndex^(0+128)
  1779                           
  1780                           ;RFID.c: 608: useCascadeTag = validBits && uid->size > 4;
  1781  0022' 0180'              	clrf	_PICC_Select$429^(0+128)
  1782  0023' 1283               	bcf	3,5	;RP0=0, select bank0
  1783  0024' 1303               	bcf	3,6	;RP1=0, select bank0
  1784  0025' 083D'              	movf	PICC_Select@validBits,w
  1785  0026' 1903               	btfsc	3,2
  1786  0027' 2835'              	goto	l4175
  1787  0028' 083C'              	movf	PICC_Select@uid,w
  1788  0029' 0084               	movwf	4
  1789  002A' 3005               	movlw	5
  1790  002B' 1383               	bcf	3,7	;select IRP bank0
  1791  002C' 0200               	subwf	0,w
  1792  002D' 1C03               	skipc
  1793  002E' 2835'              	goto	l4175
  1794  002F' 1683               	bsf	3,5	;RP0=1, select bank1
  1795  0030' 1303               	bcf	3,6	;RP1=0, select bank1
  1796  0031' 0180'              	clrf	_PICC_Select$429^(0+128)
  1797  0032' 0A80'              	incf	_PICC_Select$429^(0+128),f
  1798  0033' 1283               	bcf	3,5	;RP0=0, select bank0
  1799  0034' 1303               	bcf	3,6	;RP1=0, select bank0
  1800  0035'                    l4175:	
  1801  0035' 1683               	bsf	3,5	;RP0=1, select bank1
  1802  0036' 1303               	bcf	3,6	;RP1=0, select bank1
  1803  0037' 0800'              	movf	_PICC_Select$429^(0+128),w
  1804  0038' 285F'              	goto	L2
  1805  0039'                    l4177:	
  1806                           ;RFID.c: 611: case 2:
  1807                           
  1808                           ;RFID.c: 609: break;
  1809                           
  1810                           
  1811                           ;RFID.c: 612: buffer[0] = PICC_CMD_SEL_CL2;
  1812  0039' 3095               	movlw	149
  1813  003A' 1283               	bcf	3,5	;RP0=0, select bank0
  1814  003B' 1303               	bcf	3,6	;RP1=0, select bank0
  1815  003C' 00BF'              	movwf	??_PICC_Select
  1816  003D' 083F'              	movf	??_PICC_Select,w
  1817  003E' 1683               	bsf	3,5	;RP0=1, select bank1
  1818  003F' 1303               	bcf	3,6	;RP1=0, select bank1
  1819  0040' 0080'              	movwf	PICC_Select@buffer^(0+128)
  1820                           
  1821                           ;RFID.c: 613: uidIndex = 3;
  1822  0041' 3003               	movlw	3
  1823  0042' 1283               	bcf	3,5	;RP0=0, select bank0
  1824  0043' 1303               	bcf	3,6	;RP1=0, select bank0
  1825  0044' 00BF'              	movwf	??_PICC_Select
  1826  0045' 083F'              	movf	??_PICC_Select,w
  1827  0046' 1683               	bsf	3,5	;RP0=1, select bank1
  1828  0047' 1303               	bcf	3,6	;RP1=0, select bank1
  1829  0048' 0080'              	movwf	PICC_Select@uidIndex^(0+128)
  1830                           
  1831                           ;RFID.c: 614: useCascadeTag = validBits && uid->size > 7;
  1832  0049' 0180'              	clrf	_PICC_Select$430^(0+128)
  1833  004A' 1283               	bcf	3,5	;RP0=0, select bank0
  1834  004B' 1303               	bcf	3,6	;RP1=0, select bank0
  1835  004C' 083D'              	movf	PICC_Select@validBits,w
  1836  004D' 1903               	btfsc	3,2
  1837  004E' 285C'              	goto	l4187
  1838  004F' 083C'              	movf	PICC_Select@uid,w
  1839  0050' 0084               	movwf	4
  1840  0051' 3008               	movlw	8
  1841  0052' 1383               	bcf	3,7	;select IRP bank0
  1842  0053' 0200               	subwf	0,w
  1843  0054' 1C03               	skipc
  1844  0055' 285C'              	goto	l4187
  1845  0056' 1683               	bsf	3,5	;RP0=1, select bank1
  1846  0057' 1303               	bcf	3,6	;RP1=0, select bank1
  1847  0058' 0180'              	clrf	_PICC_Select$430^(0+128)
  1848  0059' 0A80'              	incf	_PICC_Select$430^(0+128),f
  1849  005A' 1283               	bcf	3,5	;RP0=0, select bank0
  1850  005B' 1303               	bcf	3,6	;RP1=0, select bank0
  1851  005C'                    l4187:	
  1852  005C' 1683               	bsf	3,5	;RP0=1, select bank1
  1853  005D' 1303               	bcf	3,6	;RP1=0, select bank1
  1854  005E' 0800'              	movf	_PICC_Select$430^(0+128),w
  1855  005F'                    L2:	
  1856  005F' 1283               	bcf	3,5	;RP0=0, select bank0
  1857  0060' 1303               	bcf	3,6	;RP1=0, select bank0
  1858  0061' 00BF'              	movwf	??_PICC_Select
  1859  0062' 083F'              	movf	??_PICC_Select,w
  1860  0063' 1683               	bsf	3,5	;RP0=1, select bank1
  1861  0064' 1303               	bcf	3,6	;RP1=0, select bank1
  1862  0065' 0080'              	movwf	PICC_Select@useCascadeTag^(0+128)
  1863                           
  1864                           ;RFID.c: 615: break;
  1865  0066' 2887'              	goto	l4203
  1866  0067'                    l4189:	
  1867                           ;RFID.c: 617: case 3:
  1868                           
  1869                           
  1870                           ;RFID.c: 618: buffer[0] = PICC_CMD_SEL_CL3;
  1871  0067' 3097               	movlw	151
  1872  0068' 1283               	bcf	3,5	;RP0=0, select bank0
  1873  0069' 1303               	bcf	3,6	;RP1=0, select bank0
  1874  006A' 00BF'              	movwf	??_PICC_Select
  1875  006B' 083F'              	movf	??_PICC_Select,w
  1876  006C' 1683               	bsf	3,5	;RP0=1, select bank1
  1877  006D' 1303               	bcf	3,6	;RP1=0, select bank1
  1878  006E' 0080'              	movwf	PICC_Select@buffer^(0+128)
  1879                           
  1880                           ;RFID.c: 619: uidIndex = 6;
  1881  006F' 3006               	movlw	6
  1882  0070' 1283               	bcf	3,5	;RP0=0, select bank0
  1883  0071' 1303               	bcf	3,6	;RP1=0, select bank0
  1884  0072' 00BF'              	movwf	??_PICC_Select
  1885  0073' 083F'              	movf	??_PICC_Select,w
  1886  0074' 1683               	bsf	3,5	;RP0=1, select bank1
  1887  0075' 1303               	bcf	3,6	;RP1=0, select bank1
  1888  0076' 0080'              	movwf	PICC_Select@uidIndex^(0+128)
  1889                           
  1890                           ;RFID.c: 620: useCascadeTag = 0;
  1891  0077' 0180'              	clrf	PICC_Select@useCascadeTag^(0+128)
  1892                           
  1893                           ;RFID.c: 621: break;
  1894  0078' 2887'              	goto	l4203
  1895  0079'                    l4193:	
  1896                           ;RFID.c: 623: default:
  1897                           
  1898  0079' 2A56'              	goto	L16
  1899  007A'                    l4201:	
  1900                           ;RFID.c: 626: }
  1901                           
  1902                           ;RFID.c: 625: break;
  1903                           
  1904                           ;RFID.c: 624: return STATUS_INTERNAL_ERROR;
  1905                           
  1906  007A' 1683               	bsf	3,5	;RP0=1, select bank1
  1907  007B' 1303               	bcf	3,6	;RP1=0, select bank1
  1908  007C' 0800'              	movf	PICC_Select@cascadeLevel^(0+128),w
  1909                           
  1910                           ; Switch size 1, requested type "space"
  1911                           ; Number of cases is 3, Range of values is 1 to 3
  1912                           ; switch strategies available:
  1913                           ; Name         Instructions Cycles
  1914                           ; simple_byte           10     6 (average)
  1915                           ; direct_byte           12     9 (fixed)
  1916                           ; jumptable            263     9 (fixed)
  1917                           ;	Chosen strategy is simple_byte
  1918  007D' 3A01               	xorlw	1	; case 1
  1919  007E' 1903               	skipnz
  1920  007F' 2819'              	goto	l4165
  1921  0080' 3A03               	xorlw	3	; case 2
  1922  0081' 1903               	skipnz
  1923  0082' 2839'              	goto	l4177
  1924  0083' 3A01               	xorlw	1	; case 3
  1925  0084' 1903               	skipnz
  1926  0085' 2867'              	goto	l4189
  1927  0086' 2879'              	goto	l4193
  1928  0087'                    l4203:	
  1929                           
  1930                           ;RFID.c: 629: currentLevelKnownBits = validBits - (8 * uidIndex);
  1931  0087' 1683               	bsf	3,5	;RP0=1, select bank1
  1932  0088' 1303               	bcf	3,6	;RP1=0, select bank1
  1933  0089' 0800'              	movf	PICC_Select@uidIndex^(0+128),w
  1934  008A' 1283               	bcf	3,5	;RP0=0, select bank0
  1935  008B' 1303               	bcf	3,6	;RP1=0, select bank0
  1936  008C' 00BF'              	movwf	??_PICC_Select
  1937  008D' 3002               	movlw	2
  1938  008E'                    u4815:	
  1939  008E' 1003               	clrc
  1940  008F' 0DBF'              	rlf	??_PICC_Select,f
  1941  0090' 3EFF               	addlw	-1
  1942  0091' 1D03               	skipz
  1943  0092' 288E'              	goto	u4815
  1944  0093' 1003               	clrc
  1945  0094' 0D3F'              	rlf	??_PICC_Select,w
  1946  0095' 3AFF               	xorlw	255
  1947  0096' 3E01               	addlw	1
  1948  0097' 073D'              	addwf	PICC_Select@validBits,w
  1949  0098' 00C0'              	movwf	??_PICC_Select+1
  1950  0099' 0840'              	movf	??_PICC_Select+1,w
  1951  009A' 1683               	bsf	3,5	;RP0=1, select bank1
  1952  009B' 1303               	bcf	3,6	;RP1=0, select bank1
  1953  009C' 0080'              	movwf	PICC_Select@currentLevelKnownBits^(0+128)
  1954                           
  1955                           ;RFID.c: 630: if (currentLevelKnownBits <= 1 ) {
  1956  009D' 3002               	movlw	2
  1957  009E' 0200'              	subwf	PICC_Select@currentLevelKnownBits^(0+128),w
  1958  009F' 1C03               	btfss	3,0
  1959                           
  1960                           ;RFID.c: 631: currentLevelKnownBits = 0;
  1961  00A0' 0180'              	clrf	PICC_Select@currentLevelKnownBits^(0+128)
  1962                           
  1963                           ;RFID.c: 632: }
  1964                           ;RFID.c: 634: index = 2;
  1965  00A1' 3002               	movlw	2
  1966  00A2' 1283               	bcf	3,5	;RP0=0, select bank0
  1967  00A3' 1303               	bcf	3,6	;RP1=0, select bank0
  1968  00A4' 00BF'              	movwf	??_PICC_Select
  1969  00A5' 083F'              	movf	??_PICC_Select,w
  1970  00A6' 1683               	bsf	3,5	;RP0=1, select bank1
  1971  00A7' 1303               	bcf	3,6	;RP1=0, select bank1
  1972  00A8' 0080'              	movwf	PICC_Select@index^(0+128)
  1973                           
  1974                           ;RFID.c: 635: if (useCascadeTag) {
  1975  00A9' 0800'              	movf	PICC_Select@useCascadeTag^(0+128),w
  1976  00AA' 1903               	btfsc	3,2
  1977  00AB' 28C0'              	goto	l4217
  1978                           
  1979                           ;RFID.c: 636: buffer[index++] = PICC_CMD_CT;
  1980  00AC' 3088               	movlw	136
  1981  00AD' 1283               	bcf	3,5	;RP0=0, select bank0
  1982  00AE' 1303               	bcf	3,6	;RP1=0, select bank0
  1983  00AF' 00BF'              	movwf	??_PICC_Select
  1984  00B0' 1683               	bsf	3,5	;RP0=1, select bank1
  1985  00B1' 1303               	bcf	3,6	;RP1=0, select bank1
  1986  00B2' 0800'              	movf	PICC_Select@index^(0+128),w
  1987  00B3' 3E00'              	addlw	PICC_Select@buffer& (0+255)
  1988  00B4' 0084               	movwf	4
  1989  00B5' 1283               	bcf	3,5	;RP0=0, select bank0
  1990  00B6' 1303               	bcf	3,6	;RP1=0, select bank0
  1991  00B7' 083F'              	movf	??_PICC_Select,w
  1992  00B8' 1383               	bcf	3,7	;select IRP bank1
  1993  00B9' 0080               	movwf	0
  1994  00BA' 3001               	movlw	1
  1995  00BB' 00BF'              	movwf	??_PICC_Select
  1996  00BC' 083F'              	movf	??_PICC_Select,w
  1997  00BD' 1683               	bsf	3,5	;RP0=1, select bank1
  1998  00BE' 1303               	bcf	3,6	;RP1=0, select bank1
  1999  00BF' 0780'              	addwf	PICC_Select@index^(0+128),f
  2000  00C0'                    l4217:	
  2001                           
  2002                           ;RFID.c: 637: }
  2003                           ;RFID.c: 638: unsigned char bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnown
      +                          Bits % 8 ? 1 : 0);
  2004  00C0' 3008               	movlw	8
  2005  00C1' 1283               	bcf	3,5	;RP0=0, select bank0
  2006  00C2' 1303               	bcf	3,6	;RP1=0, select bank0
  2007  00C3' 0080'              	movwf	___awdiv@divisor
  2008  00C4' 3000               	movlw	0
  2009  00C5' 0081'              	movwf	___awdiv@divisor+1
  2010  00C6' 1683               	bsf	3,5	;RP0=1, select bank1
  2011  00C7' 1303               	bcf	3,6	;RP1=0, select bank1
  2012  00C8' 0800'              	movf	PICC_Select@currentLevelKnownBits^(0+128),w
  2013  00C9' 1283               	bcf	3,5	;RP0=0, select bank0
  2014  00CA' 1303               	bcf	3,6	;RP1=0, select bank0
  2015  00CB' 00BF'              	movwf	??_PICC_Select
  2016  00CC' 01C0'              	clrf	??_PICC_Select+1
  2017  00CD' 083F'              	movf	??_PICC_Select,w
  2018  00CE' 0082'              	movwf	___awdiv@dividend
  2019  00CF' 0840'              	movf	??_PICC_Select+1,w
  2020  00D0' 0083'              	movwf	___awdiv@dividend+1
  2021  00D1' 2000'              	fcall	___awdiv
  2022  00D2' 1283               	bcf	3,5	;RP0=0, select bank0
  2023  00D3' 1303               	bcf	3,6	;RP1=0, select bank0
  2024  00D4' 0800'              	movf	?___awdiv,w
  2025  00D5' 00C1'              	movwf	??_PICC_Select+2
  2026  00D6' 0801'              	movf	?___awdiv+1,w
  2027  00D7' 00C2'              	movwf	??_PICC_Select+3
  2028  00D8' 1683               	bsf	3,5	;RP0=1, select bank1
  2029  00D9' 1303               	bcf	3,6	;RP1=0, select bank1
  2030  00DA' 0800'              	movf	PICC_Select@currentLevelKnownBits^(0+128),w
  2031  00DB' 3907               	andlw	7
  2032  00DC' 3000               	movlw	0
  2033  00DD' 1D03               	btfss	3,2
  2034  00DE' 3001               	movlw	1
  2035  00DF' 1283               	bcf	3,5	;RP0=0, select bank0
  2036  00E0' 1303               	bcf	3,6	;RP1=0, select bank0
  2037  00E1' 0741'              	addwf	??_PICC_Select+2,w
  2038  00E2' 00C3'              	movwf	??_PICC_Select+4
  2039  00E3' 0843'              	movf	??_PICC_Select+4,w
  2040  00E4' 1683               	bsf	3,5	;RP0=1, select bank1
  2041  00E5' 1303               	bcf	3,6	;RP1=0, select bank1
  2042  00E6' 0080'              	movwf	PICC_Select@bytesToCopy^(0+128)
  2043                           
  2044                           ;RFID.c: 639: if (bytesToCopy) {
  2045  00E7' 0800'              	movf	PICC_Select@bytesToCopy^(0+128),w
  2046  00E8' 1903               	btfsc	3,2
  2047  00E9' 2930'              	goto	l4239
  2048                           
  2049                           ;RFID.c: 640: unsigned char maxbytes = useCascadeTag ? 3 : 4;
  2050  00EA' 0880'              	movf	PICC_Select@useCascadeTag^(0+128),f
  2051  00EB' 1D03               	skipz
  2052  00EC' 28EF'              	goto	l4225
  2053  00ED' 3004               	movlw	4
  2054  00EE' 28F0'              	goto	L4
  2055  00EF'                    l4225:	
  2056  00EF' 3003               	movlw	3
  2057  00F0'                    L4:	
  2058  00F0' 0080'              	movwf	_PICC_Select$433^(0+128)
  2059  00F1' 3000               	movlw	0
  2060  00F2' 0081'              	movwf	(_PICC_Select$433^(0+128)+1)
  2061  00F3' 0800'              	movf	_PICC_Select$433^(0+128),w
  2062  00F4' 1283               	bcf	3,5	;RP0=0, select bank0
  2063  00F5' 1303               	bcf	3,6	;RP1=0, select bank0
  2064  00F6' 00BF'              	movwf	??_PICC_Select
  2065  00F7' 083F'              	movf	??_PICC_Select,w
  2066  00F8' 1683               	bsf	3,5	;RP0=1, select bank1
  2067  00F9' 1303               	bcf	3,6	;RP1=0, select bank1
  2068  00FA' 0080'              	movwf	PICC_Select@maxbytes^(0+128)
  2069                           
  2070                           ;RFID.c: 641: if (bytesToCopy > maxbytes) {
  2071  00FB' 0800'              	movf	PICC_Select@bytesToCopy^(0+128),w
  2072  00FC' 0200'              	subwf	PICC_Select@maxbytes^(0+128),w
  2073  00FD' 1803               	skipnc
  2074  00FE' 2907'              	goto	l4229
  2075                           
  2076                           ;RFID.c: 642: bytesToCopy = maxbytes;
  2077  00FF' 0800'              	movf	PICC_Select@maxbytes^(0+128),w
  2078  0100' 1283               	bcf	3,5	;RP0=0, select bank0
  2079  0101' 1303               	bcf	3,6	;RP1=0, select bank0
  2080  0102' 00BF'              	movwf	??_PICC_Select
  2081  0103' 083F'              	movf	??_PICC_Select,w
  2082  0104' 1683               	bsf	3,5	;RP0=1, select bank1
  2083  0105' 1303               	bcf	3,6	;RP1=0, select bank1
  2084  0106' 0080'              	movwf	PICC_Select@bytesToCopy^(0+128)
  2085  0107'                    l4229:	
  2086                           
  2087                           ;RFID.c: 643: }
  2088                           ;RFID.c: 644: for (count = 0; count < bytesToCopy; count++) {
  2089  0107' 0180'              	clrf	PICC_Select@count^(0+128)
  2090  0108'                    l4237:	
  2091  0108' 0800'              	movf	PICC_Select@bytesToCopy^(0+128),w
  2092  0109' 0200'              	subwf	PICC_Select@count^(0+128),w
  2093  010A' 1803               	btfsc	3,0
  2094  010B' 2930'              	goto	l4239
  2095                           
  2096                           ;RFID.c: 645: buffer[index++] = uid->uidByte[uidIndex + count];
  2097  010C' 0800'              	movf	PICC_Select@count^(0+128),w
  2098  010D' 0700'              	addwf	PICC_Select@uidIndex^(0+128),w
  2099  010E' 3E01               	addlw	1
  2100  010F' 1283               	bcf	3,5	;RP0=0, select bank0
  2101  0110' 1303               	bcf	3,6	;RP1=0, select bank0
  2102  0111' 073C'              	addwf	PICC_Select@uid,w
  2103  0112' 00BF'              	movwf	??_PICC_Select
  2104  0113' 083F'              	movf	??_PICC_Select,w
  2105  0114' 0084               	movwf	4
  2106  0115' 1383               	bcf	3,7	;select IRP bank0
  2107  0116' 0800               	movf	0,w
  2108  0117' 00C0'              	movwf	??_PICC_Select+1
  2109  0118' 1683               	bsf	3,5	;RP0=1, select bank1
  2110  0119' 1303               	bcf	3,6	;RP1=0, select bank1
  2111  011A' 0800'              	movf	PICC_Select@index^(0+128),w
  2112  011B' 3E00'              	addlw	PICC_Select@buffer& (0+255)
  2113  011C' 0084               	movwf	4
  2114  011D' 1283               	bcf	3,5	;RP0=0, select bank0
  2115  011E' 1303               	bcf	3,6	;RP1=0, select bank0
  2116  011F' 0840'              	movf	??_PICC_Select+1,w
  2117  0120' 0080               	movwf	0
  2118  0121' 3001               	movlw	1
  2119  0122' 00BF'              	movwf	??_PICC_Select
  2120  0123' 083F'              	movf	??_PICC_Select,w
  2121  0124' 1683               	bsf	3,5	;RP0=1, select bank1
  2122  0125' 1303               	bcf	3,6	;RP1=0, select bank1
  2123  0126' 0780'              	addwf	PICC_Select@index^(0+128),f
  2124  0127' 3001               	movlw	1
  2125  0128' 1283               	bcf	3,5	;RP0=0, select bank0
  2126  0129' 1303               	bcf	3,6	;RP1=0, select bank0
  2127  012A' 00BF'              	movwf	??_PICC_Select
  2128  012B' 083F'              	movf	??_PICC_Select,w
  2129  012C' 1683               	bsf	3,5	;RP0=1, select bank1
  2130  012D' 1303               	bcf	3,6	;RP1=0, select bank1
  2131  012E' 0780'              	addwf	PICC_Select@count^(0+128),f
  2132  012F' 2908'              	goto	l4237
  2133  0130'                    l4239:	
  2134                           
  2135                           ;RFID.c: 646: }
  2136                           ;RFID.c: 647: }
  2137                           ;RFID.c: 649: if (useCascadeTag) {
  2138  0130' 0800'              	movf	PICC_Select@useCascadeTag^(0+128),w
  2139  0131' 1903               	btfsc	3,2
  2140  0132' 293B'              	goto	l4243
  2141                           
  2142                           ;RFID.c: 650: currentLevelKnownBits += 8;
  2143  0133' 3008               	movlw	8
  2144  0134' 1283               	bcf	3,5	;RP0=0, select bank0
  2145  0135' 1303               	bcf	3,6	;RP1=0, select bank0
  2146  0136' 00BF'              	movwf	??_PICC_Select
  2147  0137' 083F'              	movf	??_PICC_Select,w
  2148  0138' 1683               	bsf	3,5	;RP0=1, select bank1
  2149  0139' 1303               	bcf	3,6	;RP1=0, select bank1
  2150  013A' 0780'              	addwf	PICC_Select@currentLevelKnownBits^(0+128),f
  2151  013B'                    l4243:	
  2152                           
  2153                           ;RFID.c: 651: }
  2154                           ;RFID.c: 654: selectDone = 0;
  2155  013B' 0180'              	clrf	PICC_Select@selectDone^(0+128)
  2156  013C'                    l242:	
  2157                           ;RFID.c: 655: while ( ! selectDone) {
  2158                           
  2159  013C' 1683               	bsf	3,5	;RP0=1, select bank1
  2160  013D' 1303               	bcf	3,6	;RP1=0, select bank1
  2161  013E' 0800'              	movf	PICC_Select@selectDone^(0+128),w
  2162  013F' 1D03               	skipz
  2163  0140' 2AC7'              	goto	l4329
  2164                           
  2165                           ;RFID.c: 657: if (currentLevelKnownBits >= 32) {
  2166  0141' 3020               	movlw	32
  2167  0142' 0200'              	subwf	PICC_Select@currentLevelKnownBits^(0+128),w
  2168  0143' 1C03               	skipc
  2169  0144' 2984'              	goto	l4267
  2170                           
  2171                           ;RFID.c: 659: buffer[1] = 0x70;
  2172  0145' 3070               	movlw	112
  2173  0146' 1283               	bcf	3,5	;RP0=0, select bank0
  2174  0147' 1303               	bcf	3,6	;RP1=0, select bank0
  2175  0148' 00BF'              	movwf	??_PICC_Select
  2176  0149' 083F'              	movf	??_PICC_Select,w
  2177  014A' 1683               	bsf	3,5	;RP0=1, select bank1
  2178  014B' 1303               	bcf	3,6	;RP1=0, select bank1
  2179  014C' 0081'              	movwf	(PICC_Select@buffer^(0+128)+1)
  2180                           
  2181                           ;RFID.c: 661: buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
  2182  014D' 0802'              	movf	(PICC_Select@buffer^(0+128)+2),w
  2183  014E' 0603'              	xorwf	(PICC_Select@buffer^(0+128)+3),w
  2184  014F' 0604'              	xorwf	(PICC_Select@buffer^(0+128)+4),w
  2185  0150' 0605'              	xorwf	(PICC_Select@buffer^(0+128)+5),w
  2186  0151' 1283               	bcf	3,5	;RP0=0, select bank0
  2187  0152' 1303               	bcf	3,6	;RP1=0, select bank0
  2188  0153' 00BF'              	movwf	??_PICC_Select
  2189  0154' 083F'              	movf	??_PICC_Select,w
  2190  0155' 1683               	bsf	3,5	;RP0=1, select bank1
  2191  0156' 1303               	bcf	3,6	;RP1=0, select bank1
  2192  0157' 0086'              	movwf	(PICC_Select@buffer^(0+128)+6)
  2193                           
  2194                           ;RFID.c: 663: result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
  2195  0158' 3007               	movlw	7
  2196  0159' 1283               	bcf	3,5	;RP0=0, select bank0
  2197  015A' 1303               	bcf	3,6	;RP1=0, select bank0
  2198  015B' 00BF'              	movwf	??_PICC_Select
  2199  015C' 083F'              	movf	??_PICC_Select,w
  2200  015D' 008D'              	movwf	PCD_CalculateCRC@length
  2201  015E' 3000'              	movlw	(PICC_Select@buffer+7)& (0+255)
  2202  015F' 00C0'              	movwf	??_PICC_Select+1
  2203  0160' 0840'              	movf	??_PICC_Select+1,w
  2204  0161' 008E'              	movwf	PCD_CalculateCRC@result
  2205  0162' 3000'              	movlw	PICC_Select@buffer& (0+255)
  2206  0163' 2000'              	fcall	_PCD_CalculateCRC
  2207  0164' 1283               	bcf	3,5	;RP0=0, select bank0
  2208  0165' 1303               	bcf	3,6	;RP1=0, select bank0
  2209  0166' 00C1'              	movwf	??_PICC_Select+2
  2210  0167' 0841'              	movf	??_PICC_Select+2,w
  2211  0168' 1683               	bsf	3,5	;RP0=1, select bank1
  2212  0169' 1303               	bcf	3,6	;RP1=0, select bank1
  2213  016A' 0080'              	movwf	PICC_Select@result^(0+128)
  2214                           
  2215                           ;RFID.c: 664: if (result != STATUS_OK) {
  2216  016B' 0800'              	movf	PICC_Select@result^(0+128),w
  2217  016C' 3A01               	xorlw	1
  2218  016D' 1D03               	btfss	3,2
  2219  016E' 2B32'              	goto	L15
  2220                           
  2221                           ;RFID.c: 666: }
  2222                           ;RFID.c: 667: txLastBits = 0;
  2223                           
  2224                           ;RFID.c: 665: return result;
  2225  016F' 1683               	bsf	3,5	;RP0=1, select bank1
  2226  0170' 1303               	bcf	3,6	;RP1=0, select bank1
  2227  0171' 0180'              	clrf	PICC_Select@txLastBits^(0+128)
  2228                           
  2229                           ;RFID.c: 668: bufferUsed = 9;
  2230  0172' 3009               	movlw	9
  2231  0173' 1283               	bcf	3,5	;RP0=0, select bank0
  2232  0174' 1303               	bcf	3,6	;RP1=0, select bank0
  2233  0175' 00BF'              	movwf	??_PICC_Select
  2234  0176' 083F'              	movf	??_PICC_Select,w
  2235  0177' 1683               	bsf	3,5	;RP0=1, select bank1
  2236  0178' 1303               	bcf	3,6	;RP1=0, select bank1
  2237  0179' 0080'              	movwf	PICC_Select@bufferUsed^(0+128)
  2238                           
  2239                           ;RFID.c: 670: responseBuffer = &buffer[6];
  2240  017A' 3000'              	movlw	(PICC_Select@buffer+6)& (0+255)
  2241  017B' 1283               	bcf	3,5	;RP0=0, select bank0
  2242  017C' 1303               	bcf	3,6	;RP1=0, select bank0
  2243  017D' 00BF'              	movwf	??_PICC_Select
  2244  017E' 083F'              	movf	??_PICC_Select,w
  2245  017F' 1683               	bsf	3,5	;RP0=1, select bank1
  2246  0180' 1303               	bcf	3,6	;RP1=0, select bank1
  2247  0181' 0080'              	movwf	PICC_Select@responseBuffer^(0+128)
  2248                           
  2249                           ;RFID.c: 671: responseLength = 3;
  2250  0182' 3003               	movlw	3
  2251  0183' 29DD'              	goto	L6
  2252  0184'                    l4267:	
  2253                           ;RFID.c: 672: }
  2254                           
  2255                           
  2256                           ;RFID.c: 673: else {
  2257                           ;RFID.c: 675: txLastBits = currentLevelKnownBits % 8;
  2258  0184' 0800'              	movf	PICC_Select@currentLevelKnownBits^(0+128),w
  2259  0185' 3907               	andlw	7
  2260  0186' 1283               	bcf	3,5	;RP0=0, select bank0
  2261  0187' 1303               	bcf	3,6	;RP1=0, select bank0
  2262  0188' 00BF'              	movwf	??_PICC_Select
  2263  0189' 083F'              	movf	??_PICC_Select,w
  2264  018A' 1683               	bsf	3,5	;RP0=1, select bank1
  2265  018B' 1303               	bcf	3,6	;RP1=0, select bank1
  2266  018C' 0080'              	movwf	PICC_Select@txLastBits^(0+128)
  2267                           
  2268                           ;RFID.c: 676: count = currentLevelKnownBits / 8;
  2269  018D' 3008               	movlw	8
  2270  018E' 1283               	bcf	3,5	;RP0=0, select bank0
  2271  018F' 1303               	bcf	3,6	;RP1=0, select bank0
  2272  0190' 0080'              	movwf	___awdiv@divisor
  2273  0191' 3000               	movlw	0
  2274  0192' 0081'              	movwf	___awdiv@divisor+1
  2275  0193' 1683               	bsf	3,5	;RP0=1, select bank1
  2276  0194' 1303               	bcf	3,6	;RP1=0, select bank1
  2277  0195' 0800'              	movf	PICC_Select@currentLevelKnownBits^(0+128),w
  2278  0196' 1283               	bcf	3,5	;RP0=0, select bank0
  2279  0197' 1303               	bcf	3,6	;RP1=0, select bank0
  2280  0198' 00BF'              	movwf	??_PICC_Select
  2281  0199' 01C0'              	clrf	??_PICC_Select+1
  2282  019A' 083F'              	movf	??_PICC_Select,w
  2283  019B' 0082'              	movwf	___awdiv@dividend
  2284  019C' 0840'              	movf	??_PICC_Select+1,w
  2285  019D' 0083'              	movwf	___awdiv@dividend+1
  2286  019E' 2000'              	fcall	___awdiv
  2287  019F' 1283               	bcf	3,5	;RP0=0, select bank0
  2288  01A0' 1303               	bcf	3,6	;RP1=0, select bank0
  2289  01A1' 0800'              	movf	?___awdiv,w
  2290  01A2' 00C1'              	movwf	??_PICC_Select+2
  2291  01A3' 0841'              	movf	??_PICC_Select+2,w
  2292  01A4' 1683               	bsf	3,5	;RP0=1, select bank1
  2293  01A5' 1303               	bcf	3,6	;RP1=0, select bank1
  2294  01A6' 0080'              	movwf	PICC_Select@count^(0+128)
  2295                           
  2296                           ;RFID.c: 677: index = 2 + count;
  2297  01A7' 0800'              	movf	PICC_Select@count^(0+128),w
  2298  01A8' 3E02               	addlw	2
  2299  01A9' 1283               	bcf	3,5	;RP0=0, select bank0
  2300  01AA' 1303               	bcf	3,6	;RP1=0, select bank0
  2301  01AB' 00BF'              	movwf	??_PICC_Select
  2302  01AC' 083F'              	movf	??_PICC_Select,w
  2303  01AD' 1683               	bsf	3,5	;RP0=1, select bank1
  2304  01AE' 1303               	bcf	3,6	;RP1=0, select bank1
  2305  01AF' 0080'              	movwf	PICC_Select@index^(0+128)
  2306                           
  2307                           ;RFID.c: 678: buffer[1] = (index << 4) + txLastBits;
  2308  01B0' 0800'              	movf	PICC_Select@index^(0+128),w
  2309  01B1' 1283               	bcf	3,5	;RP0=0, select bank0
  2310  01B2' 1303               	bcf	3,6	;RP1=0, select bank0
  2311  01B3' 00BF'              	movwf	??_PICC_Select
  2312  01B4' 3004               	movlw	4
  2313  01B5'                    u4915:	
  2314  01B5' 1003               	clrc
  2315  01B6' 0DBF'              	rlf	??_PICC_Select,f
  2316  01B7' 3EFF               	addlw	-1
  2317  01B8' 1D03               	skipz
  2318  01B9' 29B5'              	goto	u4915
  2319  01BA' 1683               	bsf	3,5	;RP0=1, select bank1
  2320  01BB' 1303               	bcf	3,6	;RP1=0, select bank1
  2321  01BC' 0800'              	movf	PICC_Select@txLastBits^(0+128),w
  2322  01BD' 1283               	bcf	3,5	;RP0=0, select bank0
  2323  01BE' 1303               	bcf	3,6	;RP1=0, select bank0
  2324  01BF' 073F'              	addwf	??_PICC_Select,w
  2325  01C0' 00C0'              	movwf	??_PICC_Select+1
  2326  01C1' 0840'              	movf	??_PICC_Select+1,w
  2327  01C2' 1683               	bsf	3,5	;RP0=1, select bank1
  2328  01C3' 1303               	bcf	3,6	;RP1=0, select bank1
  2329  01C4' 0081'              	movwf	(PICC_Select@buffer^(0+128)+1)
  2330                           
  2331                           ;RFID.c: 679: bufferUsed = index + (txLastBits ? 1 : 0);
  2332  01C5' 3000               	movlw	0
  2333  01C6' 0880'              	movf	PICC_Select@txLastBits^(0+128),f
  2334  01C7' 1D03               	skipz
  2335  01C8' 3001               	movlw	1
  2336  01C9' 0700'              	addwf	PICC_Select@index^(0+128),w
  2337  01CA' 1283               	bcf	3,5	;RP0=0, select bank0
  2338  01CB' 1303               	bcf	3,6	;RP1=0, select bank0
  2339  01CC' 00BF'              	movwf	??_PICC_Select
  2340  01CD' 083F'              	movf	??_PICC_Select,w
  2341  01CE' 1683               	bsf	3,5	;RP0=1, select bank1
  2342  01CF' 1303               	bcf	3,6	;RP1=0, select bank1
  2343  01D0' 0080'              	movwf	PICC_Select@bufferUsed^(0+128)
  2344                           
  2345                           ;RFID.c: 681: responseBuffer = &buffer[index];
  2346  01D1' 0800'              	movf	PICC_Select@index^(0+128),w
  2347  01D2' 3E00'              	addlw	PICC_Select@buffer& (0+255)
  2348  01D3' 1283               	bcf	3,5	;RP0=0, select bank0
  2349  01D4' 1303               	bcf	3,6	;RP1=0, select bank0
  2350  01D5' 00BF'              	movwf	??_PICC_Select
  2351  01D6' 083F'              	movf	??_PICC_Select,w
  2352  01D7' 1683               	bsf	3,5	;RP0=1, select bank1
  2353  01D8' 1303               	bcf	3,6	;RP1=0, select bank1
  2354  01D9' 0080'              	movwf	PICC_Select@responseBuffer^(0+128)
  2355                           
  2356                           ;RFID.c: 682: responseLength = sizeof(buffer) - index;
  2357  01DA' 0300'              	decf	PICC_Select@index^(0+128),w
  2358  01DB' 3AFF               	xorlw	255
  2359  01DC' 3E09               	addlw	9
  2360  01DD'                    L6:	
  2361  01DD' 1283               	bcf	3,5	;RP0=0, select bank0
  2362  01DE' 1303               	bcf	3,6	;RP1=0, select bank0
  2363  01DF' 00BF'              	movwf	??_PICC_Select
  2364  01E0' 083F'              	movf	??_PICC_Select,w
  2365  01E1' 1683               	bsf	3,5	;RP0=1, select bank1
  2366  01E2' 1303               	bcf	3,6	;RP1=0, select bank1
  2367  01E3' 0080'              	movwf	PICC_Select@responseLength^(0+128)
  2368                           
  2369                           ;RFID.c: 683: }
  2370                           ;RFID.c: 686: rxAlign = txLastBits;
  2371  01E4' 0800'              	movf	PICC_Select@txLastBits^(0+128),w
  2372  01E5' 1283               	bcf	3,5	;RP0=0, select bank0
  2373  01E6' 1303               	bcf	3,6	;RP1=0, select bank0
  2374  01E7' 00BF'              	movwf	??_PICC_Select
  2375  01E8' 083F'              	movf	??_PICC_Select,w
  2376  01E9' 1683               	bsf	3,5	;RP0=1, select bank1
  2377  01EA' 1303               	bcf	3,6	;RP1=0, select bank1
  2378  01EB' 0080'              	movwf	PICC_Select@rxAlign^(0+128)
  2379                           
  2380                           ;RFID.c: 687: PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);
  2381  01EC' 0800'              	movf	PICC_Select@rxAlign^(0+128),w
  2382  01ED' 1283               	bcf	3,5	;RP0=0, select bank0
  2383  01EE' 1303               	bcf	3,6	;RP1=0, select bank0
  2384  01EF' 00BF'              	movwf	??_PICC_Select
  2385  01F0' 3004               	movlw	4
  2386  01F1'                    u4925:	
  2387  01F1' 1003               	clrc
  2388  01F2' 0DBF'              	rlf	??_PICC_Select,f
  2389  01F3' 3EFF               	addlw	-1
  2390  01F4' 1D03               	skipz
  2391  01F5' 29F1'              	goto	u4925
  2392  01F6' 1683               	bsf	3,5	;RP0=1, select bank1
  2393  01F7' 1303               	bcf	3,6	;RP1=0, select bank1
  2394  01F8' 0800'              	movf	PICC_Select@txLastBits^(0+128),w
  2395  01F9' 1283               	bcf	3,5	;RP0=0, select bank0
  2396  01FA' 1303               	bcf	3,6	;RP1=0, select bank0
  2397  01FB' 073F'              	addwf	??_PICC_Select,w
  2398  01FC' 00C0'              	movwf	??_PICC_Select+1
  2399  01FD' 0840'              	movf	??_PICC_Select+1,w
  2400  01FE' 0086'              	movwf	PCD_WriteRegister@value
  2401  01FF' 301A               	movlw	26
  2402  0200' 2000'              	fcall	_PCD_WriteRegister
  2403                           
  2404                           ;RFID.c: 690: result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseL
      +                          ength, &txLastBits, rxAlign,0);
  2405  0201' 1683               	bsf	3,5	;RP0=1, select bank1
  2406  0202' 1303               	bcf	3,6	;RP1=0, select bank1
  2407  0203' 0800'              	movf	PICC_Select@bufferUsed^(0+128),w
  2408  0204' 1283               	bcf	3,5	;RP0=0, select bank0
  2409  0205' 1303               	bcf	3,6	;RP1=0, select bank0
  2410  0206' 00BF'              	movwf	??_PICC_Select
  2411  0207' 083F'              	movf	??_PICC_Select,w
  2412  0208' 00AC'              	movwf	PCD_TransceiveData@sendLen
  2413  0209' 1683               	bsf	3,5	;RP0=1, select bank1
  2414  020A' 1303               	bcf	3,6	;RP1=0, select bank1
  2415  020B' 0800'              	movf	PICC_Select@responseBuffer^(0+128),w
  2416  020C' 1283               	bcf	3,5	;RP0=0, select bank0
  2417  020D' 1303               	bcf	3,6	;RP1=0, select bank0
  2418  020E' 00C0'              	movwf	??_PICC_Select+1
  2419  020F' 0840'              	movf	??_PICC_Select+1,w
  2420  0210' 00AD'              	movwf	PCD_TransceiveData@backData
  2421  0211' 3000'              	movlw	PICC_Select@responseLength& (0+255)
  2422  0212' 00C1'              	movwf	??_PICC_Select+2
  2423  0213' 0841'              	movf	??_PICC_Select+2,w
  2424  0214' 00AE'              	movwf	PCD_TransceiveData@backLen
  2425  0215' 3000'              	movlw	PICC_Select@txLastBits& (0+255)
  2426  0216' 00C2'              	movwf	??_PICC_Select+3
  2427  0217' 0842'              	movf	??_PICC_Select+3,w
  2428  0218' 00AF'              	movwf	PCD_TransceiveData@validBits
  2429  0219' 1683               	bsf	3,5	;RP0=1, select bank1
  2430  021A' 1303               	bcf	3,6	;RP1=0, select bank1
  2431  021B' 0800'              	movf	PICC_Select@rxAlign^(0+128),w
  2432  021C' 1283               	bcf	3,5	;RP0=0, select bank0
  2433  021D' 1303               	bcf	3,6	;RP1=0, select bank0
  2434  021E' 00C3'              	movwf	??_PICC_Select+4
  2435  021F' 0843'              	movf	??_PICC_Select+4,w
  2436  0220' 00B0'              	movwf	PCD_TransceiveData@rxAlign
  2437  0221' 01B1'              	clrf	PCD_TransceiveData@checkCRC
  2438  0222' 3000'              	movlw	PICC_Select@buffer& (0+255)
  2439  0223' 2000'              	fcall	_PCD_TransceiveData
  2440  0224' 1283               	bcf	3,5	;RP0=0, select bank0
  2441  0225' 1303               	bcf	3,6	;RP1=0, select bank0
  2442  0226' 00C4'              	movwf	??_PICC_Select+5
  2443  0227' 0844'              	movf	??_PICC_Select+5,w
  2444  0228' 1683               	bsf	3,5	;RP0=1, select bank1
  2445  0229' 1303               	bcf	3,6	;RP1=0, select bank1
  2446  022A' 0080'              	movwf	PICC_Select@result^(0+128)
  2447                           
  2448                           ;RFID.c: 691: if (result == STATUS_COLLISION) {
  2449  022B' 0800'              	movf	PICC_Select@result^(0+128),w
  2450  022C' 3A03               	xorlw	3
  2451  022D' 1D03               	skipz
  2452  022E' 2AAF'              	goto	l4315
  2453                           
  2454                           ;RFID.c: 692: result = PCD_ReadRegister(CollReg);
  2455  022F' 301C               	movlw	28
  2456  0230' 2000'              	fcall	_PCD_ReadRegister
  2457  0231' 1283               	bcf	3,5	;RP0=0, select bank0
  2458  0232' 1303               	bcf	3,6	;RP1=0, select bank0
  2459  0233' 00BF'              	movwf	??_PICC_Select
  2460  0234' 083F'              	movf	??_PICC_Select,w
  2461  0235' 1683               	bsf	3,5	;RP0=1, select bank1
  2462  0236' 1303               	bcf	3,6	;RP1=0, select bank1
  2463  0237' 0080'              	movwf	PICC_Select@result^(0+128)
  2464                           
  2465                           ;RFID.c: 693: if (result & 0x20) {
  2466  0238' 1E80'              	btfss	PICC_Select@result^(0+128),5
  2467  0239' 2A3C'              	goto	l4297
  2468                           
  2469                           ;RFID.c: 694: return STATUS_COLLISION;
  2470  023A' 3003               	movlw	3
  2471  023B' 2B45'              	goto	L14
  2472  023C'                    l4297:	
  2473                           
  2474                           ;RFID.c: 695: }
  2475                           ;RFID.c: 696: unsigned char collisionPos = result & 0x1F;
  2476  023C' 1683               	bsf	3,5	;RP0=1, select bank1
  2477  023D' 1303               	bcf	3,6	;RP1=0, select bank1
  2478  023E' 0800'              	movf	PICC_Select@result^(0+128),w
  2479  023F' 391F               	andlw	31
  2480  0240' 1283               	bcf	3,5	;RP0=0, select bank0
  2481  0241' 1303               	bcf	3,6	;RP1=0, select bank0
  2482  0242' 00BF'              	movwf	??_PICC_Select
  2483  0243' 083F'              	movf	??_PICC_Select,w
  2484  0244' 1683               	bsf	3,5	;RP0=1, select bank1
  2485  0245' 1303               	bcf	3,6	;RP1=0, select bank1
  2486  0246' 0080'              	movwf	PICC_Select@collisionPos^(0+128)
  2487                           
  2488                           ;RFID.c: 697: if (collisionPos == 0) {
  2489  0247' 0880'              	movf	PICC_Select@collisionPos^(0+128),f
  2490  0248' 1D03               	skipz
  2491  0249' 2A52'              	goto	l249
  2492                           
  2493                           ;RFID.c: 698: collisionPos = 32;
  2494  024A' 3020               	movlw	32
  2495  024B' 1283               	bcf	3,5	;RP0=0, select bank0
  2496  024C' 1303               	bcf	3,6	;RP1=0, select bank0
  2497  024D' 00BF'              	movwf	??_PICC_Select
  2498  024E' 083F'              	movf	??_PICC_Select,w
  2499  024F' 1683               	bsf	3,5	;RP0=1, select bank1
  2500  0250' 1303               	bcf	3,6	;RP1=0, select bank1
  2501  0251' 0080'              	movwf	PICC_Select@collisionPos^(0+128)
  2502  0252'                    l249:	
  2503                           
  2504                           ;RFID.c: 699: }
  2505                           ;RFID.c: 700: if (collisionPos <= currentLevelKnownBits) {
  2506  0252' 0800'              	movf	PICC_Select@collisionPos^(0+128),w
  2507  0253' 0200'              	subwf	PICC_Select@currentLevelKnownBits^(0+128),w
  2508  0254' 1C03               	skipc
  2509  0255' 2A58'              	goto	l4307
  2510  0256'                    L16:	
  2511                           
  2512                           ;RFID.c: 701: return STATUS_INTERNAL_ERROR;
  2513  0256' 3006               	movlw	6
  2514  0257' 2B45'              	goto	L14
  2515  0258'                    l4307:	
  2516                           
  2517                           ;RFID.c: 702: }
  2518                           ;RFID.c: 704: currentLevelKnownBits = collisionPos;
  2519  0258' 1683               	bsf	3,5	;RP0=1, select bank1
  2520  0259' 1303               	bcf	3,6	;RP1=0, select bank1
  2521  025A' 0800'              	movf	PICC_Select@collisionPos^(0+128),w
  2522  025B' 1283               	bcf	3,5	;RP0=0, select bank0
  2523  025C' 1303               	bcf	3,6	;RP1=0, select bank0
  2524  025D' 00BF'              	movwf	??_PICC_Select
  2525  025E' 083F'              	movf	??_PICC_Select,w
  2526  025F' 1683               	bsf	3,5	;RP0=1, select bank1
  2527  0260' 1303               	bcf	3,6	;RP1=0, select bank1
  2528  0261' 0080'              	movwf	PICC_Select@currentLevelKnownBits^(0+128)
  2529                           
  2530                           ;RFID.c: 705: count = (currentLevelKnownBits - 1) % 8;
  2531  0262' 0800'              	movf	PICC_Select@currentLevelKnownBits^(0+128),w
  2532  0263' 3EFF               	addlw	255
  2533  0264' 3907               	andlw	7
  2534  0265' 1283               	bcf	3,5	;RP0=0, select bank0
  2535  0266' 1303               	bcf	3,6	;RP1=0, select bank0
  2536  0267' 00BF'              	movwf	??_PICC_Select
  2537  0268' 083F'              	movf	??_PICC_Select,w
  2538  0269' 1683               	bsf	3,5	;RP0=1, select bank1
  2539  026A' 1303               	bcf	3,6	;RP1=0, select bank1
  2540  026B' 0080'              	movwf	PICC_Select@count^(0+128)
  2541                           
  2542                           ;RFID.c: 706: index = 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0);
  2543  026C' 3008               	movlw	8
  2544  026D' 1283               	bcf	3,5	;RP0=0, select bank0
  2545  026E' 1303               	bcf	3,6	;RP1=0, select bank0
  2546  026F' 0080'              	movwf	___awdiv@divisor
  2547  0270' 3000               	movlw	0
  2548  0271' 0081'              	movwf	___awdiv@divisor+1
  2549  0272' 1683               	bsf	3,5	;RP0=1, select bank1
  2550  0273' 1303               	bcf	3,6	;RP1=0, select bank1
  2551  0274' 0800'              	movf	PICC_Select@currentLevelKnownBits^(0+128),w
  2552  0275' 1283               	bcf	3,5	;RP0=0, select bank0
  2553  0276' 1303               	bcf	3,6	;RP1=0, select bank0
  2554  0277' 00BF'              	movwf	??_PICC_Select
  2555  0278' 01C0'              	clrf	??_PICC_Select+1
  2556  0279' 083F'              	movf	??_PICC_Select,w
  2557  027A' 0082'              	movwf	___awdiv@dividend
  2558  027B' 0840'              	movf	??_PICC_Select+1,w
  2559  027C' 0083'              	movwf	___awdiv@dividend+1
  2560  027D' 2000'              	fcall	___awdiv
  2561  027E' 1283               	bcf	3,5	;RP0=0, select bank0
  2562  027F' 1303               	bcf	3,6	;RP1=0, select bank0
  2563  0280' 0800'              	movf	?___awdiv,w
  2564  0281' 00C1'              	movwf	??_PICC_Select+2
  2565  0282' 0801'              	movf	?___awdiv+1,w
  2566  0283' 00C2'              	movwf	??_PICC_Select+3
  2567  0284' 3000               	movlw	0
  2568  0285' 1683               	bsf	3,5	;RP0=1, select bank1
  2569  0286' 1303               	bcf	3,6	;RP1=0, select bank1
  2570  0287' 0880'              	movf	PICC_Select@count^(0+128),f
  2571  0288' 1D03               	skipz
  2572  0289' 3001               	movlw	1
  2573  028A' 1283               	bcf	3,5	;RP0=0, select bank0
  2574  028B' 1303               	bcf	3,6	;RP1=0, select bank0
  2575  028C' 0741'              	addwf	??_PICC_Select+2,w
  2576  028D' 3E01               	addlw	1
  2577  028E' 00C3'              	movwf	??_PICC_Select+4
  2578  028F' 0843'              	movf	??_PICC_Select+4,w
  2579  0290' 1683               	bsf	3,5	;RP0=1, select bank1
  2580  0291' 1303               	bcf	3,6	;RP1=0, select bank1
  2581  0292' 0080'              	movwf	PICC_Select@index^(0+128)
  2582                           
  2583                           ;RFID.c: 707: buffer[index] |= (1 << count);
  2584  0293' 3001               	movlw	1
  2585  0294' 1283               	bcf	3,5	;RP0=0, select bank0
  2586  0295' 1303               	bcf	3,6	;RP1=0, select bank0
  2587  0296' 00BF'              	movwf	??_PICC_Select
  2588  0297' 1683               	bsf	3,5	;RP0=1, select bank1
  2589  0298' 1303               	bcf	3,6	;RP1=0, select bank1
  2590  0299' 0A00'              	incf	PICC_Select@count^(0+128),w
  2591  029A' 1283               	bcf	3,5	;RP0=0, select bank0
  2592  029B' 1303               	bcf	3,6	;RP1=0, select bank0
  2593  029C' 2A9F'              	goto	u4974
  2594  029D'                    u4975:	
  2595  029D' 1003               	clrc
  2596  029E' 0DBF'              	rlf	??_PICC_Select,f
  2597  029F'                    u4974:	
  2598  029F' 3EFF               	addlw	-1
  2599  02A0' 1D03               	skipz
  2600  02A1' 2A9D'              	goto	u4975
  2601  02A2' 083F'              	movf	??_PICC_Select,w
  2602  02A3' 00C0'              	movwf	??_PICC_Select+1
  2603  02A4' 1683               	bsf	3,5	;RP0=1, select bank1
  2604  02A5' 1303               	bcf	3,6	;RP1=0, select bank1
  2605  02A6' 0800'              	movf	PICC_Select@index^(0+128),w
  2606  02A7' 3E00'              	addlw	PICC_Select@buffer& (0+255)
  2607  02A8' 0084               	movwf	4
  2608  02A9' 1283               	bcf	3,5	;RP0=0, select bank0
  2609  02AA' 1303               	bcf	3,6	;RP1=0, select bank0
  2610  02AB' 0840'              	movf	??_PICC_Select+1,w
  2611  02AC' 1383               	bcf	3,7	;select IRP bank1
  2612  02AD' 0480               	iorwf	0,f
  2613                           
  2614                           ;RFID.c: 708: }
  2615  02AE' 293C'              	goto	l242
  2616  02AF'                    l4315:	
  2617                           
  2618                           ;RFID.c: 709: else if (result != STATUS_OK) {
  2619  02AF' 1683               	bsf	3,5	;RP0=1, select bank1
  2620  02B0' 1303               	bcf	3,6	;RP1=0, select bank1
  2621  02B1' 0800'              	movf	PICC_Select@result^(0+128),w
  2622  02B2' 3A01               	xorlw	1
  2623  02B3' 1D03               	btfss	3,2
  2624  02B4' 2B32'              	goto	L15
  2625                           
  2626                           ;RFID.c: 712: else {
  2627                           ;RFID.c: 713: if (currentLevelKnownBits >= 32) {
  2628                           
  2629                           ;RFID.c: 711: }
  2630                           
  2631                           ;RFID.c: 710: return result;
  2632  02B5' 3020               	movlw	32
  2633  02B6' 1683               	bsf	3,5	;RP0=1, select bank1
  2634  02B7' 1303               	bcf	3,6	;RP1=0, select bank1
  2635  02B8' 0200'              	subwf	PICC_Select@currentLevelKnownBits^(0+128),w
  2636  02B9' 1C03               	skipc
  2637  02BA' 2ABE'              	goto	l4327
  2638                           
  2639                           ;RFID.c: 714: selectDone = 1;
  2640  02BB' 0180'              	clrf	PICC_Select@selectDone^(0+128)
  2641  02BC' 0A80'              	incf	PICC_Select@selectDone^(0+128),f
  2642                           
  2643                           ;RFID.c: 716: }
  2644  02BD' 293C'              	goto	l242
  2645  02BE'                    l4327:	
  2646                           
  2647                           ;RFID.c: 717: else {
  2648                           ;RFID.c: 719: currentLevelKnownBits = 32;
  2649  02BE' 3020               	movlw	32
  2650  02BF' 1283               	bcf	3,5	;RP0=0, select bank0
  2651  02C0' 1303               	bcf	3,6	;RP1=0, select bank0
  2652  02C1' 00BF'              	movwf	??_PICC_Select
  2653  02C2' 083F'              	movf	??_PICC_Select,w
  2654  02C3' 1683               	bsf	3,5	;RP0=1, select bank1
  2655  02C4' 1303               	bcf	3,6	;RP1=0, select bank1
  2656  02C5' 0080'              	movwf	PICC_Select@currentLevelKnownBits^(0+128)
  2657  02C6' 293C'              	goto	l242
  2658  02C7'                    l4329:	
  2659                           
  2660                           ;RFID.c: 721: }
  2661                           ;RFID.c: 722: }
  2662                           ;RFID.c: 723: }
  2663                           ;RFID.c: 728: index = (buffer[2] == PICC_CMD_CT) ? 3 : 2;
  2664  02C7' 0802'              	movf	(PICC_Select@buffer^(0+128)+2),w
  2665  02C8' 3A88               	xorlw	136
  2666  02C9' 1903               	skipnz
  2667  02CA' 2ACD'              	goto	l4333
  2668  02CB' 3002               	movlw	2
  2669  02CC' 2ACE'              	goto	L10
  2670  02CD'                    l4333:	
  2671  02CD' 3003               	movlw	3
  2672  02CE'                    L10:	
  2673  02CE' 0080'              	movwf	_PICC_Select$435^(0+128)
  2674  02CF' 3000               	movlw	0
  2675  02D0' 0081'              	movwf	(_PICC_Select$435^(0+128)+1)
  2676  02D1' 0800'              	movf	_PICC_Select$435^(0+128),w
  2677  02D2' 1283               	bcf	3,5	;RP0=0, select bank0
  2678  02D3' 1303               	bcf	3,6	;RP1=0, select bank0
  2679  02D4' 00BF'              	movwf	??_PICC_Select
  2680  02D5' 083F'              	movf	??_PICC_Select,w
  2681  02D6' 1683               	bsf	3,5	;RP0=1, select bank1
  2682  02D7' 1303               	bcf	3,6	;RP1=0, select bank1
  2683  02D8' 0080'              	movwf	PICC_Select@index^(0+128)
  2684                           
  2685                           ;RFID.c: 729: bytesToCopy = (buffer[2] == PICC_CMD_CT) ? 3 : 4;
  2686  02D9' 0802'              	movf	(PICC_Select@buffer^(0+128)+2),w
  2687  02DA' 3A88               	xorlw	136
  2688  02DB' 1903               	skipnz
  2689  02DC' 2ADF'              	goto	l4337
  2690  02DD' 3004               	movlw	4
  2691  02DE' 2AE0'              	goto	L11
  2692  02DF'                    l4337:	
  2693  02DF' 3003               	movlw	3
  2694  02E0'                    L11:	
  2695  02E0' 0080'              	movwf	_PICC_Select$436^(0+128)
  2696  02E1' 3000               	movlw	0
  2697  02E2' 0081'              	movwf	(_PICC_Select$436^(0+128)+1)
  2698  02E3' 0800'              	movf	_PICC_Select$436^(0+128),w
  2699  02E4' 1283               	bcf	3,5	;RP0=0, select bank0
  2700  02E5' 1303               	bcf	3,6	;RP1=0, select bank0
  2701  02E6' 00BF'              	movwf	??_PICC_Select
  2702  02E7' 083F'              	movf	??_PICC_Select,w
  2703  02E8' 1683               	bsf	3,5	;RP0=1, select bank1
  2704  02E9' 1303               	bcf	3,6	;RP1=0, select bank1
  2705  02EA' 0080'              	movwf	PICC_Select@bytesToCopy^(0+128)
  2706                           
  2707                           ;RFID.c: 730: for (count = 0; count < bytesToCopy; count++) {
  2708  02EB' 0180'              	clrf	PICC_Select@count^(0+128)
  2709  02EC'                    l4347:	
  2710  02EC' 0800'              	movf	PICC_Select@bytesToCopy^(0+128),w
  2711  02ED' 0200'              	subwf	PICC_Select@count^(0+128),w
  2712  02EE' 1803               	btfsc	3,0
  2713  02EF' 2B14'              	goto	l4349
  2714                           
  2715                           ;RFID.c: 731: uid->uidByte[uidIndex + count] = buffer[index++];
  2716  02F0' 0800'              	movf	PICC_Select@index^(0+128),w
  2717  02F1' 3E00'              	addlw	PICC_Select@buffer& (0+255)
  2718  02F2' 0084               	movwf	4
  2719  02F3' 1383               	bcf	3,7	;select IRP bank1
  2720  02F4' 0800               	movf	0,w
  2721  02F5' 1283               	bcf	3,5	;RP0=0, select bank0
  2722  02F6' 1303               	bcf	3,6	;RP1=0, select bank0
  2723  02F7' 00BF'              	movwf	??_PICC_Select
  2724  02F8' 1683               	bsf	3,5	;RP0=1, select bank1
  2725  02F9' 1303               	bcf	3,6	;RP1=0, select bank1
  2726  02FA' 0800'              	movf	PICC_Select@count^(0+128),w
  2727  02FB' 0700'              	addwf	PICC_Select@uidIndex^(0+128),w
  2728  02FC' 3E01               	addlw	1
  2729  02FD' 1283               	bcf	3,5	;RP0=0, select bank0
  2730  02FE' 1303               	bcf	3,6	;RP1=0, select bank0
  2731  02FF' 073C'              	addwf	PICC_Select@uid,w
  2732  0300' 00C0'              	movwf	??_PICC_Select+1
  2733  0301' 0840'              	movf	??_PICC_Select+1,w
  2734  0302' 0084               	movwf	4
  2735  0303' 083F'              	movf	??_PICC_Select,w
  2736  0304' 0080               	movwf	0
  2737  0305' 3001               	movlw	1
  2738  0306' 00BF'              	movwf	??_PICC_Select
  2739  0307' 083F'              	movf	??_PICC_Select,w
  2740  0308' 1683               	bsf	3,5	;RP0=1, select bank1
  2741  0309' 1303               	bcf	3,6	;RP1=0, select bank1
  2742  030A' 0780'              	addwf	PICC_Select@index^(0+128),f
  2743  030B' 3001               	movlw	1
  2744  030C' 1283               	bcf	3,5	;RP0=0, select bank0
  2745  030D' 1303               	bcf	3,6	;RP1=0, select bank0
  2746  030E' 00BF'              	movwf	??_PICC_Select
  2747  030F' 083F'              	movf	??_PICC_Select,w
  2748  0310' 1683               	bsf	3,5	;RP0=1, select bank1
  2749  0311' 1303               	bcf	3,6	;RP1=0, select bank1
  2750  0312' 0780'              	addwf	PICC_Select@count^(0+128),f
  2751  0313' 2AEC'              	goto	l4347
  2752  0314'                    l4349:	
  2753                           
  2754                           ;RFID.c: 732: }
  2755                           ;RFID.c: 735: if (responseLength != 3 || txLastBits != 0) {
  2756  0314' 0800'              	movf	PICC_Select@responseLength^(0+128),w
  2757  0315' 3A03               	xorlw	3
  2758  0316' 1903               	btfsc	3,2
  2759  0317' 0800'              	movf	PICC_Select@txLastBits^(0+128),w
  2760  0318' 1903               	btfsc	3,2
  2761  0319' 2B1C'              	goto	l4357
  2762                           
  2763                           ;RFID.c: 736: return STATUS_ERROR;
  2764  031A' 3002               	movlw	2
  2765  031B' 2B45'              	goto	L14
  2766  031C'                    l4357:	
  2767                           
  2768                           ;RFID.c: 737: }
  2769                           ;RFID.c: 739: result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
  2770  031C' 1283               	bcf	3,5	;RP0=0, select bank0
  2771  031D' 018D'              	clrf	PCD_CalculateCRC@length
  2772  031E' 0A8D'              	incf	PCD_CalculateCRC@length,f
  2773  031F' 3000'              	movlw	(PICC_Select@buffer+2)& (0+255)
  2774  0320' 00BF'              	movwf	??_PICC_Select
  2775  0321' 083F'              	movf	??_PICC_Select,w
  2776  0322' 008E'              	movwf	PCD_CalculateCRC@result
  2777  0323' 1683               	bsf	3,5	;RP0=1, select bank1
  2778  0324' 1303               	bcf	3,6	;RP1=0, select bank1
  2779  0325' 0800'              	movf	PICC_Select@responseBuffer^(0+128),w
  2780  0326' 2000'              	fcall	_PCD_CalculateCRC
  2781  0327' 1283               	bcf	3,5	;RP0=0, select bank0
  2782  0328' 1303               	bcf	3,6	;RP1=0, select bank0
  2783  0329' 00C0'              	movwf	??_PICC_Select+1
  2784  032A' 0840'              	movf	??_PICC_Select+1,w
  2785  032B' 1683               	bsf	3,5	;RP0=1, select bank1
  2786  032C' 1303               	bcf	3,6	;RP1=0, select bank1
  2787  032D' 0080'              	movwf	PICC_Select@result^(0+128)
  2788                           
  2789                           ;RFID.c: 740: if (result != STATUS_OK) {
  2790  032E' 0800'              	movf	PICC_Select@result^(0+128),w
  2791  032F' 3A01               	xorlw	1
  2792  0330' 1903               	skipnz
  2793  0331' 2B34'              	goto	l4365
  2794  0332'                    L15:	
  2795                           
  2796                           ;RFID.c: 741: return result;
  2797  0332' 0800'              	movf	PICC_Select@result^(0+128),w
  2798  0333' 2B45'              	goto	L14
  2799  0334'                    l4365:	
  2800                           
  2801                           ;RFID.c: 742: }
  2802                           ;RFID.c: 743: if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) 
      +                          {
  2803  0334' 1683               	bsf	3,5	;RP0=1, select bank1
  2804  0335' 1303               	bcf	3,6	;RP1=0, select bank1
  2805  0336' 0A00'              	incf	PICC_Select@responseBuffer^(0+128),w
  2806  0337' 0084               	movwf	4
  2807  0338' 0802'              	movf	(PICC_Select@buffer^(0+128)+2),w
  2808  0339' 1383               	bcf	3,7	;select IRP bank0
  2809  033A' 0600               	xorwf	0,w
  2810  033B' 1D03               	skipz
  2811  033C' 2B44'              	goto	l4369
  2812  033D' 0800'              	movf	PICC_Select@responseBuffer^(0+128),w
  2813  033E' 3E02               	addlw	2
  2814  033F' 0084               	movwf	4
  2815  0340' 0803'              	movf	(PICC_Select@buffer^(0+128)+3),w
  2816  0341' 0600               	xorwf	0,w
  2817  0342' 1903               	skipnz
  2818  0343' 2B4B'              	goto	l4373
  2819  0344'                    l4369:	
  2820                           
  2821                           ;RFID.c: 744: return STATUS_CRC_WRONG;
  2822  0344' 3008               	movlw	8
  2823  0345'                    L14:	
  2824  0345' 1283               	bcf	3,5	;RP0=0, select bank0
  2825  0346' 1303               	bcf	3,6	;RP1=0, select bank0
  2826  0347'                    L13:	
  2827  0347' 00BF'              	movwf	??_PICC_Select
  2828  0348' 083F'              	movf	??_PICC_Select,w
  2829  0349' 00BC'              	movwf	?_PICC_Select
  2830  034A' 2B81'              	goto	l217
  2831  034B'                    l4373:	
  2832                           
  2833                           ;RFID.c: 745: }
  2834                           ;RFID.c: 746: if (responseBuffer[0] & 0x04) {
  2835  034B' 1683               	bsf	3,5	;RP0=1, select bank1
  2836  034C' 1303               	bcf	3,6	;RP1=0, select bank1
  2837  034D' 0800'              	movf	PICC_Select@responseBuffer^(0+128),w
  2838  034E' 0084               	movwf	4
  2839  034F' 1D00               	btfss	0,2
  2840  0350' 2B5A'              	goto	l275
  2841                           
  2842                           ;RFID.c: 747: cascadeLevel++;
  2843  0351' 3001               	movlw	1
  2844  0352' 1283               	bcf	3,5	;RP0=0, select bank0
  2845  0353' 1303               	bcf	3,6	;RP1=0, select bank0
  2846  0354' 00BF'              	movwf	??_PICC_Select
  2847  0355' 083F'              	movf	??_PICC_Select,w
  2848  0356' 1683               	bsf	3,5	;RP0=1, select bank1
  2849  0357' 1303               	bcf	3,6	;RP1=0, select bank1
  2850  0358' 0780'              	addwf	PICC_Select@cascadeLevel^(0+128),f
  2851                           
  2852                           ;RFID.c: 748: }
  2853  0359' 2B67'              	goto	l4379
  2854  035A'                    l275:	
  2855                           
  2856                           ;RFID.c: 749: else {
  2857                           ;RFID.c: 750: uidComplete = 1;
  2858  035A' 0180'              	clrf	PICC_Select@uidComplete^(0+128)
  2859  035B' 0A80'              	incf	PICC_Select@uidComplete^(0+128),f
  2860                           
  2861                           ;RFID.c: 751: uid->sak = responseBuffer[0];
  2862  035C' 0800'              	movf	PICC_Select@responseBuffer^(0+128),w
  2863  035D' 0084               	movwf	4
  2864  035E' 0800               	movf	0,w
  2865  035F' 1283               	bcf	3,5	;RP0=0, select bank0
  2866  0360' 1303               	bcf	3,6	;RP1=0, select bank0
  2867  0361' 00BF'              	movwf	??_PICC_Select
  2868  0362' 083C'              	movf	PICC_Select@uid,w
  2869  0363' 3E0B               	addlw	11
  2870  0364' 0084               	movwf	4
  2871  0365' 083F'              	movf	??_PICC_Select,w
  2872  0366' 0080               	movwf	0
  2873  0367'                    l4379:	
  2874  0367' 1683               	bsf	3,5	;RP0=1, select bank1
  2875  0368' 1303               	bcf	3,6	;RP1=0, select bank1
  2876  0369' 0800'              	movf	PICC_Select@uidComplete^(0+128),w
  2877  036A' 1903               	btfsc	3,2
  2878  036B' 287A'              	goto	l4201
  2879                           
  2880                           ;RFID.c: 752: }
  2881                           ;RFID.c: 753: }
  2882                           ;RFID.c: 756: uid->size = 3 * cascadeLevel + 1;
  2883  036C' 3003               	movlw	3
  2884  036D' 1283               	bcf	3,5	;RP0=0, select bank0
  2885  036E' 1303               	bcf	3,6	;RP1=0, select bank0
  2886  036F' 00BF'              	movwf	??_PICC_Select
  2887  0370' 083F'              	movf	??_PICC_Select,w
  2888  0371' 0085'              	movwf	___bmul@multiplicand
  2889  0372' 1683               	bsf	3,5	;RP0=1, select bank1
  2890  0373' 1303               	bcf	3,6	;RP1=0, select bank1
  2891  0374' 0800'              	movf	PICC_Select@cascadeLevel^(0+128),w
  2892  0375' 2000'              	fcall	___bmul
  2893  0376' 3E01               	addlw	1
  2894  0377' 1283               	bcf	3,5	;RP0=0, select bank0
  2895  0378' 1303               	bcf	3,6	;RP1=0, select bank0
  2896  0379' 00C0'              	movwf	??_PICC_Select+1
  2897  037A' 083C'              	movf	PICC_Select@uid,w
  2898  037B' 0084               	movwf	4
  2899  037C' 0840'              	movf	??_PICC_Select+1,w
  2900  037D' 1383               	bcf	3,7	;select IRP bank0
  2901  037E' 0080               	movwf	0
  2902                           
  2903                           ;RFID.c: 758: return STATUS_OK;
  2904  037F' 01BC'              	clrf	?_PICC_Select
  2905  0380' 0ABC'              	incf	?_PICC_Select,f
  2906  0381'                    l217:	
  2907  0381' 3000'              	movlw	high __pjmp_tab__PICC_Select
  2908  0382' 008A               	movwf	10
  2909  0383' 0800'              	movf	(?_PICC_Select+2)^0,w
  2910  0384' 0082               	movwf	2
  2911  0385'                    __end_of_PICC_Select:	
  2912                           
  2913                           	psect	text6
  2914  0000'                    __ptext6:	
  2915 ;; *************** function ___bmul *****************
  2916 ;; Defined at:
  2917 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul8.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;  multiplier      1    wreg     unsigned char 
  2920 ;;  multiplicand    1    5[COMMON] unsigned char 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;  multiplier      1    1[BANK0 ] unsigned char 
  2923 ;;  product         1    0[BANK0 ] unsigned char 
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      unsigned char 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2933 ;;      Params:         1       0       0       0
  2934 ;;      Locals:         0       2       0       0
  2935 ;;      Temps:          1       0       0       0
  2936 ;;      Totals:         2       2       0       0
  2937 ;;Total ram usage:        4 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    2
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_PICC_Select
  2944 ;;		_PICC_DumpMifareClassicSectorToSerial
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           
  2949                           ;psect for function ___bmul
  2950  0000'                    ___bmul:	
  2951                           
  2952                           ;incstack = 0
  2953                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2954                           ;___bmul@multiplier stored from wreg
  2955  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2956  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2957  0002' 0081'              	movwf	___bmul@multiplier
  2958  0003' 0180'              	clrf	___bmul@product
  2959  0004'                    l4063:	
  2960  0004' 1C01'              	btfss	___bmul@multiplier,0
  2961  0005' 280A'              	goto	l4067
  2962  0006' 0805'              	movf	___bmul@multiplicand,w
  2963  0007' 0086'              	movwf	??___bmul
  2964  0008' 0806'              	movf	??___bmul,w
  2965  0009' 0780'              	addwf	___bmul@product,f
  2966  000A'                    l4067:	
  2967  000A' 1003               	clrc
  2968  000B' 0D85'              	rlf	___bmul@multiplicand,f
  2969  000C' 1003               	clrc
  2970  000D' 0C81'              	rrf	___bmul@multiplier,f
  2971  000E' 0881'              	movf	___bmul@multiplier,f
  2972  000F' 1D03               	skipz
  2973  0010' 2804'              	goto	l4063
  2974  0011' 0800'              	movf	___bmul@product,w
  2975  0012' 0008               	return
  2976  0013'                    __end_of___bmul:	
  2977                           
  2978                           	psect	text7
  2979  0000'                    __ptext7:	
  2980 ;; *************** function ___awdiv *****************
  2981 ;; Defined at:
  2982 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  divisor         2    0[BANK0 ] int 
  2985 ;;  dividend        2    2[BANK0 ] int 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  quotient        2    6[BANK0 ] int 
  2988 ;;  sign            1    5[BANK0 ] unsigned char 
  2989 ;;  counter         1    4[BANK0 ] unsigned char 
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  2    0[BANK0 ] int 
  2992 ;; Registers used:
  2993 ;;		wreg, status,2, status,0
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2999 ;;      Params:         0       4       0       0
  3000 ;;      Locals:         0       4       0       0
  3001 ;;      Temps:          1       0       0       0
  3002 ;;      Totals:         1       8       0       0
  3003 ;;Total ram usage:        9 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    2
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		_PICC_Select
  3010 ;;		_PICC_DumpMifareClassicSectorToSerial
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           
  3015                           ;psect for function ___awdiv
  3016  0000'                    ___awdiv:	
  3017                           
  3018                           ;incstack = 0
  3019                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3020  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3021  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3022  0002' 0185'              	clrf	___awdiv@sign
  3023  0003' 1F81'              	btfss	___awdiv@divisor+1,7
  3024  0004' 280C'              	goto	l4085
  3025  0005' 0980'              	comf	___awdiv@divisor,f
  3026  0006' 0981'              	comf	___awdiv@divisor+1,f
  3027  0007' 0A80'              	incf	___awdiv@divisor,f
  3028  0008' 1903               	skipnz
  3029  0009' 0A81'              	incf	___awdiv@divisor+1,f
  3030  000A' 0185'              	clrf	___awdiv@sign
  3031  000B' 0A85'              	incf	___awdiv@sign,f
  3032  000C'                    l4085:	
  3033  000C' 1F83'              	btfss	___awdiv@dividend+1,7
  3034  000D' 2817'              	goto	l4091
  3035  000E' 0982'              	comf	___awdiv@dividend,f
  3036  000F' 0983'              	comf	___awdiv@dividend+1,f
  3037  0010' 0A82'              	incf	___awdiv@dividend,f
  3038  0011' 1903               	skipnz
  3039  0012' 0A83'              	incf	___awdiv@dividend+1,f
  3040  0013' 3001               	movlw	1
  3041  0014' 0085'              	movwf	??___awdiv
  3042  0015' 0805'              	movf	??___awdiv,w
  3043  0016' 0685'              	xorwf	___awdiv@sign,f
  3044  0017'                    l4091:	
  3045  0017' 0186'              	clrf	___awdiv@quotient
  3046  0018' 0187'              	clrf	___awdiv@quotient+1
  3047  0019' 0801'              	movf	___awdiv@divisor+1,w
  3048  001A' 0400'              	iorwf	___awdiv@divisor,w
  3049  001B' 1903               	skipnz
  3050  001C' 284E'              	goto	l4113
  3051  001D' 0184'              	clrf	___awdiv@counter
  3052  001E' 0A84'              	incf	___awdiv@counter,f
  3053  001F'                    l4101:	
  3054  001F' 1B81'              	btfsc	___awdiv@divisor+1,7
  3055  0020' 282D'              	goto	l4103
  3056  0021' 3001               	movlw	1
  3057  0022'                    u4645:	
  3058  0022' 1003               	clrc
  3059  0023' 0D80'              	rlf	___awdiv@divisor,f
  3060  0024' 0D81'              	rlf	___awdiv@divisor+1,f
  3061  0025' 3EFF               	addlw	-1
  3062  0026' 1D03               	skipz
  3063  0027' 2822'              	goto	u4645
  3064  0028' 3001               	movlw	1
  3065  0029' 0085'              	movwf	??___awdiv
  3066  002A' 0805'              	movf	??___awdiv,w
  3067  002B' 0784'              	addwf	___awdiv@counter,f
  3068  002C' 281F'              	goto	l4101
  3069  002D'                    l4103:	
  3070  002D' 3001               	movlw	1
  3071  002E'                    u4665:	
  3072  002E' 1003               	clrc
  3073  002F' 0D86'              	rlf	___awdiv@quotient,f
  3074  0030' 0D87'              	rlf	___awdiv@quotient+1,f
  3075  0031' 3EFF               	addlw	-1
  3076  0032' 1D03               	skipz
  3077  0033' 282E'              	goto	u4665
  3078  0034' 0801'              	movf	___awdiv@divisor+1,w
  3079  0035' 0203'              	subwf	___awdiv@dividend+1,w
  3080  0036' 1D03               	skipz
  3081  0037' 283A'              	goto	u4675
  3082  0038' 0800'              	movf	___awdiv@divisor,w
  3083  0039' 0202'              	subwf	___awdiv@dividend,w
  3084  003A'                    u4675:	
  3085  003A' 1C03               	skipc
  3086  003B' 2843'              	goto	l4109
  3087  003C' 0800'              	movf	___awdiv@divisor,w
  3088  003D' 0282'              	subwf	___awdiv@dividend,f
  3089  003E' 0801'              	movf	___awdiv@divisor+1,w
  3090  003F' 1C03               	skipc
  3091  0040' 0383'              	decf	___awdiv@dividend+1,f
  3092  0041' 0283'              	subwf	___awdiv@dividend+1,f
  3093  0042' 1406'              	bsf	___awdiv@quotient,0
  3094  0043'                    l4109:	
  3095  0043' 3001               	movlw	1
  3096  0044'                    u4685:	
  3097  0044' 1003               	clrc
  3098  0045' 0C81'              	rrf	___awdiv@divisor+1,f
  3099  0046' 0C80'              	rrf	___awdiv@divisor,f
  3100  0047' 3EFF               	addlw	-1
  3101  0048' 1D03               	skipz
  3102  0049' 2844'              	goto	u4685
  3103  004A' 3001               	movlw	1
  3104  004B' 0284'              	subwf	___awdiv@counter,f
  3105  004C' 1D03               	btfss	3,2
  3106  004D' 282D'              	goto	l4103
  3107  004E'                    l4113:	
  3108  004E' 0805'              	movf	___awdiv@sign,w
  3109  004F' 1903               	btfsc	3,2
  3110  0050' 2856'              	goto	l4117
  3111  0051' 0986'              	comf	___awdiv@quotient,f
  3112  0052' 0987'              	comf	___awdiv@quotient+1,f
  3113  0053' 0A86'              	incf	___awdiv@quotient,f
  3114  0054' 1903               	skipnz
  3115  0055' 0A87'              	incf	___awdiv@quotient+1,f
  3116  0056'                    l4117:	
  3117  0056' 0807'              	movf	___awdiv@quotient+1,w
  3118  0057' 0181'              	clrf	?___awdiv+1
  3119  0058' 0781'              	addwf	?___awdiv+1,f
  3120  0059' 0806'              	movf	___awdiv@quotient,w
  3121  005A' 0180'              	clrf	?___awdiv
  3122  005B' 0780'              	addwf	?___awdiv,f
  3123  005C' 0008               	return
  3124  005D'                    __end_of___awdiv:	
  3125                           
  3126                           	psect	text8
  3127  0000'                    __ptext8:	
  3128 ;; *************** function _PCD_TransceiveData *****************
  3129 ;; Defined at:
  3130 ;;		line 469 in file "RFID.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  sendData        1    wreg     PTR unsigned char 
  3133 ;;		 -> MIFARE_SetUid@block0_buffer(18), MIFARE_OpenUidBackdoor@cmd(1), PICC_DumpMifareUltralightToSerial@buffer(18), PI
      +CC_DumpMifareClassicSectorToSerial@buffer(18), 
  3134 ;;		 -> MIFARE_GetValue@buffer(18), PICC_HaltA@buffer(4), PICC_Select@buffer(9), PICC_REQA_or_WUPA@command(1), 
  3135 ;;  sendLen         1   44[BANK0 ] unsigned char 
  3136 ;;  backData        1   45[BANK0 ] PTR unsigned char 
  3137 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  3138 ;;		 -> PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSerial@buffer(18), MIFARE_GetValue@b
      +uffer(18), PICC_Select@buffer(9), 
  3139 ;;		 -> NULL(0), 
  3140 ;;  backLen         1   46[BANK0 ] PTR unsigned char 
  3141 ;;		 -> PICC_IsNewCardPresent@bufferSize(1), MIFARE_SetUid@atqa_size(1), MIFARE_SetUid@byteCount(1), MIFARE_OpenUidBackd
      +oor@received(1), 
  3142 ;;		 -> PICC_DumpMifareUltralightToSerial@byteCount(1), PICC_DumpMifareClassicSectorToSerial@byteCount(1), MIFARE_GetVal
      +ue@size(1), PICC_Select@responseLength(1), 
  3143 ;;		 -> NULL(0), 
  3144 ;;  validBits       1   47[BANK0 ] PTR unsigned char 
  3145 ;;		 -> MIFARE_OpenUidBackdoor@validBits(1), PICC_Select@txLastBits(1), PICC_REQA_or_WUPA@validBits(1), NULL(0), 
  3146 ;;  rxAlign         1   48[BANK0 ] unsigned char 
  3147 ;;  checkCRC        1   49[BANK0 ] unsigned char 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  sendData        1   59[BANK0 ] PTR unsigned char 
  3150 ;;		 -> MIFARE_SetUid@block0_buffer(18), MIFARE_OpenUidBackdoor@cmd(1), PICC_DumpMifareUltralightToSerial@buffer(18), PI
      +CC_DumpMifareClassicSectorToSerial@buffer(18), 
  3151 ;;		 -> MIFARE_GetValue@buffer(18), PICC_HaltA@buffer(4), PICC_Select@buffer(9), PICC_REQA_or_WUPA@command(1), 
  3152 ;;  waitIRq         1   58[BANK0 ] unsigned char 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      unsigned char 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3162 ;;      Params:         0       6       0       0
  3163 ;;      Locals:         0       2       0       0
  3164 ;;      Temps:          0       8       0       0
  3165 ;;      Totals:         0      16       0       0
  3166 ;;Total ram usage:       16 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    7
  3169 ;; This function calls:
  3170 ;;		_PCD_CommunicateWithPICC
  3171 ;; This function is called by:
  3172 ;;		_PICC_Select
  3173 ;;		_PICC_REQA_or_WUPA
  3174 ;;		_PICC_HaltA
  3175 ;;		_MIFARE_Read
  3176 ;;		_MIFARE_OpenUidBackdoor
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           
  3181                           ;psect for function _PCD_TransceiveData
  3182  0000'                    _PCD_TransceiveData:	
  3183                           
  3184                           ;incstack = 0
  3185                           ; Regs used in _PCD_TransceiveData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3186                           ;PCD_TransceiveData@sendData stored from wreg
  3187  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3188  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3189  0002' 00BB'              	movwf	PCD_TransceiveData@sendData
  3190                           
  3191                           ;RFID.c: 477: unsigned char waitIRq = 0x30;
  3192  0003' 3030               	movlw	48
  3193  0004' 00B2'              	movwf	??_PCD_TransceiveData
  3194  0005' 0832'              	movf	??_PCD_TransceiveData,w
  3195  0006' 00BA'              	movwf	PCD_TransceiveData@waitIRq
  3196                           
  3197                           ;RFID.c: 478: return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen,
      +                           backData, backLen, validBits, rxAlign, checkCRC);
  3198  0007' 083A'              	movf	PCD_TransceiveData@waitIRq,w
  3199  0008' 00B2'              	movwf	??_PCD_TransceiveData
  3200  0009' 0832'              	movf	??_PCD_TransceiveData,w
  3201  000A' 0095'              	movwf	PCD_CommunicateWithPICC@waitIRq
  3202  000B' 083B'              	movf	PCD_TransceiveData@sendData,w
  3203  000C' 00B3'              	movwf	??_PCD_TransceiveData+1
  3204  000D' 0833'              	movf	??_PCD_TransceiveData+1,w
  3205  000E' 0096'              	movwf	PCD_CommunicateWithPICC@sendData
  3206  000F' 082C'              	movf	PCD_TransceiveData@sendLen,w
  3207  0010' 00B4'              	movwf	??_PCD_TransceiveData+2
  3208  0011' 0834'              	movf	??_PCD_TransceiveData+2,w
  3209  0012' 0097'              	movwf	PCD_CommunicateWithPICC@sendLen
  3210  0013' 082D'              	movf	PCD_TransceiveData@backData,w
  3211  0014' 00B5'              	movwf	??_PCD_TransceiveData+3
  3212  0015' 0835'              	movf	??_PCD_TransceiveData+3,w
  3213  0016' 0098'              	movwf	PCD_CommunicateWithPICC@backData
  3214  0017' 082E'              	movf	PCD_TransceiveData@backLen,w
  3215  0018' 00B6'              	movwf	??_PCD_TransceiveData+4
  3216  0019' 0836'              	movf	??_PCD_TransceiveData+4,w
  3217  001A' 0099'              	movwf	PCD_CommunicateWithPICC@backLen
  3218  001B' 082F'              	movf	PCD_TransceiveData@validBits,w
  3219  001C' 00B7'              	movwf	??_PCD_TransceiveData+5
  3220  001D' 0837'              	movf	??_PCD_TransceiveData+5,w
  3221  001E' 009A'              	movwf	PCD_CommunicateWithPICC@validBits
  3222  001F' 0830'              	movf	PCD_TransceiveData@rxAlign,w
  3223  0020' 00B8'              	movwf	??_PCD_TransceiveData+6
  3224  0021' 0838'              	movf	??_PCD_TransceiveData+6,w
  3225  0022' 009B'              	movwf	PCD_CommunicateWithPICC@rxAlign
  3226  0023' 0831'              	movf	PCD_TransceiveData@checkCRC,w
  3227  0024' 00B9'              	movwf	??_PCD_TransceiveData+7
  3228  0025' 0839'              	movf	??_PCD_TransceiveData+7,w
  3229  0026' 009C'              	movwf	PCD_CommunicateWithPICC@checkCRC
  3230  0027' 300C               	movlw	12
  3231  0028' 2000'              	fcall	_PCD_CommunicateWithPICC
  3232  0029' 0008               	return
  3233  002A'                    __end_of_PCD_TransceiveData:	
  3234                           
  3235                           	psect	text9
  3236  0000'                    __ptext9:	
  3237 ;; *************** function _PCD_CommunicateWithPICC *****************
  3238 ;; Defined at:
  3239 ;;		line 370 in file "RFID.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  command         1    wreg     unsigned char 
  3242 ;;  waitIRq         1   21[BANK0 ] unsigned char 
  3243 ;;  sendData        1   22[BANK0 ] PTR unsigned char 
  3244 ;;		 -> MIFARE_SetUid@block0_buffer(18), MIFARE_OpenUidBackdoor@cmd(1), PICC_DumpMifareUltralightToSerial@buffer(18), PI
      +CC_DumpMifareClassicSectorToSerial@buffer(18), 
  3245 ;;		 -> PCD_MIFARE_Transceive@cmdBuffer(18), MIFARE_GetValue@buffer(18), PCD_Authenticate@sendData(12), PICC_HaltA@buffe
      +r(4), 
  3246 ;;		 -> PICC_Select@buffer(9), PICC_REQA_or_WUPA@command(1), 
  3247 ;;  sendLen         1   23[BANK0 ] unsigned char 
  3248 ;;  backData        1   24[BANK0 ] PTR unsigned char 
  3249 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  3250 ;;		 -> PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSerial@buffer(18), PCD_MIFARE_Transc
      +eive@cmdBuffer(18), MIFARE_GetValue@buffer(18), 
  3251 ;;		 -> PICC_Select@buffer(9), NULL(0), 
  3252 ;;  backLen         1   25[BANK0 ] PTR unsigned char 
  3253 ;;		 -> PICC_IsNewCardPresent@bufferSize(1), MIFARE_SetUid@atqa_size(1), MIFARE_SetUid@byteCount(1), MIFARE_OpenUidBackd
      +oor@received(1), 
  3254 ;;		 -> PICC_DumpMifareUltralightToSerial@byteCount(1), PICC_DumpMifareClassicSectorToSerial@byteCount(1), PCD_MIFARE_Tr
      +ansceive@cmdBufferSize(1), MIFARE_GetValue@size(1), 
  3255 ;;		 -> PICC_Select@responseLength(1), NULL(0), 
  3256 ;;  validBits       1   26[BANK0 ] PTR unsigned char 
  3257 ;;		 -> MIFARE_OpenUidBackdoor@validBits(1), PCD_MIFARE_Transceive@validBits(1), PICC_Select@txLastBits(1), PICC_REQA_or
      +_WUPA@validBits(1), 
  3258 ;;		 -> NULL(0), 
  3259 ;;  rxAlign         1   27[BANK0 ] unsigned char 
  3260 ;;  checkCRC        1   28[BANK0 ] unsigned char 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  command         1   38[BANK0 ] unsigned char 
  3263 ;;  controlBuffe    2   39[BANK0 ] unsigned char [2]
  3264 ;;  i               2   32[BANK0 ] unsigned int 
  3265 ;;  n               1   43[BANK0 ] unsigned char 
  3266 ;;  _validBits      1   42[BANK0 ] unsigned char 
  3267 ;;  errorRegValu    1   41[BANK0 ] unsigned char 
  3268 ;;  bitFraming      1   35[BANK0 ] unsigned char 
  3269 ;;  txLastBits      1   34[BANK0 ] unsigned char 
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  1    wreg      unsigned char 
  3272 ;; Registers used:
  3273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3279 ;;      Params:         0       8       0       0
  3280 ;;      Locals:         0      12       0       0
  3281 ;;      Temps:          0       3       0       0
  3282 ;;      Totals:         0      23       0       0
  3283 ;;Total ram usage:       23 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    6
  3286 ;; This function calls:
  3287 ;;		_PCD_CalculateCRC
  3288 ;;		_PCD_ReadRegister
  3289 ;;		_PCD_ReadRegisterVector
  3290 ;;		_PCD_SetRegisterBitMask
  3291 ;;		_PCD_WriteRegister
  3292 ;;		_PCD_WriteRegisterVector
  3293 ;; This function is called by:
  3294 ;;		_PCD_TransceiveData
  3295 ;;		_PCD_Authenticate
  3296 ;;		_PCD_MIFARE_Transceive
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           
  3301                           ;psect for function _PCD_CommunicateWithPICC
  3302  0000'                    _PCD_CommunicateWithPICC:	
  3303                           
  3304                           ;incstack = 0
  3305                           ; Regs used in _PCD_CommunicateWithPICC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  3306                           ;PCD_CommunicateWithPICC@command stored from wreg
  3307  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3308  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3309  0002' 00A6'              	movwf	PCD_CommunicateWithPICC@command
  3310                           
  3311                           ;RFID.c: 380: unsigned char n, _validBits;
  3312                           ;RFID.c: 381: unsigned int i;
  3313                           ;RFID.c: 384: unsigned char txLastBits = validBits ? *validBits : 0;
  3314  0003' 089A'              	movf	PCD_CommunicateWithPICC@validBits,f
  3315  0004' 1D03               	skipz
  3316  0005' 2809'              	goto	l3937
  3317  0006' 01A4'              	clrf	_PCD_CommunicateWithPICC$378
  3318  0007' 01A5'              	clrf	_PCD_CommunicateWithPICC$378+1
  3319  0008' 2813'              	goto	l3939
  3320  0009'                    l3937:	
  3321  0009' 081A'              	movf	PCD_CommunicateWithPICC@validBits,w
  3322  000A' 0084               	movwf	4
  3323  000B' 1383               	bcf	3,7	;select IRP bank0
  3324  000C' 0800               	movf	0,w
  3325  000D' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3326  000E' 019E'              	clrf	??_PCD_CommunicateWithPICC+1
  3327  000F' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3328  0010' 00A4'              	movwf	_PCD_CommunicateWithPICC$378
  3329  0011' 081E'              	movf	??_PCD_CommunicateWithPICC+1,w
  3330  0012' 00A5'              	movwf	_PCD_CommunicateWithPICC$378+1
  3331  0013'                    l3939:	
  3332  0013' 0824'              	movf	_PCD_CommunicateWithPICC$378,w
  3333  0014' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3334  0015' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3335  0016' 00A2'              	movwf	PCD_CommunicateWithPICC@txLastBits
  3336                           
  3337                           ;RFID.c: 385: unsigned char bitFraming = (rxAlign << 4) + txLastBits;
  3338  0017' 081B'              	movf	PCD_CommunicateWithPICC@rxAlign,w
  3339  0018' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3340  0019' 3004               	movlw	4
  3341  001A'                    u4385:	
  3342  001A' 1003               	clrc
  3343  001B' 0D9D'              	rlf	??_PCD_CommunicateWithPICC,f
  3344  001C' 3EFF               	addlw	-1
  3345  001D' 1D03               	skipz
  3346  001E' 281A'              	goto	u4385
  3347  001F' 0822'              	movf	PCD_CommunicateWithPICC@txLastBits,w
  3348  0020' 071D'              	addwf	??_PCD_CommunicateWithPICC,w
  3349  0021' 009E'              	movwf	??_PCD_CommunicateWithPICC+1
  3350  0022' 081E'              	movf	??_PCD_CommunicateWithPICC+1,w
  3351  0023' 00A3'              	movwf	PCD_CommunicateWithPICC@bitFraming
  3352                           
  3353                           ;RFID.c: 387: PCD_WriteRegister(CommandReg, PCD_Idle);
  3354  0024' 0186'              	clrf	PCD_WriteRegister@value
  3355  0025' 3002               	movlw	2
  3356  0026' 2000'              	fcall	_PCD_WriteRegister
  3357                           
  3358                           ;RFID.c: 388: PCD_WriteRegister(ComIrqReg, 0x7F);
  3359  0027' 307F               	movlw	127
  3360  0028' 1283               	bcf	3,5	;RP0=0, select bank0
  3361  0029' 1303               	bcf	3,6	;RP1=0, select bank0
  3362  002A' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3363  002B' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3364  002C' 0086'              	movwf	PCD_WriteRegister@value
  3365  002D' 3008               	movlw	8
  3366  002E' 2000'              	fcall	_PCD_WriteRegister
  3367                           
  3368                           ;RFID.c: 389: PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);
  3369  002F' 3080               	movlw	128
  3370  0030' 1283               	bcf	3,5	;RP0=0, select bank0
  3371  0031' 1303               	bcf	3,6	;RP1=0, select bank0
  3372  0032' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3373  0033' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3374  0034' 0089'              	movwf	PCD_SetRegisterBitMask@mask
  3375  0035' 3014               	movlw	20
  3376  0036' 2000'              	fcall	_PCD_SetRegisterBitMask
  3377                           
  3378                           ;RFID.c: 390: PCD_WriteRegisterVector(FIFODataReg, sendLen, sendData);
  3379  0037' 1283               	bcf	3,5	;RP0=0, select bank0
  3380  0038' 1303               	bcf	3,6	;RP1=0, select bank0
  3381  0039' 0817'              	movf	PCD_CommunicateWithPICC@sendLen,w
  3382  003A' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3383  003B' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3384  003C' 0087'              	movwf	PCD_WriteRegisterVector@count
  3385  003D' 0816'              	movf	PCD_CommunicateWithPICC@sendData,w
  3386  003E' 009E'              	movwf	??_PCD_CommunicateWithPICC+1
  3387  003F' 081E'              	movf	??_PCD_CommunicateWithPICC+1,w
  3388  0040' 0088'              	movwf	PCD_WriteRegisterVector@values
  3389  0041' 3012               	movlw	18
  3390  0042' 2000'              	fcall	_PCD_WriteRegisterVector
  3391                           
  3392                           ;RFID.c: 391: PCD_WriteRegister(BitFramingReg, bitFraming);
  3393  0043' 1283               	bcf	3,5	;RP0=0, select bank0
  3394  0044' 1303               	bcf	3,6	;RP1=0, select bank0
  3395  0045' 0823'              	movf	PCD_CommunicateWithPICC@bitFraming,w
  3396  0046' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3397  0047' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3398  0048' 0086'              	movwf	PCD_WriteRegister@value
  3399  0049' 301A               	movlw	26
  3400  004A' 2000'              	fcall	_PCD_WriteRegister
  3401                           
  3402                           ;RFID.c: 392: PCD_WriteRegister(CommandReg, command);
  3403  004B' 1283               	bcf	3,5	;RP0=0, select bank0
  3404  004C' 1303               	bcf	3,6	;RP1=0, select bank0
  3405  004D' 0826'              	movf	PCD_CommunicateWithPICC@command,w
  3406  004E' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3407  004F' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3408  0050' 0086'              	movwf	PCD_WriteRegister@value
  3409  0051' 3002               	movlw	2
  3410  0052' 2000'              	fcall	_PCD_WriteRegister
  3411                           
  3412                           ;RFID.c: 393: if (command == PCD_Transceive) {
  3413  0053' 1283               	bcf	3,5	;RP0=0, select bank0
  3414  0054' 1303               	bcf	3,6	;RP1=0, select bank0
  3415  0055' 0826'              	movf	PCD_CommunicateWithPICC@command,w
  3416  0056' 3A0C               	xorlw	12
  3417  0057' 1D03               	skipz
  3418  0058' 285F'              	goto	l3959
  3419                           
  3420                           ;RFID.c: 394: PCD_SetRegisterBitMask(BitFramingReg, 0x80);
  3421  0059' 3080               	movlw	128
  3422  005A' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3423  005B' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3424  005C' 0089'              	movwf	PCD_SetRegisterBitMask@mask
  3425  005D' 301A               	movlw	26
  3426  005E' 2000'              	fcall	_PCD_SetRegisterBitMask
  3427  005F'                    l3959:	
  3428                           
  3429                           ;RFID.c: 395: }
  3430                           ;RFID.c: 400: i = 2000;
  3431  005F' 30D0               	movlw	208
  3432  0060' 1283               	bcf	3,5	;RP0=0, select bank0
  3433  0061' 1303               	bcf	3,6	;RP1=0, select bank0
  3434  0062' 00A0'              	movwf	PCD_CommunicateWithPICC@i
  3435  0063' 3007               	movlw	7
  3436  0064' 00A1'              	movwf	PCD_CommunicateWithPICC@i+1
  3437  0065'                    l3961:	
  3438                           ;RFID.c: 401: while (1) {
  3439                           
  3440                           
  3441                           ;RFID.c: 402: n = PCD_ReadRegister(ComIrqReg);
  3442  0065' 3008               	movlw	8
  3443  0066' 2000'              	fcall	_PCD_ReadRegister
  3444  0067' 1283               	bcf	3,5	;RP0=0, select bank0
  3445  0068' 1303               	bcf	3,6	;RP1=0, select bank0
  3446  0069' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3447  006A' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3448  006B' 00AB'              	movwf	PCD_CommunicateWithPICC@n
  3449                           
  3450                           ;RFID.c: 403: if (n & waitIRq) {
  3451  006C' 082B'              	movf	PCD_CommunicateWithPICC@n,w
  3452  006D' 0515'              	andwf	PCD_CommunicateWithPICC@waitIRq,w
  3453  006E' 1D03               	btfss	3,2
  3454  006F' 2880'              	goto	l3977
  3455                           
  3456                           ;RFID.c: 405: }
  3457                           ;RFID.c: 406: if (n & 0x01) {
  3458                           
  3459                           ;RFID.c: 404: break;
  3460  0070' 1C2B'              	btfss	PCD_CommunicateWithPICC@n,0
  3461  0071' 2874'              	goto	l3971
  3462                           
  3463                           ;RFID.c: 407: return STATUS_TIMEOUT;
  3464  0072' 3004               	movlw	4
  3465  0073' 0008               	return
  3466  0074'                    l3971:	
  3467                           
  3468                           ;RFID.c: 408: }
  3469                           ;RFID.c: 409: if (--i == 0) {
  3470  0074' 3001               	movlw	1
  3471  0075' 02A0'              	subwf	PCD_CommunicateWithPICC@i,f
  3472  0076' 3000               	movlw	0
  3473  0077' 1C03               	skipc
  3474  0078' 03A1'              	decf	PCD_CommunicateWithPICC@i+1,f
  3475  0079' 02A1'              	subwf	PCD_CommunicateWithPICC@i+1,f
  3476  007A' 0821'              	movf	PCD_CommunicateWithPICC@i+1,w
  3477  007B' 0420'              	iorwf	PCD_CommunicateWithPICC@i,w
  3478  007C' 1D03               	skipz
  3479  007D' 2865'              	goto	l3961
  3480                           
  3481                           ;RFID.c: 410: return STATUS_TIMEOUT;
  3482  007E' 3004               	movlw	4
  3483  007F' 0008               	return
  3484  0080'                    l3977:	
  3485                           
  3486                           ;RFID.c: 411: }
  3487                           ;RFID.c: 412: }
  3488                           ;RFID.c: 415: unsigned char errorRegValue = PCD_ReadRegister(ErrorReg);
  3489  0080' 300C               	movlw	12
  3490  0081' 2000'              	fcall	_PCD_ReadRegister
  3491  0082' 1283               	bcf	3,5	;RP0=0, select bank0
  3492  0083' 1303               	bcf	3,6	;RP1=0, select bank0
  3493  0084' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3494  0085' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3495  0086' 00A9'              	movwf	PCD_CommunicateWithPICC@errorRegValue
  3496                           
  3497                           ;RFID.c: 416: if (errorRegValue & 0x13) {
  3498  0087' 0829'              	movf	PCD_CommunicateWithPICC@errorRegValue,w
  3499  0088' 3913               	andlw	19
  3500  0089' 1903               	btfsc	3,2
  3501  008A' 288D'              	goto	l3985
  3502                           
  3503                           ;RFID.c: 417: return STATUS_ERROR;
  3504  008B' 3002               	movlw	2
  3505  008C' 0008               	return
  3506  008D'                    l3985:	
  3507                           
  3508                           ;RFID.c: 418: }
  3509                           ;RFID.c: 421: if (backData && backLen) {
  3510  008D' 0818'              	movf	PCD_CommunicateWithPICC@backData,w
  3511  008E' 1903               	btfsc	3,2
  3512  008F' 28C9'              	goto	l4005
  3513  0090' 0819'              	movf	PCD_CommunicateWithPICC@backLen,w
  3514  0091' 1903               	btfsc	3,2
  3515  0092' 28C9'              	goto	l4005
  3516                           
  3517                           ;RFID.c: 422: n = PCD_ReadRegister(FIFOLevelReg);
  3518  0093' 3014               	movlw	20
  3519  0094' 2000'              	fcall	_PCD_ReadRegister
  3520  0095' 1283               	bcf	3,5	;RP0=0, select bank0
  3521  0096' 1303               	bcf	3,6	;RP1=0, select bank0
  3522  0097' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3523  0098' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3524  0099' 00AB'              	movwf	PCD_CommunicateWithPICC@n
  3525                           
  3526                           ;RFID.c: 423: if (n > *backLen) {
  3527  009A' 0819'              	movf	PCD_CommunicateWithPICC@backLen,w
  3528  009B' 0084               	movwf	4
  3529  009C' 082B'              	movf	PCD_CommunicateWithPICC@n,w
  3530  009D' 1383               	bcf	3,7	;select IRP bank0
  3531  009E' 0200               	subwf	0,w
  3532  009F' 1803               	skipnc
  3533  00A0' 28A3'              	goto	l3997
  3534                           
  3535                           ;RFID.c: 424: return STATUS_NO_ROOM;
  3536  00A1' 3005               	movlw	5
  3537  00A2' 0008               	return
  3538  00A3'                    l3997:	
  3539                           
  3540                           ;RFID.c: 425: }
  3541                           ;RFID.c: 426: *backLen = n;
  3542  00A3' 082B'              	movf	PCD_CommunicateWithPICC@n,w
  3543  00A4' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3544  00A5' 0819'              	movf	PCD_CommunicateWithPICC@backLen,w
  3545  00A6' 0084               	movwf	4
  3546  00A7' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3547  00A8' 0080               	movwf	0
  3548                           
  3549                           ;RFID.c: 427: PCD_ReadRegisterVector(FIFODataReg, n, backData, rxAlign);
  3550  00A9' 082B'              	movf	PCD_CommunicateWithPICC@n,w
  3551  00AA' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3552  00AB' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3553  00AC' 0087'              	movwf	PCD_ReadRegisterVector@count
  3554  00AD' 0818'              	movf	PCD_CommunicateWithPICC@backData,w
  3555  00AE' 009E'              	movwf	??_PCD_CommunicateWithPICC+1
  3556  00AF' 081E'              	movf	??_PCD_CommunicateWithPICC+1,w
  3557  00B0' 0088'              	movwf	PCD_ReadRegisterVector@values
  3558  00B1' 081B'              	movf	PCD_CommunicateWithPICC@rxAlign,w
  3559  00B2' 009F'              	movwf	??_PCD_CommunicateWithPICC+2
  3560  00B3' 081F'              	movf	??_PCD_CommunicateWithPICC+2,w
  3561  00B4' 0089'              	movwf	PCD_ReadRegisterVector@rxAlign
  3562  00B5' 3012               	movlw	18
  3563  00B6' 2000'              	fcall	_PCD_ReadRegisterVector
  3564                           
  3565                           ;RFID.c: 428: _validBits = PCD_ReadRegister(ControlReg) & 0x07;
  3566  00B7' 3018               	movlw	24
  3567  00B8' 2000'              	fcall	_PCD_ReadRegister
  3568  00B9' 3907               	andlw	7
  3569  00BA' 1283               	bcf	3,5	;RP0=0, select bank0
  3570  00BB' 1303               	bcf	3,6	;RP1=0, select bank0
  3571  00BC' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3572  00BD' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3573  00BE' 00AA'              	movwf	PCD_CommunicateWithPICC@_validBits
  3574                           
  3575                           ;RFID.c: 429: if (validBits) {
  3576  00BF' 081A'              	movf	PCD_CommunicateWithPICC@validBits,w
  3577  00C0' 1903               	btfsc	3,2
  3578  00C1' 28C9'              	goto	l4005
  3579                           
  3580                           ;RFID.c: 430: *validBits = _validBits;
  3581  00C2' 082A'              	movf	PCD_CommunicateWithPICC@_validBits,w
  3582  00C3' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3583  00C4' 081A'              	movf	PCD_CommunicateWithPICC@validBits,w
  3584  00C5' 0084               	movwf	4
  3585  00C6' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3586  00C7' 1383               	bcf	3,7	;select IRP bank0
  3587  00C8' 0080               	movwf	0
  3588  00C9'                    l4005:	
  3589                           
  3590                           ;RFID.c: 431: }
  3591                           ;RFID.c: 432: }
  3592                           ;RFID.c: 435: if (errorRegValue & 0x08) {
  3593  00C9' 1DA9'              	btfss	PCD_CommunicateWithPICC@errorRegValue,3
  3594  00CA' 28CD'              	goto	l4011
  3595                           
  3596                           ;RFID.c: 436: return STATUS_COLLISION;
  3597  00CB' 3003               	movlw	3
  3598  00CC' 0008               	return
  3599  00CD'                    l4011:	
  3600                           
  3601                           ;RFID.c: 437: }
  3602                           ;RFID.c: 440: if (backData && backLen && checkCRC) {
  3603  00CD' 0818'              	movf	PCD_CommunicateWithPICC@backData,w
  3604  00CE' 1903               	btfsc	3,2
  3605  00CF' 2921'              	goto	l4049
  3606  00D0' 0819'              	movf	PCD_CommunicateWithPICC@backLen,w
  3607  00D1' 1903               	btfsc	3,2
  3608  00D2' 2921'              	goto	l4049
  3609  00D3' 081C'              	movf	PCD_CommunicateWithPICC@checkCRC,w
  3610  00D4' 1903               	btfsc	3,2
  3611  00D5' 2921'              	goto	l4049
  3612                           
  3613                           ;RFID.c: 442: if (*backLen == 1 && _validBits == 4) {
  3614  00D6' 0819'              	movf	PCD_CommunicateWithPICC@backLen,w
  3615  00D7' 0084               	movwf	4
  3616  00D8' 1383               	bcf	3,7	;select IRP bank0
  3617  00D9' 0800               	movf	0,w
  3618  00DA' 3A01               	xorlw	1
  3619  00DB' 1D03               	skipz
  3620  00DC' 28E3'              	goto	l4025
  3621  00DD' 082A'              	movf	PCD_CommunicateWithPICC@_validBits,w
  3622  00DE' 3A04               	xorlw	4
  3623  00DF' 1D03               	skipz
  3624  00E0' 28E3'              	goto	l4025
  3625                           
  3626                           ;RFID.c: 443: return STATUS_MIFARE_NACK;
  3627  00E1' 3009               	movlw	9
  3628  00E2' 0008               	return
  3629  00E3'                    l4025:	
  3630                           
  3631                           ;RFID.c: 444: }
  3632                           ;RFID.c: 446: if (*backLen < 2 || _validBits != 0) {
  3633  00E3' 0819'              	movf	PCD_CommunicateWithPICC@backLen,w
  3634  00E4' 0084               	movwf	4
  3635  00E5' 3002               	movlw	2
  3636  00E6' 0200               	subwf	0,w
  3637  00E7' 1C03               	skipc
  3638  00E8' 28EC'              	goto	l4029
  3639  00E9' 082A'              	movf	PCD_CommunicateWithPICC@_validBits,w
  3640  00EA' 1903               	btfsc	3,2
  3641  00EB' 28EE'              	goto	l4033
  3642  00EC'                    l4029:	
  3643                           
  3644                           ;RFID.c: 447: return STATUS_CRC_WRONG;
  3645  00EC' 3008               	movlw	8
  3646  00ED' 0008               	return
  3647  00EE'                    l4033:	
  3648                           
  3649                           ;RFID.c: 448: }
  3650                           ;RFID.c: 450: unsigned char controlBuffer[2];
  3651                           ;RFID.c: 451: n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
  3652  00EE' 0819'              	movf	PCD_CommunicateWithPICC@backLen,w
  3653  00EF' 0084               	movwf	4
  3654  00F0' 0800               	movf	0,w
  3655  00F1' 3EFE               	addlw	254
  3656  00F2' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3657  00F3' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3658  00F4' 008D'              	movwf	PCD_CalculateCRC@length
  3659  00F5' 3000'              	movlw	PCD_CommunicateWithPICC@controlBuffer& (0+255)
  3660  00F6' 009E'              	movwf	??_PCD_CommunicateWithPICC+1
  3661  00F7' 081E'              	movf	??_PCD_CommunicateWithPICC+1,w
  3662  00F8' 008E'              	movwf	PCD_CalculateCRC@result
  3663  00F9' 0818'              	movf	PCD_CommunicateWithPICC@backData,w
  3664  00FA' 2000'              	fcall	_PCD_CalculateCRC
  3665  00FB' 1283               	bcf	3,5	;RP0=0, select bank0
  3666  00FC' 1303               	bcf	3,6	;RP1=0, select bank0
  3667  00FD' 009F'              	movwf	??_PCD_CommunicateWithPICC+2
  3668  00FE' 081F'              	movf	??_PCD_CommunicateWithPICC+2,w
  3669  00FF' 00AB'              	movwf	PCD_CommunicateWithPICC@n
  3670                           
  3671                           ;RFID.c: 452: if (n != STATUS_OK) {
  3672  0100' 082B'              	movf	PCD_CommunicateWithPICC@n,w
  3673  0101' 3A01               	xorlw	1
  3674  0102' 1903               	skipnz
  3675  0103' 2906'              	goto	l4041
  3676                           
  3677                           ;RFID.c: 453: return n;
  3678  0104' 082B'              	movf	PCD_CommunicateWithPICC@n,w
  3679  0105' 0008               	return
  3680  0106'                    l4041:	
  3681                           
  3682                           ;RFID.c: 454: }
  3683                           ;RFID.c: 455: if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1
      +                          ] != controlBuffer[1])) {
  3684  0106' 0819'              	movf	PCD_CommunicateWithPICC@backLen,w
  3685  0107' 0084               	movwf	4
  3686  0108' 1383               	bcf	3,7	;select IRP bank0
  3687  0109' 0800               	movf	0,w
  3688  010A' 3EFE               	addlw	-2
  3689  010B' 0718'              	addwf	PCD_CommunicateWithPICC@backData,w
  3690  010C' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3691  010D' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3692  010E' 0084               	movwf	4
  3693  010F' 0800               	movf	0,w
  3694  0110' 0627'              	xorwf	PCD_CommunicateWithPICC@controlBuffer,w
  3695  0111' 1D03               	skipz
  3696  0112' 291F'              	goto	l4045
  3697  0113' 0819'              	movf	PCD_CommunicateWithPICC@backLen,w
  3698  0114' 0084               	movwf	4
  3699  0115' 0800               	movf	0,w
  3700  0116' 3EFF               	addlw	-1
  3701  0117' 0718'              	addwf	PCD_CommunicateWithPICC@backData,w
  3702  0118' 009D'              	movwf	??_PCD_CommunicateWithPICC
  3703  0119' 081D'              	movf	??_PCD_CommunicateWithPICC,w
  3704  011A' 0084               	movwf	4
  3705  011B' 0800               	movf	0,w
  3706  011C' 0628'              	xorwf	PCD_CommunicateWithPICC@controlBuffer+1,w
  3707  011D' 1903               	skipnz
  3708  011E' 2921'              	goto	l4049
  3709  011F'                    l4045:	
  3710                           
  3711                           ;RFID.c: 456: return STATUS_CRC_WRONG;
  3712  011F' 3008               	movlw	8
  3713  0120' 0008               	return
  3714  0121'                    l4049:	
  3715                           
  3716                           ;RFID.c: 457: }
  3717                           ;RFID.c: 458: }
  3718                           ;RFID.c: 460: return STATUS_OK;
  3719  0121' 3001               	movlw	1
  3720  0122' 0008               	return
  3721  0123'                    __end_of_PCD_CommunicateWithPICC:	
  3722                           
  3723                           	psect	text10
  3724  0000'                    __ptext10:	
  3725 ;; *************** function _PCD_ReadRegisterVector *****************
  3726 ;; Defined at:
  3727 ;;		line 110 in file "RFID.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;  reg             1    wreg     unsigned char 
  3730 ;;  count           1    7[BANK0 ] unsigned char 
  3731 ;;  values          1    8[BANK0 ] PTR unsigned char 
  3732 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  3733 ;;		 -> PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSerial@buffer(18), PCD_MIFARE_Transc
      +eive@cmdBuffer(18), MIFARE_GetValue@buffer(18), 
  3734 ;;		 -> PICC_Select@buffer(9), NULL(0), 
  3735 ;;  rxAlign         1    9[BANK0 ] unsigned char 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  reg             1   13[BANK0 ] unsigned char 
  3738 ;;  i               1   17[BANK0 ] unsigned char 
  3739 ;;  mask            1   15[BANK0 ] unsigned char 
  3740 ;;  value           1   14[BANK0 ] unsigned char 
  3741 ;;  index           1   18[BANK0 ] unsigned char 
  3742 ;;  address         1   16[BANK0 ] unsigned char 
  3743 ;; Return value:  Size  Location     Type
  3744 ;;		None               void
  3745 ;; Registers used:
  3746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3747 ;; Tracked objects:
  3748 ;;		On entry : 0/0
  3749 ;;		On exit  : 0/0
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3752 ;;      Params:         0       3       0       0
  3753 ;;      Locals:         0       6       0       0
  3754 ;;      Temps:          0       3       0       0
  3755 ;;      Totals:         0      12       0       0
  3756 ;;Total ram usage:       12 bytes
  3757 ;; Hardware stack levels used:    1
  3758 ;; Hardware stack levels required when called:    3
  3759 ;; This function calls:
  3760 ;;		_SPI_transfer
  3761 ;; This function is called by:
  3762 ;;		_PCD_CommunicateWithPICC
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           
  3767                           ;psect for function _PCD_ReadRegisterVector
  3768  0000'                    _PCD_ReadRegisterVector:	
  3769                           
  3770                           ;incstack = 0
  3771                           ; Regs used in _PCD_ReadRegisterVector: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  3772                           ;PCD_ReadRegisterVector@reg stored from wreg
  3773  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3774  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3775  0002' 008D'              	movwf	PCD_ReadRegisterVector@reg
  3776                           
  3777                           ;RFID.c: 115: if (count == 0) {
  3778  0003' 0887'              	movf	PCD_ReadRegisterVector@count,f
  3779  0004' 1903               	btfsc	3,2
  3780  0005' 0008               	return
  3781                           
  3782                           ;RFID.c: 117: }
  3783                           ;RFID.c: 119: unsigned char address = 0x80 | (reg & 0x7E);
  3784                           
  3785                           ;RFID.c: 116: return;
  3786  0006' 080D'              	movf	PCD_ReadRegisterVector@reg,w
  3787  0007' 397E               	andlw	126
  3788  0008' 3880               	iorlw	128
  3789  0009' 008A'              	movwf	??_PCD_ReadRegisterVector
  3790  000A' 080A'              	movf	??_PCD_ReadRegisterVector,w
  3791  000B' 0090'              	movwf	PCD_ReadRegisterVector@address
  3792                           
  3793                           ;RFID.c: 120: unsigned char index = 0;
  3794  000C' 0192'              	clrf	PCD_ReadRegisterVector@index
  3795                           
  3796                           ;RFID.c: 121: PORTA&=~(1<<4) ;
  3797  000D' 30EF               	movlw	239
  3798  000E' 008A'              	movwf	??_PCD_ReadRegisterVector
  3799  000F' 080A'              	movf	??_PCD_ReadRegisterVector,w
  3800  0010' 0585               	andwf	5,f	;volatile
  3801                           
  3802                           ;RFID.c: 122: count--;
  3803  0011' 3001               	movlw	1
  3804  0012' 0287'              	subwf	PCD_ReadRegisterVector@count,f
  3805                           
  3806                           ;RFID.c: 123: SPI_transfer(address);
  3807  0013' 0810'              	movf	PCD_ReadRegisterVector@address,w
  3808  0014' 2000'              	fcall	_SPI_transfer
  3809  0015'                    l3897:	
  3810                           ;RFID.c: 124: while (index < count) {
  3811                           
  3812  0015' 1283               	bcf	3,5	;RP0=0, select bank0
  3813  0016' 1303               	bcf	3,6	;RP1=0, select bank0
  3814  0017' 0807'              	movf	PCD_ReadRegisterVector@count,w
  3815  0018' 0212'              	subwf	PCD_ReadRegisterVector@index,w
  3816  0019' 1803               	btfsc	3,0
  3817  001A' 286B'              	goto	l3899
  3818                           
  3819                           ;RFID.c: 125: if (index == 0 && rxAlign) {
  3820  001B' 1283               	bcf	3,5	;RP0=0, select bank0
  3821  001C' 1303               	bcf	3,6	;RP1=0, select bank0
  3822  001D' 0892'              	movf	PCD_ReadRegisterVector@index,f
  3823  001E' 1D03               	skipz
  3824  001F' 2859'              	goto	l3893
  3825  0020' 0809'              	movf	PCD_ReadRegisterVector@rxAlign,w
  3826  0021' 1903               	btfsc	3,2
  3827  0022' 2859'              	goto	l3893
  3828                           
  3829                           ;RFID.c: 127: unsigned char mask = 0;
  3830  0023' 018F'              	clrf	PCD_ReadRegisterVector@mask
  3831                           
  3832                           ;RFID.c: 128: for (unsigned char i = rxAlign; i <= 7; i++) {
  3833  0024' 0809'              	movf	PCD_ReadRegisterVector@rxAlign,w
  3834  0025' 008A'              	movwf	??_PCD_ReadRegisterVector
  3835  0026' 080A'              	movf	??_PCD_ReadRegisterVector,w
  3836  0027' 0091'              	movwf	PCD_ReadRegisterVector@i
  3837  0028' 3008               	movlw	8
  3838  0029' 0211'              	subwf	PCD_ReadRegisterVector@i,w
  3839  002A' 1803               	btfsc	3,0
  3840  002B' 2841'              	goto	l3889
  3841  002C'                    l3885:	
  3842                           
  3843                           ;RFID.c: 129: mask |= (1 << i);
  3844  002C' 3001               	movlw	1
  3845  002D' 008A'              	movwf	??_PCD_ReadRegisterVector
  3846  002E' 0A11'              	incf	PCD_ReadRegisterVector@i,w
  3847  002F' 2832'              	goto	u4324
  3848  0030'                    u4325:	
  3849  0030' 1003               	clrc
  3850  0031' 0D8A'              	rlf	??_PCD_ReadRegisterVector,f
  3851  0032'                    u4324:	
  3852  0032' 3EFF               	addlw	-1
  3853  0033' 1D03               	skipz
  3854  0034' 2830'              	goto	u4325
  3855  0035' 080A'              	movf	??_PCD_ReadRegisterVector,w
  3856  0036' 008B'              	movwf	??_PCD_ReadRegisterVector+1
  3857  0037' 080B'              	movf	??_PCD_ReadRegisterVector+1,w
  3858  0038' 048F'              	iorwf	PCD_ReadRegisterVector@mask,f
  3859  0039' 3001               	movlw	1
  3860  003A' 008A'              	movwf	??_PCD_ReadRegisterVector
  3861  003B' 080A'              	movf	??_PCD_ReadRegisterVector,w
  3862  003C' 0791'              	addwf	PCD_ReadRegisterVector@i,f
  3863  003D' 3008               	movlw	8
  3864  003E' 0211'              	subwf	PCD_ReadRegisterVector@i,w
  3865  003F' 1C03               	skipc
  3866  0040' 282C'              	goto	l3885
  3867  0041'                    l3889:	
  3868                           
  3869                           ;RFID.c: 130: }
  3870                           ;RFID.c: 132: unsigned char value = SPI_transfer(address);
  3871  0041' 0810'              	movf	PCD_ReadRegisterVector@address,w
  3872  0042' 2000'              	fcall	_SPI_transfer
  3873  0043' 1283               	bcf	3,5	;RP0=0, select bank0
  3874  0044' 1303               	bcf	3,6	;RP1=0, select bank0
  3875  0045' 008A'              	movwf	??_PCD_ReadRegisterVector
  3876  0046' 080A'              	movf	??_PCD_ReadRegisterVector,w
  3877  0047' 008E'              	movwf	PCD_ReadRegisterVector@value
  3878                           
  3879                           ;RFID.c: 134: values[0] = (values[index] & ~mask) | (value & mask);
  3880  0048' 080F'              	movf	PCD_ReadRegisterVector@mask,w
  3881  0049' 050E'              	andwf	PCD_ReadRegisterVector@value,w
  3882  004A' 008A'              	movwf	??_PCD_ReadRegisterVector
  3883  004B' 0812'              	movf	PCD_ReadRegisterVector@index,w
  3884  004C' 0708'              	addwf	PCD_ReadRegisterVector@values,w
  3885  004D' 008B'              	movwf	??_PCD_ReadRegisterVector+1
  3886  004E' 080B'              	movf	??_PCD_ReadRegisterVector+1,w
  3887  004F' 0084               	movwf	4
  3888  0050' 090F'              	comf	PCD_ReadRegisterVector@mask,w
  3889  0051' 1383               	bcf	3,7	;select IRP bank0
  3890  0052' 0500               	andwf	0,w
  3891  0053' 040A'              	iorwf	??_PCD_ReadRegisterVector,w
  3892  0054' 008C'              	movwf	??_PCD_ReadRegisterVector+2
  3893  0055' 0808'              	movf	PCD_ReadRegisterVector@values,w
  3894  0056' 0084               	movwf	4
  3895  0057' 080C'              	movf	??_PCD_ReadRegisterVector+2,w
  3896  0058' 2865'              	goto	L17
  3897  0059'                    l3893:	
  3898                           ;RFID.c: 135: }
  3899                           
  3900                           
  3901                           ;RFID.c: 136: else {
  3902                           ;RFID.c: 137: values[index] = SPI_transfer(address);
  3903  0059' 0810'              	movf	PCD_ReadRegisterVector@address,w
  3904  005A' 2000'              	fcall	_SPI_transfer
  3905  005B' 1283               	bcf	3,5	;RP0=0, select bank0
  3906  005C' 1303               	bcf	3,6	;RP1=0, select bank0
  3907  005D' 008A'              	movwf	??_PCD_ReadRegisterVector
  3908  005E' 0812'              	movf	PCD_ReadRegisterVector@index,w
  3909  005F' 0708'              	addwf	PCD_ReadRegisterVector@values,w
  3910  0060' 008B'              	movwf	??_PCD_ReadRegisterVector+1
  3911  0061' 080B'              	movf	??_PCD_ReadRegisterVector+1,w
  3912  0062' 0084               	movwf	4
  3913  0063' 080A'              	movf	??_PCD_ReadRegisterVector,w
  3914  0064' 1383               	bcf	3,7	;select IRP bank0
  3915  0065'                    L17:	
  3916  0065' 0080               	movwf	0
  3917                           
  3918                           ;RFID.c: 138: }
  3919                           ;RFID.c: 139: index++;
  3920  0066' 3001               	movlw	1
  3921  0067' 008A'              	movwf	??_PCD_ReadRegisterVector
  3922  0068' 080A'              	movf	??_PCD_ReadRegisterVector,w
  3923  0069' 0792'              	addwf	PCD_ReadRegisterVector@index,f
  3924  006A' 2815'              	goto	l3897
  3925  006B'                    l3899:	
  3926                           
  3927                           ;RFID.c: 140: }
  3928                           ;RFID.c: 141: values[index] = SPI_transfer(0);
  3929  006B' 3000               	movlw	0
  3930  006C' 2000'              	fcall	_SPI_transfer
  3931  006D' 1283               	bcf	3,5	;RP0=0, select bank0
  3932  006E' 1303               	bcf	3,6	;RP1=0, select bank0
  3933  006F' 008A'              	movwf	??_PCD_ReadRegisterVector
  3934  0070' 0812'              	movf	PCD_ReadRegisterVector@index,w
  3935  0071' 0708'              	addwf	PCD_ReadRegisterVector@values,w
  3936  0072' 008B'              	movwf	??_PCD_ReadRegisterVector+1
  3937  0073' 080B'              	movf	??_PCD_ReadRegisterVector+1,w
  3938  0074' 0084               	movwf	4
  3939  0075' 080A'              	movf	??_PCD_ReadRegisterVector,w
  3940  0076' 1383               	bcf	3,7	;select IRP bank0
  3941  0077' 0080               	movwf	0
  3942                           
  3943                           ;RFID.c: 142: PORTA|=(1<<4) ;
  3944  0078' 1605               	bsf	5,4	;volatile
  3945  0079' 0008               	return
  3946  007A'                    __end_of_PCD_ReadRegisterVector:	
  3947                           
  3948                           	psect	text11
  3949  0000'                    __ptext11:	
  3950 ;; *************** function _PCD_CalculateCRC *****************
  3951 ;; Defined at:
  3952 ;;		line 173 in file "RFID.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;  data            1    wreg     PTR unsigned char 
  3955 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  3956 ;;		 -> PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSerial@buffer(18), PCD_MIFARE_Transc
      +eive@cmdBuffer(18), MIFARE_GetValue@buffer(18), 
  3957 ;;		 -> PICC_HaltA@buffer(4), PICC_Select@buffer(9), NULL(0), 
  3958 ;;  length          1   13[BANK0 ] unsigned char 
  3959 ;;  result          1   14[BANK0 ] PTR unsigned char 
  3960 ;;		 -> MIFARE_SetUid@block0_buffer(18), PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSer
      +ial@buffer(18), PCD_MIFARE_Transceive@cmdBuffer(18), 
  3961 ;;		 -> MIFARE_GetValue@buffer(18), PICC_HaltA@buffer(4), PICC_Select@buffer(9), PCD_CommunicateWithPICC@controlBuffer(2
      +), 
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;  data            1   20[BANK0 ] PTR unsigned char 
  3964 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  3965 ;;		 -> PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSerial@buffer(18), PCD_MIFARE_Transc
      +eive@cmdBuffer(18), MIFARE_GetValue@buffer(18), 
  3966 ;;		 -> PICC_HaltA@buffer(4), PICC_Select@buffer(9), NULL(0), 
  3967 ;;  i               2   17[BANK0 ] unsigned int 
  3968 ;;  n               1   19[BANK0 ] unsigned char 
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  1    wreg      unsigned char 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3978 ;;      Params:         0       2       0       0
  3979 ;;      Locals:         0       4       0       0
  3980 ;;      Temps:          0       2       0       0
  3981 ;;      Totals:         0       8       0       0
  3982 ;;Total ram usage:        8 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    5
  3985 ;; This function calls:
  3986 ;;		_PCD_ReadRegister
  3987 ;;		_PCD_SetRegisterBitMask
  3988 ;;		_PCD_WriteRegister
  3989 ;;		_PCD_WriteRegisterVector
  3990 ;; This function is called by:
  3991 ;;		_PCD_CommunicateWithPICC
  3992 ;;		_PICC_Select
  3993 ;;		_PICC_HaltA
  3994 ;;		_MIFARE_Read
  3995 ;;		_PCD_MIFARE_Transceive
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           
  4000                           ;psect for function _PCD_CalculateCRC
  4001  0000'                    _PCD_CalculateCRC:	
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _PCD_CalculateCRC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4005                           ;PCD_CalculateCRC@data stored from wreg
  4006  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4007  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4008  0002' 0094'              	movwf	PCD_CalculateCRC@data
  4009                           
  4010                           ;RFID.c: 177: PCD_WriteRegister(CommandReg, PCD_Idle);
  4011  0003' 0186'              	clrf	PCD_WriteRegister@value
  4012  0004' 3002               	movlw	2
  4013  0005' 2000'              	fcall	_PCD_WriteRegister
  4014                           
  4015                           ;RFID.c: 178: PCD_WriteRegister(DivIrqReg, 0x04);
  4016  0006' 3004               	movlw	4
  4017  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  4018  0008' 1303               	bcf	3,6	;RP1=0, select bank0
  4019  0009' 008F'              	movwf	??_PCD_CalculateCRC
  4020  000A' 080F'              	movf	??_PCD_CalculateCRC,w
  4021  000B' 0086'              	movwf	PCD_WriteRegister@value
  4022  000C' 300A               	movlw	10
  4023  000D' 2000'              	fcall	_PCD_WriteRegister
  4024                           
  4025                           ;RFID.c: 179: PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);
  4026  000E' 3080               	movlw	128
  4027  000F' 1283               	bcf	3,5	;RP0=0, select bank0
  4028  0010' 1303               	bcf	3,6	;RP1=0, select bank0
  4029  0011' 008F'              	movwf	??_PCD_CalculateCRC
  4030  0012' 080F'              	movf	??_PCD_CalculateCRC,w
  4031  0013' 0089'              	movwf	PCD_SetRegisterBitMask@mask
  4032  0014' 3014               	movlw	20
  4033  0015' 2000'              	fcall	_PCD_SetRegisterBitMask
  4034                           
  4035                           ;RFID.c: 180: PCD_WriteRegisterVector(FIFODataReg, length, data);
  4036  0016' 1283               	bcf	3,5	;RP0=0, select bank0
  4037  0017' 1303               	bcf	3,6	;RP1=0, select bank0
  4038  0018' 080D'              	movf	PCD_CalculateCRC@length,w
  4039  0019' 008F'              	movwf	??_PCD_CalculateCRC
  4040  001A' 080F'              	movf	??_PCD_CalculateCRC,w
  4041  001B' 0087'              	movwf	PCD_WriteRegisterVector@count
  4042  001C' 0814'              	movf	PCD_CalculateCRC@data,w
  4043  001D' 0090'              	movwf	??_PCD_CalculateCRC+1
  4044  001E' 0810'              	movf	??_PCD_CalculateCRC+1,w
  4045  001F' 0088'              	movwf	PCD_WriteRegisterVector@values
  4046  0020' 3012               	movlw	18
  4047  0021' 2000'              	fcall	_PCD_WriteRegisterVector
  4048                           
  4049                           ;RFID.c: 181: PCD_WriteRegister(CommandReg, PCD_CalcCRC);
  4050  0022' 3003               	movlw	3
  4051  0023' 1283               	bcf	3,5	;RP0=0, select bank0
  4052  0024' 1303               	bcf	3,6	;RP1=0, select bank0
  4053  0025' 008F'              	movwf	??_PCD_CalculateCRC
  4054  0026' 080F'              	movf	??_PCD_CalculateCRC,w
  4055  0027' 0086'              	movwf	PCD_WriteRegister@value
  4056  0028' 3002               	movlw	2
  4057  0029' 2000'              	fcall	_PCD_WriteRegister
  4058                           
  4059                           ;RFID.c: 184: unsigned int i = 5000;
  4060  002A' 3088               	movlw	136
  4061  002B' 1283               	bcf	3,5	;RP0=0, select bank0
  4062  002C' 1303               	bcf	3,6	;RP1=0, select bank0
  4063  002D' 0091'              	movwf	PCD_CalculateCRC@i
  4064  002E' 3013               	movlw	19
  4065  002F' 0092'              	movwf	PCD_CalculateCRC@i+1
  4066  0030'                    l3911:	
  4067                           ;RFID.c: 185: unsigned char n;
  4068                           ;RFID.c: 186: while (1) {
  4069                           
  4070                           
  4071                           ;RFID.c: 187: n = PCD_ReadRegister(DivIrqReg);
  4072  0030' 300A               	movlw	10
  4073  0031' 2000'              	fcall	_PCD_ReadRegister
  4074  0032' 1283               	bcf	3,5	;RP0=0, select bank0
  4075  0033' 1303               	bcf	3,6	;RP1=0, select bank0
  4076  0034' 008F'              	movwf	??_PCD_CalculateCRC
  4077  0035' 080F'              	movf	??_PCD_CalculateCRC,w
  4078  0036' 0093'              	movwf	PCD_CalculateCRC@n
  4079                           
  4080                           ;RFID.c: 188: if (n & 0x04) {
  4081  0037' 1913'              	btfsc	PCD_CalculateCRC@n,2
  4082  0038' 2845'              	goto	l3923
  4083                           
  4084                           ;RFID.c: 190: }
  4085                           ;RFID.c: 191: if (--i == 0) {
  4086                           
  4087                           ;RFID.c: 189: break;
  4088  0039' 3001               	movlw	1
  4089  003A' 0291'              	subwf	PCD_CalculateCRC@i,f
  4090  003B' 3000               	movlw	0
  4091  003C' 1C03               	skipc
  4092  003D' 0392'              	decf	PCD_CalculateCRC@i+1,f
  4093  003E' 0292'              	subwf	PCD_CalculateCRC@i+1,f
  4094  003F' 0812'              	movf	PCD_CalculateCRC@i+1,w
  4095  0040' 0411'              	iorwf	PCD_CalculateCRC@i,w
  4096  0041' 1D03               	skipz
  4097  0042' 2830'              	goto	l3911
  4098                           
  4099                           ;RFID.c: 192: return STATUS_TIMEOUT;
  4100  0043' 3004               	movlw	4
  4101  0044' 0008               	return
  4102  0045'                    l3923:	
  4103                           
  4104                           ;RFID.c: 193: }
  4105                           ;RFID.c: 194: }
  4106                           ;RFID.c: 195: PCD_WriteRegister(CommandReg, PCD_Idle);
  4107  0045' 0186'              	clrf	PCD_WriteRegister@value
  4108  0046' 3002               	movlw	2
  4109  0047' 2000'              	fcall	_PCD_WriteRegister
  4110                           
  4111                           ;RFID.c: 198: result[0] = PCD_ReadRegister(CRCResultRegL);
  4112  0048' 3044               	movlw	68
  4113  0049' 2000'              	fcall	_PCD_ReadRegister
  4114  004A' 1283               	bcf	3,5	;RP0=0, select bank0
  4115  004B' 1303               	bcf	3,6	;RP1=0, select bank0
  4116  004C' 008F'              	movwf	??_PCD_CalculateCRC
  4117  004D' 080E'              	movf	PCD_CalculateCRC@result,w
  4118  004E' 0084               	movwf	4
  4119  004F' 080F'              	movf	??_PCD_CalculateCRC,w
  4120  0050' 1383               	bcf	3,7	;select IRP bank0
  4121  0051' 0080               	movwf	0
  4122                           
  4123                           ;RFID.c: 199: result[1] = PCD_ReadRegister(CRCResultRegH);
  4124  0052' 3042               	movlw	66
  4125  0053' 2000'              	fcall	_PCD_ReadRegister
  4126  0054' 1283               	bcf	3,5	;RP0=0, select bank0
  4127  0055' 1303               	bcf	3,6	;RP1=0, select bank0
  4128  0056' 008F'              	movwf	??_PCD_CalculateCRC
  4129  0057' 0A0E'              	incf	PCD_CalculateCRC@result,w
  4130  0058' 0084               	movwf	4
  4131  0059' 080F'              	movf	??_PCD_CalculateCRC,w
  4132  005A' 1383               	bcf	3,7	;select IRP bank0
  4133  005B' 0080               	movwf	0
  4134                           
  4135                           ;RFID.c: 200: return STATUS_OK;
  4136  005C' 3001               	movlw	1
  4137  005D' 0008               	return
  4138  005E'                    __end_of_PCD_CalculateCRC:	
  4139                           
  4140                           	psect	text12
  4141  0000'                    __ptext12:	
  4142 ;; *************** function _PCD_WriteRegisterVector *****************
  4143 ;; Defined at:
  4144 ;;		line 80 in file "RFID.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  reg             1    wreg     unsigned char 
  4147 ;;  count           1    7[BANK0 ] unsigned char 
  4148 ;;  values          1    8[BANK0 ] PTR unsigned char 
  4149 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  4150 ;;		 -> MIFARE_OpenUidBackdoor@cmd(1), PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSeria
      +l@buffer(18), PCD_MIFARE_Transceive@cmdBuffer(18), 
  4151 ;;		 -> MIFARE_GetValue@buffer(18), PCD_Authenticate@sendData(12), PICC_HaltA@buffer(4), PICC_Select@buffer(9), 
  4152 ;;		 -> PICC_REQA_or_WUPA@command(1), NULL(0), 
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;  reg             1    9[BANK0 ] unsigned char 
  4155 ;;  index           1   10[BANK0 ] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;		None               void
  4158 ;; Registers used:
  4159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4165 ;;      Params:         0       2       0       0
  4166 ;;      Locals:         0       2       0       0
  4167 ;;      Temps:          1       0       0       0
  4168 ;;      Totals:         1       4       0       0
  4169 ;;Total ram usage:        5 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    3
  4172 ;; This function calls:
  4173 ;;		_SPI_transfer
  4174 ;; This function is called by:
  4175 ;;		_PCD_CalculateCRC
  4176 ;;		_PCD_CommunicateWithPICC
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           
  4181                           ;psect for function _PCD_WriteRegisterVector
  4182  0000'                    _PCD_WriteRegisterVector:	
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in _PCD_WriteRegisterVector: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  4186                           ;PCD_WriteRegisterVector@reg stored from wreg
  4187  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4188  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4189  0002' 0089'              	movwf	PCD_WriteRegisterVector@reg
  4190                           
  4191                           ;RFID.c: 84: PORTA&=~(1<<4) ;
  4192  0003' 30EF               	movlw	239
  4193  0004' 0086'              	movwf	??_PCD_WriteRegisterVector
  4194  0005' 0806'              	movf	??_PCD_WriteRegisterVector,w
  4195  0006' 0585               	andwf	5,f	;volatile
  4196                           
  4197                           ;RFID.c: 85: SPI_transfer(reg & 0x7E);
  4198  0007' 0809'              	movf	PCD_WriteRegisterVector@reg,w
  4199  0008' 397E               	andlw	126
  4200  0009' 2000'              	fcall	_SPI_transfer
  4201                           
  4202                           ;RFID.c: 86: for (unsigned char index = 0; index < count; index++) {
  4203  000A' 1283               	bcf	3,5	;RP0=0, select bank0
  4204  000B' 1303               	bcf	3,6	;RP1=0, select bank0
  4205  000C' 018A'              	clrf	PCD_WriteRegisterVector@index
  4206  000D'                    l3855:	
  4207  000D' 0807'              	movf	PCD_WriteRegisterVector@count,w
  4208  000E' 020A'              	subwf	PCD_WriteRegisterVector@index,w
  4209  000F' 1803               	btfsc	3,0
  4210  0010' 2820'              	goto	l112
  4211                           
  4212                           ;RFID.c: 87: SPI_transfer(values[index]);
  4213  0011' 080A'              	movf	PCD_WriteRegisterVector@index,w
  4214  0012' 0708'              	addwf	PCD_WriteRegisterVector@values,w
  4215  0013' 0086'              	movwf	??_PCD_WriteRegisterVector
  4216  0014' 0806'              	movf	??_PCD_WriteRegisterVector,w
  4217  0015' 0084               	movwf	4
  4218  0016' 1383               	bcf	3,7	;select IRP bank0
  4219  0017' 0800               	movf	0,w
  4220  0018' 2000'              	fcall	_SPI_transfer
  4221  0019' 3001               	movlw	1
  4222  001A' 0086'              	movwf	??_PCD_WriteRegisterVector
  4223  001B' 0806'              	movf	??_PCD_WriteRegisterVector,w
  4224  001C' 1283               	bcf	3,5	;RP0=0, select bank0
  4225  001D' 1303               	bcf	3,6	;RP1=0, select bank0
  4226  001E' 078A'              	addwf	PCD_WriteRegisterVector@index,f
  4227  001F' 280D'              	goto	l3855
  4228  0020'                    l112:	
  4229                           
  4230                           ;RFID.c: 88: }
  4231                           ;RFID.c: 89: PORTA|=(1<<4) ;
  4232  0020' 1605               	bsf	5,4	;volatile
  4233  0021' 0008               	return
  4234  0022'                    __end_of_PCD_WriteRegisterVector:	
  4235                           
  4236                           	psect	text13
  4237  0000'                    __ptext13:	
  4238 ;; *************** function _PCD_SetRegisterBitMask *****************
  4239 ;; Defined at:
  4240 ;;		line 148 in file "RFID.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;  reg             1    wreg     unsigned char 
  4243 ;;  mask            1    9[BANK0 ] unsigned char 
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;  reg             1   12[BANK0 ] unsigned char 
  4246 ;;  tmp             1   11[BANK0 ] unsigned char 
  4247 ;; Return value:  Size  Location     Type
  4248 ;;		None               void
  4249 ;; Registers used:
  4250 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4256 ;;      Params:         0       1       0       0
  4257 ;;      Locals:         0       2       0       0
  4258 ;;      Temps:          0       1       0       0
  4259 ;;      Totals:         0       4       0       0
  4260 ;;Total ram usage:        4 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    4
  4263 ;; This function calls:
  4264 ;;		_PCD_ReadRegister
  4265 ;;		_PCD_WriteRegister
  4266 ;; This function is called by:
  4267 ;;		_PCD_CalculateCRC
  4268 ;;		_PCD_CommunicateWithPICC
  4269 ;;		_PCD_SetAntennaGain
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           
  4274                           ;psect for function _PCD_SetRegisterBitMask
  4275  0000'                    _PCD_SetRegisterBitMask:	
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _PCD_SetRegisterBitMask: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4279                           ;PCD_SetRegisterBitMask@reg stored from wreg
  4280  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4281  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4282  0002' 008C'              	movwf	PCD_SetRegisterBitMask@reg
  4283                           
  4284                           ;RFID.c: 151: unsigned char tmp;
  4285                           ;RFID.c: 152: tmp = PCD_ReadRegister(reg);
  4286  0003' 080C'              	movf	PCD_SetRegisterBitMask@reg,w
  4287  0004' 2000'              	fcall	_PCD_ReadRegister
  4288  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  4289  0006' 1303               	bcf	3,6	;RP1=0, select bank0
  4290  0007' 008A'              	movwf	??_PCD_SetRegisterBitMask
  4291  0008' 080A'              	movf	??_PCD_SetRegisterBitMask,w
  4292  0009' 008B'              	movwf	PCD_SetRegisterBitMask@tmp
  4293                           
  4294                           ;RFID.c: 153: PCD_WriteRegister(reg, tmp | mask);
  4295  000A' 080B'              	movf	PCD_SetRegisterBitMask@tmp,w
  4296  000B' 0409'              	iorwf	PCD_SetRegisterBitMask@mask,w
  4297  000C' 008A'              	movwf	??_PCD_SetRegisterBitMask
  4298  000D' 080A'              	movf	??_PCD_SetRegisterBitMask,w
  4299  000E' 0086'              	movwf	PCD_WriteRegister@value
  4300  000F' 080C'              	movf	PCD_SetRegisterBitMask@reg,w
  4301  0010' 2000'              	fcall	_PCD_WriteRegister
  4302  0011' 0008               	return
  4303  0012'                    __end_of_PCD_SetRegisterBitMask:	
  4304                           
  4305                           	psect	text14
  4306  0000'                    __ptext14:	
  4307 ;; *************** function _PCD_ClearRegisterBitMask *****************
  4308 ;; Defined at:
  4309 ;;		line 159 in file "RFID.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;  reg             1    wreg     unsigned char 
  4312 ;;  mask            1    9[BANK0 ] unsigned char 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  reg             1   12[BANK0 ] unsigned char 
  4315 ;;  tmp             1   11[BANK0 ] unsigned char 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;		None               void
  4318 ;; Registers used:
  4319 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4325 ;;      Params:         0       1       0       0
  4326 ;;      Locals:         0       2       0       0
  4327 ;;      Temps:          0       1       0       0
  4328 ;;      Totals:         0       4       0       0
  4329 ;;Total ram usage:        4 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    4
  4332 ;; This function calls:
  4333 ;;		_PCD_ReadRegister
  4334 ;;		_PCD_WriteRegister
  4335 ;; This function is called by:
  4336 ;;		_PICC_Select
  4337 ;;		_PCD_AntennaOff
  4338 ;;		_PCD_SetAntennaGain
  4339 ;;		_PICC_REQA_or_WUPA
  4340 ;;		_PCD_StopCrypto1
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           
  4345                           ;psect for function _PCD_ClearRegisterBitMask
  4346  0000'                    _PCD_ClearRegisterBitMask:	
  4347                           
  4348                           ;incstack = 0
  4349                           ; Regs used in _PCD_ClearRegisterBitMask: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4350                           ;PCD_ClearRegisterBitMask@reg stored from wreg
  4351  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4352  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4353  0002' 008C'              	movwf	PCD_ClearRegisterBitMask@reg
  4354                           
  4355                           ;RFID.c: 162: unsigned char tmp;
  4356                           ;RFID.c: 163: tmp = PCD_ReadRegister(reg);
  4357  0003' 080C'              	movf	PCD_ClearRegisterBitMask@reg,w
  4358  0004' 2000'              	fcall	_PCD_ReadRegister
  4359  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  4360  0006' 1303               	bcf	3,6	;RP1=0, select bank0
  4361  0007' 008A'              	movwf	??_PCD_ClearRegisterBitMask
  4362  0008' 080A'              	movf	??_PCD_ClearRegisterBitMask,w
  4363  0009' 008B'              	movwf	PCD_ClearRegisterBitMask@tmp
  4364                           
  4365                           ;RFID.c: 164: PCD_WriteRegister(reg, tmp & (~mask));
  4366  000A' 0909'              	comf	PCD_ClearRegisterBitMask@mask,w
  4367  000B' 050B'              	andwf	PCD_ClearRegisterBitMask@tmp,w
  4368  000C' 008A'              	movwf	??_PCD_ClearRegisterBitMask
  4369  000D' 080A'              	movf	??_PCD_ClearRegisterBitMask,w
  4370  000E' 0086'              	movwf	PCD_WriteRegister@value
  4371  000F' 080C'              	movf	PCD_ClearRegisterBitMask@reg,w
  4372  0010' 2000'              	fcall	_PCD_WriteRegister
  4373  0011' 0008               	return
  4374  0012'                    __end_of_PCD_ClearRegisterBitMask:	
  4375                           
  4376                           	psect	text15
  4377  0000'                    __ptext15:	
  4378 ;; *************** function _PCD_WriteRegister *****************
  4379 ;; Defined at:
  4380 ;;		line 67 in file "RFID.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  reg             1    wreg     unsigned char 
  4383 ;;  value           1    6[COMMON] unsigned char 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  reg             1    8[BANK0 ] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;		None               void
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4395 ;;      Params:         1       0       0       0
  4396 ;;      Locals:         0       1       0       0
  4397 ;;      Temps:          0       1       0       0
  4398 ;;      Totals:         1       2       0       0
  4399 ;;Total ram usage:        3 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    3
  4402 ;; This function calls:
  4403 ;;		_SPI_transfer
  4404 ;; This function is called by:
  4405 ;;		_PCD_SetRegisterBitMask
  4406 ;;		_PCD_ClearRegisterBitMask
  4407 ;;		_PCD_CalculateCRC
  4408 ;;		_PCD_CommunicateWithPICC
  4409 ;;		_PICC_Select
  4410 ;;		_PCD_Reset
  4411 ;;		_PCD_AntennaOn
  4412 ;;		_PCD_Init
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           
  4417                           ;psect for function _PCD_WriteRegister
  4418  0000'                    _PCD_WriteRegister:	
  4419                           
  4420                           ;incstack = 0
  4421                           ; Regs used in _PCD_WriteRegister: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4422                           ;PCD_WriteRegister@reg stored from wreg
  4423  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4424  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4425  0002' 0088'              	movwf	PCD_WriteRegister@reg
  4426                           
  4427                           ;RFID.c: 70: PORTA&=~(1<<4) ;
  4428  0003' 30EF               	movlw	239
  4429  0004' 0087'              	movwf	??_PCD_WriteRegister
  4430  0005' 0807'              	movf	??_PCD_WriteRegister,w
  4431  0006' 0585               	andwf	5,f	;volatile
  4432                           
  4433                           ;RFID.c: 71: SPI_transfer(reg & 0x7E);
  4434  0007' 0808'              	movf	PCD_WriteRegister@reg,w
  4435  0008' 397E               	andlw	126
  4436  0009' 2000'              	fcall	_SPI_transfer
  4437                           
  4438                           ;RFID.c: 72: SPI_transfer(value);
  4439  000A' 0806'              	movf	PCD_WriteRegister@value,w
  4440  000B' 2000'              	fcall	_SPI_transfer
  4441                           
  4442                           ;RFID.c: 73: PORTA|=(1<<4) ;
  4443  000C' 1283               	bcf	3,5	;RP0=0, select bank0
  4444  000D' 1303               	bcf	3,6	;RP1=0, select bank0
  4445  000E' 1605               	bsf	5,4	;volatile
  4446  000F' 0008               	return
  4447  0010'                    __end_of_PCD_WriteRegister:	
  4448                           
  4449                           	psect	text16
  4450  0000'                    __ptext16:	
  4451 ;; *************** function _PCD_ReadRegister *****************
  4452 ;; Defined at:
  4453 ;;		line 96 in file "RFID.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  reg             1    wreg     unsigned char 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  reg             1    7[BANK0 ] unsigned char 
  4458 ;;  value           1    8[BANK0 ] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      unsigned char 
  4461 ;; Registers used:
  4462 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4468 ;;      Params:         0       0       0       0
  4469 ;;      Locals:         0       2       0       0
  4470 ;;      Temps:          1       0       0       0
  4471 ;;      Totals:         1       2       0       0
  4472 ;;Total ram usage:        3 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    3
  4475 ;; This function calls:
  4476 ;;		_SPI_transfer
  4477 ;; This function is called by:
  4478 ;;		_PCD_SetRegisterBitMask
  4479 ;;		_PCD_ClearRegisterBitMask
  4480 ;;		_PCD_CalculateCRC
  4481 ;;		_PCD_CommunicateWithPICC
  4482 ;;		_PICC_Select
  4483 ;;		_PCD_Reset
  4484 ;;		_PCD_AntennaOn
  4485 ;;		_PCD_GetAntennaGain
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           
  4490                           ;psect for function _PCD_ReadRegister
  4491  0000'                    _PCD_ReadRegister:	
  4492                           
  4493                           ;incstack = 0
  4494                           ; Regs used in _PCD_ReadRegister: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4495                           ;PCD_ReadRegister@reg stored from wreg
  4496  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4497  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4498  0002' 0087'              	movwf	PCD_ReadRegister@reg
  4499                           
  4500                           ;RFID.c: 98: unsigned char value;
  4501                           ;RFID.c: 99: PORTA&=~(1<<4) ;
  4502  0003' 30EF               	movlw	239
  4503  0004' 0086'              	movwf	??_PCD_ReadRegister
  4504  0005' 0806'              	movf	??_PCD_ReadRegister,w
  4505  0006' 0585               	andwf	5,f	;volatile
  4506                           
  4507                           ;RFID.c: 100: SPI_transfer(0x80 | (reg & 0x7E));
  4508  0007' 0807'              	movf	PCD_ReadRegister@reg,w
  4509  0008' 397E               	andlw	126
  4510  0009' 3880               	iorlw	128
  4511  000A' 2000'              	fcall	_SPI_transfer
  4512                           
  4513                           ;RFID.c: 101: value = SPI_transfer(0);
  4514  000B' 3000               	movlw	0
  4515  000C' 2000'              	fcall	_SPI_transfer
  4516  000D' 0086'              	movwf	??_PCD_ReadRegister
  4517  000E' 0806'              	movf	??_PCD_ReadRegister,w
  4518  000F' 1283               	bcf	3,5	;RP0=0, select bank0
  4519  0010' 1303               	bcf	3,6	;RP1=0, select bank0
  4520  0011' 0088'              	movwf	PCD_ReadRegister@value
  4521                           
  4522                           ;RFID.c: 102: PORTA|=(1<<4) ;
  4523  0012' 1605               	bsf	5,4	;volatile
  4524                           
  4525                           ;RFID.c: 103: return value;
  4526  0013' 0808'              	movf	PCD_ReadRegister@value,w
  4527  0014' 0008               	return
  4528  0015'                    __end_of_PCD_ReadRegister:	
  4529                           
  4530                           	psect	text17
  4531  0000'                    __ptext17:	
  4532 ;; *************** function _SPI_transfer *****************
  4533 ;; Defined at:
  4534 ;;		line 42 in file "SPI.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  data            1    wreg     unsigned char 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  data            1    6[BANK0 ] unsigned char 
  4539 ;;  i               2    4[BANK0 ] int 
  4540 ;;  i               2    2[BANK0 ] int 
  4541 ;;  ret             1    0[BANK0 ] unsigned char 
  4542 ;;  ret             1    1[BANK0 ] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      unsigned char 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0, btemp+1
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4552 ;;      Params:         0       0       0       0
  4553 ;;      Locals:         0       7       0       0
  4554 ;;      Temps:          1       0       0       0
  4555 ;;      Totals:         1       7       0       0
  4556 ;;Total ram usage:        8 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    2
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_PCD_WriteRegister
  4563 ;;		_PCD_WriteRegisterVector
  4564 ;;		_PCD_ReadRegister
  4565 ;;		_PCD_ReadRegisterVector
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           
  4570                           ;psect for function _SPI_transfer
  4571  0000'                    _SPI_transfer:	
  4572                           
  4573                           ;incstack = 0
  4574                           ; Regs used in _SPI_transfer: [wreg+status,2+status,0+btemp+1]
  4575                           ;SPI_transfer@data stored from wreg
  4576  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4577  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4578  0002' 0086'              	movwf	SPI_transfer@data
  4579                           
  4580                           ;SPI.c: 44: unsigned char ret;
  4581                           ;SPI.c: 45: if(_mode==1 || _mode==3)
  4582  0003' 0800'              	movf	__mode,w
  4583  0004' 3A01               	xorlw	1
  4584  0005' 1903               	skipnz
  4585  0006' 280B'              	goto	l3771
  4586  0007' 0800'              	movf	__mode,w
  4587  0008' 3A03               	xorlw	3
  4588  0009' 1D03               	skipz
  4589  000A' 2843'              	goto	l3799
  4590  000B'                    l3771:	
  4591                           
  4592                           ;SPI.c: 46: {
  4593                           ;SPI.c: 47: for(int i=0;i<8;i++)
  4594  000B' 0182'              	clrf	SPI_transfer@i
  4595  000C' 0183'              	clrf	SPI_transfer@i+1
  4596  000D'                    L18:	
  4597  000D' 0803'              	movf	SPI_transfer@i+1,w
  4598  000E' 3A80               	xorlw	128
  4599  000F' 00FF               	movwf	127
  4600  0010' 3080               	movlw	128
  4601  0011' 027F               	subwf	127,w
  4602  0012' 1D03               	skipz
  4603  0013' 2816'              	goto	u4195
  4604  0014' 3008               	movlw	8
  4605  0015' 0202'              	subwf	SPI_transfer@i,w
  4606  0016'                    u4195:	
  4607  0016' 1803               	btfsc	3,0
  4608  0017' 2887'              	goto	l3821
  4609                           
  4610                           ;SPI.c: 48: {
  4611                           ;SPI.c: 50: if(data & 0x80)PORTA |= (1<<6);
  4612  0018' 1283               	bcf	3,5	;RP0=0, select bank0
  4613  0019' 1303               	bcf	3,6	;RP1=0, select bank0
  4614  001A' 1F86'              	btfss	SPI_transfer@data,7
  4615  001B' 281E'              	goto	l3779
  4616  001C' 1705               	bsf	5,6	;volatile
  4617  001D' 2822'              	goto	l89
  4618  001E'                    l3779:	
  4619                           
  4620                           ;SPI.c: 51: else PORTA &= ~(1<<6);
  4621  001E' 30BF               	movlw	191
  4622  001F' 0085'              	movwf	??_SPI_transfer
  4623  0020' 0805'              	movf	??_SPI_transfer,w
  4624  0021' 0585               	andwf	5,f	;volatile
  4625  0022'                    l89:	
  4626                           
  4627                           ;SPI.c: 53: PORTA ^= (1<<7);
  4628  0022' 3080               	movlw	128
  4629  0023' 0085'              	movwf	??_SPI_transfer
  4630  0024' 0805'              	movf	??_SPI_transfer,w
  4631  0025' 0685               	xorwf	5,f	;volatile
  4632                           
  4633                           ;SPI.c: 54: if(PORTA & (1<<5))ret|=1;
  4634  0026' 1A85               	btfsc	5,5	;volatile
  4635  0027' 1401'              	bsf	SPI_transfer@ret,0
  4636                           
  4637                           ;SPI.c: 55: _delay((unsigned long)((10)*(4000000/4000000.0)));
  4638  0028' 3003               	movlw	3
  4639  0029' 0085'              	movwf	??_SPI_transfer
  4640  002A'                    u6137:	
  4641  002A' 0B85'              	decfsz	??_SPI_transfer,f
  4642  002B' 282A'              	goto	u6137
  4643                           
  4644                           ;SPI.c: 56: PORTA ^= (1<<7);
  4645  002C' 3080               	movlw	128
  4646  002D' 0085'              	movwf	??_SPI_transfer
  4647  002E' 0805'              	movf	??_SPI_transfer,w
  4648  002F' 1283               	bcf	3,5	;RP0=0, select bank0
  4649  0030' 1303               	bcf	3,6	;RP1=0, select bank0
  4650  0031' 0685               	xorwf	5,f	;volatile
  4651                           
  4652                           ;SPI.c: 58: ret<<=1;
  4653  0032' 1003               	clrc
  4654  0033' 0D81'              	rlf	SPI_transfer@ret,f
  4655                           
  4656                           ;SPI.c: 59: data<<=1;
  4657  0034' 1003               	clrc
  4658  0035' 0D86'              	rlf	SPI_transfer@data,f
  4659                           
  4660                           ;SPI.c: 60: _delay((unsigned long)((10)*(4000000/4000000.0)));
  4661  0036' 3003               	movlw	3
  4662  0037' 0085'              	movwf	??_SPI_transfer
  4663  0038'                    u6147:	
  4664  0038' 0B85'              	decfsz	??_SPI_transfer,f
  4665  0039' 2838'              	goto	u6147
  4666  003A' 3001               	movlw	1
  4667  003B' 1283               	bcf	3,5	;RP0=0, select bank0
  4668  003C' 1303               	bcf	3,6	;RP1=0, select bank0
  4669  003D' 0782'              	addwf	SPI_transfer@i,f
  4670  003E' 1803               	skipnc
  4671  003F' 0A83'              	incf	SPI_transfer@i+1,f
  4672  0040' 3000               	movlw	0
  4673  0041' 0783'              	addwf	SPI_transfer@i+1,f
  4674  0042' 280D'              	goto	L18
  4675  0043'                    l3799:	
  4676                           ;SPI.c: 61: }
  4677                           ;SPI.c: 62: }
  4678                           
  4679                           
  4680                           ;SPI.c: 63: else
  4681                           ;SPI.c: 64: {
  4682                           ;SPI.c: 65: unsigned char ret;
  4683                           ;SPI.c: 66: for(int i=0;i<8;i++)
  4684  0043' 1283               	bcf	3,5	;RP0=0, select bank0
  4685  0044' 1303               	bcf	3,6	;RP1=0, select bank0
  4686  0045' 0184'              	clrf	SPI_transfer@i_303
  4687  0046' 0185'              	clrf	SPI_transfer@i_303+1
  4688  0047' 0805'              	movf	SPI_transfer@i_303+1,w
  4689  0048' 3A80               	xorlw	128
  4690  0049' 00FF               	movwf	127
  4691  004A' 3080               	movlw	128
  4692  004B' 027F               	subwf	127,w
  4693  004C' 1D03               	skipz
  4694  004D' 2850'              	goto	u4235
  4695  004E' 3008               	movlw	8
  4696  004F' 0204'              	subwf	SPI_transfer@i_303,w
  4697  0050'                    u4235:	
  4698  0050' 1803               	btfsc	3,0
  4699  0051' 2887'              	goto	l3821
  4700  0052'                    l92:	
  4701                           
  4702                           ;SPI.c: 67: {
  4703                           ;SPI.c: 69: if(PORTA & (1<<5))ret|=1;
  4704  0052' 1283               	bcf	3,5	;RP0=0, select bank0
  4705  0053' 1303               	bcf	3,6	;RP1=0, select bank0
  4706  0054' 1A85               	btfsc	5,5	;volatile
  4707  0055' 1400'              	bsf	SPI_transfer@ret_302,0
  4708                           
  4709                           ;SPI.c: 70: PORTA ^= (1<<7);
  4710  0056' 3080               	movlw	128
  4711  0057' 0085'              	movwf	??_SPI_transfer
  4712  0058' 0805'              	movf	??_SPI_transfer,w
  4713  0059' 0685               	xorwf	5,f	;volatile
  4714                           
  4715                           ;SPI.c: 73: if(data & 0x80)PORTA |= (1<<6);
  4716  005A' 1F86'              	btfss	SPI_transfer@data,7
  4717  005B' 285E'              	goto	l3813
  4718  005C' 1705               	bsf	5,6	;volatile
  4719  005D' 2862'              	goto	l3815
  4720  005E'                    l3813:	
  4721                           
  4722                           ;SPI.c: 74: else PORTA &= ~(1<<6);
  4723  005E' 30BF               	movlw	191
  4724  005F' 0085'              	movwf	??_SPI_transfer
  4725  0060' 0805'              	movf	??_SPI_transfer,w
  4726  0061' 0585               	andwf	5,f	;volatile
  4727  0062'                    l3815:	
  4728                           
  4729                           ;SPI.c: 75: _delay((unsigned long)((10)*(4000000/4000000.0)));
  4730  0062' 3003               	movlw	3
  4731  0063' 0085'              	movwf	??_SPI_transfer
  4732  0064'                    u6157:	
  4733  0064' 0B85'              	decfsz	??_SPI_transfer,f
  4734  0065' 2864'              	goto	u6157
  4735                           
  4736                           ;SPI.c: 76: PORTA ^= (1<<7);
  4737  0066' 3080               	movlw	128
  4738  0067' 0085'              	movwf	??_SPI_transfer
  4739  0068' 0805'              	movf	??_SPI_transfer,w
  4740  0069' 1283               	bcf	3,5	;RP0=0, select bank0
  4741  006A' 1303               	bcf	3,6	;RP1=0, select bank0
  4742  006B' 0685               	xorwf	5,f	;volatile
  4743                           
  4744                           ;SPI.c: 78: ret<<=1;
  4745  006C' 1003               	clrc
  4746  006D' 0D80'              	rlf	SPI_transfer@ret_302,f
  4747                           
  4748                           ;SPI.c: 79: data<<=1;
  4749  006E' 1003               	clrc
  4750  006F' 0D86'              	rlf	SPI_transfer@data,f
  4751                           
  4752                           ;SPI.c: 80: _delay((unsigned long)((10)*(4000000/4000000.0)));
  4753  0070' 3003               	movlw	3
  4754  0071' 0085'              	movwf	??_SPI_transfer
  4755  0072'                    u6167:	
  4756  0072' 0B85'              	decfsz	??_SPI_transfer,f
  4757  0073' 2872'              	goto	u6167
  4758  0074' 3001               	movlw	1
  4759  0075' 1283               	bcf	3,5	;RP0=0, select bank0
  4760  0076' 1303               	bcf	3,6	;RP1=0, select bank0
  4761  0077' 0784'              	addwf	SPI_transfer@i_303,f
  4762  0078' 1803               	skipnc
  4763  0079' 0A85'              	incf	SPI_transfer@i_303+1,f
  4764  007A' 3000               	movlw	0
  4765  007B' 0785'              	addwf	SPI_transfer@i_303+1,f
  4766  007C' 0805'              	movf	SPI_transfer@i_303+1,w
  4767  007D' 3A80               	xorlw	128
  4768  007E' 00FF               	movwf	127
  4769  007F' 3080               	movlw	128
  4770  0080' 027F               	subwf	127,w
  4771  0081' 1D03               	skipz
  4772  0082' 2885'              	goto	u4265
  4773  0083' 3008               	movlw	8
  4774  0084' 0204'              	subwf	SPI_transfer@i_303,w
  4775  0085'                    u4265:	
  4776  0085' 1C03               	skipc
  4777  0086' 2852'              	goto	l92
  4778  0087'                    l3821:	
  4779                           
  4780                           ;SPI.c: 81: }
  4781                           ;SPI.c: 82: }
  4782                           ;SPI.c: 83: return ret;
  4783  0087' 1283               	bcf	3,5	;RP0=0, select bank0
  4784  0088' 1303               	bcf	3,6	;RP1=0, select bank0
  4785  0089' 0801'              	movf	SPI_transfer@ret,w
  4786  008A' 0008               	return
  4787  008B'                    __end_of_SPI_transfer:	
  4788                           
  4789                           	psect	text18
  4790  0000'                    __ptext18:	
  4791 ;; *************** function __ISR *****************
  4792 ;; Defined at:
  4793 ;;		line 61 in file "main.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;		None               void
  4800 ;; Registers used:
  4801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4807 ;;      Params:         0       0       0       0
  4808 ;;      Locals:         0       0       0       0
  4809 ;;      Temps:          4       0       0       0
  4810 ;;      Totals:         4       0       0       0
  4811 ;;Total ram usage:        4 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    1
  4814 ;; This function calls:
  4815 ;;		__ISR_UART
  4816 ;; This function is called by:
  4817 ;;		Interrupt level 1
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function __ISR
  4823  0000'                    __ISR:	
  4824                           
  4825                           ;main.c: 63: _ISR_UART();
  4826  0000' 2000'              	fcall	__ISR_UART
  4827  0001' 0804'              	movf	??__ISR+3,w
  4828  0002' 1283               	bcf	3,5	;RP0=0, select bank0
  4829  0003' 1303               	bcf	3,6	;RP1=0, select bank0
  4830  0004' 00FF               	movwf	127
  4831  0005' 0803'              	movf	??__ISR+2,w
  4832  0006' 008A               	movwf	10
  4833  0007' 0802'              	movf	??__ISR+1,w
  4834  0008' 0084               	movwf	4
  4835  0009' 0E00'              	swapf	??__ISR^(0+-128),w
  4836  000A' 0083               	movwf	3
  4837  000B' 0EFE               	swapf	126,f
  4838  000C' 0E7E               	swapf	126,w
  4839  000D' 0009               	retfie
  4840  000E'                    __end_of__ISR:	
  4841                           
  4842                           	psect	intentry
  4843  0000'                    __pintentry:	
  4844                           ;incstack = 0
  4845                           ; Regs used in __ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4846                           
  4847  0000'                    interrupt_function:	
  4848  007E                     saved_w	set	btemp
  4849  0000' 00FE               	movwf	btemp
  4850  0001' 0E03               	swapf	3,w
  4851  0002' 0081'              	movwf	??__ISR
  4852  0003' 0804               	movf	4,w
  4853  0004' 0082'              	movwf	??__ISR+1
  4854  0005' 080A               	movf	10,w
  4855  0006' 0083'              	movwf	??__ISR+2
  4856  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  4857  0008' 1303               	bcf	3,6	;RP1=0, select bank0
  4858  0009' 087F               	movf	btemp+1,w
  4859  000A' 0084'              	movwf	??__ISR+3
  4860  000B' 2800'              	ljmp	__ISR
  4861                           
  4862                           	psect	text19
  4863  0000'                    __ptext19:	
  4864 ;; *************** function __ISR_UART *****************
  4865 ;; Defined at:
  4866 ;;		line 60 in file "UART.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;		None               void
  4873 ;; Registers used:
  4874 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4880 ;;      Params:         0       0       0       0
  4881 ;;      Locals:         0       0       0       0
  4882 ;;      Temps:          1       0       0       0
  4883 ;;      Totals:         1       0       0       0
  4884 ;;Total ram usage:        1 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; This function calls:
  4887 ;;		Nothing
  4888 ;; This function is called by:
  4889 ;;		__ISR
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           
  4894                           ;psect for function __ISR_UART
  4895  0000'                    __ISR_UART:	
  4896                           
  4897                           ;UART.c: 62: if(RCIF)
  4898                           
  4899                           ;incstack = 0
  4900                           ; Regs used in __ISR_UART: [wreg-fsr0h+status,2+status,0]
  4901  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4902  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4903  0002' 1E8C               	btfss	12,5	;volatile
  4904  0003' 0008               	return
  4905                           
  4906                           ;UART.c: 63: {
  4907                           ;UART.c: 64: buffer[count] = RCREG;
  4908  0004' 081A               	movf	26,w	;volatile
  4909  0005' 0080'              	movwf	??__ISR_UART
  4910  0006' 0800'              	movf	_count,w
  4911  0007' 3E00'              	addlw	_buffer& (0+255)
  4912  0008' 0084               	movwf	4
  4913  0009' 0800'              	movf	??__ISR_UART,w
  4914  000A' 1383               	bcf	3,7	;select IRP bank1
  4915  000B' 0080               	movwf	0
  4916                           
  4917                           ;UART.c: 65: count++;
  4918  000C' 3001               	movlw	1
  4919  000D' 0780'              	addwf	_count,f
  4920  000E' 1803               	skipnc
  4921  000F' 0A81'              	incf	_count+1,f
  4922  0010' 3000               	movlw	0
  4923  0011' 0781'              	addwf	_count+1,f
  4924  0012' 0008               	return
  4925  0013'                    __end_of__ISR_UART:	
  4926  007E                     btemp	set	126	;btemp
  4927  007E                     wtemp	set	126
  4928  007E                     wtemp0	set	126
  4929  0080                     wtemp1	set	128
  4930  0082                     wtemp2	set	130
  4931  0084                     wtemp3	set	132
  4932  0086                     wtemp4	set	134
  4933  0088                     wtemp5	set	136
  4934  007F                     wtemp6	set	127
  4935  007E                     ttemp	set	126
  4936  007E                     ttemp0	set	126
  4937  0081                     ttemp1	set	129
  4938  0084                     ttemp2	set	132
  4939  0087                     ttemp3	set	135
  4940  007F                     ttemp4	set	127
  4941  007E                     ltemp	set	126
  4942  007E                     ltemp0	set	126
  4943  0082                     ltemp1	set	130
  4944  0086                     ltemp2	set	134
  4945  0080                     ltemp3	set	128


Data Sizes:
    Strings     486
    Constant    1
    Data        22
    BSS         30
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     73      80
    BANK1            80     35      79
    BANK2            48      0       0

Pointer List with Targets:

    sp__PICC_GetTypeName	PTR const unsigned char  size(2) Largest target is 2048
		 -> STR_20(CODE[13]), STR_19(CODE[35]), STR_18(CODE[15]), STR_17(CODE[12]), 
		 -> STR_16(CODE[34]), STR_15(CODE[11]), STR_14(CODE[11]), STR_13(CODE[32]), 
		 -> STR_12(CODE[40]), STR_11(CODE[36]), ROM(CODE[2048]), 

    sp__GetStatusCodeName	PTR const unsigned char  size(2) Largest target is 2048
		 -> ROM(CODE[2048]), STR_10(CODE[14]), STR_9(CODE[34]), STR_8(CODE[26]), 
		 -> STR_7(CODE[18]), STR_6(CODE[47]), STR_5(CODE[28]), STR_4(CODE[26]), 
		 -> STR_3(CODE[21]), STR_2(CODE[24]), STR_1(CODE[9]), 

    sp__memcpy	PTR void  size(1) Largest target is 18
		 -> PCD_MIFARE_Transceive@cmdBuffer(BANK0[18]), MIFARE_Ultralight_Write@cmdBuffer(COMMON[6]), 

    PICC_Select@responseBuffer	PTR unsigned char  size(1) Largest target is 9
		 -> PICC_Select@buffer(BANK1[9]), 

    PICC_Select@uid	PTR struct . size(1) Largest target is 12
		 -> uid(BANK1[12]), 

    PCD_TransceiveData@validBits	PTR unsigned char  size(1) Largest target is 1
		 -> MIFARE_OpenUidBackdoor@validBits(COMMON[1]), PICC_Select@txLastBits(BANK1[1]), PICC_REQA_or_WUPA@validBits(COMMON[1]), NULL(NULL[0]), 

    PCD_TransceiveData@backLen	PTR unsigned char  size(1) Largest target is 1
		 -> PICC_IsNewCardPresent@bufferSize(COMMON[1]), MIFARE_SetUid@atqa_size(COMMON[1]), MIFARE_SetUid@byteCount(COMMON[1]), MIFARE_OpenUidBackdoor@received(COMMON[1]), 
		 -> PICC_DumpMifareUltralightToSerial@byteCount(COMMON[1]), PICC_DumpMifareClassicSectorToSerial@byteCount(COMMON[1]), MIFARE_GetValue@size(COMMON[1]), PICC_Select@responseLength(BANK1[1]), 
		 -> NULL(NULL[0]), 

    PCD_TransceiveData@backData	PTR unsigned char  size(1) Largest target is 32
		 -> PICC_IsNewCardPresent@bufferATQA(COMMON[2]), MIFARE_SetUid@atqa_answer(COMMON[2]), MIFARE_SetUid@block0_buffer(BANK0[18]), MIFARE_OpenUidBackdoor@response(BANK0[32]), 
		 -> PICC_DumpMifareUltralightToSerial@buffer(BANK0[18]), PICC_DumpMifareClassicSectorToSerial@buffer(BANK0[18]), MIFARE_GetValue@buffer(BANK0[18]), PICC_Select@buffer(BANK1[9]), 
		 -> NULL(NULL[0]), 

    PCD_TransceiveData@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> MIFARE_SetUid@block0_buffer(BANK0[18]), MIFARE_OpenUidBackdoor@cmd(COMMON[1]), PICC_DumpMifareUltralightToSerial@buffer(BANK0[18]), PICC_DumpMifareClassicSectorToSerial@buffer(BANK0[18]), 
		 -> MIFARE_GetValue@buffer(BANK0[18]), PICC_HaltA@buffer(COMMON[4]), PICC_Select@buffer(BANK1[9]), PICC_REQA_or_WUPA@command(COMMON[1]), 

    PCD_CommunicateWithPICC@backLen	PTR unsigned char  size(1) Largest target is 1
		 -> PICC_IsNewCardPresent@bufferSize(COMMON[1]), MIFARE_SetUid@atqa_size(COMMON[1]), MIFARE_SetUid@byteCount(COMMON[1]), MIFARE_OpenUidBackdoor@received(COMMON[1]), 
		 -> PICC_DumpMifareUltralightToSerial@byteCount(COMMON[1]), PICC_DumpMifareClassicSectorToSerial@byteCount(COMMON[1]), PCD_MIFARE_Transceive@cmdBufferSize(COMMON[1]), MIFARE_GetValue@size(COMMON[1]), 
		 -> PICC_Select@responseLength(BANK1[1]), NULL(NULL[0]), 

    PCD_CommunicateWithPICC@backData	PTR unsigned char  size(1) Largest target is 32
		 -> PICC_IsNewCardPresent@bufferATQA(COMMON[2]), MIFARE_SetUid@atqa_answer(COMMON[2]), MIFARE_SetUid@block0_buffer(BANK0[18]), MIFARE_OpenUidBackdoor@response(BANK0[32]), 
		 -> PICC_DumpMifareUltralightToSerial@buffer(BANK0[18]), PICC_DumpMifareClassicSectorToSerial@buffer(BANK0[18]), PCD_MIFARE_Transceive@cmdBuffer(BANK0[18]), MIFARE_GetValue@buffer(BANK0[18]), 
		 -> PICC_Select@buffer(BANK1[9]), NULL(NULL[0]), 

    PCD_CommunicateWithPICC@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> MIFARE_SetUid@block0_buffer(BANK0[18]), MIFARE_OpenUidBackdoor@cmd(COMMON[1]), PICC_DumpMifareUltralightToSerial@buffer(BANK0[18]), PICC_DumpMifareClassicSectorToSerial@buffer(BANK0[18]), 
		 -> PCD_MIFARE_Transceive@cmdBuffer(BANK0[18]), MIFARE_GetValue@buffer(BANK0[18]), PCD_Authenticate@sendData(COMMON[12]), PICC_HaltA@buffer(COMMON[4]), 
		 -> PICC_Select@buffer(BANK1[9]), PICC_REQA_or_WUPA@command(COMMON[1]), 

    PCD_CommunicateWithPICC@validBits	PTR unsigned char  size(1) Largest target is 1
		 -> MIFARE_OpenUidBackdoor@validBits(COMMON[1]), PCD_MIFARE_Transceive@validBits(COMMON[1]), PICC_Select@txLastBits(BANK1[1]), PICC_REQA_or_WUPA@validBits(COMMON[1]), 
		 -> NULL(NULL[0]), 

    PCD_CalculateCRC@result	PTR unsigned char  size(1) Largest target is 18
		 -> MIFARE_SetUid@block0_buffer(BANK0[18]), PICC_DumpMifareUltralightToSerial@buffer(BANK0[18]), PICC_DumpMifareClassicSectorToSerial@buffer(BANK0[18]), PCD_MIFARE_Transceive@cmdBuffer(BANK0[18]), 
		 -> MIFARE_GetValue@buffer(BANK0[18]), PICC_HaltA@buffer(COMMON[4]), PICC_Select@buffer(BANK1[9]), PCD_CommunicateWithPICC@controlBuffer(BANK0[2]), 

    PCD_CalculateCRC@data	PTR unsigned char  size(1) Largest target is 32
		 -> PICC_IsNewCardPresent@bufferATQA(COMMON[2]), MIFARE_SetUid@atqa_answer(COMMON[2]), MIFARE_SetUid@block0_buffer(BANK0[18]), MIFARE_OpenUidBackdoor@response(BANK0[32]), 
		 -> PICC_DumpMifareUltralightToSerial@buffer(BANK0[18]), PICC_DumpMifareClassicSectorToSerial@buffer(BANK0[18]), PCD_MIFARE_Transceive@cmdBuffer(BANK0[18]), MIFARE_GetValue@buffer(BANK0[18]), 
		 -> PICC_HaltA@buffer(COMMON[4]), PICC_Select@buffer(BANK1[9]), NULL(NULL[0]), 

    PCD_ReadRegisterVector@values	PTR unsigned char  size(1) Largest target is 32
		 -> PICC_IsNewCardPresent@bufferATQA(COMMON[2]), MIFARE_SetUid@atqa_answer(COMMON[2]), MIFARE_SetUid@block0_buffer(BANK0[18]), MIFARE_OpenUidBackdoor@response(BANK0[32]), 
		 -> PICC_DumpMifareUltralightToSerial@buffer(BANK0[18]), PICC_DumpMifareClassicSectorToSerial@buffer(BANK0[18]), PCD_MIFARE_Transceive@cmdBuffer(BANK0[18]), MIFARE_GetValue@buffer(BANK0[18]), 
		 -> PICC_Select@buffer(BANK1[9]), NULL(NULL[0]), 

    PCD_WriteRegisterVector@values	PTR unsigned char  size(1) Largest target is 32
		 -> PICC_IsNewCardPresent@bufferATQA(COMMON[2]), MIFARE_SetUid@atqa_answer(COMMON[2]), MIFARE_SetUid@block0_buffer(BANK0[18]), MIFARE_OpenUidBackdoor@response(BANK0[32]), 
		 -> MIFARE_OpenUidBackdoor@cmd(COMMON[1]), PICC_DumpMifareUltralightToSerial@buffer(BANK0[18]), PICC_DumpMifareClassicSectorToSerial@buffer(BANK0[18]), PCD_MIFARE_Transceive@cmdBuffer(BANK0[18]), 
		 -> MIFARE_GetValue@buffer(BANK0[18]), PCD_Authenticate@sendData(COMMON[12]), PICC_HaltA@buffer(COMMON[4]), PICC_Select@buffer(BANK1[9]), 
		 -> PICC_REQA_or_WUPA@command(COMMON[1]), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _main->_SPI_init
    _PICC_Select->_PCD_ReadRegister
    _PICC_Select->_PCD_WriteRegister
    _PICC_Select->___bmul
    _PCD_CommunicateWithPICC->_PCD_ReadRegister
    _PCD_CommunicateWithPICC->_PCD_WriteRegister
    _PCD_CommunicateWithPICC->_PCD_WriteRegisterVector
    _PCD_ReadRegisterVector->_SPI_transfer
    _PCD_CalculateCRC->_PCD_ReadRegister
    _PCD_CalculateCRC->_PCD_WriteRegister
    _PCD_CalculateCRC->_PCD_WriteRegisterVector
    _PCD_WriteRegisterVector->_SPI_transfer
    _PCD_SetRegisterBitMask->_PCD_ReadRegister
    _PCD_SetRegisterBitMask->_PCD_WriteRegister
    _PCD_ClearRegisterBitMask->_PCD_ReadRegister
    _PCD_ClearRegisterBitMask->_PCD_WriteRegister
    _PCD_WriteRegister->_SPI_transfer
    _PCD_ReadRegister->_SPI_transfer

Critical Paths under __ISR in COMMON

    __ISR->__ISR_UART

Critical Paths under _main in BANK0

    _main->_PICC_ReadCardSerial
    _PICC_ReadCardSerial->_PICC_Select
    _PICC_Select->_PCD_TransceiveData
    _PCD_TransceiveData->_PCD_CommunicateWithPICC
    _PCD_CommunicateWithPICC->_PCD_CalculateCRC
    _PCD_ReadRegisterVector->_SPI_transfer
    _PCD_CalculateCRC->_PCD_SetRegisterBitMask
    _PCD_WriteRegisterVector->_SPI_transfer
    _PCD_SetRegisterBitMask->_PCD_ReadRegister
    _PCD_SetRegisterBitMask->_PCD_WriteRegister
    _PCD_ClearRegisterBitMask->_PCD_ReadRegister
    _PCD_ClearRegisterBitMask->_PCD_WriteRegister
    _PCD_WriteRegister->_SPI_transfer
    _PCD_ReadRegister->_SPI_transfer

Critical Paths under __ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_PICC_ReadCardSerial
    _PICC_ReadCardSerial->_PICC_Select

Critical Paths under __ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under __ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   36455
                _PICC_ReadCardSerial
                          _RFID_init
                           _SPI_init
                          _UART_init
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             2     2      0      66
                                              5 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RFID_init                                            1     1      0       0
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (0) _PICC_ReadCardSerial                                  5     3      2   36389
                                             69 BANK0      4     2      2
                                             34 BANK1      1     1      0
                        _PICC_Select
 ---------------------------------------------------------------------------------
 (0) _PICC_Select                                         43    40      3   36355
                                             60 BANK0      9     6      3
                                              0 BANK1     34    34      0
                   _PCD_CalculateCRC
           _PCD_ClearRegisterBitMask
                   _PCD_ReadRegister
                 _PCD_TransceiveData
                  _PCD_WriteRegister
                            ___awdiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     367
                                              5 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4    1215
                                              5 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _PCD_TransceiveData                                  16    10      6   19710
                                             44 BANK0     16    10      6
            _PCD_CommunicateWithPICC
 ---------------------------------------------------------------------------------
 (2) _PCD_CommunicateWithPICC                             23    15      8   16489
                                             21 BANK0     23    15      8
                   _PCD_CalculateCRC
                   _PCD_ReadRegister
             _PCD_ReadRegisterVector
             _PCD_SetRegisterBitMask
                  _PCD_WriteRegister
            _PCD_WriteRegisterVector
 ---------------------------------------------------------------------------------
 (3) _PCD_ReadRegisterVector                              12     9      3    1218
                                              7 BANK0     12     9      3
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (3) _PCD_CalculateCRC                                     8     6      2    6633
                                             13 BANK0      8     6      2
                   _PCD_ReadRegister
             _PCD_SetRegisterBitMask
                  _PCD_WriteRegister
            _PCD_WriteRegisterVector
 ---------------------------------------------------------------------------------
 (3) _PCD_WriteRegisterVector                              5     3      2     716
                                              6 COMMON     1     1      0
                                              7 BANK0      4     2      2
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (3) _PCD_SetRegisterBitMask                               4     3      1    2519
                                              9 BANK0      4     3      1
                   _PCD_ReadRegister
                  _PCD_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _PCD_ClearRegisterBitMask                             4     3      1    2596
                                              9 BANK0      4     3      1
                   _PCD_ReadRegister
                  _PCD_WriteRegister
 ---------------------------------------------------------------------------------
 (1) _PCD_WriteRegister                                    3     2      1    1772
                                              6 COMMON     1     0      1
                                              7 BANK0      2     2      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _PCD_ReadRegister                                     3     3      0     312
                                              6 COMMON     1     1      0
                                              7 BANK0      2     2      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (2) _SPI_transfer                                         8     8      0     247
                                              5 COMMON     1     1      0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) __ISR                                                 4     4      0       0
                                              1 COMMON     4     4      0
                          __ISR_UART
 ---------------------------------------------------------------------------------
 (8) __ISR_UART                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PICC_ReadCardSerial
     _PICC_Select
       _PCD_CalculateCRC
         _PCD_ReadRegister
           _SPI_transfer
         _PCD_SetRegisterBitMask
           _PCD_ReadRegister
             _SPI_transfer
           _PCD_WriteRegister
             _SPI_transfer
         _PCD_WriteRegister
           _SPI_transfer
         _PCD_WriteRegisterVector
           _SPI_transfer
       _PCD_ClearRegisterBitMask
         _PCD_ReadRegister
           _SPI_transfer
         _PCD_WriteRegister
           _SPI_transfer
       _PCD_ReadRegister
         _SPI_transfer
       _PCD_TransceiveData
         _PCD_CommunicateWithPICC
           _PCD_CalculateCRC
             _PCD_ReadRegister
               _SPI_transfer
             _PCD_SetRegisterBitMask
               _PCD_ReadRegister
                 _SPI_transfer
               _PCD_WriteRegister
                 _SPI_transfer
             _PCD_WriteRegister
               _SPI_transfer
             _PCD_WriteRegisterVector
               _SPI_transfer
           _PCD_ReadRegister
             _SPI_transfer
           _PCD_ReadRegisterVector
             _SPI_transfer
           _PCD_SetRegisterBitMask
             _PCD_ReadRegister
               _SPI_transfer
             _PCD_WriteRegister
               _SPI_transfer
           _PCD_WriteRegister
             _SPI_transfer
           _PCD_WriteRegisterVector
             _SPI_transfer
       _PCD_WriteRegister
         _SPI_transfer
       ___awdiv
       ___bmul
   _RFID_init
   _SPI_init
   _UART_init

 __ISR (ROOT)
   __ISR_UART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     23      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     49      50       3      100.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A8      10        0.0%
ABS                  0      0      A8       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Apr 01 16:59:40 2015

                                   pc 0002                        ___bmul@product 0000  
                         __CFG_CP$OFF 0000                                    l92 0052  
                                  l78 0016                                    l89 0022  
                        ___awdiv@sign 0005                                    fsr 0004  
                         __CFG_LVP$ON 0000                                   l112 0020  
                                 l217 0381                                   l242 013C  
                                 l249 0252                                   l275 035A  
                        __CFG_CPD$OFF 0000                                   _uid 0010  
                                 fsr0 0004                                   indf 0000  
     __end_of_PCD_WriteRegisterVector 0022                 __size_of_SPI_transfer 008B  
                                l4011 00CD                                  l4005 00C9  
                                l4101 001F                                  l4103 002D  
                                l4041 0106                                  l4033 00EE  
                                l4025 00E3                                  l4113 004E  
                                l4201 007A                                  l4203 0087  
                                l4045 011F                                  l4029 00EC  
                                l4117 0056                                  l4109 0043  
                                l4063 0004                                  l4049 0121  
                                l4225 00EF                                  l4217 00C0  
                                l4161 000F                                  l3169 001A  
                                l4091 0017                                  l4067 000A  
                                l4307 0258                                  l4315 02AF  
                                l4243 013B                                  l4085 000C  
                                l4333 02CD                                  l4237 0108  
                                l4229 0107                                  l4165 0019  
                                l4327 02BE                                  l4239 0130  
                                l4175 0035                                  l5039 0004  
                                l4337 02DF                                  l4329 02C7  
                                l4193 0079                                  l4177 0039  
                                l4347 02EC                                  l4267 0184  
                                l4187 005C                                  l3813 005E  
                                l3821 0087                                  l4373 034B  
                                l4365 0334                                  l4357 031C  
                                l4349 0314                                  l4189 0067  
                                l3815 0062                                  l3911 0030  
                                l4369 0344                                  l4297 023C  
                                l3771 000B                                  l3923 0045  
                                l4379 0367                                  l3855 000D  
                                l3961 0065                                  l3937 0009  
                                l3779 001E                                  l3971 0074  
                                l3939 0013                                  l3885 002C  
                                l3893 0059                                  l3799 0043  
                                l3959 005F                                  l3889 0041  
                                l3897 0015                                  l3985 008D  
                                l3977 0080                                  l3899 006B  
                                l3997 00A3                                  STR_1 01E6  
                                STR_2 015B                                  STR_3 0173  
                                STR_4 0141                                  STR_5 010B  
                                STR_6 0009                                  STR_7 0188  
                                STR_8 0127                                  STR_9 00A7  
                                u4235 0050                                  u4324 0032  
                                u4325 0030                                  u4265 0085  
                                u4195 0016                                  u6137 002A  
                                u4385 001A                                  u6147 0038  
                                _RCIF 0065                                  u6157 0064  
                                u4645 0022                                  u6167 0072  
                                u4815 008E                                  u4665 002E  
                                u4675 003A                                  u4915 01B5  
                                u4685 0044                                  u4925 01F1  
                                u4974 029F                                  u4975 029D  
                                _TXIF 0064                                  __ISR 0000  
                                _main 0000                                  btemp 007E  
                       __CFG_BOREN$ON 0000                                  ltemp 007E  
                                start 0000*                                 ttemp 007E  
                                wtemp 007E                     ___bmul@multiplier 0001  
         _PCD_CommunicateWithPICC$378 0024                          ?_PICC_Select 003C  
                               ?__ISR 0000           PCD_ReadRegisterVector@count 0007  
         PCD_ReadRegisterVector@index 0012                    __size_of_RFID_init 0016  
         PCD_ReadRegisterVector@value 000E                                 ?_main 0000  
       PCD_ReadRegisterVector@address 0010                       __end_of___awdiv 005D  
                               STR_10 01A9                                 STR_11 0060  
                               STR_20 01B7                                 STR_12 0038  
                               STR_13 00EB                                 STR_14 01D0  
                               STR_15 01DB                                 STR_16 00C9  
                               STR_17 01C4                         __CFG_WDTE$OFF 0000  
                               STR_18 019A                                 STR_19 0084  
                     ___awdiv@divisor 0000                      SPI_transfer@data 0006  
                     ___awdiv@counter 0004                                 _RCREG 001A  
                        _SPI_transfer 0000                                 _SPBRG 0099  
                               _PORTA 0005                                 _TRISA 0085  
                               _TXREG 0019      __end_of_PCD_ClearRegisterBitMask 0012  
                               __mode 0000                    __size_of_UART_init 0011  
       PCD_ReadRegisterVector@rxAlign 0009                                 _count 0000  
                               pclath 000A                                 ltemp0 007E  
                    __end_of_SPI_init 0020                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
                               ttemp0 007E                                 ttemp1 0081  
                               ttemp2 0084                                 ttemp3 0087  
                               ttemp4 007F                                 status 0003  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                        __CFG_MCLRE$OFF 0000  
                        __end_of__ISR 000E                    MIFARE_SetUid@F1269 0000  
                     __initialization 0000                     __end_of_FIFO_SIZE 0009  
                        __end_of_main 0007             PCD_SetRegisterBitMask@reg 000C  
           PCD_SetRegisterBitMask@tmp 000B                      PICC_Select@count 001E  
                    PICC_Select@index 001F                                ??__ISR 0001  
                              ??_main 0007             PCD_TransceiveData@backLen 002E  
                  __size_of__ISR_UART 0013                   _PICC_ReadCardSerial 0000  
                    _PCD_ReadRegister 0000                  PCD_WriteRegister@reg 0008  
                    ___awdiv@dividend 0002                     SPI_transfer@i_303 0004  
           PCD_TransceiveData@sendLen 002C             PCD_TransceiveData@rxAlign 0030  
           PCD_TransceiveData@waitIRq 003A      PCD_CommunicateWithPICC@validBits 001A  
                              u5407jf 000A                                u6127jf 0006  
                              u5407jt 0000                                u6127jt 0000  
                 PICC_Select@maxbytes 000C                     __end_of_RFID_init 0016  
                 PICC_Select@uidIndex 0019                  ?_PICC_ReadCardSerial 0045  
                      __CFG_PWRTE$OFF 0000                                ___bmul 0000  
                   __end_of_UART_init 0011                             ??___awdiv 0005  
                              _buffer 0000               ?_PCD_SetRegisterBitMask 0009  
    __size_of_PCD_WriteRegisterVector 0022                      ___awdiv@quotient 0006  
   PCD_CommunicateWithPICC@bitFraming 0023            PCD_WriteRegisterVector@reg 0009  
                              saved_w 007E                    _PCD_TransceiveData 0000  
   PCD_CommunicateWithPICC@_validBits 002A             PICC_Select@responseBuffer 001C  
           PICC_Select@responseLength 001B       PCD_CommunicateWithPICC@backData 0018  
            _PCD_ClearRegisterBitMask 0000               __end_of__initialization 0037  
                 ?_PCD_TransceiveData 002C                 ??_PICC_ReadCardSerial 0047  
     PCD_CommunicateWithPICC@checkCRC 001C                     ?_PCD_CalculateCRC 000D  
                   __end_of__ISR_UART 0013              ??_PCD_ReadRegisterVector 000A  
                        SPI_init@mode 0006                   ___bmul@multiplicand 0005  
                  ??_PCD_CalculateCRC 000F                        __pcstackCOMMON 0000  
      __end_of_PCD_SetRegisterBitMask 0012                          __pidataBANK0 0000  
                        __pidataBANK1 0000            PCD_SetRegisterBitMask@mask 0009  
        PCD_ClearRegisterBitMask@mask 0009                  ??_PCD_TransceiveData 0032  
                           ?_SPI_init 0000                  __size_of_PICC_Select 0385  
     PCD_CommunicateWithPICC@sendData 0016                     PICC_Select@buffer 000E  
                   PICC_Select@result 0020            PCD_TransceiveData@backData 002D  
                          __pbssBANK1 0000            PCD_TransceiveData@checkCRC 0031  
            PICC_Select@useCascadeTag 0018                     PCD_CalculateCRC@i 0011  
                   PCD_CalculateCRC@n 0013              ?_PCD_CommunicateWithPICC 0015  
                          __pmaintext 0000                               ?___bmul 0005  
                          __pintentry 0000           PCD_ClearRegisterBitMask@reg 000C  
         PCD_ClearRegisterBitMask@tmp 000B            PCD_TransceiveData@sendData 003B  
                          ??_SPI_init 0005          MIFARE_UnbrickUidSector@F1283 0000  
                          __stringtab 0000     PCD_CommunicateWithPICC@txLastBits 0022  
                PICC_Select@validBits 003D              __end_of_PCD_ReadRegister 0015  
     __size_of_PCD_ReadRegisterVector 007A                       __size_of___bmul 0013  
                             ___awdiv 0000               _PCD_WriteRegisterVector 0000  
            PCD_CommunicateWithPICC@i 0020              PCD_CommunicateWithPICC@n 002B  
                   _PCD_WriteRegister 0000                             _FIFO_SIZE 0008  
                             __ptext1 0000                               __ptext2 0000  
                             __ptext3 0000                               __ptext4 0000  
                             __ptext5 0000                               __ptext6 0000  
                             __ptext7 0000                               __ptext8 0000  
                             __ptext9 0000                    ?_PCD_WriteRegister 0006  
                 ??_PCD_WriteRegister 0007                               clrloop0 0001  
                end_of_initialization 0037  PCD_CommunicateWithPICC@controlBuffer 0027  
              PICC_Select@bytesToCopy 001A       __end_of_PCD_CommunicateWithPICC 0123  
                           _RFID_init 0000          PCD_WriteRegisterVector@count 0007  
        PCD_WriteRegisterVector@index 000A                             _RCSTAbits 0018  
           __end_of_PCD_WriteRegister 0010                          __pstringtext 0000  
             PICC_Select@cascadeLevel 000D                             _UART_init 0000  
          ??_PCD_ClearRegisterBitMask 000A                _PCD_ReadRegisterVector 0000  
                           _TRISBbits 0086                PICC_Select@uidComplete 0006  
              PCD_CalculateCRC@length 000D                             _TXSTAbits 0098  
              PCD_CalculateCRC@result 000E             ??_PCD_WriteRegisterVector 0006  
                          ?_RFID_init 0000         PCD_WriteRegisterVector@values 0008  
                      PICC_Select@uid 003C                             __ISR_UART 0000  
          PCD_ReadRegisterVector@mask 000F                        __end_of___bmul 0013  
             PCD_ReadRegisterVector@i 0011                       SPI_transfer@ret 0001  
                          ?_UART_init 0000             __size_of_PCD_CalculateCRC 005E  
                 start_initialization 0000                     __size_of_SPI_init 0020  
         __end_of_PICC_ReadCardSerial 0020                    PICC_Select@rxAlign 000B  
                            ??___bmul 0006            __size_of_PCD_WriteRegister 0010  
                          ?__ISR_UART 0000                         ??_PICC_Select 003F  
                         __pdataBANK0 0000                           __pdataBANK1 0000  
         __size_of_PCD_TransceiveData 002A                         ?_SPI_transfer 0000  
      PCD_CommunicateWithPICC@backLen 0019      __size_of_PCD_CommunicateWithPICC 0123  
               PCD_ReadRegister@value 0008                  PCD_CalculateCRC@data 0014  
                         __pbssCOMMON 0000                             ___latbits 0000  
                       __pcstackBANK0 0000                         __pcstackBANK1 0000  
                 __end_of__stringdata 01EF                         SPI_transfer@i 0002  
      PCD_CommunicateWithPICC@command 0026        PCD_CommunicateWithPICC@sendLen 0017  
      PCD_CommunicateWithPICC@rxAlign 001B        PCD_CommunicateWithPICC@waitIRq 0015  
PCD_CommunicateWithPICC@errorRegValue 0029                             __pnvBANK0 0000  
                         ??_RFID_init 0005                     ?_PCD_ReadRegister 0000  
                            ?___awdiv 0000                    ??_PCD_ReadRegister 0006  
               PICC_Select@bufferUsed 0008                PCD_WriteRegister@value 0006  
                         ??_UART_init 0005                        ??_SPI_transfer 0005  
                 __end_of_PICC_Select 0385      PICC_Select@currentLevelKnownBits 0021  
         PCD_TransceiveData@validBits 002F                     interrupt_function 0000  
            ??_PCD_SetRegisterBitMask 000A                             clear_ram0 0000  
                 SPI_transfer@ret_302 0000        __pjmp_tab__PICC_ReadCardSerial 0000  
                         ??__ISR_UART 0000               PICC_Select@collisionPos 0017  
             ?_PCD_ReadRegisterVector 0007                      _PCD_CalculateCRC 0000  
                         __stringbase 0008                           __stringdata 0009  
                            _SPI_init 0000          PCD_ReadRegisterVector@values 0008  
               PICC_Select@selectDone 0007             PCD_ReadRegisterVector@reg 000D  
               PICC_Select@txLastBits 001D        __end_of_PCD_ReadRegisterVector 007A  
                    __size_of___awdiv 005D                           _PICC_Select 0000  
                  __end_of__stringtab 0008               _PCD_CommunicateWithPICC 0000  
                            __ptext10 0000                              __ptext11 0000  
                            __ptext12 0000                              __ptext13 0000  
                            __ptext14 0000                              __ptext15 0000  
                            __ptext16 0000                              __ptext17 0000  
                            __ptext18 0000                              __ptext19 0000  
                       __size_of__ISR 000E                         __size_of_main 0007  
                __end_of_SPI_transfer 008B       __size_of_PCD_SetRegisterBitMask 0012  
   __size_of_PCD_ClearRegisterBitMask 0012             ?_PCD_ClearRegisterBitMask 0009  
                 PCD_ReadRegister@reg 0007                              intlevel1 0000* 
            ?_PCD_WriteRegisterVector 0007          __size_of_PICC_ReadCardSerial 0020  
                           stringcode 0000                __pjmp_tab__PICC_Select 0000  
          __end_of_PCD_TransceiveData 002A             ??_PCD_CommunicateWithPICC 001D  
              _PCD_SetRegisterBitMask 0000             PICC_ReadCardSerial@result 0022  
           __size_of_PCD_ReadRegister 0015                              stringtab 0000  
                  __CFG_FOSC$INTOSCIO 0000              __end_of_PCD_CalculateCRC 005E  
                     _PICC_Select$430 000A                       _PICC_Select$433 0000  
                     _PICC_Select$435 0002                       _PICC_Select$436 0004  
                     _PICC_Select$429 0009  
