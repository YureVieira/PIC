

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Mar 31 09:01:28 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000E                     	;# 
    52  000E                     	;# 
    53  000F                     	;# 
    54  0010                     	;# 
    55  0011                     	;# 
    56  0012                     	;# 
    57  0015                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0017                     	;# 
    61  0018                     	;# 
    62  0019                     	;# 
    63  001A                     	;# 
    64  001F                     	;# 
    65  0081                     	;# 
    66  0085                     	;# 
    67  0086                     	;# 
    68  008C                     	;# 
    69  008E                     	;# 
    70  0092                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009F                     	;# 
    78                           
    79                           	psect	idataBANK0
    80  0653                     __pidataBANK0:	
    81                           
    82                           ;initializer for _key
    83  0653  34FF               	retlw	255
    84  0654  34FF               	retlw	255
    85  0655  34FF               	retlw	255
    86  0656  34FF               	retlw	255
    87  0657  34FF               	retlw	255
    88  0658  34FF               	retlw	255
    89                           
    90                           	psect	idataBANK1
    91  05DD                     __pidataBANK1:	
    92                           
    93                           ;initializer for _writeData
    94  05DD  344D               	retlw	77
    95  05DE  3469               	retlw	105
    96  05DF  3463               	retlw	99
    97  05E0  3472               	retlw	114
    98  05E1  346F               	retlw	111
    99  05E2  3463               	retlw	99
   100  05E3  346F               	retlw	111
   101  05E4  346E               	retlw	110
   102  05E5  3474               	retlw	116
   103  05E6  3472               	retlw	114
   104  05E7  346F               	retlw	111
   105  05E8  346C               	retlw	108
   106  05E9  3461               	retlw	97
   107  05EA  346E               	retlw	110
   108  05EB  3464               	retlw	100
   109  05EC  346F               	retlw	111
   110  05ED  3473               	retlw	115
   111  05EE  3400               	retlw	0
   112                           
   113                           	psect	strings
   114  03A2                     __pstrings:	
   115  03A2                     stringtab:	
   116  03A2                     __stringtab:	
   117  03A2                     stringcode:	
   118                           ;	String table - string pointers are 1 byte each
   119                           
   120  03A2                     stringdir:	
   121  03A2  3003               	movlw	high stringdir
   122  03A3  008A               	movwf	10
   123  03A4  0804               	movf	4,w
   124  03A5  0A84               	incf	4,f
   125  03A6  0782               	addwf	2,f
   126  03A7                     __stringbase:	
   127  03A7  3400               	retlw	0
   128  03A8                     __end_of__stringtab:	
   129  03A8                     _dpowers:	
   130  03A8  3401               	retlw	1
   131  03A9  3400               	retlw	0
   132  03AA  340A               	retlw	10
   133  03AB  3400               	retlw	0
   134  03AC  3464               	retlw	100
   135  03AD  3400               	retlw	0
   136  03AE  34E8               	retlw	232
   137  03AF  3403               	retlw	3
   138  03B0  3410               	retlw	16
   139  03B1  3427               	retlw	39
   140  03B2                     __end_of_dpowers:	
   141  0006                     _PORTB	set	6
   142  001A                     _RCREG	set	26
   143  0018                     _RCSTAbits	set	24
   144  0019                     _TXREG	set	25
   145  0065                     _RCIF	set	101
   146  0064                     _TXIF	set	100
   147  0099                     _SPBRG	set	153
   148  0086                     _TRISB	set	134
   149  0086                     _TRISBbits	set	134
   150  0098                     _TXSTAbits	set	152
   151  03B2                     __stringdata:	
   152  03B2                     STR_3:	
   153  03B2  3450               	retlw	80	;'P'
   154  03B3  3472               	retlw	114	;'r'
   155  03B4  346F               	retlw	111	;'o'
   156  03B5  3467               	retlw	103	;'g'
   157  03B6  3472               	retlw	114	;'r'
   158  03B7  3461               	retlw	97	;'a'
   159  03B8  346D               	retlw	109	;'m'
   160  03B9  3461               	retlw	97	;'a'
   161  03BA  3420               	retlw	32	;' '
   162  03BB  3465               	retlw	101	;'e'
   163  03BC  346D               	retlw	109	;'m'
   164  03BD  3420               	retlw	32	;' '
   165  03BE  3466               	retlw	102	;'f'
   166  03BF  3475               	retlw	117	;'u'
   167  03C0  346E               	retlw	110	;'n'
   168  03C1  3463               	retlw	99	;'c'
   169  03C2  3469               	retlw	105	;'i'
   170  03C3  346F               	retlw	111	;'o'
   171  03C4  346E               	retlw	110	;'n'
   172  03C5  3461               	retlw	97	;'a'
   173  03C6  346D               	retlw	109	;'m'
   174  03C7  3465               	retlw	101	;'e'
   175  03C8  346E               	retlw	110	;'n'
   176  03C9  3474               	retlw	116	;'t'
   177  03CA  346F               	retlw	111	;'o'
   178  03CB  3421               	retlw	33	;'!'
   179  03CC  340A               	retlw	10
   180  03CD  3400               	retlw	0
   181  03CE                     STR_5:	
   182  03CE  3454               	retlw	84	;'T'
   183  03CF  3469               	retlw	105	;'i'
   184  03D0  3470               	retlw	112	;'p'
   185  03D1  346F               	retlw	111	;'o'
   186  03D2  3420               	retlw	32	;' '
   187  03D3  3464               	retlw	100	;'d'
   188  03D4  3465               	retlw	101	;'e'
   189  03D5  3420               	retlw	32	;' '
   190  03D6  3454               	retlw	84	;'T'
   191  03D7  3461               	retlw	97	;'a'
   192  03D8  3467               	retlw	103	;'g'
   193  03D9  343A               	retlw	58	;':'
   194  03DA  3420               	retlw	32	;' '
   195  03DB  3425               	retlw	37	;'%'
   196  03DC  3464               	retlw	100	;'d'
   197  03DD  340A               	retlw	10
   198  03DE  3400               	retlw	0
   199  03DF                     STR_6:	
   200  03DF  3443               	retlw	67	;'C'
   201  03E0  346F               	retlw	111	;'o'
   202  03E1  3464               	retlw	100	;'d'
   203  03E2  3469               	retlw	105	;'i'
   204  03E3  3467               	retlw	103	;'g'
   205  03E4  346F               	retlw	111	;'o'
   206  03E5  343A               	retlw	58	;':'
   207  03E6  3420               	retlw	32	;' '
   208  03E7  3400               	retlw	0
   209  03E8                     STR_4:	
   210  03E8  342E               	retlw	46	;'.'
   211  03E9  340A               	retlw	10
   212  03EA  3400               	retlw	0
   213  03EB                     STR_7:	
   214  03EB  3425               	retlw	37	;'%'
   215  03EC  3463               	retlw	99	;'c'
   216  03ED  3400               	retlw	0
   217  03EE                     STR_1:	
   218  03EE  3431               	retlw	49	;'1'
   219  03EF  3400               	retlw	0
   220  03F0                     STR_2:	
   221  03F0  3432               	retlw	50	;'2'
   222  03F1  3400               	retlw	0
   223  03F2                     __end_of__stringdata:	
   224                           
   225                           ; #config settings
   226  0000                     
   227                           	psect	cinit
   228  0011                     start_initialization:	
   229  0011                     __initialization:	
   230                           
   231                           ; Clear objects allocated to COMMON
   232  0011  01F7               	clrf	__pbssCOMMON& (0+127)
   233  0012  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   234                           
   235                           ; Clear objects allocated to BANK1
   236  0013  1383               	bcf	3,7	;select IRP bank0
   237  0014  30B2               	movlw	low __pbssBANK1
   238  0015  0084               	movwf	4
   239  0016  30C2               	movlw	low (__pbssBANK1+16)
   240  0017  264B               	fcall	clear_ram0
   241                           
   242                           ; Initialize objects allocated to BANK1
   243  0018  1683               	bsf	3,5	;RP0=1, select bank1
   244  0019  1303               	bcf	3,6	;RP1=0, select bank1
   245  001A  25DD               	fcall	__pidataBANK1	;fetch initializer
   246  001B  00A0               	movwf	__pdataBANK1& (0+127)
   247  001C  25DE               	fcall	__pidataBANK1+1	;fetch initializer
   248  001D  00A1               	movwf	(__pdataBANK1+1)& (0+127)
   249  001E  25DF               	fcall	__pidataBANK1+2	;fetch initializer
   250  001F  00A2               	movwf	(__pdataBANK1+2)& (0+127)
   251  0020  25E0               	fcall	__pidataBANK1+3	;fetch initializer
   252  0021  00A3               	movwf	(__pdataBANK1+3)& (0+127)
   253  0022  25E1               	fcall	__pidataBANK1+4	;fetch initializer
   254  0023  00A4               	movwf	(__pdataBANK1+4)& (0+127)
   255  0024  25E2               	fcall	__pidataBANK1+5	;fetch initializer
   256  0025  00A5               	movwf	(__pdataBANK1+5)& (0+127)
   257  0026  25E3               	fcall	__pidataBANK1+6	;fetch initializer
   258  0027  00A6               	movwf	(__pdataBANK1+6)& (0+127)
   259  0028  25E4               	fcall	__pidataBANK1+7	;fetch initializer
   260  0029  00A7               	movwf	(__pdataBANK1+7)& (0+127)
   261  002A  25E5               	fcall	__pidataBANK1+8	;fetch initializer
   262  002B  00A8               	movwf	(__pdataBANK1+8)& (0+127)
   263  002C  25E6               	fcall	__pidataBANK1+9	;fetch initializer
   264  002D  00A9               	movwf	(__pdataBANK1+9)& (0+127)
   265  002E  25E7               	fcall	__pidataBANK1+10	;fetch initializer
   266  002F  00AA               	movwf	(__pdataBANK1+10)& (0+127)
   267  0030  25E8               	fcall	__pidataBANK1+11	;fetch initializer
   268  0031  00AB               	movwf	(__pdataBANK1+11)& (0+127)
   269  0032  25E9               	fcall	__pidataBANK1+12	;fetch initializer
   270  0033  00AC               	movwf	(__pdataBANK1+12)& (0+127)
   271  0034  25EA               	fcall	__pidataBANK1+13	;fetch initializer
   272  0035  00AD               	movwf	(__pdataBANK1+13)& (0+127)
   273  0036  25EB               	fcall	__pidataBANK1+14	;fetch initializer
   274  0037  00AE               	movwf	(__pdataBANK1+14)& (0+127)
   275  0038  25EC               	fcall	__pidataBANK1+15	;fetch initializer
   276  0039  00AF               	movwf	(__pdataBANK1+15)& (0+127)
   277  003A  25ED               	fcall	__pidataBANK1+16	;fetch initializer
   278  003B  00B0               	movwf	(__pdataBANK1+16)& (0+127)
   279  003C  25EE               	fcall	__pidataBANK1+17	;fetch initializer
   280  003D  00B1               	movwf	(__pdataBANK1+17)& (0+127)
   281                           
   282                           ; Initialize objects allocated to BANK0
   283  003E  1283               	bcf	3,5	;RP0=0, select bank0
   284  003F  1303               	bcf	3,6	;RP1=0, select bank0
   285  0040  2653               	fcall	__pidataBANK0	;fetch initializer
   286  0041  00DF               	movwf	__pdataBANK0& (0+127)
   287  0042  2654               	fcall	__pidataBANK0+1	;fetch initializer
   288  0043  00E0               	movwf	(__pdataBANK0+1)& (0+127)
   289  0044  2655               	fcall	__pidataBANK0+2	;fetch initializer
   290  0045  00E1               	movwf	(__pdataBANK0+2)& (0+127)
   291  0046  2656               	fcall	__pidataBANK0+3	;fetch initializer
   292  0047  00E2               	movwf	(__pdataBANK0+3)& (0+127)
   293  0048  2657               	fcall	__pidataBANK0+4	;fetch initializer
   294  0049  00E3               	movwf	(__pdataBANK0+4)& (0+127)
   295  004A  2658               	fcall	__pidataBANK0+5	;fetch initializer
   296  004B  00E4               	movwf	(__pdataBANK0+5)& (0+127)
   297  004C                     end_of_initialization:	
   298                           ;End of C runtime variable initialization code
   299                           
   300  004C                     __end_of__initialization:	
   301  004C  0183               	clrf	3
   302  004D  2B51               	ljmp	_main	;jump to C main() function
   303                           
   304                           	psect	bssCOMMON
   305  0077                     __pbssCOMMON:	
   306  0077                     _count:	
   307  0077                     	ds	2
   308                           
   309                           	psect	dataBANK0
   310  005F                     __pdataBANK0:	
   311  005F                     _key:	
   312  005F                     	ds	6
   313                           
   314                           	psect	bssBANK1
   315  00B2                     __pbssBANK1:	
   316  00B2                     _buffer:	
   317  00B2                     	ds	16
   318                           
   319                           	psect	dataBANK1
   320  00A0                     __pdataBANK1:	
   321  00A0                     _writeData:	
   322  00A0                     	ds	18
   323                           
   324                           	psect	clrtext
   325  064B                     clear_ram0:	
   326                           ;	Called with FSR containing the base address, and
   327                           ;	W with the last address+1
   328                           
   329  064B  0064               	clrwdt	;clear the watchdog before getting into this loop
   330  064C                     clrloop0:	
   331  064C  0180               	clrf	0	;clear RAM location pointed to by FSR
   332  064D  0A84               	incf	4,f	;increment pointer
   333  064E  0604               	xorwf	4,w	;XOR with final address
   334  064F  1903               	btfsc	3,2	;have we reached the end yet?
   335  0650  3400               	retlw	0	;all done for this memory range, return
   336  0651  0604               	xorwf	4,w	;XOR again to restore value
   337  0652  2E4C               	goto	clrloop0	;do the next byte
   338                           
   339                           	psect	cstackCOMMON
   340  0070                     __pcstackCOMMON:	
   341  0070                     ?_putch:	
   342  0070                     ?_UART_init:	
   343                           ; 0 bytes @ 0x0
   344                           
   345  0070                     ?__ISR:	
   346                           ; 0 bytes @ 0x0
   347                           
   348  0070                     ??__ISR:	
   349                           ; 0 bytes @ 0x0
   350                           
   351  0070                     ?_SPI_init:	
   352                           ; 0 bytes @ 0x0
   353                           
   354  0070                     ?_MFRC522_Reset:	
   355                           ; 0 bytes @ 0x0
   356                           
   357  0070                     ?_MFRC522_AntennaOn:	
   358                           ; 0 bytes @ 0x0
   359                           
   360  0070                     ?_MFRC522_Init:	
   361                           ; 0 bytes @ 0x0
   362                           
   363  0070                     ?_MFRC522_Halt:	
   364                           ; 0 bytes @ 0x0
   365                           
   366  0070                     ?_main:	
   367                           ; 0 bytes @ 0x0
   368                           
   369  0070                     ?_SPI_transfer:	
   370                           ; 0 bytes @ 0x0
   371                           
   372  0070                     ?_MFRC522_Rd:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_MFRC522_SelectTag:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_MFRC522_AntiColl:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_MFRC522_isCard:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_MFRC522_ReadCardSerial:	
   385                           ; 1 bytes @ 0x0
   386                           
   387                           
   388                           ; 1 bytes @ 0x0
   389  0070                     	ds	5
   390  0075                     ??_putch:	
   391  0075                     ??_UART_init:	
   392                           ; 0 bytes @ 0x5
   393                           
   394  0075                     ??_SPI_init:	
   395                           ; 0 bytes @ 0x5
   396                           
   397  0075                     ??_SPI_transfer:	
   398                           ; 0 bytes @ 0x5
   399                           
   400  0075                     ??___lwdiv:	
   401                           ; 0 bytes @ 0x5
   402                           
   403  0075                     putch@data:	
   404                           ; 0 bytes @ 0x5
   405                           
   406                           
   407                           ; 1 bytes @ 0x5
   408  0075                     	ds	1
   409  0076                     ??_MFRC522_Rd:	
   410  0076                     ??___lwmod:	
   411                           ; 0 bytes @ 0x6
   412                           
   413                           
   414                           ; 0 bytes @ 0x6
   415  0076                     	ds	1
   416                           
   417                           	psect	cstackBANK0
   418  0020                     __pcstackBANK0:	
   419  0020                     ?___lwdiv:	
   420  0020                     SPI_transfer@data:	
   421                           ; 2 bytes @ 0x0
   422                           
   423  0020                     ___lwdiv@divisor:	
   424                           ; 1 bytes @ 0x0
   425                           
   426                           
   427                           ; 2 bytes @ 0x0
   428  0020                     	ds	1
   429  0021                     SPI_transfer@ret:	
   430                           
   431                           ; 1 bytes @ 0x1
   432  0021                     	ds	1
   433  0022                     SPI_transfer@i:	
   434  0022                     ___lwdiv@dividend:	
   435                           ; 2 bytes @ 0x2
   436                           
   437                           
   438                           ; 2 bytes @ 0x2
   439  0022                     	ds	2
   440  0024                     MFRC522_Rd@addr:	
   441  0024                     ___lwdiv@counter:	
   442                           ; 1 bytes @ 0x4
   443                           
   444                           
   445                           ; 1 bytes @ 0x4
   446  0024                     	ds	1
   447  0025                     MFRC522_Rd@value:	
   448  0025                     ___lwdiv@quotient:	
   449                           ; 1 bytes @ 0x5
   450                           
   451                           
   452                           ; 2 bytes @ 0x5
   453  0025                     	ds	1
   454  0026                     ?_MFRC522_Wr:	
   455  0026                     MFRC522_Wr@value:	
   456                           ; 0 bytes @ 0x6
   457                           
   458                           
   459                           ; 1 bytes @ 0x6
   460  0026                     	ds	1
   461  0027                     ??_MFRC522_Wr:	
   462  0027                     ?___lwmod:	
   463                           ; 0 bytes @ 0x7
   464                           
   465  0027                     ___lwmod@divisor:	
   466                           ; 2 bytes @ 0x7
   467                           
   468                           
   469                           ; 2 bytes @ 0x7
   470  0027                     	ds	1
   471  0028                     MFRC522_Wr@addr:	
   472                           
   473                           ; 1 bytes @ 0x8
   474  0028                     	ds	1
   475  0029                     ?_MFRC522_Clear_Bit:	
   476  0029                     ?_MFRC522_Set_Bit:	
   477                           ; 0 bytes @ 0x9
   478                           
   479  0029                     ??_MFRC522_Reset:	
   480                           ; 0 bytes @ 0x9
   481                           
   482  0029                     MFRC522_Clear_Bit@mask:	
   483                           ; 0 bytes @ 0x9
   484                           
   485  0029                     MFRC522_Set_Bit@mask:	
   486                           ; 1 bytes @ 0x9
   487                           
   488  0029                     ___lwmod@dividend:	
   489                           ; 1 bytes @ 0x9
   490                           
   491                           
   492                           ; 2 bytes @ 0x9
   493  0029                     	ds	1
   494  002A                     ??_MFRC522_Clear_Bit:	
   495  002A                     ??_MFRC522_Set_Bit:	
   496                           ; 0 bytes @ 0xA
   497                           
   498                           
   499                           ; 0 bytes @ 0xA
   500  002A                     	ds	1
   501  002B                     MFRC522_Set_Bit@addr:	
   502  002B                     ___lwmod@counter:	
   503                           ; 1 bytes @ 0xB
   504                           
   505                           
   506                           ; 1 bytes @ 0xB
   507  002B                     	ds	1
   508  002C                     ??_MFRC522_AntennaOn:	
   509  002C                     ?_printf:	
   510                           ; 0 bytes @ 0xC
   511                           
   512  002C                     MFRC522_Clear_Bit@addr:	
   513                           ; 2 bytes @ 0xC
   514                           
   515                           
   516                           ; 1 bytes @ 0xC
   517  002C                     	ds	1
   518  002D                     ??_MFRC522_Init:	
   519  002D                     ?_MFRC522_CRC:	
   520                           ; 0 bytes @ 0xD
   521                           
   522  002D                     ?_MFRC522_ToCard:	
   523                           ; 0 bytes @ 0xD
   524                           
   525  002D                     MFRC522_ToCard@sendData:	
   526                           ; 1 bytes @ 0xD
   527                           
   528  002D                     MFRC522_CRC@length:	
   529                           ; 1 bytes @ 0xD
   530                           
   531                           
   532                           ; 1 bytes @ 0xD
   533  002D                     	ds	1
   534  002E                     ??_printf:	
   535  002E                     MFRC522_ToCard@sendLen:	
   536                           ; 0 bytes @ 0xE
   537                           
   538  002E                     MFRC522_CRC@dataOut:	
   539                           ; 1 bytes @ 0xE
   540                           
   541                           
   542                           ; 1 bytes @ 0xE
   543  002E                     	ds	1
   544  002F                     ??_MFRC522_CRC:	
   545  002F                     MFRC522_ToCard@backData:	
   546                           ; 0 bytes @ 0xF
   547                           
   548                           
   549                           ; 1 bytes @ 0xF
   550  002F                     	ds	1
   551  0030                     MFRC522_ToCard@backLen:	
   552  0030                     MFRC522_CRC@n:	
   553                           ; 1 bytes @ 0x10
   554                           
   555                           
   556                           ; 1 bytes @ 0x10
   557  0030                     	ds	1
   558  0031                     ??_MFRC522_ToCard:	
   559  0031                     MFRC522_CRC@dataIn:	
   560                           ; 0 bytes @ 0x11
   561                           
   562  0031                     printf@flag:	
   563                           ; 1 bytes @ 0x11
   564                           
   565                           
   566                           ; 1 bytes @ 0x11
   567  0031                     	ds	1
   568  0032                     MFRC522_CRC@i:	
   569  0032                     printf@prec:	
   570                           ; 1 bytes @ 0x12
   571                           
   572                           
   573                           ; 1 bytes @ 0x12
   574  0032                     	ds	1
   575  0033                     printf@ap:	
   576                           
   577                           ; 1 bytes @ 0x13
   578  0033                     	ds	1
   579  0034                     printf@_val:	
   580                           
   581                           ; 4 bytes @ 0x14
   582  0034                     	ds	3
   583  0037                     MFRC522_ToCard@waitIRq:	
   584                           
   585                           ; 1 bytes @ 0x17
   586  0037                     	ds	1
   587  0038                     MFRC522_ToCard@_status:	
   588  0038                     printf@f:	
   589                           ; 1 bytes @ 0x18
   590                           
   591                           
   592                           ; 1 bytes @ 0x18
   593  0038                     	ds	1
   594  0039                     MFRC522_ToCard@lastBits:	
   595  0039                     printf@c:	
   596                           ; 1 bytes @ 0x19
   597                           
   598                           
   599                           ; 1 bytes @ 0x19
   600  0039                     	ds	1
   601  003A                     MFRC522_ToCard@irqEn:	
   602                           
   603                           ; 1 bytes @ 0x1A
   604  003A                     	ds	1
   605  003B                     MFRC522_ToCard@command:	
   606                           
   607                           ; 1 bytes @ 0x1B
   608  003B                     	ds	1
   609  003C                     MFRC522_ToCard@i:	
   610                           
   611                           ; 2 bytes @ 0x1C
   612  003C                     	ds	2
   613  003E                     MFRC522_ToCard@n:	
   614                           
   615                           ; 1 bytes @ 0x1E
   616  003E                     	ds	1
   617  003F                     ??_MFRC522_SelectTag:	
   618  003F                     ??_MFRC522_Halt:	
   619                           ; 0 bytes @ 0x1F
   620                           
   621  003F                     ??_MFRC522_AntiColl:	
   622                           ; 0 bytes @ 0x1F
   623                           
   624  003F                     ?_MFRC522_Request:	
   625                           ; 0 bytes @ 0x1F
   626                           
   627  003F                     MFRC522_Request@TagType:	
   628                           ; 1 bytes @ 0x1F
   629                           
   630                           
   631                           ; 1 bytes @ 0x1F
   632  003F                     	ds	1
   633  0040                     ??_MFRC522_Request:	
   634                           
   635                           ; 0 bytes @ 0x20
   636  0040                     	ds	3
   637  0043                     MFRC522_Halt@buff:	
   638                           
   639                           ; 4 bytes @ 0x23
   640  0043                     	ds	1
   641  0044                     MFRC522_AntiColl@serNumCheck:	
   642  0044                     MFRC522_Request@lol:	
   643                           ; 1 bytes @ 0x24
   644                           
   645  0044                     MFRC522_SelectTag@buffer:	
   646                           ; 2 bytes @ 0x24
   647                           
   648                           
   649                           ; 9 bytes @ 0x24
   650  0044                     	ds	1
   651  0045                     MFRC522_AntiColl@unLen:	
   652                           
   653                           ; 2 bytes @ 0x25
   654  0045                     	ds	1
   655  0046                     MFRC522_Request@reqMode:	
   656                           
   657                           ; 1 bytes @ 0x26
   658  0046                     	ds	1
   659  0047                     MFRC522_Request@_status:	
   660  0047                     MFRC522_AntiColl@_status:	
   661                           ; 1 bytes @ 0x27
   662                           
   663  0047                     MFRC522_Halt@unLen:	
   664                           ; 1 bytes @ 0x27
   665                           
   666                           
   667                           ; 2 bytes @ 0x27
   668  0047                     	ds	1
   669  0048                     MFRC522_AntiColl@i:	
   670  0048                     MFRC522_Request@backBits:	
   671                           ; 1 bytes @ 0x28
   672                           
   673                           
   674                           ; 2 bytes @ 0x28
   675  0048                     	ds	1
   676  0049                     MFRC522_AntiColl@serNum:	
   677                           
   678                           ; 1 bytes @ 0x29
   679  0049                     	ds	1
   680  004A                     ??_MFRC522_isCard:	
   681  004A                     ??_MFRC522_ReadCardSerial:	
   682                           ; 0 bytes @ 0x2A
   683                           
   684                           
   685                           ; 0 bytes @ 0x2A
   686  004A                     	ds	1
   687  004B                     MFRC522_isCard@TagType:	
   688  004B                     MFRC522_ReadCardSerial@_status:	
   689                           ; 1 bytes @ 0x2B
   690                           
   691                           
   692                           ; 1 bytes @ 0x2B
   693  004B                     	ds	1
   694  004C                     MFRC522_ReadCardSerial@str:	
   695                           
   696                           ; 1 bytes @ 0x2C
   697  004C                     	ds	1
   698  004D                     MFRC522_SelectTag@_status:	
   699                           
   700                           ; 1 bytes @ 0x2D
   701  004D                     	ds	1
   702  004E                     MFRC522_SelectTag@serNum:	
   703                           
   704                           ; 1 bytes @ 0x2E
   705  004E                     	ds	1
   706  004F                     MFRC522_SelectTag@size:	
   707                           
   708                           ; 1 bytes @ 0x2F
   709  004F                     	ds	1
   710  0050                     MFRC522_SelectTag@recvBits:	
   711                           
   712                           ; 2 bytes @ 0x30
   713  0050                     	ds	2
   714  0052                     MFRC522_SelectTag@i:	
   715                           
   716                           ; 1 bytes @ 0x32
   717  0052                     	ds	1
   718  0053                     ??_main:	
   719                           
   720                           ; 0 bytes @ 0x33
   721  0053                     	ds	2
   722  0055                     main@size:	
   723                           
   724                           ; 1 bytes @ 0x35
   725  0055                     	ds	1
   726  0056                     main@UID:	
   727                           
   728                           ; 6 bytes @ 0x36
   729  0056                     	ds	6
   730  005C                     main@i:	
   731                           
   732                           ; 1 bytes @ 0x3C
   733  005C                     	ds	1
   734  005D                     main@TagType:	
   735                           
   736                           ; 2 bytes @ 0x3D
   737  005D                     	ds	2
   738                           
   739                           	psect	maintext
   740  0351                     __pmaintext:	
   741 ;;
   742 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   743 ;;
   744 ;; *************** function _main *****************
   745 ;; Defined at:
   746 ;;		line 631 in file "main.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;		None
   749 ;; Auto vars:     Size  Location     Type
   750 ;;  msg            12    0        unsigned char [12]
   751 ;;  UID             6   54[BANK0 ] unsigned char [6]
   752 ;;  TagType         2   61[BANK0 ] unsigned int 
   753 ;;  i               1   60[BANK0 ] unsigned char 
   754 ;;  size            1   53[BANK0 ] unsigned char 
   755 ;; Return value:  Size  Location     Type
   756 ;;		None               void
   757 ;; Registers used:
   758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 17F/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   764 ;;      Params:         0       0       0       0
   765 ;;      Locals:         0      10       0       0
   766 ;;      Temps:          0       2       0       0
   767 ;;      Totals:         0      12       0       0
   768 ;;Total ram usage:       12 bytes
   769 ;; Hardware stack levels required when called:    7
   770 ;; This function calls:
   771 ;;		_MFRC522_Halt
   772 ;;		_MFRC522_Init
   773 ;;		_MFRC522_ReadCardSerial
   774 ;;		_MFRC522_SelectTag
   775 ;;		_MFRC522_isCard
   776 ;;		_SPI_init
   777 ;;		_UART_init
   778 ;;		_printf
   779 ;; This function is called by:
   780 ;;		Startup code after reset
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           
   785                           ;psect for function _main
   786  0351                     _main:	
   787                           
   788                           ;main.c: 633: char msg[12];
   789                           ;main.c: 634: char UID[6];
   790                           ;main.c: 635: unsigned int TagType;
   791                           ;main.c: 636: char size;
   792                           ;main.c: 637: char i;
   793                           ;main.c: 639: SPI_init();
   794                           
   795                           ;incstack = 0
   796                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   797  0351  262E               	fcall	_SPI_init
   798                           
   799                           ;main.c: 641: UART_init();
   800  0352  25EF               	fcall	_UART_init
   801                           
   802                           ;main.c: 643: MFRC522_Init();
   803  0353  2438               	fcall	_MFRC522_Init
   804                           
   805                           ;main.c: 645: printf("Programa em funcionamento!\n");
   806  0354  300B               	movlw	(STR_3-__stringbase)& (0+255)
   807  0355  2183               	fcall	_printf
   808  0356                     l2344:	
   809                           ;main.c: 646: while(1)
   810                           
   811                           
   812                           ;main.c: 647: {
   813                           ;main.c: 648: printf(".\n");
   814  0356  3041               	movlw	(STR_4-__stringbase)& (0+255)
   815  0357  2183               	fcall	_printf
   816                           
   817                           ;main.c: 650: if( MFRC522_isCard( &TagType ) )
   818  0358  305D               	movlw	main@TagType& (0+255)
   819  0359  2600               	fcall	_MFRC522_isCard
   820  035A  3A00               	xorlw	0
   821  035B  1903               	skipnz
   822  035C  2B96               	goto	l2366
   823                           
   824                           ;main.c: 651: {
   825                           ;main.c: 653: printf("Tipo de Tag: %d\n",TagType);
   826  035D  1283               	bcf	3,5	;RP0=0, select bank0
   827  035E  1303               	bcf	3,6	;RP1=0, select bank0
   828  035F  085E               	movf	main@TagType+1,w
   829  0360  01AD               	clrf	?_printf+1
   830  0361  07AD               	addwf	?_printf+1,f
   831  0362  085D               	movf	main@TagType,w
   832  0363  01AC               	clrf	?_printf
   833  0364  07AC               	addwf	?_printf,f
   834  0365  3027               	movlw	(STR_5-__stringbase)& (0+255)
   835  0366  2183               	fcall	_printf
   836                           
   837                           ;main.c: 655: if( MFRC522_ReadCardSerial( &UID ) )
   838  0367  3056               	movlw	main@UID& (0+255)
   839  0368  25B3               	fcall	_MFRC522_ReadCardSerial
   840  0369  3A00               	xorlw	0
   841  036A  1903               	skipnz
   842  036B  2B95               	goto	l219
   843                           
   844                           ;main.c: 656: {
   845                           ;main.c: 657: printf("Codigo: ");
   846  036C  3038               	movlw	(STR_6-__stringbase)& (0+255)
   847  036D  2183               	fcall	_printf
   848                           
   849                           ;main.c: 658: for( i=0; i < 5; i++)
   850  036E  1283               	bcf	3,5	;RP0=0, select bank0
   851  036F  1303               	bcf	3,6	;RP1=0, select bank0
   852  0370  01DC               	clrf	main@i
   853  0371  3005               	movlw	5
   854  0372  025C               	subwf	main@i,w
   855  0373  1803               	btfsc	3,0
   856  0374  2B8C               	goto	l2364
   857  0375                     l2358:	
   858                           
   859                           ;main.c: 659: {
   860                           ;main.c: 660: printf("%c",UID[i]);
   861  0375  085C               	movf	main@i,w
   862  0376  3E56               	addlw	main@UID& (0+255)
   863  0377  0084               	movwf	4
   864  0378  1383               	bcf	3,7	;select IRP bank0
   865  0379  0800               	movf	0,w
   866  037A  00D3               	movwf	??_main
   867  037B  01D4               	clrf	??_main+1
   868  037C  0853               	movf	??_main,w
   869  037D  00AC               	movwf	?_printf
   870  037E  0854               	movf	??_main+1,w
   871  037F  00AD               	movwf	?_printf+1
   872  0380  3044               	movlw	(STR_7-__stringbase)& (0+255)
   873  0381  2183               	fcall	_printf
   874  0382  3001               	movlw	1
   875  0383  1283               	bcf	3,5	;RP0=0, select bank0
   876  0384  1303               	bcf	3,6	;RP1=0, select bank0
   877  0385  00D3               	movwf	??_main
   878  0386  0853               	movf	??_main,w
   879  0387  07DC               	addwf	main@i,f
   880  0388  3005               	movlw	5
   881  0389  025C               	subwf	main@i,w
   882  038A  1C03               	skipc
   883  038B  2B75               	goto	l2358
   884  038C                     l2364:	
   885                           
   886                           ;main.c: 661: }
   887                           ;main.c: 662: printf("\n");
   888  038C  3025               	movlw	((STR_3+26)-__stringbase)& (0+255)
   889  038D  2183               	fcall	_printf
   890                           
   891                           ;main.c: 663: size = MFRC522_SelectTag( &UID );
   892  038E  3056               	movlw	main@UID& (0+255)
   893  038F  229A               	fcall	_MFRC522_SelectTag
   894  0390  1283               	bcf	3,5	;RP0=0, select bank0
   895  0391  1303               	bcf	3,6	;RP1=0, select bank0
   896  0392  00D3               	movwf	??_main
   897  0393  0853               	movf	??_main,w
   898  0394  00D5               	movwf	main@size
   899  0395                     l219:	
   900                           
   901                           ;main.c: 664: }
   902                           ;main.c: 666: MFRC522_Halt();
   903  0395  2534               	fcall	_MFRC522_Halt
   904  0396                     l2366:	
   905                           
   906                           ;main.c: 667: }
   907                           ;main.c: 668: _delay((unsigned long)((100)*(4000000/4000.0)));
   908  0396  3082               	movlw	130
   909  0397  1283               	bcf	3,5	;RP0=0, select bank0
   910  0398  1303               	bcf	3,6	;RP1=0, select bank0
   911  0399  00D4               	movwf	??_main+1
   912  039A  30DD               	movlw	221
   913  039B  00D3               	movwf	??_main
   914  039C                     u2377:	
   915  039C  0BD3               	decfsz	??_main,f
   916  039D  2B9C               	goto	u2377
   917  039E  0BD4               	decfsz	??_main+1,f
   918  039F  2B9C               	goto	u2377
   919  03A0  2BA1               	nop2
   920  03A1  2B56               	goto	l2344
   921  03A2                     __end_of_main:	
   922                           
   923                           	psect	text1
   924  05EF                     __ptext1:	
   925 ;; *************** function _UART_init *****************
   926 ;; Defined at:
   927 ;;		line 37 in file "main.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;		None
   932 ;; Return value:  Size  Location     Type
   933 ;;		None               void
   934 ;; Registers used:
   935 ;;		wreg
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   941 ;;      Params:         0       0       0       0
   942 ;;      Locals:         0       0       0       0
   943 ;;      Temps:          0       0       0       0
   944 ;;      Totals:         0       0       0       0
   945 ;;Total ram usage:        0 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    1
   948 ;; This function calls:
   949 ;;		Nothing
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           
   956                           ;psect for function _UART_init
   957  05EF                     _UART_init:	
   958                           
   959                           ;main.c: 40: TRISBbits.TRISB1 = 1;
   960                           
   961                           ;incstack = 0
   962                           ; Regs used in _UART_init: [wreg]
   963  05EF  1683               	bsf	3,5	;RP0=1, select bank1
   964  05F0  1303               	bcf	3,6	;RP1=0, select bank1
   965  05F1  1486               	bsf	6,1	;volatile
   966                           
   967                           ;main.c: 41: TRISBbits.TRISB2 = 1;
   968  05F2  1506               	bsf	6,2	;volatile
   969                           
   970                           ;main.c: 43: TXSTAbits.CSRC = 1;
   971  05F3  1798               	bsf	24,7	;volatile
   972                           
   973                           ;main.c: 44: TXSTAbits.TXEN = 1;
   974  05F4  1698               	bsf	24,5	;volatile
   975                           
   976                           ;main.c: 45: TXSTAbits.SYNC = 0;
   977  05F5  1218               	bcf	24,4	;volatile
   978                           
   979                           ;main.c: 48: RCSTAbits.SPEN = 1;
   980  05F6  1283               	bcf	3,5	;RP0=0, select bank0
   981  05F7  1303               	bcf	3,6	;RP1=0, select bank0
   982  05F8  1798               	bsf	24,7	;volatile
   983                           
   984                           ;main.c: 49: RCSTAbits.CREN = 1;
   985  05F9  1618               	bsf	24,4	;volatile
   986                           
   987                           ;main.c: 53: TXSTAbits.BRGH = 0;
   988  05FA  1683               	bsf	3,5	;RP0=1, select bank1
   989  05FB  1303               	bcf	3,6	;RP1=0, select bank1
   990  05FC  1118               	bcf	24,2	;volatile
   991                           
   992                           ;main.c: 54: SPBRG = 25;
   993  05FD  3019               	movlw	25
   994  05FE  0099               	movwf	25	;volatile
   995  05FF  0008               	return
   996  0600                     __end_of_UART_init:	
   997                           
   998                           	psect	text2
   999  0600                     __ptext2:	
  1000 ;; *************** function _MFRC522_isCard *****************
  1001 ;; Defined at:
  1002 ;;		line 609 in file "main.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;  TagType         1    wreg     PTR unsigned char 
  1005 ;;		 -> main@TagType(2), 
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;  TagType         1   43[BANK0 ] PTR unsigned char 
  1008 ;;		 -> main@TagType(2), 
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      unsigned char 
  1011 ;; Registers used:
  1012 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1018 ;;      Params:         0       0       0       0
  1019 ;;      Locals:         0       1       0       0
  1020 ;;      Temps:          0       1       0       0
  1021 ;;      Totals:         0       2       0       0
  1022 ;;Total ram usage:        2 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; Hardware stack levels required when called:    6
  1025 ;; This function calls:
  1026 ;;		_MFRC522_Request
  1027 ;; This function is called by:
  1028 ;;		_main
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           
  1033                           ;psect for function _MFRC522_isCard
  1034  0600                     _MFRC522_isCard:	
  1035                           
  1036                           ;incstack = 0
  1037                           ; Regs used in _MFRC522_isCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1038                           ;MFRC522_isCard@TagType stored from wreg
  1039  0600  1283               	bcf	3,5	;RP0=0, select bank0
  1040  0601  1303               	bcf	3,6	;RP1=0, select bank0
  1041  0602  00CB               	movwf	MFRC522_isCard@TagType
  1042                           
  1043                           ;main.c: 611: if (MFRC522_Request( 0x26, TagType ) == 0)
  1044  0603  084B               	movf	MFRC522_isCard@TagType,w
  1045  0604  00CA               	movwf	??_MFRC522_isCard
  1046  0605  084A               	movf	??_MFRC522_isCard,w
  1047  0606  00BF               	movwf	MFRC522_Request@TagType
  1048  0607  3026               	movlw	38
  1049  0608  247D               	fcall	_MFRC522_Request
  1050  0609  3800               	iorlw	0
  1051  060A  1D03               	skipz
  1052  060B  2E0E               	goto	l2236
  1053                           
  1054                           ;main.c: 612: return 1;
  1055  060C  3001               	movlw	1
  1056  060D  0008               	return
  1057  060E                     l2236:	
  1058                           
  1059                           ;main.c: 613: else
  1060                           ;main.c: 614: return 0;
  1061  060E  3000               	movlw	0
  1062  060F  0008               	return
  1063  0610                     __end_of_MFRC522_isCard:	
  1064                           
  1065                           	psect	text3
  1066  047D                     __ptext3:	
  1067 ;; *************** function _MFRC522_Request *****************
  1068 ;; Defined at:
  1069 ;;		line 415 in file "main.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;  reqMode         1    wreg     unsigned char 
  1072 ;;  TagType         1   31[BANK0 ] PTR unsigned char 
  1073 ;;		 -> main@TagType(2), 
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;  reqMode         1   38[BANK0 ] unsigned char 
  1076 ;;  backBits        2   40[BANK0 ] unsigned int 
  1077 ;;  lol             2   36[BANK0 ] int 
  1078 ;;  _status         1   39[BANK0 ] unsigned char 
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      unsigned char 
  1081 ;; Registers used:
  1082 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1088 ;;      Params:         0       1       0       0
  1089 ;;      Locals:         0       6       0       0
  1090 ;;      Temps:          0       4       0       0
  1091 ;;      Totals:         0      11       0       0
  1092 ;;Total ram usage:       11 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; Hardware stack levels required when called:    5
  1095 ;; This function calls:
  1096 ;;		_MFRC522_ToCard
  1097 ;;		_MFRC522_Wr
  1098 ;;		_printf
  1099 ;; This function is called by:
  1100 ;;		_MFRC522_isCard
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           
  1105                           ;psect for function _MFRC522_Request
  1106  047D                     _MFRC522_Request:	
  1107                           
  1108                           ;incstack = 0
  1109                           ; Regs used in _MFRC522_Request: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1110                           ;MFRC522_Request@reqMode stored from wreg
  1111  047D  1283               	bcf	3,5	;RP0=0, select bank0
  1112  047E  1303               	bcf	3,6	;RP1=0, select bank0
  1113  047F  00C6               	movwf	MFRC522_Request@reqMode
  1114                           
  1115                           ;main.c: 417: char _status;
  1116                           ;main.c: 418: unsigned backBits;
  1117                           ;main.c: 419: MFRC522_Wr( 0x0D, 0x07 );
  1118  0480  3007               	movlw	7
  1119  0481  00C0               	movwf	??_MFRC522_Request
  1120  0482  0840               	movf	??_MFRC522_Request,w
  1121  0483  00A6               	movwf	MFRC522_Wr@value
  1122  0484  300D               	movlw	13
  1123  0485  25C9               	fcall	_MFRC522_Wr
  1124                           
  1125                           ;main.c: 420: printf("1");
  1126  0486  3047               	movlw	(STR_1-__stringbase)& (0+255)
  1127  0487  2183               	fcall	_printf
  1128                           
  1129                           ;main.c: 421: TagType[0] = reqMode;
  1130  0488  1283               	bcf	3,5	;RP0=0, select bank0
  1131  0489  1303               	bcf	3,6	;RP1=0, select bank0
  1132  048A  0846               	movf	MFRC522_Request@reqMode,w
  1133  048B  00C0               	movwf	??_MFRC522_Request
  1134  048C  083F               	movf	MFRC522_Request@TagType,w
  1135  048D  0084               	movwf	4
  1136  048E  0840               	movf	??_MFRC522_Request,w
  1137  048F  1383               	bcf	3,7	;select IRP bank0
  1138  0490  0080               	movwf	0
  1139                           
  1140                           ;main.c: 422: _status = MFRC522_ToCard( 0x0C, TagType, 1, TagType, &backBits );
  1141  0491  083F               	movf	MFRC522_Request@TagType,w
  1142  0492  00C0               	movwf	??_MFRC522_Request
  1143  0493  0840               	movf	??_MFRC522_Request,w
  1144  0494  00AD               	movwf	MFRC522_ToCard@sendData
  1145  0495  01AE               	clrf	MFRC522_ToCard@sendLen
  1146  0496  0AAE               	incf	MFRC522_ToCard@sendLen,f
  1147  0497  083F               	movf	MFRC522_Request@TagType,w
  1148  0498  00C1               	movwf	??_MFRC522_Request+1
  1149  0499  0841               	movf	??_MFRC522_Request+1,w
  1150  049A  00AF               	movwf	MFRC522_ToCard@backData
  1151  049B  3048               	movlw	MFRC522_Request@backBits& (0+255)
  1152  049C  00C2               	movwf	??_MFRC522_Request+2
  1153  049D  0842               	movf	??_MFRC522_Request+2,w
  1154  049E  00B0               	movwf	MFRC522_ToCard@backLen
  1155  049F  300C               	movlw	12
  1156  04A0  204E               	fcall	_MFRC522_ToCard
  1157  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  1158  04A2  1303               	bcf	3,6	;RP1=0, select bank0
  1159  04A3  00C3               	movwf	??_MFRC522_Request+3
  1160  04A4  0843               	movf	??_MFRC522_Request+3,w
  1161  04A5  00C7               	movwf	MFRC522_Request@_status
  1162                           
  1163                           ;main.c: 423: int lol=8;
  1164  04A6  3008               	movlw	8
  1165  04A7  00C4               	movwf	MFRC522_Request@lol
  1166  04A8  3000               	movlw	0
  1167  04A9  00C5               	movwf	MFRC522_Request@lol+1
  1168                           
  1169                           ;main.c: 424: if ( (_status != 0) || (backBits != 0x10) )
  1170  04AA  08C7               	movf	MFRC522_Request@_status,f
  1171  04AB  1D03               	skipz
  1172  04AC  2CB2               	goto	l2098
  1173  04AD  3010               	movlw	16
  1174  04AE  0648               	xorwf	MFRC522_Request@backBits,w
  1175  04AF  0449               	iorwf	MFRC522_Request@backBits+1,w
  1176  04B0  1903               	skipnz
  1177  04B1  2CB8               	goto	l2102
  1178  04B2                     l2098:	
  1179                           
  1180                           ;main.c: 425: {
  1181                           ;main.c: 426: lol = 0;
  1182  04B2  01C4               	clrf	MFRC522_Request@lol
  1183  04B3  01C5               	clrf	MFRC522_Request@lol+1
  1184                           
  1185                           ;main.c: 427: _status = 2;
  1186  04B4  3002               	movlw	2
  1187  04B5  00C0               	movwf	??_MFRC522_Request
  1188  04B6  0840               	movf	??_MFRC522_Request,w
  1189  04B7  00C7               	movwf	MFRC522_Request@_status
  1190  04B8                     l2102:	
  1191                           
  1192                           ;main.c: 428: }
  1193                           ;main.c: 429: printf("2");
  1194  04B8  3049               	movlw	(STR_2-__stringbase)& (0+255)
  1195  04B9  2183               	fcall	_printf
  1196                           
  1197                           ;main.c: 430: return _status;
  1198  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  1199  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  1200  04BC  0847               	movf	MFRC522_Request@_status,w
  1201  04BD  0008               	return
  1202  04BE                     __end_of_MFRC522_Request:	
  1203                           
  1204                           	psect	text4
  1205  0183                     __ptext4:	
  1206 ;; *************** function _printf *****************
  1207 ;; Defined at:
  1208 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;  f               1    wreg     PTR const unsigned char 
  1211 ;;		 -> STR_8(2), STR_7(3), STR_6(9), STR_5(17), 
  1212 ;;		 -> STR_4(3), STR_3(28), STR_2(2), STR_1(2), 
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  f               1   24[BANK0 ] PTR const unsigned char 
  1215 ;;		 -> STR_8(2), STR_7(3), STR_6(9), STR_5(17), 
  1216 ;;		 -> STR_4(3), STR_3(28), STR_2(2), STR_1(2), 
  1217 ;;  _val            4   20[BANK0 ] struct .
  1218 ;;  c               1   25[BANK0 ] char 
  1219 ;;  ap              1   19[BANK0 ] PTR void [1]
  1220 ;;		 -> ?_printf(2), 
  1221 ;;  prec            1   18[BANK0 ] char 
  1222 ;;  flag            1   17[BANK0 ] unsigned char 
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  2   12[BANK0 ] int 
  1225 ;; Registers used:
  1226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1232 ;;      Params:         0       2       0       0
  1233 ;;      Locals:         0       9       0       0
  1234 ;;      Temps:          0       3       0       0
  1235 ;;      Totals:         0      14       0       0
  1236 ;;Total ram usage:       14 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    2
  1239 ;; This function calls:
  1240 ;;		___lwdiv
  1241 ;;		___lwmod
  1242 ;;		_putch
  1243 ;; This function is called by:
  1244 ;;		_MFRC522_Request
  1245 ;;		_main
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           
  1250                           ;psect for function _printf
  1251  0183                     _printf:	
  1252                           
  1253                           ;incstack = 0
  1254                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1255                           ;printf@f stored from wreg
  1256  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1257  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1258  0185  00B8               	movwf	printf@f
  1259                           
  1260                           ;doprnt.c: 466: va_list ap;
  1261                           ;doprnt.c: 499: signed char c;
  1262                           ;doprnt.c: 506: signed char prec;
  1263                           ;doprnt.c: 508: unsigned char flag;
  1264                           ;doprnt.c: 527: union {
  1265                           ;doprnt.c: 528: unsigned int _val;
  1266                           ;doprnt.c: 529: struct {
  1267                           ;doprnt.c: 530: const char * _cp;
  1268                           ;doprnt.c: 531: unsigned _len;
  1269                           ;doprnt.c: 532: } _str;
  1270                           ;doprnt.c: 533: } _val;
  1271                           ;doprnt.c: 542: *ap = __va_start();
  1272  0186  302C               	movlw	?_printf& (0+255)
  1273  0187  00AE               	movwf	??_printf
  1274  0188  082E               	movf	??_printf,w
  1275  0189  00B3               	movwf	printf@ap
  1276  018A                     l2078:	
  1277                           ;doprnt.c: 545: while(c = *f++) {
  1278                           
  1279  018A  3001               	movlw	1
  1280  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1281  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1282  018D  07B8               	addwf	printf@f,f
  1283  018E  30FF               	movlw	-1
  1284  018F  0738               	addwf	printf@f,w
  1285  0190  0084               	movwf	4
  1286  0191  23A2               	fcall	stringdir
  1287  0192  00AE               	movwf	??_printf
  1288  0193  082E               	movf	??_printf,w
  1289  0194  00B9               	movwf	printf@c
  1290  0195  08B9               	movf	printf@c,f
  1291  0196  1903               	btfsc	3,2
  1292  0197  0008               	return
  1293                           
  1294                           ;doprnt.c: 547: if(c != '%')
  1295  0198  0839               	movf	printf@c,w
  1296  0199  3A25               	xorlw	37
  1297  019A  1903               	skipnz
  1298  019B  299F               	goto	l2032
  1299                           
  1300                           ;doprnt.c: 549: {
  1301                           ;doprnt.c: 550: (putch(c) );
  1302  019C  0839               	movf	printf@c,w
  1303  019D  2585               	fcall	_putch
  1304                           
  1305                           ;doprnt.c: 551: continue;
  1306  019E  298A               	goto	l2078
  1307  019F                     l2032:	
  1308                           
  1309                           ;doprnt.c: 552: }
  1310                           ;doprnt.c: 557: flag = 0;
  1311  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1312  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1313  01A1  01B1               	clrf	printf@flag
  1314                           
  1315                           ;doprnt.c: 644: switch(c = *f++) {
  1316  01A2  29B1               	goto	l2042
  1317  01A3                     l2034:	
  1318                           ;doprnt.c: 793: case 'c':
  1319                           
  1320                           ;doprnt.c: 707: case 'i':
  1321                           ;doprnt.c: 708: break;
  1322                           
  1323                           ;doprnt.c: 706: case 'd':
  1324                           
  1325                           ;doprnt.c: 647: goto alldone;
  1326                           
  1327                           ;doprnt.c: 646: case 0:
  1328                           
  1329                           
  1330                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1331  01A3  0833               	movf	printf@ap,w
  1332  01A4  0084               	movwf	4
  1333  01A5  1383               	bcf	3,7	;select IRP bank0
  1334  01A6  0800               	movf	0,w
  1335  01A7  00AE               	movwf	??_printf
  1336  01A8  082E               	movf	??_printf,w
  1337  01A9  00B9               	movwf	printf@c
  1338  01AA  3002               	movlw	2
  1339  01AB  00AE               	movwf	??_printf
  1340  01AC  082E               	movf	??_printf,w
  1341  01AD  07B3               	addwf	printf@ap,f
  1342  01AE                     l2038:	
  1343                           ;doprnt.c: 811: default:
  1344                           
  1345                           
  1346                           ;doprnt.c: 818: (putch(c) );
  1347  01AE  0839               	movf	printf@c,w
  1348  01AF  2585               	fcall	_putch
  1349                           
  1350                           ;doprnt.c: 819: continue;
  1351  01B0  298A               	goto	l2078
  1352  01B1                     l2042:	
  1353                           ;doprnt.c: 831: }
  1354                           
  1355  01B1  3001               	movlw	1
  1356  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1357  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1358  01B4  07B8               	addwf	printf@f,f
  1359  01B5  30FF               	movlw	-1
  1360  01B6  0738               	addwf	printf@f,w
  1361  01B7  0084               	movwf	4
  1362  01B8  23A2               	fcall	stringdir
  1363  01B9  00B9               	movwf	printf@c
  1364                           
  1365                           ; Switch size 1, requested type "space"
  1366                           ; Number of cases is 4, Range of values is 0 to 105
  1367                           ; switch strategies available:
  1368                           ; Name         Instructions Cycles
  1369                           ; simple_byte           13     7 (average)
  1370                           ; direct_byte          112     6 (fixed)
  1371                           ; jumptable            260     6 (fixed)
  1372                           ;	Chosen strategy is simple_byte
  1373  01BA  3A00               	xorlw	0	; case 0
  1374  01BB  1903               	skipnz
  1375  01BC  2A3C               	goto	l255
  1376  01BD  3A63               	xorlw	99	; case 99
  1377  01BE  1903               	skipnz
  1378  01BF  29A3               	goto	l2034
  1379  01C0  3A07               	xorlw	7	; case 100
  1380  01C1  1903               	skipnz
  1381  01C2  29C7               	goto	l2044
  1382  01C3  3A0D               	xorlw	13	; case 105
  1383  01C4  1903               	skipnz
  1384  01C5  29C7               	goto	l2044
  1385  01C6  29AE               	goto	l2038
  1386  01C7                     l2044:	
  1387                           
  1388                           ;doprnt.c: 1262: {
  1389                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1390  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  1391  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  1392  01C9  0833               	movf	printf@ap,w
  1393  01CA  0084               	movwf	4
  1394  01CB  1383               	bcf	3,7	;select IRP bank0
  1395  01CC  0800               	movf	0,w
  1396  01CD  00B4               	movwf	printf@_val
  1397  01CE  0A84               	incf	4,f
  1398  01CF  0800               	movf	0,w
  1399  01D0  00B5               	movwf	printf@_val+1
  1400  01D1  3002               	movlw	2
  1401  01D2  00AE               	movwf	??_printf
  1402  01D3  082E               	movf	??_printf,w
  1403  01D4  07B3               	addwf	printf@ap,f
  1404                           
  1405                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  1406  01D5  1FB5               	btfss	printf@_val+1,7
  1407  01D6  29E0               	goto	l2054
  1408                           
  1409                           ;doprnt.c: 1271: flag |= 0x03;
  1410  01D7  3003               	movlw	3
  1411  01D8  00AE               	movwf	??_printf
  1412  01D9  082E               	movf	??_printf,w
  1413  01DA  04B1               	iorwf	printf@flag,f
  1414                           
  1415                           ;doprnt.c: 1272: _val._val = -_val._val;
  1416  01DB  09B4               	comf	printf@_val,f
  1417  01DC  09B5               	comf	printf@_val+1,f
  1418  01DD  0AB4               	incf	printf@_val,f
  1419  01DE  1903               	skipnz
  1420  01DF  0AB5               	incf	printf@_val+1,f
  1421  01E0                     l2054:	
  1422                           
  1423                           ;doprnt.c: 1273: }
  1424                           ;doprnt.c: 1275: }
  1425                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1426  01E0  01B9               	clrf	printf@c
  1427  01E1  0AB9               	incf	printf@c,f
  1428  01E2  0839               	movf	printf@c,w
  1429  01E3  3A05               	xorlw	5
  1430  01E4  1903               	btfsc	3,2
  1431  01E5  29FF               	goto	l2066
  1432  01E6                     l2058:	
  1433                           
  1434                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1435  01E6  0839               	movf	printf@c,w
  1436  01E7  00AE               	movwf	??_printf
  1437  01E8  072E               	addwf	??_printf,w
  1438  01E9  3E01               	addlw	low (_dpowers-__stringbase)
  1439  01EA  0084               	movwf	4
  1440  01EB  23A2               	fcall	stringdir
  1441  01EC  00AF               	movwf	??_printf+1
  1442  01ED  23A2               	fcall	stringdir
  1443  01EE  00B0               	movwf	??_printf+2
  1444  01EF  0830               	movf	??_printf+2,w
  1445  01F0  0235               	subwf	printf@_val+1,w
  1446  01F1  1D03               	skipz
  1447  01F2  29F5               	goto	u1965
  1448  01F3  082F               	movf	??_printf+1,w
  1449  01F4  0234               	subwf	printf@_val,w
  1450  01F5                     u1965:	
  1451  01F5  1C03               	btfss	3,0
  1452  01F6  29FF               	goto	l2066
  1453                           
  1454                           ;doprnt.c: 1316: break;
  1455  01F7  3001               	movlw	1
  1456  01F8  00AE               	movwf	??_printf
  1457  01F9  082E               	movf	??_printf,w
  1458  01FA  07B9               	addwf	printf@c,f
  1459  01FB  0839               	movf	printf@c,w
  1460  01FC  3A05               	xorlw	5
  1461  01FD  1D03               	skipz
  1462  01FE  29E6               	goto	l2058
  1463  01FF                     l2066:	
  1464                           
  1465                           ;doprnt.c: 1431: {
  1466                           ;doprnt.c: 1447: if(flag & 0x03)
  1467  01FF  0831               	movf	printf@flag,w
  1468  0200  3903               	andlw	3
  1469  0201  1903               	btfsc	3,2
  1470  0202  2A05               	goto	l2070
  1471                           
  1472                           ;doprnt.c: 1448: (putch('-') );
  1473  0203  302D               	movlw	45
  1474  0204  2585               	fcall	_putch
  1475  0205                     l2070:	
  1476                           
  1477                           ;doprnt.c: 1478: }
  1478                           ;doprnt.c: 1481: prec = c;
  1479  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1480  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1481  0207  0839               	movf	printf@c,w
  1482  0208  00AE               	movwf	??_printf
  1483  0209  082E               	movf	??_printf,w
  1484  020A  00B2               	movwf	printf@prec
  1485  020B                     l2076:	
  1486                           ;doprnt.c: 1483: while(prec--) {
  1487                           
  1488  020B  30FF               	movlw	-1
  1489  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1490  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1491  020E  00AE               	movwf	??_printf
  1492  020F  082E               	movf	??_printf,w
  1493  0210  07B2               	addwf	printf@prec,f
  1494  0211  0832               	movf	printf@prec,w
  1495  0212  3AFF               	xorlw	-1
  1496  0213  1903               	btfsc	3,2
  1497  0214  298A               	goto	l2078
  1498                           
  1499                           ;doprnt.c: 1487: {
  1500                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1501  0215  300A               	movlw	10
  1502  0216  00A7               	movwf	___lwmod@divisor
  1503  0217  3000               	movlw	0
  1504  0218  00A8               	movwf	___lwmod@divisor+1
  1505  0219  0832               	movf	printf@prec,w
  1506  021A  00AE               	movwf	??_printf
  1507  021B  072E               	addwf	??_printf,w
  1508  021C  3E01               	addlw	low (_dpowers-__stringbase)
  1509  021D  0084               	movwf	4
  1510  021E  23A2               	fcall	stringdir
  1511  021F  00A0               	movwf	___lwdiv@divisor
  1512  0220  23A2               	fcall	stringdir
  1513  0221  00A1               	movwf	___lwdiv@divisor+1
  1514  0222  0835               	movf	printf@_val+1,w
  1515  0223  01A3               	clrf	___lwdiv@dividend+1
  1516  0224  07A3               	addwf	___lwdiv@dividend+1,f
  1517  0225  0834               	movf	printf@_val,w
  1518  0226  01A2               	clrf	___lwdiv@dividend
  1519  0227  07A2               	addwf	___lwdiv@dividend,f
  1520  0228  24BE               	fcall	___lwdiv
  1521  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1522  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1523  022B  0821               	movf	?___lwdiv+1,w
  1524  022C  01AA               	clrf	___lwmod@dividend+1
  1525  022D  07AA               	addwf	___lwmod@dividend+1,f
  1526  022E  0820               	movf	?___lwdiv,w
  1527  022F  01A9               	clrf	___lwmod@dividend
  1528  0230  07A9               	addwf	___lwmod@dividend,f
  1529  0231  24FE               	fcall	___lwmod
  1530  0232  1283               	bcf	3,5	;RP0=0, select bank0
  1531  0233  1303               	bcf	3,6	;RP1=0, select bank0
  1532  0234  0827               	movf	?___lwmod,w
  1533  0235  3E30               	addlw	48
  1534  0236  00AF               	movwf	??_printf+1
  1535  0237  082F               	movf	??_printf+1,w
  1536  0238  00B9               	movwf	printf@c
  1537                           
  1538                           ;doprnt.c: 1532: }
  1539                           ;doprnt.c: 1533: (putch(c) );
  1540  0239  0839               	movf	printf@c,w
  1541  023A  2585               	fcall	_putch
  1542  023B  2A0B               	goto	l2076
  1543  023C                     l255:	
  1544                           ;doprnt.c: 1549: return 0;
  1545                           ;	Return value of _printf is never used
  1546                           
  1547                           ;doprnt.c: 1534: }
  1548                           ;doprnt.c: 1542: }
  1549                           ;doprnt.c: 1544: alldone:
  1550                           
  1551  023C  0008               	return
  1552  023D                     __end_of_printf:	
  1553                           
  1554                           	psect	text5
  1555  0585                     __ptext5:	
  1556 ;; *************** function _putch *****************
  1557 ;; Defined at:
  1558 ;;		line 21 in file "main.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;  data            1    wreg     unsigned char 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  data            1    5[COMMON] unsigned char 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;		None               void
  1565 ;; Registers used:
  1566 ;;		wreg
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1572 ;;      Params:         0       0       0       0
  1573 ;;      Locals:         1       0       0       0
  1574 ;;      Temps:          0       0       0       0
  1575 ;;      Totals:         1       0       0       0
  1576 ;;Total ram usage:        1 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:    1
  1579 ;; This function calls:
  1580 ;;		Nothing
  1581 ;; This function is called by:
  1582 ;;		_printf
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           
  1587                           ;psect for function _putch
  1588  0585                     _putch:	
  1589                           
  1590                           ;incstack = 0
  1591                           ; Regs used in _putch: [wreg]
  1592                           ;putch@data stored from wreg
  1593  0585  00F5               	movwf	putch@data
  1594                           
  1595                           ;main.c: 23: if(data == 10)
  1596  0586  0875               	movf	putch@data,w
  1597  0587  3A0A               	xorlw	10
  1598  0588  1D03               	skipz
  1599  0589  2D95               	goto	l39
  1600  058A                     l32:	
  1601                           ;main.c: 26: continue;
  1602                           
  1603                           ;main.c: 24: {
  1604                           ;main.c: 25: while(!TXIF)
  1605                           
  1606  058A  1283               	bcf	3,5	;RP0=0, select bank0
  1607  058B  1303               	bcf	3,6	;RP1=0, select bank0
  1608  058C  1E0C               	btfss	12,4	;volatile
  1609  058D  2D8A               	goto	l32
  1610                           
  1611                           ;main.c: 27: TXREG = 10;
  1612  058E  300A               	movlw	10
  1613  058F  0099               	movwf	25	;volatile
  1614  0590                     l35:	
  1615                           ;main.c: 29: continue;
  1616                           
  1617                           ;main.c: 28: while(!TXIF)
  1618                           
  1619  0590  1E0C               	btfss	12,4	;volatile
  1620  0591  2D90               	goto	l35
  1621                           
  1622                           ;main.c: 30: TXREG = 13;
  1623  0592  300D               	movlw	13
  1624  0593  0099               	movwf	25	;volatile
  1625                           
  1626                           ;main.c: 31: return;
  1627  0594  0008               	return
  1628  0595                     l39:	
  1629                           ;main.c: 34: continue;
  1630                           
  1631                           ;main.c: 32: }
  1632                           ;main.c: 33: while(!TXIF)
  1633                           
  1634  0595  1283               	bcf	3,5	;RP0=0, select bank0
  1635  0596  1303               	bcf	3,6	;RP1=0, select bank0
  1636  0597  1E0C               	btfss	12,4	;volatile
  1637  0598  2D95               	goto	l39
  1638                           
  1639                           ;main.c: 35: TXREG = data;
  1640  0599  0875               	movf	putch@data,w
  1641  059A  0099               	movwf	25	;volatile
  1642  059B  0008               	return
  1643  059C                     __end_of_putch:	
  1644                           
  1645                           	psect	text6
  1646  04FE                     __ptext6:	
  1647 ;; *************** function ___lwmod *****************
  1648 ;; Defined at:
  1649 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  divisor         2    7[BANK0 ] unsigned int 
  1652 ;;  dividend        2    9[BANK0 ] unsigned int 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  counter         1   11[BANK0 ] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  2    7[BANK0 ] unsigned int 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1664 ;;      Params:         0       4       0       0
  1665 ;;      Locals:         0       1       0       0
  1666 ;;      Temps:          1       0       0       0
  1667 ;;      Totals:         1       5       0       0
  1668 ;;Total ram usage:        6 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    1
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_printf
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           
  1679                           ;psect for function ___lwmod
  1680  04FE                     ___lwmod:	
  1681                           
  1682                           ;incstack = 0
  1683                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1684  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  1685  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  1686  0500  0828               	movf	___lwmod@divisor+1,w
  1687  0501  0427               	iorwf	___lwmod@divisor,w
  1688  0502  1903               	skipnz
  1689  0503  2D2D               	goto	l1940
  1690  0504  01AB               	clrf	___lwmod@counter
  1691  0505  0AAB               	incf	___lwmod@counter,f
  1692  0506                     l1930:	
  1693  0506  1BA8               	btfsc	___lwmod@divisor+1,7
  1694  0507  2D14               	goto	l1932
  1695  0508  3001               	movlw	1
  1696  0509                     u1755:	
  1697  0509  1003               	clrc
  1698  050A  0DA7               	rlf	___lwmod@divisor,f
  1699  050B  0DA8               	rlf	___lwmod@divisor+1,f
  1700  050C  3EFF               	addlw	-1
  1701  050D  1D03               	skipz
  1702  050E  2D09               	goto	u1755
  1703  050F  3001               	movlw	1
  1704  0510  00F6               	movwf	??___lwmod
  1705  0511  0876               	movf	??___lwmod,w
  1706  0512  07AB               	addwf	___lwmod@counter,f
  1707  0513  2D06               	goto	l1930
  1708  0514                     l1932:	
  1709  0514  0828               	movf	___lwmod@divisor+1,w
  1710  0515  022A               	subwf	___lwmod@dividend+1,w
  1711  0516  1D03               	skipz
  1712  0517  2D1A               	goto	u1775
  1713  0518  0827               	movf	___lwmod@divisor,w
  1714  0519  0229               	subwf	___lwmod@dividend,w
  1715  051A                     u1775:	
  1716  051A  1C03               	skipc
  1717  051B  2D22               	goto	l1936
  1718  051C  0827               	movf	___lwmod@divisor,w
  1719  051D  02A9               	subwf	___lwmod@dividend,f
  1720  051E  0828               	movf	___lwmod@divisor+1,w
  1721  051F  1C03               	skipc
  1722  0520  03AA               	decf	___lwmod@dividend+1,f
  1723  0521  02AA               	subwf	___lwmod@dividend+1,f
  1724  0522                     l1936:	
  1725  0522  3001               	movlw	1
  1726  0523                     u1785:	
  1727  0523  1003               	clrc
  1728  0524  0CA8               	rrf	___lwmod@divisor+1,f
  1729  0525  0CA7               	rrf	___lwmod@divisor,f
  1730  0526  3EFF               	addlw	-1
  1731  0527  1D03               	skipz
  1732  0528  2D23               	goto	u1785
  1733  0529  3001               	movlw	1
  1734  052A  02AB               	subwf	___lwmod@counter,f
  1735  052B  1D03               	btfss	3,2
  1736  052C  2D14               	goto	l1932
  1737  052D                     l1940:	
  1738  052D  082A               	movf	___lwmod@dividend+1,w
  1739  052E  01A8               	clrf	?___lwmod+1
  1740  052F  07A8               	addwf	?___lwmod+1,f
  1741  0530  0829               	movf	___lwmod@dividend,w
  1742  0531  01A7               	clrf	?___lwmod
  1743  0532  07A7               	addwf	?___lwmod,f
  1744  0533  0008               	return
  1745  0534                     __end_of___lwmod:	
  1746                           
  1747                           	psect	text7
  1748  04BE                     __ptext7:	
  1749 ;; *************** function ___lwdiv *****************
  1750 ;; Defined at:
  1751 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;  divisor         2    0[BANK0 ] unsigned int 
  1754 ;;  dividend        2    2[BANK0 ] unsigned int 
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;  quotient        2    5[BANK0 ] unsigned int 
  1757 ;;  counter         1    4[BANK0 ] unsigned char 
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  2    0[BANK0 ] unsigned int 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2, status,0
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1767 ;;      Params:         0       4       0       0
  1768 ;;      Locals:         0       3       0       0
  1769 ;;      Temps:          1       0       0       0
  1770 ;;      Totals:         1       7       0       0
  1771 ;;Total ram usage:        8 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    1
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_printf
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           
  1782                           ;psect for function ___lwdiv
  1783  04BE                     ___lwdiv:	
  1784                           
  1785                           ;incstack = 0
  1786                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1787  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  1788  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  1789  04C0  01A5               	clrf	___lwdiv@quotient
  1790  04C1  01A6               	clrf	___lwdiv@quotient+1
  1791  04C2  0821               	movf	___lwdiv@divisor+1,w
  1792  04C3  0420               	iorwf	___lwdiv@divisor,w
  1793  04C4  1903               	skipnz
  1794  04C5  2CF7               	goto	l1918
  1795  04C6  01A4               	clrf	___lwdiv@counter
  1796  04C7  0AA4               	incf	___lwdiv@counter,f
  1797  04C8                     l1906:	
  1798  04C8  1BA1               	btfsc	___lwdiv@divisor+1,7
  1799  04C9  2CD6               	goto	l1908
  1800  04CA  3001               	movlw	1
  1801  04CB                     u1685:	
  1802  04CB  1003               	clrc
  1803  04CC  0DA0               	rlf	___lwdiv@divisor,f
  1804  04CD  0DA1               	rlf	___lwdiv@divisor+1,f
  1805  04CE  3EFF               	addlw	-1
  1806  04CF  1D03               	skipz
  1807  04D0  2CCB               	goto	u1685
  1808  04D1  3001               	movlw	1
  1809  04D2  00F5               	movwf	??___lwdiv
  1810  04D3  0875               	movf	??___lwdiv,w
  1811  04D4  07A4               	addwf	___lwdiv@counter,f
  1812  04D5  2CC8               	goto	l1906
  1813  04D6                     l1908:	
  1814  04D6  3001               	movlw	1
  1815  04D7                     u1705:	
  1816  04D7  1003               	clrc
  1817  04D8  0DA5               	rlf	___lwdiv@quotient,f
  1818  04D9  0DA6               	rlf	___lwdiv@quotient+1,f
  1819  04DA  3EFF               	addlw	-1
  1820  04DB  1D03               	skipz
  1821  04DC  2CD7               	goto	u1705
  1822  04DD  0821               	movf	___lwdiv@divisor+1,w
  1823  04DE  0223               	subwf	___lwdiv@dividend+1,w
  1824  04DF  1D03               	skipz
  1825  04E0  2CE3               	goto	u1715
  1826  04E1  0820               	movf	___lwdiv@divisor,w
  1827  04E2  0222               	subwf	___lwdiv@dividend,w
  1828  04E3                     u1715:	
  1829  04E3  1C03               	skipc
  1830  04E4  2CEC               	goto	l1914
  1831  04E5  0820               	movf	___lwdiv@divisor,w
  1832  04E6  02A2               	subwf	___lwdiv@dividend,f
  1833  04E7  0821               	movf	___lwdiv@divisor+1,w
  1834  04E8  1C03               	skipc
  1835  04E9  03A3               	decf	___lwdiv@dividend+1,f
  1836  04EA  02A3               	subwf	___lwdiv@dividend+1,f
  1837  04EB  1425               	bsf	___lwdiv@quotient,0
  1838  04EC                     l1914:	
  1839  04EC  3001               	movlw	1
  1840  04ED                     u1725:	
  1841  04ED  1003               	clrc
  1842  04EE  0CA1               	rrf	___lwdiv@divisor+1,f
  1843  04EF  0CA0               	rrf	___lwdiv@divisor,f
  1844  04F0  3EFF               	addlw	-1
  1845  04F1  1D03               	skipz
  1846  04F2  2CED               	goto	u1725
  1847  04F3  3001               	movlw	1
  1848  04F4  02A4               	subwf	___lwdiv@counter,f
  1849  04F5  1D03               	btfss	3,2
  1850  04F6  2CD6               	goto	l1908
  1851  04F7                     l1918:	
  1852  04F7  0826               	movf	___lwdiv@quotient+1,w
  1853  04F8  01A1               	clrf	?___lwdiv+1
  1854  04F9  07A1               	addwf	?___lwdiv+1,f
  1855  04FA  0825               	movf	___lwdiv@quotient,w
  1856  04FB  01A0               	clrf	?___lwdiv
  1857  04FC  07A0               	addwf	?___lwdiv,f
  1858  04FD  0008               	return
  1859  04FE                     __end_of___lwdiv:	
  1860                           
  1861                           	psect	text8
  1862  029A                     __ptext8:	
  1863 ;; *************** function _MFRC522_SelectTag *****************
  1864 ;; Defined at:
  1865 ;;		line 458 in file "main.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  serNum          1    wreg     PTR unsigned char 
  1868 ;;		 -> main@UID(6), 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  serNum          1   46[BANK0 ] PTR unsigned char 
  1871 ;;		 -> main@UID(6), 
  1872 ;;  buffer          9   36[BANK0 ] unsigned char [9]
  1873 ;;  recvBits        2   48[BANK0 ] unsigned int 
  1874 ;;  i               1   50[BANK0 ] unsigned char 
  1875 ;;  size            1   47[BANK0 ] unsigned char 
  1876 ;;  _status         1   45[BANK0 ] unsigned char 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      unsigned char 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1886 ;;      Params:         0       0       0       0
  1887 ;;      Locals:         0      15       0       0
  1888 ;;      Temps:          0       5       0       0
  1889 ;;      Totals:         0      20       0       0
  1890 ;;Total ram usage:       20 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    5
  1893 ;; This function calls:
  1894 ;;		_MFRC522_CRC
  1895 ;;		_MFRC522_ToCard
  1896 ;; This function is called by:
  1897 ;;		_main
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           
  1902                           ;psect for function _MFRC522_SelectTag
  1903  029A                     _MFRC522_SelectTag:	
  1904                           
  1905                           ;incstack = 0
  1906                           ; Regs used in _MFRC522_SelectTag: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1907                           ;MFRC522_SelectTag@serNum stored from wreg
  1908  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1909  029B  1303               	bcf	3,6	;RP1=0, select bank0
  1910  029C  00CE               	movwf	MFRC522_SelectTag@serNum
  1911                           
  1912                           ;main.c: 460: char i;
  1913                           ;main.c: 461: char _status;
  1914                           ;main.c: 462: char size;
  1915                           ;main.c: 463: unsigned recvBits;
  1916                           ;main.c: 464: char buffer[9];
  1917                           ;main.c: 468: buffer[0] = 0x93;
  1918  029D  3093               	movlw	147
  1919  029E  00BF               	movwf	??_MFRC522_SelectTag
  1920  029F  083F               	movf	??_MFRC522_SelectTag,w
  1921  02A0  00C4               	movwf	MFRC522_SelectTag@buffer
  1922                           
  1923                           ;main.c: 469: buffer[1] = 0x70;
  1924  02A1  3070               	movlw	112
  1925  02A2  00BF               	movwf	??_MFRC522_SelectTag
  1926  02A3  083F               	movf	??_MFRC522_SelectTag,w
  1927  02A4  00C5               	movwf	MFRC522_SelectTag@buffer+1
  1928                           
  1929                           ;main.c: 471: for ( i=2; i < 7; i++ )
  1930  02A5  3002               	movlw	2
  1931  02A6  00BF               	movwf	??_MFRC522_SelectTag
  1932  02A7  083F               	movf	??_MFRC522_SelectTag,w
  1933  02A8  00D2               	movwf	MFRC522_SelectTag@i
  1934  02A9  3007               	movlw	7
  1935  02AA  0252               	subwf	MFRC522_SelectTag@i,w
  1936  02AB  1803               	btfsc	3,0
  1937  02AC  2AC3               	goto	l2202
  1938  02AD                     l2194:	
  1939                           
  1940                           ;main.c: 472: {
  1941                           ;main.c: 473: buffer[i] = *serNum++;
  1942  02AD  084E               	movf	MFRC522_SelectTag@serNum,w
  1943  02AE  0084               	movwf	4
  1944  02AF  1383               	bcf	3,7	;select IRP bank0
  1945  02B0  0800               	movf	0,w
  1946  02B1  00BF               	movwf	??_MFRC522_SelectTag
  1947  02B2  0852               	movf	MFRC522_SelectTag@i,w
  1948  02B3  3E44               	addlw	MFRC522_SelectTag@buffer& (0+255)
  1949  02B4  0084               	movwf	4
  1950  02B5  083F               	movf	??_MFRC522_SelectTag,w
  1951  02B6  0080               	movwf	0
  1952  02B7  3001               	movlw	1
  1953  02B8  00BF               	movwf	??_MFRC522_SelectTag
  1954  02B9  083F               	movf	??_MFRC522_SelectTag,w
  1955  02BA  07CE               	addwf	MFRC522_SelectTag@serNum,f
  1956  02BB  3001               	movlw	1
  1957  02BC  00BF               	movwf	??_MFRC522_SelectTag
  1958  02BD  083F               	movf	??_MFRC522_SelectTag,w
  1959  02BE  07D2               	addwf	MFRC522_SelectTag@i,f
  1960  02BF  3007               	movlw	7
  1961  02C0  0252               	subwf	MFRC522_SelectTag@i,w
  1962  02C1  1C03               	skipc
  1963  02C2  2AAD               	goto	l2194
  1964  02C3                     l2202:	
  1965                           
  1966                           ;main.c: 474: }
  1967                           ;main.c: 476: MFRC522_CRC( buffer, 7, &buffer[7] );
  1968  02C3  3007               	movlw	7
  1969  02C4  00BF               	movwf	??_MFRC522_SelectTag
  1970  02C5  083F               	movf	??_MFRC522_SelectTag,w
  1971  02C6  00AD               	movwf	MFRC522_CRC@length
  1972  02C7  304B               	movlw	(MFRC522_SelectTag@buffer+7)& (0+255)
  1973  02C8  00C0               	movwf	??_MFRC522_SelectTag+1
  1974  02C9  0840               	movf	??_MFRC522_SelectTag+1,w
  1975  02CA  00AE               	movwf	MFRC522_CRC@dataOut
  1976  02CB  3044               	movlw	MFRC522_SelectTag@buffer& (0+255)
  1977  02CC  22F6               	fcall	_MFRC522_CRC
  1978                           
  1979                           ;main.c: 478: _status = MFRC522_ToCard( 0x0C, buffer, 9, buffer, &recvBits );
  1980  02CD  3044               	movlw	MFRC522_SelectTag@buffer& (0+255)
  1981  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1982  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  1983  02D0  00BF               	movwf	??_MFRC522_SelectTag
  1984  02D1  083F               	movf	??_MFRC522_SelectTag,w
  1985  02D2  00AD               	movwf	MFRC522_ToCard@sendData
  1986  02D3  3009               	movlw	9
  1987  02D4  00C0               	movwf	??_MFRC522_SelectTag+1
  1988  02D5  0840               	movf	??_MFRC522_SelectTag+1,w
  1989  02D6  00AE               	movwf	MFRC522_ToCard@sendLen
  1990  02D7  3044               	movlw	MFRC522_SelectTag@buffer& (0+255)
  1991  02D8  00C1               	movwf	??_MFRC522_SelectTag+2
  1992  02D9  0841               	movf	??_MFRC522_SelectTag+2,w
  1993  02DA  00AF               	movwf	MFRC522_ToCard@backData
  1994  02DB  3050               	movlw	MFRC522_SelectTag@recvBits& (0+255)
  1995  02DC  00C2               	movwf	??_MFRC522_SelectTag+3
  1996  02DD  0842               	movf	??_MFRC522_SelectTag+3,w
  1997  02DE  00B0               	movwf	MFRC522_ToCard@backLen
  1998  02DF  300C               	movlw	12
  1999  02E0  204E               	fcall	_MFRC522_ToCard
  2000  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  2001  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  2002  02E3  00C3               	movwf	??_MFRC522_SelectTag+4
  2003  02E4  0843               	movf	??_MFRC522_SelectTag+4,w
  2004  02E5  00CD               	movwf	MFRC522_SelectTag@_status
  2005                           
  2006                           ;main.c: 479: if ( (_status == 0) && (recvBits == 0x18) )
  2007  02E6  08CD               	movf	MFRC522_SelectTag@_status,f
  2008  02E7  1D03               	skipz
  2009  02E8  2AF3               	goto	l2210
  2010  02E9  3018               	movlw	24
  2011  02EA  0650               	xorwf	MFRC522_SelectTag@recvBits,w
  2012  02EB  0451               	iorwf	MFRC522_SelectTag@recvBits+1,w
  2013  02EC  1D03               	skipz
  2014  02ED  2AF3               	goto	l2210
  2015                           
  2016                           ;main.c: 480: {
  2017                           ;main.c: 481: size = buffer[0];
  2018  02EE  0844               	movf	MFRC522_SelectTag@buffer,w
  2019  02EF  00BF               	movwf	??_MFRC522_SelectTag
  2020  02F0  083F               	movf	??_MFRC522_SelectTag,w
  2021  02F1  00CF               	movwf	MFRC522_SelectTag@size
  2022                           
  2023                           ;main.c: 482: }
  2024  02F2  2AF4               	goto	l2212
  2025  02F3                     l2210:	
  2026                           
  2027                           ;main.c: 483: else
  2028                           ;main.c: 484: {
  2029                           ;main.c: 485: size = 0;
  2030  02F3  01CF               	clrf	MFRC522_SelectTag@size
  2031  02F4                     l2212:	
  2032                           
  2033                           ;main.c: 486: }
  2034                           ;main.c: 487: return size;
  2035  02F4  084F               	movf	MFRC522_SelectTag@size,w
  2036  02F5  0008               	return
  2037  02F6                     __end_of_MFRC522_SelectTag:	
  2038                           
  2039                           	psect	text9
  2040  05B3                     __ptext9:	
  2041 ;; *************** function _MFRC522_ReadCardSerial *****************
  2042 ;; Defined at:
  2043 ;;		line 616 in file "main.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  str             1    wreg     PTR unsigned char 
  2046 ;;		 -> main@UID(6), 
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;  str             1   44[BANK0 ] PTR unsigned char 
  2049 ;;		 -> main@UID(6), 
  2050 ;;  _status         1   43[BANK0 ] unsigned char 
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  1    wreg      unsigned char 
  2053 ;; Registers used:
  2054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2060 ;;      Params:         0       0       0       0
  2061 ;;      Locals:         0       2       0       0
  2062 ;;      Temps:          0       1       0       0
  2063 ;;      Totals:         0       3       0       0
  2064 ;;Total ram usage:        3 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    6
  2067 ;; This function calls:
  2068 ;;		_MFRC522_AntiColl
  2069 ;; This function is called by:
  2070 ;;		_main
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           
  2075                           ;psect for function _MFRC522_ReadCardSerial
  2076  05B3                     _MFRC522_ReadCardSerial:	
  2077                           
  2078                           ;incstack = 0
  2079                           ; Regs used in _MFRC522_ReadCardSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  2080                           ;MFRC522_ReadCardSerial@str stored from wreg
  2081  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  2082  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  2083  05B5  00CC               	movwf	MFRC522_ReadCardSerial@str
  2084                           
  2085                           ;main.c: 618: char _status;
  2086                           ;main.c: 619: _status = MFRC522_AntiColl( str );
  2087  05B6  084C               	movf	MFRC522_ReadCardSerial@str,w
  2088  05B7  223D               	fcall	_MFRC522_AntiColl
  2089  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  2090  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  2091  05BA  00CA               	movwf	??_MFRC522_ReadCardSerial
  2092  05BB  084A               	movf	??_MFRC522_ReadCardSerial,w
  2093  05BC  00CB               	movwf	MFRC522_ReadCardSerial@_status
  2094                           
  2095                           ;main.c: 620: str[5] = 0;
  2096  05BD  084C               	movf	MFRC522_ReadCardSerial@str,w
  2097  05BE  3E05               	addlw	5
  2098  05BF  0084               	movwf	4
  2099  05C0  1383               	bcf	3,7	;select IRP bank0
  2100  05C1  0180               	clrf	0
  2101                           
  2102                           ;main.c: 621: if (_status == 0)
  2103  05C2  08CB               	movf	MFRC522_ReadCardSerial@_status,f
  2104  05C3  1D03               	skipz
  2105  05C4  2DC7               	goto	l2252
  2106                           
  2107                           ;main.c: 622: return 1;
  2108  05C5  3001               	movlw	1
  2109  05C6  0008               	return
  2110  05C7                     l2252:	
  2111                           
  2112                           ;main.c: 623: else
  2113                           ;main.c: 624: return 0;
  2114  05C7  3000               	movlw	0
  2115  05C8  0008               	return
  2116  05C9                     __end_of_MFRC522_ReadCardSerial:	
  2117                           
  2118                           	psect	text10
  2119  023D                     __ptext10:	
  2120 ;; *************** function _MFRC522_AntiColl *****************
  2121 ;; Defined at:
  2122 ;;		line 579 in file "main.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  serNum          1    wreg     PTR unsigned char 
  2125 ;;		 -> main@UID(6), 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  serNum          1   41[BANK0 ] PTR unsigned char 
  2128 ;;		 -> main@UID(6), 
  2129 ;;  unLen           2   37[BANK0 ] unsigned int 
  2130 ;;  i               1   40[BANK0 ] unsigned char 
  2131 ;;  _status         1   39[BANK0 ] unsigned char 
  2132 ;;  serNumCheck     1   36[BANK0 ] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      unsigned char 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2142 ;;      Params:         0       0       0       0
  2143 ;;      Locals:         0       6       0       0
  2144 ;;      Temps:          0       5       0       0
  2145 ;;      Totals:         0      11       0       0
  2146 ;;Total ram usage:       11 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    5
  2149 ;; This function calls:
  2150 ;;		_MFRC522_Clear_Bit
  2151 ;;		_MFRC522_ToCard
  2152 ;;		_MFRC522_Wr
  2153 ;; This function is called by:
  2154 ;;		_MFRC522_ReadCardSerial
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           
  2159                           ;psect for function _MFRC522_AntiColl
  2160  023D                     _MFRC522_AntiColl:	
  2161                           
  2162                           ;incstack = 0
  2163                           ; Regs used in _MFRC522_AntiColl: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2164                           ;MFRC522_AntiColl@serNum stored from wreg
  2165  023D  1283               	bcf	3,5	;RP0=0, select bank0
  2166  023E  1303               	bcf	3,6	;RP1=0, select bank0
  2167  023F  00C9               	movwf	MFRC522_AntiColl@serNum
  2168                           
  2169                           ;main.c: 581: char _status;
  2170                           ;main.c: 582: char i;
  2171                           ;main.c: 583: char serNumCheck = 0;
  2172  0240  01C4               	clrf	MFRC522_AntiColl@serNumCheck
  2173                           
  2174                           ;main.c: 584: unsigned unLen;
  2175                           ;main.c: 585: MFRC522_Wr( 0x0D, 0x00 );
  2176  0241  01A6               	clrf	MFRC522_Wr@value
  2177  0242  300D               	movlw	13
  2178  0243  25C9               	fcall	_MFRC522_Wr
  2179                           
  2180                           ;main.c: 586: serNum[0] = 0x93;
  2181  0244  3093               	movlw	147
  2182  0245  1283               	bcf	3,5	;RP0=0, select bank0
  2183  0246  1303               	bcf	3,6	;RP1=0, select bank0
  2184  0247  00BF               	movwf	??_MFRC522_AntiColl
  2185  0248  0849               	movf	MFRC522_AntiColl@serNum,w
  2186  0249  0084               	movwf	4
  2187  024A  083F               	movf	??_MFRC522_AntiColl,w
  2188  024B  1383               	bcf	3,7	;select IRP bank0
  2189  024C  0080               	movwf	0
  2190                           
  2191                           ;main.c: 587: serNum[1] = 0x20;
  2192  024D  3020               	movlw	32
  2193  024E  00BF               	movwf	??_MFRC522_AntiColl
  2194  024F  0A49               	incf	MFRC522_AntiColl@serNum,w
  2195  0250  0084               	movwf	4
  2196  0251  083F               	movf	??_MFRC522_AntiColl,w
  2197  0252  0080               	movwf	0
  2198                           
  2199                           ;main.c: 588: MFRC522_Clear_Bit( 0x08, 0x08 );
  2200  0253  3008               	movlw	8
  2201  0254  00BF               	movwf	??_MFRC522_AntiColl
  2202  0255  083F               	movf	??_MFRC522_AntiColl,w
  2203  0256  00A9               	movwf	MFRC522_Clear_Bit@mask
  2204  0257  3008               	movlw	8
  2205  0258  2610               	fcall	_MFRC522_Clear_Bit
  2206                           
  2207                           ;main.c: 589: _status = MFRC522_ToCard( 0x0C, serNum, 2, serNum, &unLen );
  2208  0259  1283               	bcf	3,5	;RP0=0, select bank0
  2209  025A  1303               	bcf	3,6	;RP1=0, select bank0
  2210  025B  0849               	movf	MFRC522_AntiColl@serNum,w
  2211  025C  00BF               	movwf	??_MFRC522_AntiColl
  2212  025D  083F               	movf	??_MFRC522_AntiColl,w
  2213  025E  00AD               	movwf	MFRC522_ToCard@sendData
  2214  025F  3002               	movlw	2
  2215  0260  00C0               	movwf	??_MFRC522_AntiColl+1
  2216  0261  0840               	movf	??_MFRC522_AntiColl+1,w
  2217  0262  00AE               	movwf	MFRC522_ToCard@sendLen
  2218  0263  0849               	movf	MFRC522_AntiColl@serNum,w
  2219  0264  00C1               	movwf	??_MFRC522_AntiColl+2
  2220  0265  0841               	movf	??_MFRC522_AntiColl+2,w
  2221  0266  00AF               	movwf	MFRC522_ToCard@backData
  2222  0267  3045               	movlw	MFRC522_AntiColl@unLen& (0+255)
  2223  0268  00C2               	movwf	??_MFRC522_AntiColl+3
  2224  0269  0842               	movf	??_MFRC522_AntiColl+3,w
  2225  026A  00B0               	movwf	MFRC522_ToCard@backLen
  2226  026B  300C               	movlw	12
  2227  026C  204E               	fcall	_MFRC522_ToCard
  2228  026D  1283               	bcf	3,5	;RP0=0, select bank0
  2229  026E  1303               	bcf	3,6	;RP1=0, select bank0
  2230  026F  00C3               	movwf	??_MFRC522_AntiColl+4
  2231  0270  0843               	movf	??_MFRC522_AntiColl+4,w
  2232  0271  00C7               	movwf	MFRC522_AntiColl@_status
  2233                           
  2234                           ;main.c: 590: if (_status == 0)
  2235  0272  08C7               	movf	MFRC522_AntiColl@_status,f
  2236  0273  1D03               	skipz
  2237  0274  2A98               	goto	l196
  2238                           
  2239                           ;main.c: 591: {
  2240                           ;main.c: 592: for ( i=0; i < 4; i++ )
  2241  0275  01C8               	clrf	MFRC522_AntiColl@i
  2242  0276  3004               	movlw	4
  2243  0277  0248               	subwf	MFRC522_AntiColl@i,w
  2244  0278  1803               	btfsc	3,0
  2245  0279  2A8C               	goto	l2160
  2246  027A                     l2154:	
  2247                           
  2248                           ;main.c: 593: {
  2249                           ;main.c: 594: serNumCheck ^= serNum[i];
  2250  027A  0848               	movf	MFRC522_AntiColl@i,w
  2251  027B  0749               	addwf	MFRC522_AntiColl@serNum,w
  2252  027C  00BF               	movwf	??_MFRC522_AntiColl
  2253  027D  083F               	movf	??_MFRC522_AntiColl,w
  2254  027E  0084               	movwf	4
  2255  027F  1383               	bcf	3,7	;select IRP bank0
  2256  0280  0800               	movf	0,w
  2257  0281  00C0               	movwf	??_MFRC522_AntiColl+1
  2258  0282  0840               	movf	??_MFRC522_AntiColl+1,w
  2259  0283  06C4               	xorwf	MFRC522_AntiColl@serNumCheck,f
  2260  0284  3001               	movlw	1
  2261  0285  00BF               	movwf	??_MFRC522_AntiColl
  2262  0286  083F               	movf	??_MFRC522_AntiColl,w
  2263  0287  07C8               	addwf	MFRC522_AntiColl@i,f
  2264  0288  3004               	movlw	4
  2265  0289  0248               	subwf	MFRC522_AntiColl@i,w
  2266  028A  1C03               	skipc
  2267  028B  2A7A               	goto	l2154
  2268  028C                     l2160:	
  2269                           
  2270                           ;main.c: 595: }
  2271                           ;main.c: 597: if ( serNumCheck != serNum[4] )
  2272  028C  0849               	movf	MFRC522_AntiColl@serNum,w
  2273  028D  3E04               	addlw	4
  2274  028E  0084               	movwf	4
  2275  028F  1383               	bcf	3,7	;select IRP bank0
  2276  0290  0800               	movf	0,w
  2277  0291  0644               	xorwf	MFRC522_AntiColl@serNumCheck,w
  2278  0292  1903               	skipnz
  2279  0293  2A98               	goto	l196
  2280                           
  2281                           ;main.c: 598: {
  2282                           ;main.c: 599: _status = 2;
  2283  0294  3002               	movlw	2
  2284  0295  00BF               	movwf	??_MFRC522_AntiColl
  2285  0296  083F               	movf	??_MFRC522_AntiColl,w
  2286  0297  00C7               	movwf	MFRC522_AntiColl@_status
  2287  0298                     l196:	
  2288                           
  2289                           ;main.c: 600: }
  2290                           ;main.c: 601: }
  2291                           ;main.c: 602: return _status;
  2292  0298  0847               	movf	MFRC522_AntiColl@_status,w
  2293  0299  0008               	return
  2294  029A                     __end_of_MFRC522_AntiColl:	
  2295                           
  2296                           	psect	text11
  2297  0438                     __ptext11:	
  2298 ;; *************** function _MFRC522_Init *****************
  2299 ;; Defined at:
  2300 ;;		line 289 in file "main.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;		None
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;		None
  2305 ;; Return value:  Size  Location     Type
  2306 ;;		None               void
  2307 ;; Registers used:
  2308 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2314 ;;      Params:         0       0       0       0
  2315 ;;      Locals:         0       0       0       0
  2316 ;;      Temps:          0       1       0       0
  2317 ;;      Totals:         0       1       0       0
  2318 ;;Total ram usage:        1 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    5
  2321 ;; This function calls:
  2322 ;;		_MFRC522_AntennaOn
  2323 ;;		_MFRC522_Reset
  2324 ;;		_MFRC522_Wr
  2325 ;;		_SPI_init
  2326 ;; This function is called by:
  2327 ;;		_main
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           
  2332                           ;psect for function _MFRC522_Init
  2333  0438                     _MFRC522_Init:	
  2334                           
  2335                           ;main.c: 291: TRISB &=~(1<<0);
  2336                           
  2337                           ;incstack = 0
  2338                           ; Regs used in _MFRC522_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2339  0438  30FE               	movlw	254
  2340  0439  1283               	bcf	3,5	;RP0=0, select bank0
  2341  043A  1303               	bcf	3,6	;RP1=0, select bank0
  2342  043B  00AD               	movwf	??_MFRC522_Init
  2343  043C  082D               	movf	??_MFRC522_Init,w
  2344  043D  1683               	bsf	3,5	;RP0=1, select bank1
  2345  043E  1303               	bcf	3,6	;RP1=0, select bank1
  2346  043F  0586               	andwf	6,f	;volatile
  2347                           
  2348                           ;main.c: 292: TRISB &=~(1<<3);
  2349  0440  30F7               	movlw	247
  2350  0441  1283               	bcf	3,5	;RP0=0, select bank0
  2351  0442  1303               	bcf	3,6	;RP1=0, select bank0
  2352  0443  00AD               	movwf	??_MFRC522_Init
  2353  0444  082D               	movf	??_MFRC522_Init,w
  2354  0445  1683               	bsf	3,5	;RP0=1, select bank1
  2355  0446  1303               	bcf	3,6	;RP1=0, select bank1
  2356  0447  0586               	andwf	6,f	;volatile
  2357                           
  2358                           ;main.c: 293: PORTB|=(1<<0);
  2359  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2360  0449  1303               	bcf	3,6	;RP1=0, select bank0
  2361  044A  1406               	bsf	6,0	;volatile
  2362                           
  2363                           ;main.c: 294: PORTB|=(1<<3);
  2364  044B  1586               	bsf	6,3	;volatile
  2365                           
  2366                           ;main.c: 296: SPI_init();
  2367  044C  262E               	fcall	_SPI_init
  2368                           
  2369                           ;main.c: 297: MFRC522_Reset();
  2370  044D  2639               	fcall	_MFRC522_Reset
  2371                           
  2372                           ;main.c: 299: MFRC522_Wr( 0x2A, 0x8D );
  2373  044E  308D               	movlw	141
  2374  044F  1283               	bcf	3,5	;RP0=0, select bank0
  2375  0450  1303               	bcf	3,6	;RP1=0, select bank0
  2376  0451  00AD               	movwf	??_MFRC522_Init
  2377  0452  082D               	movf	??_MFRC522_Init,w
  2378  0453  00A6               	movwf	MFRC522_Wr@value
  2379  0454  302A               	movlw	42
  2380  0455  25C9               	fcall	_MFRC522_Wr
  2381                           
  2382                           ;main.c: 300: MFRC522_Wr( 0x2B, 0x3E );
  2383  0456  303E               	movlw	62
  2384  0457  1283               	bcf	3,5	;RP0=0, select bank0
  2385  0458  1303               	bcf	3,6	;RP1=0, select bank0
  2386  0459  00AD               	movwf	??_MFRC522_Init
  2387  045A  082D               	movf	??_MFRC522_Init,w
  2388  045B  00A6               	movwf	MFRC522_Wr@value
  2389  045C  302B               	movlw	43
  2390  045D  25C9               	fcall	_MFRC522_Wr
  2391                           
  2392                           ;main.c: 301: MFRC522_Wr( 0x2D, 30 );
  2393  045E  301E               	movlw	30
  2394  045F  1283               	bcf	3,5	;RP0=0, select bank0
  2395  0460  1303               	bcf	3,6	;RP1=0, select bank0
  2396  0461  00AD               	movwf	??_MFRC522_Init
  2397  0462  082D               	movf	??_MFRC522_Init,w
  2398  0463  00A6               	movwf	MFRC522_Wr@value
  2399  0464  302D               	movlw	45
  2400  0465  25C9               	fcall	_MFRC522_Wr
  2401                           
  2402                           ;main.c: 302: MFRC522_Wr( 0x2C, 0 );
  2403  0466  1283               	bcf	3,5	;RP0=0, select bank0
  2404  0467  1303               	bcf	3,6	;RP1=0, select bank0
  2405  0468  01A6               	clrf	MFRC522_Wr@value
  2406  0469  302C               	movlw	44
  2407  046A  25C9               	fcall	_MFRC522_Wr
  2408                           
  2409                           ;main.c: 304: MFRC522_Wr( 0x15, 0x40 );
  2410  046B  3040               	movlw	64
  2411  046C  1283               	bcf	3,5	;RP0=0, select bank0
  2412  046D  1303               	bcf	3,6	;RP1=0, select bank0
  2413  046E  00AD               	movwf	??_MFRC522_Init
  2414  046F  082D               	movf	??_MFRC522_Init,w
  2415  0470  00A6               	movwf	MFRC522_Wr@value
  2416  0471  3015               	movlw	21
  2417  0472  25C9               	fcall	_MFRC522_Wr
  2418                           
  2419                           ;main.c: 305: MFRC522_Wr( 0x11, 0x3D );
  2420  0473  303D               	movlw	61
  2421  0474  1283               	bcf	3,5	;RP0=0, select bank0
  2422  0475  1303               	bcf	3,6	;RP1=0, select bank0
  2423  0476  00AD               	movwf	??_MFRC522_Init
  2424  0477  082D               	movf	??_MFRC522_Init,w
  2425  0478  00A6               	movwf	MFRC522_Wr@value
  2426  0479  3011               	movlw	17
  2427  047A  25C9               	fcall	_MFRC522_Wr
  2428                           
  2429                           ;main.c: 310: MFRC522_AntennaOn();
  2430  047B  2642               	fcall	_MFRC522_AntennaOn
  2431  047C  0008               	return
  2432  047D                     __end_of_MFRC522_Init:	
  2433                           
  2434                           	psect	text12
  2435  062E                     __ptext12:	
  2436 ;; *************** function _SPI_init *****************
  2437 ;; Defined at:
  2438 ;;		line 109 in file "main.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;		None
  2443 ;; Return value:  Size  Location     Type
  2444 ;;		None               void
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2452 ;;      Params:         0       0       0       0
  2453 ;;      Locals:         0       0       0       0
  2454 ;;      Temps:          1       0       0       0
  2455 ;;      Totals:         1       0       0       0
  2456 ;;Total ram usage:        1 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    1
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_MFRC522_Init
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           
  2468                           ;psect for function _SPI_init
  2469  062E                     _SPI_init:	
  2470                           
  2471                           ;main.c: 111: TRISB &= ~(1<<7 | 1<<6);
  2472                           
  2473                           ;incstack = 0
  2474                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  2475  062E  303F               	movlw	63
  2476  062F  00F5               	movwf	??_SPI_init
  2477  0630  0875               	movf	??_SPI_init,w
  2478  0631  1683               	bsf	3,5	;RP0=1, select bank1
  2479  0632  1303               	bcf	3,6	;RP1=0, select bank1
  2480  0633  0586               	andwf	6,f	;volatile
  2481                           
  2482                           ;main.c: 112: TRISB |= (1<<5);
  2483  0634  1686               	bsf	6,5	;volatile
  2484                           
  2485                           ;main.c: 113: PORTB |= (1<<7);
  2486  0635  1283               	bcf	3,5	;RP0=0, select bank0
  2487  0636  1303               	bcf	3,6	;RP1=0, select bank0
  2488  0637  1786               	bsf	6,7	;volatile
  2489  0638  0008               	return
  2490  0639                     __end_of_SPI_init:	
  2491                           
  2492                           	psect	text13
  2493  0639                     __ptext13:	
  2494 ;; *************** function _MFRC522_Reset *****************
  2495 ;; Defined at:
  2496 ;;		line 277 in file "main.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;		None
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;		None
  2501 ;; Return value:  Size  Location     Type
  2502 ;;		None               void
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2510 ;;      Params:         0       0       0       0
  2511 ;;      Locals:         0       0       0       0
  2512 ;;      Temps:          0       1       0       0
  2513 ;;      Totals:         0       1       0       0
  2514 ;;Total ram usage:        1 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    3
  2517 ;; This function calls:
  2518 ;;		_MFRC522_Wr
  2519 ;; This function is called by:
  2520 ;;		_MFRC522_Init
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           
  2525                           ;psect for function _MFRC522_Reset
  2526  0639                     _MFRC522_Reset:	
  2527                           
  2528                           ;main.c: 279: MFRC522_Wr( 0x01, 0x0F );
  2529                           
  2530                           ;incstack = 0
  2531                           ; Regs used in _MFRC522_Reset: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2532  0639  300F               	movlw	15
  2533  063A  1283               	bcf	3,5	;RP0=0, select bank0
  2534  063B  1303               	bcf	3,6	;RP1=0, select bank0
  2535  063C  00A9               	movwf	??_MFRC522_Reset
  2536  063D  0829               	movf	??_MFRC522_Reset,w
  2537  063E  00A6               	movwf	MFRC522_Wr@value
  2538  063F  3001               	movlw	1
  2539  0640  25C9               	fcall	_MFRC522_Wr
  2540  0641  0008               	return
  2541  0642                     __end_of_MFRC522_Reset:	
  2542                           
  2543                           	psect	text14
  2544  0642                     __ptext14:	
  2545 ;; *************** function _MFRC522_AntennaOn *****************
  2546 ;; Defined at:
  2547 ;;		line 281 in file "main.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;		None
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;		None
  2552 ;; Return value:  Size  Location     Type
  2553 ;;		None               void
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2561 ;;      Params:         0       0       0       0
  2562 ;;      Locals:         0       0       0       0
  2563 ;;      Temps:          0       1       0       0
  2564 ;;      Totals:         0       1       0       0
  2565 ;;Total ram usage:        1 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    4
  2568 ;; This function calls:
  2569 ;;		_MFRC522_Set_Bit
  2570 ;; This function is called by:
  2571 ;;		_MFRC522_Init
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           
  2576                           ;psect for function _MFRC522_AntennaOn
  2577  0642                     _MFRC522_AntennaOn:	
  2578                           
  2579                           ;main.c: 283: MFRC522_Set_Bit( 0x14, 0x03 );
  2580                           
  2581                           ;incstack = 0
  2582                           ; Regs used in _MFRC522_AntennaOn: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2583  0642  3003               	movlw	3
  2584  0643  1283               	bcf	3,5	;RP0=0, select bank0
  2585  0644  1303               	bcf	3,6	;RP1=0, select bank0
  2586  0645  00AC               	movwf	??_MFRC522_AntennaOn
  2587  0646  082C               	movf	??_MFRC522_AntennaOn,w
  2588  0647  00A9               	movwf	MFRC522_Set_Bit@mask
  2589  0648  3014               	movlw	20
  2590  0649  2620               	fcall	_MFRC522_Set_Bit
  2591  064A  0008               	return
  2592  064B                     __end_of_MFRC522_AntennaOn:	
  2593                           
  2594                           	psect	text15
  2595  0534                     __ptext15:	
  2596 ;; *************** function _MFRC522_Halt *****************
  2597 ;; Defined at:
  2598 ;;		line 490 in file "main.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;		None
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  buff            4   35[BANK0 ] unsigned char [4]
  2603 ;;  unLen           2   39[BANK0 ] unsigned int 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;		None               void
  2606 ;; Registers used:
  2607 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2613 ;;      Params:         0       0       0       0
  2614 ;;      Locals:         0       6       0       0
  2615 ;;      Temps:          0       4       0       0
  2616 ;;      Totals:         0      10       0       0
  2617 ;;Total ram usage:       10 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:    5
  2620 ;; This function calls:
  2621 ;;		_MFRC522_CRC
  2622 ;;		_MFRC522_Clear_Bit
  2623 ;;		_MFRC522_ToCard
  2624 ;; This function is called by:
  2625 ;;		_main
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           
  2630                           ;psect for function _MFRC522_Halt
  2631  0534                     _MFRC522_Halt:	
  2632                           
  2633                           ;main.c: 492: unsigned unLen;
  2634                           ;main.c: 493: char buff[4];
  2635                           ;main.c: 495: buff[0] = 0x50;
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in _MFRC522_Halt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2639  0534  3050               	movlw	80
  2640  0535  1283               	bcf	3,5	;RP0=0, select bank0
  2641  0536  1303               	bcf	3,6	;RP1=0, select bank0
  2642  0537  00BF               	movwf	??_MFRC522_Halt
  2643  0538  083F               	movf	??_MFRC522_Halt,w
  2644  0539  00C3               	movwf	MFRC522_Halt@buff
  2645                           
  2646                           ;main.c: 496: buff[1] = 0;
  2647  053A  01C4               	clrf	MFRC522_Halt@buff+1
  2648                           
  2649                           ;main.c: 497: MFRC522_CRC( buff, 2, &buff[2] );
  2650  053B  3002               	movlw	2
  2651  053C  00BF               	movwf	??_MFRC522_Halt
  2652  053D  083F               	movf	??_MFRC522_Halt,w
  2653  053E  00AD               	movwf	MFRC522_CRC@length
  2654  053F  3045               	movlw	(MFRC522_Halt@buff+2)& (0+255)
  2655  0540  00C0               	movwf	??_MFRC522_Halt+1
  2656  0541  0840               	movf	??_MFRC522_Halt+1,w
  2657  0542  00AE               	movwf	MFRC522_CRC@dataOut
  2658  0543  3043               	movlw	MFRC522_Halt@buff& (0+255)
  2659  0544  22F6               	fcall	_MFRC522_CRC
  2660                           
  2661                           ;main.c: 498: MFRC522_Clear_Bit( 0x08, 0x80 );
  2662  0545  3080               	movlw	128
  2663  0546  1283               	bcf	3,5	;RP0=0, select bank0
  2664  0547  1303               	bcf	3,6	;RP1=0, select bank0
  2665  0548  00BF               	movwf	??_MFRC522_Halt
  2666  0549  083F               	movf	??_MFRC522_Halt,w
  2667  054A  00A9               	movwf	MFRC522_Clear_Bit@mask
  2668  054B  3008               	movlw	8
  2669  054C  2610               	fcall	_MFRC522_Clear_Bit
  2670                           
  2671                           ;main.c: 499: MFRC522_ToCard( 0x0C, buff, 4, buff, &unLen );
  2672  054D  3043               	movlw	MFRC522_Halt@buff& (0+255)
  2673  054E  1283               	bcf	3,5	;RP0=0, select bank0
  2674  054F  1303               	bcf	3,6	;RP1=0, select bank0
  2675  0550  00BF               	movwf	??_MFRC522_Halt
  2676  0551  083F               	movf	??_MFRC522_Halt,w
  2677  0552  00AD               	movwf	MFRC522_ToCard@sendData
  2678  0553  3004               	movlw	4
  2679  0554  00C0               	movwf	??_MFRC522_Halt+1
  2680  0555  0840               	movf	??_MFRC522_Halt+1,w
  2681  0556  00AE               	movwf	MFRC522_ToCard@sendLen
  2682  0557  3043               	movlw	MFRC522_Halt@buff& (0+255)
  2683  0558  00C1               	movwf	??_MFRC522_Halt+2
  2684  0559  0841               	movf	??_MFRC522_Halt+2,w
  2685  055A  00AF               	movwf	MFRC522_ToCard@backData
  2686  055B  3047               	movlw	MFRC522_Halt@unLen& (0+255)
  2687  055C  00C2               	movwf	??_MFRC522_Halt+3
  2688  055D  0842               	movf	??_MFRC522_Halt+3,w
  2689  055E  00B0               	movwf	MFRC522_ToCard@backLen
  2690  055F  300C               	movlw	12
  2691  0560  204E               	fcall	_MFRC522_ToCard
  2692                           
  2693                           ;main.c: 500: MFRC522_Clear_Bit( 0x08, 0x08 );
  2694  0561  3008               	movlw	8
  2695  0562  1283               	bcf	3,5	;RP0=0, select bank0
  2696  0563  1303               	bcf	3,6	;RP1=0, select bank0
  2697  0564  00BF               	movwf	??_MFRC522_Halt
  2698  0565  083F               	movf	??_MFRC522_Halt,w
  2699  0566  00A9               	movwf	MFRC522_Clear_Bit@mask
  2700  0567  3008               	movlw	8
  2701  0568  2610               	fcall	_MFRC522_Clear_Bit
  2702  0569  0008               	return
  2703  056A                     __end_of_MFRC522_Halt:	
  2704                           
  2705                           	psect	text16
  2706  004E                     __ptext16:	
  2707 ;; *************** function _MFRC522_ToCard *****************
  2708 ;; Defined at:
  2709 ;;		line 312 in file "main.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  command         1    wreg     unsigned char 
  2712 ;;  sendData        1   13[BANK0 ] PTR unsigned char 
  2713 ;;		 -> main@UID(6), main@TagType(2), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  2714 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2715 ;;  sendLen         1   14[BANK0 ] unsigned char 
  2716 ;;  backData        1   15[BANK0 ] PTR unsigned char 
  2717 ;;		 -> main@UID(6), main@TagType(2), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  2718 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2719 ;;  backLen         1   16[BANK0 ] PTR unsigned int 
  2720 ;;		 -> MFRC522_AntiColl@unLen(2), MFRC522_Read@unLen(2), MFRC522_Write@recvBits(2), MFRC522_Auth@recvBits(2), 
  2721 ;;		 -> MFRC522_Halt@unLen(2), MFRC522_SelectTag@recvBits(2), MFRC522_Request@backBits(2), 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  command         1   27[BANK0 ] unsigned char 
  2724 ;;  i               2   28[BANK0 ] unsigned int 
  2725 ;;  n               1   30[BANK0 ] unsigned char 
  2726 ;;  irqEn           1   26[BANK0 ] unsigned char 
  2727 ;;  lastBits        1   25[BANK0 ] unsigned char 
  2728 ;;  _status         1   24[BANK0 ] unsigned char 
  2729 ;;  waitIRq         1   23[BANK0 ] unsigned char 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      unsigned char 
  2732 ;; Registers used:
  2733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2739 ;;      Params:         0       4       0       0
  2740 ;;      Locals:         0       8       0       0
  2741 ;;      Temps:          0       6       0       0
  2742 ;;      Totals:         0      18       0       0
  2743 ;;Total ram usage:       18 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    4
  2746 ;; This function calls:
  2747 ;;		_MFRC522_Clear_Bit
  2748 ;;		_MFRC522_Rd
  2749 ;;		_MFRC522_Set_Bit
  2750 ;;		_MFRC522_Wr
  2751 ;; This function is called by:
  2752 ;;		_MFRC522_Request
  2753 ;;		_MFRC522_SelectTag
  2754 ;;		_MFRC522_Halt
  2755 ;;		_MFRC522_AntiColl
  2756 ;;		_MFRC522_Auth
  2757 ;;		_MFRC522_Write
  2758 ;;		_MFRC522_Read
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           
  2763                           ;psect for function _MFRC522_ToCard
  2764  004E                     _MFRC522_ToCard:	
  2765                           
  2766                           ;incstack = 0
  2767                           ; Regs used in _MFRC522_ToCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2768                           ;MFRC522_ToCard@command stored from wreg
  2769  004E  1283               	bcf	3,5	;RP0=0, select bank0
  2770  004F  1303               	bcf	3,6	;RP1=0, select bank0
  2771  0050  00BB               	movwf	MFRC522_ToCard@command
  2772                           
  2773                           ;main.c: 314: char _status = 2;
  2774  0051  3002               	movlw	2
  2775  0052  00B1               	movwf	??_MFRC522_ToCard
  2776  0053  0831               	movf	??_MFRC522_ToCard,w
  2777  0054  00B8               	movwf	MFRC522_ToCard@_status
  2778                           
  2779                           ;main.c: 315: char irqEn = 0x00;
  2780  0055  01BA               	clrf	MFRC522_ToCard@irqEn
  2781                           
  2782                           ;main.c: 316: char waitIRq = 0x00;
  2783  0056  01B7               	clrf	MFRC522_ToCard@waitIRq
  2784                           
  2785                           ;main.c: 317: char lastBits;
  2786                           ;main.c: 318: char n;
  2787                           ;main.c: 319: unsigned i;
  2788                           ;main.c: 321: switch (command)
  2789  0057  2867               	goto	l1956
  2790  0058                     l1950:	
  2791                           ;main.c: 322: {
  2792                           ;main.c: 323: case 0x0E:
  2793                           
  2794                           
  2795                           ;main.c: 324: {
  2796                           ;main.c: 325: irqEn = 0x12;
  2797  0058  3012               	movlw	18
  2798  0059  00B1               	movwf	??_MFRC522_ToCard
  2799  005A  0831               	movf	??_MFRC522_ToCard,w
  2800  005B  00BA               	movwf	MFRC522_ToCard@irqEn
  2801                           
  2802                           ;main.c: 326: waitIRq = 0x10;
  2803  005C  3010               	movlw	16
  2804  005D  2863               	goto	L1
  2805  005E                     l1952:	
  2806                           ;main.c: 328: }
  2807                           ;main.c: 329: case 0x0C:
  2808                           
  2809                           ;main.c: 327: break;
  2810                           
  2811                           
  2812                           ;main.c: 330: {
  2813                           ;main.c: 331: irqEn = 0x77;
  2814  005E  3077               	movlw	119
  2815  005F  00B1               	movwf	??_MFRC522_ToCard
  2816  0060  0831               	movf	??_MFRC522_ToCard,w
  2817  0061  00BA               	movwf	MFRC522_ToCard@irqEn
  2818                           
  2819                           ;main.c: 332: waitIRq = 0x30;
  2820  0062  3030               	movlw	48
  2821  0063                     L1:	
  2822  0063  00B1               	movwf	??_MFRC522_ToCard
  2823  0064  0831               	movf	??_MFRC522_ToCard,w
  2824  0065  00B7               	movwf	MFRC522_ToCard@waitIRq
  2825                           
  2826                           ;main.c: 337: }
  2827                           
  2828                           ;main.c: 336: break;
  2829                           
  2830                           ;main.c: 334: }
  2831                           ;main.c: 335: default:
  2832                           
  2833                           ;main.c: 333: break;
  2834  0066  286F               	goto	l1958
  2835  0067                     l1956:	
  2836  0067  083B               	movf	MFRC522_ToCard@command,w
  2837                           
  2838                           ; Switch size 1, requested type "space"
  2839                           ; Number of cases is 2, Range of values is 12 to 14
  2840                           ; switch strategies available:
  2841                           ; Name         Instructions Cycles
  2842                           ; simple_byte            7     4 (average)
  2843                           ; direct_byte           12     9 (fixed)
  2844                           ; jumptable            263     9 (fixed)
  2845                           ;	Chosen strategy is simple_byte
  2846  0068  3A0C               	xorlw	12	; case 12
  2847  0069  1903               	skipnz
  2848  006A  285E               	goto	l1952
  2849  006B  3A02               	xorlw	2	; case 14
  2850  006C  1903               	skipnz
  2851  006D  2858               	goto	l1950
  2852  006E  286F               	goto	l1958
  2853  006F                     l1958:	
  2854                           
  2855                           ;main.c: 338: MFRC522_Wr( 0x02, irqEn | 0x80 );
  2856  006F  083A               	movf	MFRC522_ToCard@irqEn,w
  2857  0070  3880               	iorlw	128
  2858  0071  00B1               	movwf	??_MFRC522_ToCard
  2859  0072  0831               	movf	??_MFRC522_ToCard,w
  2860  0073  00A6               	movwf	MFRC522_Wr@value
  2861  0074  3002               	movlw	2
  2862  0075  25C9               	fcall	_MFRC522_Wr
  2863                           
  2864                           ;main.c: 339: MFRC522_Clear_Bit( 0x04, 0x80 );
  2865  0076  3080               	movlw	128
  2866  0077  1283               	bcf	3,5	;RP0=0, select bank0
  2867  0078  1303               	bcf	3,6	;RP1=0, select bank0
  2868  0079  00B1               	movwf	??_MFRC522_ToCard
  2869  007A  0831               	movf	??_MFRC522_ToCard,w
  2870  007B  00A9               	movwf	MFRC522_Clear_Bit@mask
  2871  007C  3004               	movlw	4
  2872  007D  2610               	fcall	_MFRC522_Clear_Bit
  2873                           
  2874                           ;main.c: 340: MFRC522_Set_Bit( 0x0A, 0x80 );
  2875  007E  3080               	movlw	128
  2876  007F  1283               	bcf	3,5	;RP0=0, select bank0
  2877  0080  1303               	bcf	3,6	;RP1=0, select bank0
  2878  0081  00B1               	movwf	??_MFRC522_ToCard
  2879  0082  0831               	movf	??_MFRC522_ToCard,w
  2880  0083  00A9               	movwf	MFRC522_Set_Bit@mask
  2881  0084  300A               	movlw	10
  2882  0085  2620               	fcall	_MFRC522_Set_Bit
  2883                           
  2884                           ;main.c: 341: MFRC522_Wr( 0x01, 0x00 );
  2885  0086  1283               	bcf	3,5	;RP0=0, select bank0
  2886  0087  1303               	bcf	3,6	;RP1=0, select bank0
  2887  0088  01A6               	clrf	MFRC522_Wr@value
  2888  0089  3001               	movlw	1
  2889  008A  25C9               	fcall	_MFRC522_Wr
  2890                           
  2891                           ;main.c: 346: for ( i=0; i < sendLen; i++ )
  2892  008B  1283               	bcf	3,5	;RP0=0, select bank0
  2893  008C  1303               	bcf	3,6	;RP1=0, select bank0
  2894  008D  01BC               	clrf	MFRC522_ToCard@i
  2895  008E  01BD               	clrf	MFRC522_ToCard@i+1
  2896  008F                     l1966:	
  2897  008F  082E               	movf	MFRC522_ToCard@sendLen,w
  2898  0090  00B1               	movwf	??_MFRC522_ToCard
  2899  0091  01B2               	clrf	??_MFRC522_ToCard+1
  2900  0092  0832               	movf	??_MFRC522_ToCard+1,w
  2901  0093  023D               	subwf	MFRC522_ToCard@i+1,w
  2902  0094  1D03               	skipz
  2903  0095  2898               	goto	u1805
  2904  0096  0831               	movf	??_MFRC522_ToCard,w
  2905  0097  023C               	subwf	MFRC522_ToCard@i,w
  2906  0098                     u1805:	
  2907  0098  1803               	btfsc	3,0
  2908  0099  28AF               	goto	l1968
  2909                           
  2910                           ;main.c: 347: {
  2911                           ;main.c: 348: MFRC522_Wr( 0x09, sendData[i] );
  2912  009A  083C               	movf	MFRC522_ToCard@i,w
  2913  009B  072D               	addwf	MFRC522_ToCard@sendData,w
  2914  009C  00B1               	movwf	??_MFRC522_ToCard
  2915  009D  0831               	movf	??_MFRC522_ToCard,w
  2916  009E  0084               	movwf	4
  2917  009F  1383               	bcf	3,7	;select IRP bank0
  2918  00A0  0800               	movf	0,w
  2919  00A1  00B2               	movwf	??_MFRC522_ToCard+1
  2920  00A2  0832               	movf	??_MFRC522_ToCard+1,w
  2921  00A3  00A6               	movwf	MFRC522_Wr@value
  2922  00A4  3009               	movlw	9
  2923  00A5  25C9               	fcall	_MFRC522_Wr
  2924  00A6  3001               	movlw	1
  2925  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  2926  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  2927  00A9  07BC               	addwf	MFRC522_ToCard@i,f
  2928  00AA  1803               	skipnc
  2929  00AB  0ABD               	incf	MFRC522_ToCard@i+1,f
  2930  00AC  3000               	movlw	0
  2931  00AD  07BD               	addwf	MFRC522_ToCard@i+1,f
  2932  00AE  288F               	goto	l1966
  2933  00AF                     l1968:	
  2934                           
  2935                           ;main.c: 349: }
  2936                           ;main.c: 351: MFRC522_Wr( 0x01, command );
  2937  00AF  083B               	movf	MFRC522_ToCard@command,w
  2938  00B0  00B1               	movwf	??_MFRC522_ToCard
  2939  00B1  0831               	movf	??_MFRC522_ToCard,w
  2940  00B2  00A6               	movwf	MFRC522_Wr@value
  2941  00B3  3001               	movlw	1
  2942  00B4  25C9               	fcall	_MFRC522_Wr
  2943                           
  2944                           ;main.c: 352: if (command == 0x0C )
  2945  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  2946  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  2947  00B7  083B               	movf	MFRC522_ToCard@command,w
  2948  00B8  3A0C               	xorlw	12
  2949  00B9  1D03               	skipz
  2950  00BA  28C1               	goto	l1974
  2951                           
  2952                           ;main.c: 353: {
  2953                           ;main.c: 354: MFRC522_Set_Bit( 0x0D, 0x80 );
  2954  00BB  3080               	movlw	128
  2955  00BC  00B1               	movwf	??_MFRC522_ToCard
  2956  00BD  0831               	movf	??_MFRC522_ToCard,w
  2957  00BE  00A9               	movwf	MFRC522_Set_Bit@mask
  2958  00BF  300D               	movlw	13
  2959  00C0  2620               	fcall	_MFRC522_Set_Bit
  2960  00C1                     l1974:	
  2961                           
  2962                           ;main.c: 355: }
  2963                           ;main.c: 358: i = 0xFFFF;
  2964  00C1  30FF               	movlw	255
  2965  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  2966  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  2967  00C4  00BC               	movwf	MFRC522_ToCard@i
  2968  00C5  30FF               	movlw	255
  2969  00C6  00BD               	movwf	MFRC522_ToCard@i+1
  2970  00C7                     l1976:	
  2971                           ;main.c: 359: do
  2972                           
  2973                           
  2974                           ;main.c: 360: {
  2975                           ;main.c: 363: n = MFRC522_Rd( 0x04 );
  2976  00C7  3004               	movlw	4
  2977  00C8  259C               	fcall	_MFRC522_Rd
  2978  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  2979  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  2980  00CB  00B1               	movwf	??_MFRC522_ToCard
  2981  00CC  0831               	movf	??_MFRC522_ToCard,w
  2982  00CD  00BE               	movwf	MFRC522_ToCard@n
  2983                           
  2984                           ;main.c: 364: i--;
  2985  00CE  3001               	movlw	1
  2986  00CF  02BC               	subwf	MFRC522_ToCard@i,f
  2987  00D0  3000               	movlw	0
  2988  00D1  1C03               	skipc
  2989  00D2  03BD               	decf	MFRC522_ToCard@i+1,f
  2990  00D3  02BD               	subwf	MFRC522_ToCard@i+1,f
  2991                           
  2992                           ;main.c: 365: }
  2993                           ;main.c: 366: while ( i && !(n & 0x01) && !( n & waitIRq ) );
  2994  00D4  083D               	movf	MFRC522_ToCard@i+1,w
  2995  00D5  043C               	iorwf	MFRC522_ToCard@i,w
  2996  00D6  1D03               	btfss	3,2
  2997  00D7  183E               	btfsc	MFRC522_ToCard@n,0
  2998  00D8  28DD               	goto	l1982
  2999  00D9  083E               	movf	MFRC522_ToCard@n,w
  3000  00DA  0537               	andwf	MFRC522_ToCard@waitIRq,w
  3001  00DB  1903               	btfsc	3,2
  3002  00DC  28C7               	goto	l1976
  3003  00DD                     l1982:	
  3004                           
  3005                           ;main.c: 367: MFRC522_Clear_Bit( 0x0D, 0x80 );
  3006  00DD  3080               	movlw	128
  3007  00DE  00B1               	movwf	??_MFRC522_ToCard
  3008  00DF  0831               	movf	??_MFRC522_ToCard,w
  3009  00E0  00A9               	movwf	MFRC522_Clear_Bit@mask
  3010  00E1  300D               	movlw	13
  3011  00E2  2610               	fcall	_MFRC522_Clear_Bit
  3012                           
  3013                           ;main.c: 368: if (i != 0)
  3014  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  3015  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  3016  00E5  083D               	movf	MFRC522_ToCard@i+1,w
  3017  00E6  043C               	iorwf	MFRC522_ToCard@i,w
  3018  00E7  1903               	skipnz
  3019  00E8  2981               	goto	l127
  3020                           
  3021                           ;main.c: 369: {
  3022                           ;main.c: 370: if( !( MFRC522_Rd( 0x06 ) & 0x1B ) )
  3023  00E9  3006               	movlw	6
  3024  00EA  259C               	fcall	_MFRC522_Rd
  3025  00EB  391B               	andlw	27
  3026  00EC  1D03               	btfss	3,2
  3027  00ED  297B               	goto	l2022
  3028                           
  3029                           ;main.c: 371: {
  3030                           ;main.c: 372: _status = 0;
  3031  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  3032  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  3033  00F0  01B8               	clrf	MFRC522_ToCard@_status
  3034                           
  3035                           ;main.c: 373: if ( n & irqEn & 0x01 )
  3036  00F1  083A               	movf	MFRC522_ToCard@irqEn,w
  3037  00F2  053E               	andwf	MFRC522_ToCard@n,w
  3038  00F3  00B1               	movwf	??_MFRC522_ToCard
  3039  00F4  1C31               	btfss	??_MFRC522_ToCard,0
  3040  00F5  28F8               	goto	l1994
  3041                           
  3042                           ;main.c: 374: {
  3043                           ;main.c: 375: _status = 1;
  3044  00F6  01B8               	clrf	MFRC522_ToCard@_status
  3045  00F7  0AB8               	incf	MFRC522_ToCard@_status,f
  3046  00F8                     l1994:	
  3047                           
  3048                           ;main.c: 376: }
  3049                           ;main.c: 377: if ( command == 0x0C )
  3050  00F8  083B               	movf	MFRC522_ToCard@command,w
  3051  00F9  3A0C               	xorlw	12
  3052  00FA  1D03               	skipz
  3053  00FB  2981               	goto	l127
  3054                           
  3055                           ;main.c: 378: {
  3056                           ;main.c: 379: n = MFRC522_Rd( 0x0A );
  3057  00FC  300A               	movlw	10
  3058  00FD  259C               	fcall	_MFRC522_Rd
  3059  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  3060  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  3061  0100  00B1               	movwf	??_MFRC522_ToCard
  3062  0101  0831               	movf	??_MFRC522_ToCard,w
  3063  0102  00BE               	movwf	MFRC522_ToCard@n
  3064                           
  3065                           ;main.c: 380: lastBits = MFRC522_Rd( 0x0C ) & 0x07;
  3066  0103  300C               	movlw	12
  3067  0104  259C               	fcall	_MFRC522_Rd
  3068  0105  3907               	andlw	7
  3069  0106  1283               	bcf	3,5	;RP0=0, select bank0
  3070  0107  1303               	bcf	3,6	;RP1=0, select bank0
  3071  0108  00B1               	movwf	??_MFRC522_ToCard
  3072  0109  0831               	movf	??_MFRC522_ToCard,w
  3073  010A  00B9               	movwf	MFRC522_ToCard@lastBits
  3074                           
  3075                           ;main.c: 381: if (lastBits)
  3076  010B  0839               	movf	MFRC522_ToCard@lastBits,w
  3077  010C  1903               	btfsc	3,2
  3078  010D  2932               	goto	l2002
  3079                           
  3080                           ;main.c: 382: {
  3081                           ;main.c: 383: *backLen = (n-1) * 8 + lastBits;
  3082  010E  083E               	movf	MFRC522_ToCard@n,w
  3083  010F  00B1               	movwf	??_MFRC522_ToCard
  3084  0110  01B2               	clrf	??_MFRC522_ToCard+1
  3085  0111  1003               	clrc
  3086  0112  0DB1               	rlf	??_MFRC522_ToCard,f
  3087  0113  0DB2               	rlf	??_MFRC522_ToCard+1,f
  3088  0114  1003               	clrc
  3089  0115  0DB1               	rlf	??_MFRC522_ToCard,f
  3090  0116  0DB2               	rlf	??_MFRC522_ToCard+1,f
  3091  0117  1003               	clrc
  3092  0118  0DB1               	rlf	??_MFRC522_ToCard,f
  3093  0119  0DB2               	rlf	??_MFRC522_ToCard+1,f
  3094  011A  0839               	movf	MFRC522_ToCard@lastBits,w
  3095  011B  0731               	addwf	??_MFRC522_ToCard,w
  3096  011C  00B3               	movwf	??_MFRC522_ToCard+2
  3097  011D  3000               	movlw	0
  3098  011E  1803               	skipnc
  3099  011F  3001               	movlw	1
  3100  0120  0732               	addwf	??_MFRC522_ToCard+1,w
  3101  0121  00B4               	movwf	??_MFRC522_ToCard+3
  3102  0122  0833               	movf	??_MFRC522_ToCard+2,w
  3103  0123  3EF8               	addlw	248
  3104  0124  00B5               	movwf	??_MFRC522_ToCard+4
  3105  0125  0834               	movf	??_MFRC522_ToCard+3,w
  3106  0126  1803               	skipnc
  3107  0127  3E01               	addlw	1
  3108  0128  3EFF               	addlw	255
  3109  0129  00B6               	movwf	??_MFRC522_ToCard+5
  3110  012A  0830               	movf	MFRC522_ToCard@backLen,w
  3111  012B  0084               	movwf	4
  3112  012C  0835               	movf	??_MFRC522_ToCard+4,w
  3113  012D  1383               	bcf	3,7	;select IRP bank0
  3114  012E  0080               	movwf	0
  3115  012F  0A84               	incf	4,f
  3116  0130  0836               	movf	??_MFRC522_ToCard+5,w
  3117  0131  2945               	goto	L2
  3118  0132                     l2002:	
  3119                           ;main.c: 384: }
  3120                           
  3121                           
  3122                           ;main.c: 385: else
  3123                           ;main.c: 386: {
  3124                           ;main.c: 387: *backLen = n * 8;
  3125  0132  083E               	movf	MFRC522_ToCard@n,w
  3126  0133  00B1               	movwf	??_MFRC522_ToCard
  3127  0134  01B2               	clrf	??_MFRC522_ToCard+1
  3128  0135  1003               	clrc
  3129  0136  0DB1               	rlf	??_MFRC522_ToCard,f
  3130  0137  0DB2               	rlf	??_MFRC522_ToCard+1,f
  3131  0138  1003               	clrc
  3132  0139  0DB1               	rlf	??_MFRC522_ToCard,f
  3133  013A  0DB2               	rlf	??_MFRC522_ToCard+1,f
  3134  013B  1003               	clrc
  3135  013C  0DB1               	rlf	??_MFRC522_ToCard,f
  3136  013D  0DB2               	rlf	??_MFRC522_ToCard+1,f
  3137  013E  0830               	movf	MFRC522_ToCard@backLen,w
  3138  013F  0084               	movwf	4
  3139  0140  0831               	movf	??_MFRC522_ToCard,w
  3140  0141  1383               	bcf	3,7	;select IRP bank0
  3141  0142  0080               	movwf	0
  3142  0143  0A84               	incf	4,f
  3143  0144  0832               	movf	??_MFRC522_ToCard+1,w
  3144  0145                     L2:	
  3145  0145  0080               	movwf	0
  3146                           
  3147                           ;main.c: 388: }
  3148                           ;main.c: 389: if (n == 0)
  3149  0146  08BE               	movf	MFRC522_ToCard@n,f
  3150  0147  1D03               	skipz
  3151  0148  294B               	goto	l2008
  3152                           
  3153                           ;main.c: 390: {
  3154                           ;main.c: 391: n = 1;
  3155  0149  01BE               	clrf	MFRC522_ToCard@n
  3156  014A  0ABE               	incf	MFRC522_ToCard@n,f
  3157  014B                     l2008:	
  3158                           
  3159                           ;main.c: 392: }
  3160                           ;main.c: 393: if (n > 16)
  3161  014B  3011               	movlw	17
  3162  014C  023E               	subwf	MFRC522_ToCard@n,w
  3163  014D  1C03               	skipc
  3164  014E  2953               	goto	l2012
  3165                           
  3166                           ;main.c: 394: {
  3167                           ;main.c: 395: n = 16;
  3168  014F  3010               	movlw	16
  3169  0150  00B1               	movwf	??_MFRC522_ToCard
  3170  0151  0831               	movf	??_MFRC522_ToCard,w
  3171  0152  00BE               	movwf	MFRC522_ToCard@n
  3172  0153                     l2012:	
  3173                           
  3174                           ;main.c: 396: }
  3175                           ;main.c: 398: for (i=0; i < n; i++)
  3176  0153  01BC               	clrf	MFRC522_ToCard@i
  3177  0154  01BD               	clrf	MFRC522_ToCard@i+1
  3178  0155                     l2018:	
  3179  0155  083E               	movf	MFRC522_ToCard@n,w
  3180  0156  00B1               	movwf	??_MFRC522_ToCard
  3181  0157  01B2               	clrf	??_MFRC522_ToCard+1
  3182  0158  0832               	movf	??_MFRC522_ToCard+1,w
  3183  0159  023D               	subwf	MFRC522_ToCard@i+1,w
  3184  015A  1D03               	skipz
  3185  015B  295E               	goto	u1925
  3186  015C  0831               	movf	??_MFRC522_ToCard,w
  3187  015D  023C               	subwf	MFRC522_ToCard@i,w
  3188  015E                     u1925:	
  3189  015E  1803               	btfsc	3,0
  3190  015F  2974               	goto	l2020
  3191                           
  3192                           ;main.c: 399: {
  3193                           ;main.c: 400: backData[i] = MFRC522_Rd( 0x09 );
  3194  0160  3009               	movlw	9
  3195  0161  259C               	fcall	_MFRC522_Rd
  3196  0162  1283               	bcf	3,5	;RP0=0, select bank0
  3197  0163  1303               	bcf	3,6	;RP1=0, select bank0
  3198  0164  00B1               	movwf	??_MFRC522_ToCard
  3199  0165  083C               	movf	MFRC522_ToCard@i,w
  3200  0166  072F               	addwf	MFRC522_ToCard@backData,w
  3201  0167  00B2               	movwf	??_MFRC522_ToCard+1
  3202  0168  0832               	movf	??_MFRC522_ToCard+1,w
  3203  0169  0084               	movwf	4
  3204  016A  0831               	movf	??_MFRC522_ToCard,w
  3205  016B  1383               	bcf	3,7	;select IRP bank0
  3206  016C  0080               	movwf	0
  3207  016D  3001               	movlw	1
  3208  016E  07BC               	addwf	MFRC522_ToCard@i,f
  3209  016F  1803               	skipnc
  3210  0170  0ABD               	incf	MFRC522_ToCard@i+1,f
  3211  0171  3000               	movlw	0
  3212  0172  07BD               	addwf	MFRC522_ToCard@i+1,f
  3213  0173  2955               	goto	l2018
  3214  0174                     l2020:	
  3215                           
  3216                           ;main.c: 401: }
  3217                           ;main.c: 403: backData[i] = 0;
  3218  0174  083C               	movf	MFRC522_ToCard@i,w
  3219  0175  072F               	addwf	MFRC522_ToCard@backData,w
  3220  0176  00B1               	movwf	??_MFRC522_ToCard
  3221  0177  0831               	movf	??_MFRC522_ToCard,w
  3222  0178  0084               	movwf	4
  3223  0179  0180               	clrf	0
  3224                           
  3225                           ;main.c: 404: }
  3226                           ;main.c: 405: }
  3227  017A  2981               	goto	l127
  3228  017B                     l2022:	
  3229                           
  3230                           ;main.c: 406: else
  3231                           ;main.c: 407: {
  3232                           ;main.c: 408: _status = 2;
  3233  017B  3002               	movlw	2
  3234  017C  1283               	bcf	3,5	;RP0=0, select bank0
  3235  017D  1303               	bcf	3,6	;RP1=0, select bank0
  3236  017E  00B1               	movwf	??_MFRC522_ToCard
  3237  017F  0831               	movf	??_MFRC522_ToCard,w
  3238  0180  00B8               	movwf	MFRC522_ToCard@_status
  3239  0181                     l127:	
  3240                           
  3241                           ;main.c: 409: }
  3242                           ;main.c: 410: }
  3243                           ;main.c: 413: return _status;
  3244  0181  0838               	movf	MFRC522_ToCard@_status,w
  3245  0182  0008               	return
  3246  0183                     __end_of_MFRC522_ToCard:	
  3247                           
  3248                           	psect	text17
  3249  02F6                     __ptext17:	
  3250 ;; *************** function _MFRC522_CRC *****************
  3251 ;; Defined at:
  3252 ;;		line 432 in file "main.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;  dataIn          1    wreg     PTR unsigned char 
  3255 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  3256 ;;  length          1   13[BANK0 ] unsigned char 
  3257 ;;  dataOut         1   14[BANK0 ] PTR unsigned char 
  3258 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  dataIn          1   17[BANK0 ] PTR unsigned char 
  3261 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  3262 ;;  i               1   18[BANK0 ] unsigned char 
  3263 ;;  n               1   16[BANK0 ] unsigned char 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;		None               void
  3266 ;; Registers used:
  3267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3273 ;;      Params:         0       2       0       0
  3274 ;;      Locals:         0       3       0       0
  3275 ;;      Temps:          0       1       0       0
  3276 ;;      Totals:         0       6       0       0
  3277 ;;Total ram usage:        6 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:    4
  3280 ;; This function calls:
  3281 ;;		_MFRC522_Clear_Bit
  3282 ;;		_MFRC522_Rd
  3283 ;;		_MFRC522_Set_Bit
  3284 ;;		_MFRC522_Wr
  3285 ;; This function is called by:
  3286 ;;		_MFRC522_SelectTag
  3287 ;;		_MFRC522_Halt
  3288 ;;		_MFRC522_Write
  3289 ;;		_MFRC522_Read
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           
  3294                           ;psect for function _MFRC522_CRC
  3295  02F6                     _MFRC522_CRC:	
  3296                           
  3297                           ;incstack = 0
  3298                           ; Regs used in _MFRC522_CRC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3299                           ;MFRC522_CRC@dataIn stored from wreg
  3300  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  3301  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  3302  02F8  00B1               	movwf	MFRC522_CRC@dataIn
  3303                           
  3304                           ;main.c: 434: char i, n;
  3305                           ;main.c: 435: MFRC522_Clear_Bit( 0x05, 0x04 );
  3306  02F9  3004               	movlw	4
  3307  02FA  00AF               	movwf	??_MFRC522_CRC
  3308  02FB  082F               	movf	??_MFRC522_CRC,w
  3309  02FC  00A9               	movwf	MFRC522_Clear_Bit@mask
  3310  02FD  3005               	movlw	5
  3311  02FE  2610               	fcall	_MFRC522_Clear_Bit
  3312                           
  3313                           ;main.c: 436: MFRC522_Set_Bit( 0x0A, 0x80 );
  3314  02FF  3080               	movlw	128
  3315  0300  1283               	bcf	3,5	;RP0=0, select bank0
  3316  0301  1303               	bcf	3,6	;RP1=0, select bank0
  3317  0302  00AF               	movwf	??_MFRC522_CRC
  3318  0303  082F               	movf	??_MFRC522_CRC,w
  3319  0304  00A9               	movwf	MFRC522_Set_Bit@mask
  3320  0305  300A               	movlw	10
  3321  0306  2620               	fcall	_MFRC522_Set_Bit
  3322                           
  3323                           ;main.c: 439: for ( i = 0; i < length; i++ )
  3324  0307  1283               	bcf	3,5	;RP0=0, select bank0
  3325  0308  1303               	bcf	3,6	;RP1=0, select bank0
  3326  0309  01B2               	clrf	MFRC522_CRC@i
  3327  030A                     l2118:	
  3328  030A  082D               	movf	MFRC522_CRC@length,w
  3329  030B  0232               	subwf	MFRC522_CRC@i,w
  3330  030C  1803               	btfsc	3,0
  3331  030D  2B22               	goto	l2120
  3332                           
  3333                           ;main.c: 440: {
  3334                           ;main.c: 441: MFRC522_Wr( 0x09, *dataIn++ );
  3335  030E  0831               	movf	MFRC522_CRC@dataIn,w
  3336  030F  0084               	movwf	4
  3337  0310  1383               	bcf	3,7	;select IRP bank0
  3338  0311  0800               	movf	0,w
  3339  0312  00AF               	movwf	??_MFRC522_CRC
  3340  0313  082F               	movf	??_MFRC522_CRC,w
  3341  0314  00A6               	movwf	MFRC522_Wr@value
  3342  0315  3009               	movlw	9
  3343  0316  25C9               	fcall	_MFRC522_Wr
  3344  0317  3001               	movlw	1
  3345  0318  1283               	bcf	3,5	;RP0=0, select bank0
  3346  0319  1303               	bcf	3,6	;RP1=0, select bank0
  3347  031A  00AF               	movwf	??_MFRC522_CRC
  3348  031B  082F               	movf	??_MFRC522_CRC,w
  3349  031C  07B1               	addwf	MFRC522_CRC@dataIn,f
  3350  031D  3001               	movlw	1
  3351  031E  00AF               	movwf	??_MFRC522_CRC
  3352  031F  082F               	movf	??_MFRC522_CRC,w
  3353  0320  07B2               	addwf	MFRC522_CRC@i,f
  3354  0321  2B0A               	goto	l2118
  3355  0322                     l2120:	
  3356                           
  3357                           ;main.c: 442: }
  3358                           ;main.c: 444: MFRC522_Wr( 0x01, 0x03 );
  3359  0322  3003               	movlw	3
  3360  0323  00AF               	movwf	??_MFRC522_CRC
  3361  0324  082F               	movf	??_MFRC522_CRC,w
  3362  0325  00A6               	movwf	MFRC522_Wr@value
  3363  0326  3001               	movlw	1
  3364  0327  25C9               	fcall	_MFRC522_Wr
  3365                           
  3366                           ;main.c: 446: i = 0xFF;
  3367  0328  30FF               	movlw	255
  3368  0329  1283               	bcf	3,5	;RP0=0, select bank0
  3369  032A  1303               	bcf	3,6	;RP1=0, select bank0
  3370  032B  00AF               	movwf	??_MFRC522_CRC
  3371  032C  082F               	movf	??_MFRC522_CRC,w
  3372  032D  00B2               	movwf	MFRC522_CRC@i
  3373  032E                     l2124:	
  3374                           ;main.c: 448: do
  3375                           
  3376                           
  3377                           ;main.c: 449: {
  3378                           ;main.c: 450: n = MFRC522_Rd( 0x05 );
  3379  032E  3005               	movlw	5
  3380  032F  259C               	fcall	_MFRC522_Rd
  3381  0330  1283               	bcf	3,5	;RP0=0, select bank0
  3382  0331  1303               	bcf	3,6	;RP1=0, select bank0
  3383  0332  00AF               	movwf	??_MFRC522_CRC
  3384  0333  082F               	movf	??_MFRC522_CRC,w
  3385  0334  00B0               	movwf	MFRC522_CRC@n
  3386                           
  3387                           ;main.c: 451: i--;
  3388  0335  3001               	movlw	1
  3389  0336  02B2               	subwf	MFRC522_CRC@i,f
  3390                           
  3391                           ;main.c: 452: }
  3392                           ;main.c: 453: while( i && !(n & 0x04) );
  3393  0337  0832               	movf	MFRC522_CRC@i,w
  3394  0338  1D03               	skipz
  3395  0339  1930               	btfsc	MFRC522_CRC@n,2
  3396  033A  2B3C               	goto	l2132
  3397  033B  2B2E               	goto	l2124
  3398  033C                     l2132:	
  3399                           
  3400                           ;main.c: 455: dataOut[0] = MFRC522_Rd( 0x22 );
  3401  033C  3022               	movlw	34
  3402  033D  259C               	fcall	_MFRC522_Rd
  3403  033E  1283               	bcf	3,5	;RP0=0, select bank0
  3404  033F  1303               	bcf	3,6	;RP1=0, select bank0
  3405  0340  00AF               	movwf	??_MFRC522_CRC
  3406  0341  082E               	movf	MFRC522_CRC@dataOut,w
  3407  0342  0084               	movwf	4
  3408  0343  082F               	movf	??_MFRC522_CRC,w
  3409  0344  1383               	bcf	3,7	;select IRP bank0
  3410  0345  0080               	movwf	0
  3411                           
  3412                           ;main.c: 456: dataOut[1] = MFRC522_Rd( 0x21 );
  3413  0346  3021               	movlw	33
  3414  0347  259C               	fcall	_MFRC522_Rd
  3415  0348  1283               	bcf	3,5	;RP0=0, select bank0
  3416  0349  1303               	bcf	3,6	;RP1=0, select bank0
  3417  034A  00AF               	movwf	??_MFRC522_CRC
  3418  034B  0A2E               	incf	MFRC522_CRC@dataOut,w
  3419  034C  0084               	movwf	4
  3420  034D  082F               	movf	??_MFRC522_CRC,w
  3421  034E  1383               	bcf	3,7	;select IRP bank0
  3422  034F  0080               	movwf	0
  3423  0350  0008               	return
  3424  0351                     __end_of_MFRC522_CRC:	
  3425                           
  3426                           	psect	text18
  3427  0620                     __ptext18:	
  3428 ;; *************** function _MFRC522_Set_Bit *****************
  3429 ;; Defined at:
  3430 ;;		line 273 in file "main.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  addr            1    wreg     unsigned char 
  3433 ;;  mask            1    9[BANK0 ] unsigned char 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  addr            1   11[BANK0 ] unsigned char 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;		None               void
  3438 ;; Registers used:
  3439 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3445 ;;      Params:         0       1       0       0
  3446 ;;      Locals:         0       1       0       0
  3447 ;;      Temps:          0       1       0       0
  3448 ;;      Totals:         0       3       0       0
  3449 ;;Total ram usage:        3 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    3
  3452 ;; This function calls:
  3453 ;;		_MFRC522_Rd
  3454 ;;		_MFRC522_Wr
  3455 ;; This function is called by:
  3456 ;;		_MFRC522_AntennaOn
  3457 ;;		_MFRC522_ToCard
  3458 ;;		_MFRC522_CRC
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           
  3463                           ;psect for function _MFRC522_Set_Bit
  3464  0620                     _MFRC522_Set_Bit:	
  3465                           
  3466                           ;incstack = 0
  3467                           ; Regs used in _MFRC522_Set_Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3468                           ;MFRC522_Set_Bit@addr stored from wreg
  3469  0620  1283               	bcf	3,5	;RP0=0, select bank0
  3470  0621  1303               	bcf	3,6	;RP1=0, select bank0
  3471  0622  00AB               	movwf	MFRC522_Set_Bit@addr
  3472                           
  3473                           ;main.c: 275: MFRC522_Wr( addr, MFRC522_Rd( addr ) | mask );
  3474  0623  082B               	movf	MFRC522_Set_Bit@addr,w
  3475  0624  259C               	fcall	_MFRC522_Rd
  3476  0625  1283               	bcf	3,5	;RP0=0, select bank0
  3477  0626  1303               	bcf	3,6	;RP1=0, select bank0
  3478  0627  0429               	iorwf	MFRC522_Set_Bit@mask,w
  3479  0628  00AA               	movwf	??_MFRC522_Set_Bit
  3480  0629  082A               	movf	??_MFRC522_Set_Bit,w
  3481  062A  00A6               	movwf	MFRC522_Wr@value
  3482  062B  082B               	movf	MFRC522_Set_Bit@addr,w
  3483  062C  25C9               	fcall	_MFRC522_Wr
  3484  062D  0008               	return
  3485  062E                     __end_of_MFRC522_Set_Bit:	
  3486                           
  3487                           	psect	text19
  3488  0610                     __ptext19:	
  3489 ;; *************** function _MFRC522_Clear_Bit *****************
  3490 ;; Defined at:
  3491 ;;		line 269 in file "main.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  addr            1    wreg     unsigned char 
  3494 ;;  mask            1    9[BANK0 ] unsigned char 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;  addr            1   12[BANK0 ] unsigned char 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;		None               void
  3499 ;; Registers used:
  3500 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3506 ;;      Params:         0       1       0       0
  3507 ;;      Locals:         0       1       0       0
  3508 ;;      Temps:          0       2       0       0
  3509 ;;      Totals:         0       4       0       0
  3510 ;;Total ram usage:        4 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; Hardware stack levels required when called:    3
  3513 ;; This function calls:
  3514 ;;		_MFRC522_Rd
  3515 ;;		_MFRC522_Wr
  3516 ;; This function is called by:
  3517 ;;		_MFRC522_ToCard
  3518 ;;		_MFRC522_CRC
  3519 ;;		_MFRC522_Halt
  3520 ;;		_MFRC522_AntiColl
  3521 ;;		_MFRC522_AntennaOff
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _MFRC522_Clear_Bit
  3527  0610                     _MFRC522_Clear_Bit:	
  3528                           
  3529                           ;incstack = 0
  3530                           ; Regs used in _MFRC522_Clear_Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3531                           ;MFRC522_Clear_Bit@addr stored from wreg
  3532  0610  1283               	bcf	3,5	;RP0=0, select bank0
  3533  0611  1303               	bcf	3,6	;RP1=0, select bank0
  3534  0612  00AC               	movwf	MFRC522_Clear_Bit@addr
  3535                           
  3536                           ;main.c: 271: MFRC522_Wr( addr, MFRC522_Rd( addr ) & (~mask) );
  3537  0613  0929               	comf	MFRC522_Clear_Bit@mask,w
  3538  0614  00AA               	movwf	??_MFRC522_Clear_Bit
  3539  0615  082C               	movf	MFRC522_Clear_Bit@addr,w
  3540  0616  259C               	fcall	_MFRC522_Rd
  3541  0617  1283               	bcf	3,5	;RP0=0, select bank0
  3542  0618  1303               	bcf	3,6	;RP1=0, select bank0
  3543  0619  052A               	andwf	??_MFRC522_Clear_Bit,w
  3544  061A  00AB               	movwf	??_MFRC522_Clear_Bit+1
  3545  061B  082B               	movf	??_MFRC522_Clear_Bit+1,w
  3546  061C  00A6               	movwf	MFRC522_Wr@value
  3547  061D  082C               	movf	MFRC522_Clear_Bit@addr,w
  3548  061E  25C9               	fcall	_MFRC522_Wr
  3549  061F  0008               	return
  3550  0620                     __end_of_MFRC522_Clear_Bit:	
  3551                           
  3552                           	psect	text20
  3553  05C9                     __ptext20:	
  3554 ;; *************** function _MFRC522_Wr *****************
  3555 ;; Defined at:
  3556 ;;		line 253 in file "main.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  addr            1    wreg     unsigned char 
  3559 ;;  value           1    6[BANK0 ] unsigned char 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  addr            1    8[BANK0 ] unsigned char 
  3562 ;; Return value:  Size  Location     Type
  3563 ;;		None               void
  3564 ;; Registers used:
  3565 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3571 ;;      Params:         0       1       0       0
  3572 ;;      Locals:         0       1       0       0
  3573 ;;      Temps:          0       1       0       0
  3574 ;;      Totals:         0       3       0       0
  3575 ;;Total ram usage:        3 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    2
  3578 ;; This function calls:
  3579 ;;		_SPI_transfer
  3580 ;; This function is called by:
  3581 ;;		_MFRC522_Clear_Bit
  3582 ;;		_MFRC522_Set_Bit
  3583 ;;		_MFRC522_Reset
  3584 ;;		_MFRC522_Init
  3585 ;;		_MFRC522_ToCard
  3586 ;;		_MFRC522_Request
  3587 ;;		_MFRC522_CRC
  3588 ;;		_MFRC522_AntiColl
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592                           
  3593                           ;psect for function _MFRC522_Wr
  3594  05C9                     _MFRC522_Wr:	
  3595                           
  3596                           ;incstack = 0
  3597                           ; Regs used in _MFRC522_Wr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3598                           ;MFRC522_Wr@addr stored from wreg
  3599  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  3600  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  3601  05CB  00A8               	movwf	MFRC522_Wr@addr
  3602                           
  3603                           ;main.c: 255: PORTB&=~(1<<0);
  3604  05CC  30FE               	movlw	254
  3605  05CD  00A7               	movwf	??_MFRC522_Wr
  3606  05CE  0827               	movf	??_MFRC522_Wr,w
  3607  05CF  0586               	andwf	6,f	;volatile
  3608                           
  3609                           ;main.c: 256: SPI_transfer( ( addr << 1 ) & 0x7E );
  3610  05D0  0828               	movf	MFRC522_Wr@addr,w
  3611  05D1  00A7               	movwf	??_MFRC522_Wr
  3612  05D2  0727               	addwf	??_MFRC522_Wr,w
  3613  05D3  397E               	andlw	126
  3614  05D4  23F2               	fcall	_SPI_transfer
  3615                           
  3616                           ;main.c: 257: SPI_transfer( value );
  3617  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  3618  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  3619  05D7  0826               	movf	MFRC522_Wr@value,w
  3620  05D8  23F2               	fcall	_SPI_transfer
  3621                           
  3622                           ;main.c: 258: PORTB|=(1<<0);
  3623  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  3624  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  3625  05DB  1406               	bsf	6,0	;volatile
  3626  05DC  0008               	return
  3627  05DD                     __end_of_MFRC522_Wr:	
  3628                           
  3629                           	psect	text21
  3630  059C                     __ptext21:	
  3631 ;; *************** function _MFRC522_Rd *****************
  3632 ;; Defined at:
  3633 ;;		line 260 in file "main.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;  addr            1    wreg     unsigned char 
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;  addr            1    4[BANK0 ] unsigned char 
  3638 ;;  value           1    5[BANK0 ] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  1    wreg      unsigned char 
  3641 ;; Registers used:
  3642 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3648 ;;      Params:         0       0       0       0
  3649 ;;      Locals:         0       2       0       0
  3650 ;;      Temps:          1       0       0       0
  3651 ;;      Totals:         1       2       0       0
  3652 ;;Total ram usage:        3 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    2
  3655 ;; This function calls:
  3656 ;;		_SPI_transfer
  3657 ;; This function is called by:
  3658 ;;		_MFRC522_Clear_Bit
  3659 ;;		_MFRC522_Set_Bit
  3660 ;;		_MFRC522_ToCard
  3661 ;;		_MFRC522_CRC
  3662 ;;		_MFRC522_Auth
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _MFRC522_Rd
  3668  059C                     _MFRC522_Rd:	
  3669                           
  3670                           ;incstack = 0
  3671                           ; Regs used in _MFRC522_Rd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3672                           ;MFRC522_Rd@addr stored from wreg
  3673  059C  1283               	bcf	3,5	;RP0=0, select bank0
  3674  059D  1303               	bcf	3,6	;RP1=0, select bank0
  3675  059E  00A4               	movwf	MFRC522_Rd@addr
  3676                           
  3677                           ;main.c: 262: char value;
  3678                           ;main.c: 263: PORTB&=~(1<<0);
  3679  059F  30FE               	movlw	254
  3680  05A0  00F6               	movwf	??_MFRC522_Rd
  3681  05A1  0876               	movf	??_MFRC522_Rd,w
  3682  05A2  0586               	andwf	6,f	;volatile
  3683                           
  3684                           ;main.c: 264: SPI_transfer( (( addr << 1 ) & 0x7E) | 0x80 );
  3685  05A3  0824               	movf	MFRC522_Rd@addr,w
  3686  05A4  00F6               	movwf	??_MFRC522_Rd
  3687  05A5  0776               	addwf	??_MFRC522_Rd,w
  3688  05A6  397E               	andlw	126
  3689  05A7  3880               	iorlw	128
  3690  05A8  23F2               	fcall	_SPI_transfer
  3691                           
  3692                           ;main.c: 265: value = SPI_transfer( 0x00 );
  3693  05A9  3000               	movlw	0
  3694  05AA  23F2               	fcall	_SPI_transfer
  3695  05AB  00F6               	movwf	??_MFRC522_Rd
  3696  05AC  0876               	movf	??_MFRC522_Rd,w
  3697  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  3698  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  3699  05AF  00A5               	movwf	MFRC522_Rd@value
  3700                           
  3701                           ;main.c: 266: PORTB|=(1<<0);
  3702  05B0  1406               	bsf	6,0	;volatile
  3703                           
  3704                           ;main.c: 267: return value;
  3705  05B1  0825               	movf	MFRC522_Rd@value,w
  3706  05B2  0008               	return
  3707  05B3                     __end_of_MFRC522_Rd:	
  3708                           
  3709                           	psect	text22
  3710  03F2                     __ptext22:	
  3711 ;; *************** function _SPI_transfer *****************
  3712 ;; Defined at:
  3713 ;;		line 115 in file "main.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;  data            1    wreg     unsigned char 
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;  data            1    0[BANK0 ] unsigned char 
  3718 ;;  i               2    2[BANK0 ] int 
  3719 ;;  ret             1    1[BANK0 ] unsigned char 
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      unsigned char 
  3722 ;; Registers used:
  3723 ;;		wreg, status,2, status,0, btemp+1
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3729 ;;      Params:         0       0       0       0
  3730 ;;      Locals:         0       4       0       0
  3731 ;;      Temps:          1       0       0       0
  3732 ;;      Totals:         1       4       0       0
  3733 ;;Total ram usage:        5 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    1
  3736 ;; This function calls:
  3737 ;;		Nothing
  3738 ;; This function is called by:
  3739 ;;		_MFRC522_Wr
  3740 ;;		_MFRC522_Rd
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           
  3745                           ;psect for function _SPI_transfer
  3746  03F2                     _SPI_transfer:	
  3747                           
  3748                           ;incstack = 0
  3749                           ; Regs used in _SPI_transfer: [wreg+status,2+status,0+btemp+1]
  3750                           ;SPI_transfer@data stored from wreg
  3751  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  3752  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  3753  03F4  00A0               	movwf	SPI_transfer@data
  3754                           
  3755                           ;main.c: 117: unsigned char ret;
  3756                           ;main.c: 118: for(int i=0;i<8;i++)
  3757  03F5  01A2               	clrf	SPI_transfer@i
  3758  03F6  01A3               	clrf	SPI_transfer@i+1
  3759  03F7  0823               	movf	SPI_transfer@i+1,w
  3760  03F8  3A80               	xorlw	128
  3761  03F9  00FF               	movwf	127
  3762  03FA  3080               	movlw	128
  3763  03FB  027F               	subwf	127,w
  3764  03FC  1D03               	skipz
  3765  03FD  2C00               	goto	u1635
  3766  03FE  3008               	movlw	8
  3767  03FF  0222               	subwf	SPI_transfer@i,w
  3768  0400                     u1635:	
  3769  0400  1803               	btfsc	3,0
  3770  0401  2C34               	goto	l1868
  3771  0402                     l82:	
  3772                           
  3773                           ;main.c: 119: {
  3774                           ;main.c: 121: if(data & 0x80)PORTB |= (1<<6);
  3775  0402  1283               	bcf	3,5	;RP0=0, select bank0
  3776  0403  1303               	bcf	3,6	;RP1=0, select bank0
  3777  0404  1FA0               	btfss	SPI_transfer@data,7
  3778  0405  2C08               	goto	l1856
  3779  0406  1706               	bsf	6,6	;volatile
  3780  0407  2C0C               	goto	l85
  3781  0408                     l1856:	
  3782                           
  3783                           ;main.c: 122: else PORTB &= ~(1<<6);
  3784  0408  30BF               	movlw	191
  3785  0409  00F5               	movwf	??_SPI_transfer
  3786  040A  0875               	movf	??_SPI_transfer,w
  3787  040B  0586               	andwf	6,f	;volatile
  3788  040C                     l85:	
  3789                           
  3790                           ;main.c: 124: PORTB &= ~(1<<7);
  3791  040C  307F               	movlw	127
  3792  040D  00F5               	movwf	??_SPI_transfer
  3793  040E  0875               	movf	??_SPI_transfer,w
  3794  040F  0586               	andwf	6,f	;volatile
  3795                           
  3796                           ;main.c: 125: if(PORTB & (1<<5))ret|=1;
  3797  0410  1A86               	btfsc	6,5	;volatile
  3798  0411  1421               	bsf	SPI_transfer@ret,0
  3799                           
  3800                           ;main.c: 126: _delay((unsigned long)((10)*(4000000/4000000.0)));
  3801  0412  3003               	movlw	3
  3802  0413  00F5               	movwf	??_SPI_transfer
  3803  0414                     u2387:	
  3804  0414  0BF5               	decfsz	??_SPI_transfer,f
  3805  0415  2C14               	goto	u2387
  3806                           
  3807                           ;main.c: 127: PORTB |= (1<<7);
  3808  0416  1283               	bcf	3,5	;RP0=0, select bank0
  3809  0417  1303               	bcf	3,6	;RP1=0, select bank0
  3810  0418  1786               	bsf	6,7	;volatile
  3811                           
  3812                           ;main.c: 129: ret<<=1;
  3813  0419  1003               	clrc
  3814  041A  0DA1               	rlf	SPI_transfer@ret,f
  3815                           
  3816                           ;main.c: 130: data<<=1;
  3817  041B  1003               	clrc
  3818  041C  0DA0               	rlf	SPI_transfer@data,f
  3819                           
  3820                           ;main.c: 131: _delay((unsigned long)((10)*(4000000/4000000.0)));
  3821  041D  3003               	movlw	3
  3822  041E  00F5               	movwf	??_SPI_transfer
  3823  041F                     u2397:	
  3824  041F  0BF5               	decfsz	??_SPI_transfer,f
  3825  0420  2C1F               	goto	u2397
  3826  0421  3001               	movlw	1
  3827  0422  1283               	bcf	3,5	;RP0=0, select bank0
  3828  0423  1303               	bcf	3,6	;RP1=0, select bank0
  3829  0424  07A2               	addwf	SPI_transfer@i,f
  3830  0425  1803               	skipnc
  3831  0426  0AA3               	incf	SPI_transfer@i+1,f
  3832  0427  3000               	movlw	0
  3833  0428  07A3               	addwf	SPI_transfer@i+1,f
  3834  0429  0823               	movf	SPI_transfer@i+1,w
  3835  042A  3A80               	xorlw	128
  3836  042B  00FF               	movwf	127
  3837  042C  3080               	movlw	128
  3838  042D  027F               	subwf	127,w
  3839  042E  1D03               	skipz
  3840  042F  2C32               	goto	u1665
  3841  0430  3008               	movlw	8
  3842  0431  0222               	subwf	SPI_transfer@i,w
  3843  0432                     u1665:	
  3844  0432  1C03               	skipc
  3845  0433  2C02               	goto	l82
  3846  0434                     l1868:	
  3847                           
  3848                           ;main.c: 132: }
  3849                           ;main.c: 133: return ret;
  3850  0434  1283               	bcf	3,5	;RP0=0, select bank0
  3851  0435  1303               	bcf	3,6	;RP1=0, select bank0
  3852  0436  0821               	movf	SPI_transfer@ret,w
  3853  0437  0008               	return
  3854  0438                     __end_of_SPI_transfer:	
  3855                           
  3856                           	psect	text23
  3857  056A                     __ptext23:	
  3858 ;; *************** function __ISR *****************
  3859 ;; Defined at:
  3860 ;;		line 73 in file "main.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;		None
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;		None
  3865 ;; Return value:  Size  Location     Type
  3866 ;;		None               void
  3867 ;; Registers used:
  3868 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3874 ;;      Params:         0       0       0       0
  3875 ;;      Locals:         0       0       0       0
  3876 ;;      Temps:          5       0       0       0
  3877 ;;      Totals:         5       0       0       0
  3878 ;;Total ram usage:        5 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; This function calls:
  3881 ;;		Nothing
  3882 ;; This function is called by:
  3883 ;;		Interrupt level 1
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           
  3888                           ;psect for function __ISR
  3889  056A                     __ISR:	
  3890                           
  3891                           ;main.c: 75: if(RCIF)
  3892  056A  1E8C               	btfss	12,5	;volatile
  3893  056B  2D7A               	goto	i1l57
  3894                           
  3895                           ;main.c: 76: {
  3896                           ;main.c: 77: buffer[count] = RCREG;
  3897  056C  081A               	movf	26,w	;volatile
  3898  056D  00F0               	movwf	??__ISR
  3899  056E  0877               	movf	_count,w
  3900  056F  3EB2               	addlw	_buffer& (0+255)
  3901  0570  0084               	movwf	4
  3902  0571  0870               	movf	??__ISR,w
  3903  0572  1383               	bcf	3,7	;select IRP bank1
  3904  0573  0080               	movwf	0
  3905                           
  3906                           ;main.c: 78: count++;
  3907  0574  3001               	movlw	1
  3908  0575  07F7               	addwf	_count,f
  3909  0576  1803               	skipnc
  3910  0577  0AF8               	incf	_count+1,f
  3911  0578  3000               	movlw	0
  3912  0579  07F8               	addwf	_count+1,f
  3913  057A                     i1l57:	
  3914  057A  0874               	movf	??__ISR+4,w
  3915  057B  00FF               	movwf	127
  3916  057C  0873               	movf	??__ISR+3,w
  3917  057D  008A               	movwf	10
  3918  057E  0872               	movf	??__ISR+2,w
  3919  057F  0084               	movwf	4
  3920  0580  0E71               	swapf	(??__ISR+1)^(0+-128),w
  3921  0581  0083               	movwf	3
  3922  0582  0EFE               	swapf	126,f
  3923  0583  0E7E               	swapf	126,w
  3924  0584  0009               	retfie
  3925  0585                     __end_of__ISR:	
  3926  007E                     btemp	set	126	;btemp
  3927  007E                     wtemp	set	126
  3928  007E                     wtemp0	set	126
  3929  0080                     wtemp1	set	128
  3930  0082                     wtemp2	set	130
  3931  0084                     wtemp3	set	132
  3932  0086                     wtemp4	set	134
  3933  0088                     wtemp5	set	136
  3934  007F                     wtemp6	set	127
  3935  007E                     ttemp	set	126
  3936  007E                     ttemp0	set	126
  3937  0081                     ttemp1	set	129
  3938  0084                     ttemp2	set	132
  3939  0087                     ttemp3	set	135
  3940  007F                     ttemp4	set	127
  3941  007E                     ltemp	set	126
  3942  007E                     ltemp0	set	126
  3943  0082                     ltemp1	set	130
  3944  0086                     ltemp2	set	134
  3945  0080                     ltemp3	set	128
  3946                           
  3947                           	psect	intentry
  3948  0004                     __pintentry:	
  3949                           ;incstack = 0
  3950                           ; Regs used in __ISR: [wreg-fsr0h+status,2+status,0]
  3951                           
  3952  0004                     interrupt_function:	
  3953  007E                     saved_w	set	btemp
  3954  0004  00FE               	movwf	btemp
  3955  0005  0E03               	swapf	3,w
  3956  0006  00F1               	movwf	??__ISR+1
  3957  0007  0804               	movf	4,w
  3958  0008  00F2               	movwf	??__ISR+2
  3959  0009  080A               	movf	10,w
  3960  000A  00F3               	movwf	??__ISR+3
  3961  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3962  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3963  000D  087F               	movf	btemp+1,w
  3964  000E  00F4               	movwf	??__ISR+4
  3965  000F  2D6A               	ljmp	__ISR


Data Sizes:
    Strings     64
    Constant    10
    Data        24
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     63      69
    BANK1            80      0      34
    BANK2            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 28
		 -> STR_8(CODE[2]), STR_7(CODE[3]), STR_6(CODE[9]), STR_5(CODE[17]), 
		 -> STR_4(CODE[3]), STR_3(CODE[28]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S288$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    MFRC522_ReadCardSerial@str	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_isCard@TagType	PTR unsigned char  size(1) Largest target is 2
		 -> main@TagType(BANK0[2]), 

    MFRC522_AntiColl@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_SelectTag@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_CRC@dataOut	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_CRC@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_Request@TagType	PTR unsigned char  size(1) Largest target is 2
		 -> main@TagType(BANK0[2]), 

    MFRC522_ToCard@backData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[2]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_ToCard@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> MFRC522_AntiColl@unLen(BANK0[2]), MFRC522_Read@unLen(COMMON[2]), MFRC522_Write@recvBits(COMMON[2]), MFRC522_Auth@recvBits(COMMON[2]), 
		 -> MFRC522_Halt@unLen(BANK0[2]), MFRC522_SelectTag@recvBits(BANK0[2]), MFRC522_Request@backBits(BANK0[2]), 

    MFRC522_ToCard@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[2]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 


Critical Paths under _main in COMMON

    _printf->___lwmod
    ___lwmod->___lwdiv
    _MFRC522_ToCard->_MFRC522_Rd
    _MFRC522_CRC->_MFRC522_Rd
    _MFRC522_Set_Bit->_MFRC522_Rd
    _MFRC522_Clear_Bit->_MFRC522_Rd
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_SPI_transfer

Critical Paths under __ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_MFRC522_SelectTag
    _MFRC522_isCard->_MFRC522_Request
    _MFRC522_Request->_MFRC522_ToCard
    _printf->___lwmod
    ___lwmod->___lwdiv
    _MFRC522_SelectTag->_MFRC522_ToCard
    _MFRC522_ReadCardSerial->_MFRC522_AntiColl
    _MFRC522_AntiColl->_MFRC522_ToCard
    _MFRC522_Init->_MFRC522_AntennaOn
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Halt->_MFRC522_ToCard
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_CRC->_MFRC522_Clear_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_SPI_transfer

Critical Paths under __ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under __ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   63688
                                             51 BANK0     12    12      0
                       _MFRC522_Halt
                       _MFRC522_Init
             _MFRC522_ReadCardSerial
                  _MFRC522_SelectTag
                     _MFRC522_isCard
                           _SPI_init
                          _UART_init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MFRC522_isCard                                       2     2      0   11887
                                             42 BANK0      2     2      0
                    _MFRC522_Request
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Request                                     11    10      1   11826
                                             31 BANK0     11    10      1
                     _MFRC522_ToCard
                         _MFRC522_Wr
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              14    12      2    1648
                                             12 BANK0     14    12      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                              6 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     371
                                              5 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _MFRC522_SelectTag                                   20    20      0   15571
                                             31 BANK0     20    20      0
                        _MFRC522_CRC
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (1) _MFRC522_ReadCardSerial                               3     3      0   12488
                                             42 BANK0      3     3      0
                   _MFRC522_AntiColl
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntiColl                                    11    11      0   12362
                                             31 BANK0     11    11      0
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Init                                         1     1      0    4475
                                             13 BANK0      1     1      0
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
                           _SPI_init
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             1     1      0       0
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Reset                                        1     1      0    1306
                                              9 BANK0      1     1      0
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntennaOn                                    1     1      0    1863
                                             12 BANK0      1     1      0
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Halt                                        10    10      0   17296
                                             31 BANK0     10    10      0
                        _MFRC522_CRC
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (3) _MFRC522_ToCard                                      18    14      4    8535
                                             13 BANK0     18    14      4
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_CRC                                          6     4      2    6466
                                             13 BANK0      6     4      2
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      3     2      1    1863
                                              9 BANK0      3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    4     3      1    2058
                                              9 BANK0      4     3      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           3     2      1    1306
                                              6 BANK0      3     2      1
                         _MFRC522_Rd (ARG)
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           3     3      0     204
                                              6 COMMON     1     1      0
                                              4 BANK0      2     2      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _SPI_transfer                                         5     5      0     139
                                              5 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) __ISR                                                 5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MFRC522_Halt
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_Clear_Bit
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_Init
     _MFRC522_AntennaOn
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
     _MFRC522_Reset
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_Wr
       _MFRC522_Rd (ARG)
         _SPI_transfer
       _SPI_transfer (ARG)
     _SPI_init
   _MFRC522_ReadCardSerial
     _MFRC522_AntiColl
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_SelectTag
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_isCard
     _MFRC522_Request
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
   _SPI_init
   _UART_init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 __ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      22       7       42.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3F      45       3       86.3%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      70      10        0.0%
ABS                  0      0      70       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Mar 31 09:01:28 2015

                              pc 0002                      __CFG_CP$OFF 0000                     MFRC522_CRC@i 0032  
                   MFRC522_CRC@n 0030                               l32 058A                               l35 0590  
                             l39 0595                               l82 0402                               l85 040C  
                             fsr 0004                      main@TagType 005D                      __CFG_LVP$ON 0000  
                            l127 0181                              l219 0395                              l255 023C  
                            l196 0298                     __CFG_CPD$OFF 0000                              _key 005F  
                            fsr0 0004                              indf 0000                   ??_MFRC522_Halt 003F  
                 ??_MFRC522_Init 002D                             l2002 0132                             l2020 0174  
                           l2012 0153                             l2022 017B                             l2102 04B8  
          __size_of_SPI_transfer 0046                             l2120 0322                             l2008 014B  
                           l2032 019F                             l2018 0155                             l2210 02F3  
                           l2202 02C3                             l2034 01A3                             l2042 01B1  
                           l2132 033C                             l2124 032E                             l2212 02F4  
                           l2044 01C7                             l2118 030A                             l2070 0205  
                           l2054 01E0                             l2038 01AE                             l2160 028C  
                           l2154 027A                             l2066 01FF                             l2058 01E6  
                           l2252 05C7                             l2076 020B                             l2236 060E  
                           l2078 018A                             l2344 0356                             l2194 02AD  
                           l2098 04B2                             l2364 038C                             l2358 0375  
                           l2366 0396                             l1914 04EC                             l1906 04C8  
                           l1930 0506                             l1908 04D6                             l1932 0514  
                           l1940 052D                             l1950 0058                             l1918 04F7  
                           l1856 0408                             l1952 005E                             l1936 0522  
                           l1868 0434                             l1956 0067                             l1982 00DD  
                           l1974 00C1                             l1966 008F                             l1958 006F  
                           l1976 00C7                             l1968 00AF                             l1994 00F8  
                           STR_1 03EE                             STR_2 03F0                             STR_3 03B2  
                           STR_4 03E8                             STR_5 03CE                             STR_6 03DF  
                           STR_7 03EB                             STR_8 03CC                             u1705 04D7  
                           u1635 0400                             u1715 04E3                             u1805 0098  
                           u1725 04ED                             u1665 0432                             u2377 039C  
                           u2387 0414                             u1755 0509                             u2397 041F  
                           u1925 015E                             u1685 04CB                             u1775 051A  
                           u1785 0523                             u1965 01F5                             _RCIF 0065  
                           i1l57 057A                             _TXIF 0064                             __ISR 056A  
                           _main 0351            MFRC522_AntiColl@unLen 0045                             btemp 007E  
                  __CFG_BOREN$ON 0000                             ltemp 007E                             start 0010  
                           ttemp 007E                             wtemp 007E                 _MFRC522_AntiColl 023D  
                 MFRC522_Rd@addr 0024                  ??_MFRC522_Reset 0029                            ?__ISR 0070  
                 MFRC522_Wr@addr 0028                            ?_main 0070          ?_MFRC522_ReadCardSerial 0070  
                  __CFG_WDTE$OFF 0000                  __end_of___lwdiv 04FE                  __end_of___lwmod 0534  
               SPI_transfer@data 0020                            _RCREG 001A                     _SPI_transfer 03F2  
                          _SPBRG 0099                            _PORTB 0006                            _TRISB 0086  
                          _TXREG 0019              __size_of_MFRC522_Rd 0017              __size_of_MFRC522_Wr 0014  
             __size_of_UART_init 0011        MFRC522_SelectTag@recvBits 0050                  __end_of_dpowers 03B2  
                          _count 0077           MFRC522_AntiColl@serNum 0049                            _putch 0585  
                          main@i 005C                            pclath 000A                            ltemp0 007E  
               __end_of_SPI_init 0639                            ltemp1 0082                            ltemp2 0086  
                          ltemp3 0080                _MFRC522_Clear_Bit 0610                            ttemp0 007E  
                          ttemp1 0081                            ttemp2 0084                            ttemp3 0087  
                          ttemp4 007F                            status 0003                            wtemp0 007E  
                          wtemp1 0080                            wtemp2 0082                            wtemp3 0084  
                          wtemp4 0086                            wtemp5 0088                            wtemp6 007F  
             ?_MFRC522_Clear_Bit 0029          MFRC522_SelectTag@buffer 0044          MFRC522_SelectTag@serNum 004E  
              _MFRC522_AntennaOn 0642                   __CFG_MCLRE$OFF 0000                     __end_of__ISR 0585  
                __initialization 0011                     __end_of_main 03A2               ?_MFRC522_AntennaOn 0070  
            ??_MFRC522_Clear_Bit 002A        MFRC522_ReadCardSerial@str 004C                  MFRC522_Rd@value 0025  
 __end_of_MFRC522_ReadCardSerial 05C9                 ??_MFRC522_ToCard 0031                           ??__ISR 0070  
       __size_of_MFRC522_Set_Bit 000E         __size_of_MFRC522_Request 0041                           ??_main 0053  
            ??_MFRC522_AntennaOn 002C                  MFRC522_ToCard@i 003C                  MFRC522_ToCard@n 003E  
               ??_MFRC522_isCard 004A            MFRC522_ToCard@backLen 0030                  MFRC522_Wr@value 0026  
      __end_of_MFRC522_Clear_Bit 0620            MFRC522_ToCard@_status 0038            MFRC522_ToCard@command 003B  
                         ?_putch 0070                _MFRC522_SelectTag 029A            MFRC522_ToCard@sendLen 002E  
             ?_MFRC522_SelectTag 0070            MFRC522_ToCard@waitIRq 0037        __end_of_MFRC522_AntennaOn 064B  
                 __CFG_PWRTE$OFF 0000             __size_of_MFRC522_CRC 005B              ??_MFRC522_SelectTag 003F  
           __end_of_MFRC522_Halt 056A                __end_of_UART_init 0600             __end_of_MFRC522_Init 047D  
        MFRC522_AntiColl@_status 0047                        ??___lwdiv 0075                        ??___lwmod 0076  
                         _buffer 00B2                           _printf 0183                           saved_w 007E  
      __end_of_MFRC522_SelectTag 02F6         MFRC522_SelectTag@_status 004D          __end_of__initialization 004C  
         MFRC522_Request@TagType 003F                     ??_MFRC522_Rd 0076                     ??_MFRC522_Wr 0027  
          MFRC522_isCard@TagType 004B                   __pcstackCOMMON 0070                     __pidataBANK0 0653  
                   __pidataBANK1 05DD                    __end_of_putch 059C                 MFRC522_Halt@buff 0043  
         MFRC522_Request@_status 0047                        ?_SPI_init 0070           MFRC522_Request@reqMode 0046  
       __end_of_MFRC522_AntiColl 029A                ??_MFRC522_Set_Bit 002A               __end_of_MFRC522_Rd 05B3  
             __end_of_MFRC522_Wr 05DD                ??_MFRC522_Request 0040       __size_of_MFRC522_Clear_Bit 0010  
                        ??_putch 0075                       __pbssBANK1 00B2           MFRC522_ToCard@backData 002F  
     __size_of_MFRC522_AntennaOn 0009                MFRC522_CRC@dataIn 0031                       __pmaintext 0351  
              MFRC522_CRC@length 002D                       __pintentry 0004               MFRC522_SelectTag@i 0052  
                        ?_printf 002C           MFRC522_ToCard@lastBits 0039                       ??_SPI_init 0075  
         MFRC522_ToCard@sendData 002D       __size_of_MFRC522_SelectTag 005C                       __stringtab 03A2  
          __size_of_MFRC522_Halt 0036            __size_of_MFRC522_Init 0045               MFRC522_Request@lol 0044  
                        ___lwdiv 04BE                          ___lwmod 04FE            __end_of_MFRC522_Reset 0642  
                        __ptext1 05EF                          __ptext2 0600                          __ptext3 047D  
                        __ptext4 0183                          __ptext5 0585                          __ptext6 04FE  
                        __ptext7 04BE                          __ptext8 029A                          __ptext9 05B3  
                __size_of_printf 00BA                          _dpowers 03A8                          main@UID 0056  
                        clrloop0 064C                     _MFRC522_Halt 0534                     _MFRC522_Init 0438  
           end_of_initialization 004C    MFRC522_ReadCardSerial@_status 004B                        _RCSTAbits 0018  
                        printf@c 0039                          printf@f 0038                        _UART_init 05EF  
                      _TRISBbits 0086                    ??_MFRC522_CRC 002F                        _TXSTAbits 0098  
                _MFRC522_Set_Bit 0620          MFRC522_Request@backBits 0048              MFRC522_ToCard@irqEn 003A  
                SPI_transfer@ret 0021                  _MFRC522_Request 047D                       ?_UART_init 0070  
                 __end_of_printf 023D              start_initialization 0011                __size_of_SPI_init 000B  
              MFRC522_Halt@unLen 0047                ?_MFRC522_AntiColl 0070                MFRC522_AntiColl@i 0048  
        __size_of_MFRC522_ToCard 0135               ??_MFRC522_AntiColl 003F          __size_of_MFRC522_isCard 0010  
       ??_MFRC522_ReadCardSerial 004A              __end_of_MFRC522_CRC 0351                      __pdataBANK0 005F  
                    __pdataBANK1 00A0                         ??_printf 002E                    ?_SPI_transfer 0070  
                    __pbssCOMMON 0077                        ___latbits 0000                    __pcstackBANK0 0020  
            __end_of__stringdata 03F2                    SPI_transfer@i 0022          __end_of_MFRC522_Set_Bit 062E  
             MFRC522_CRC@dataOut 002E          __end_of_MFRC522_Request 04BE                 ___lwdiv@dividend 0022  
            MFRC522_Set_Bit@addr 002B              MFRC522_Set_Bit@mask 0029                         ?___lwdiv 0020  
                       ?___lwmod 0027                        __pstrings 03A2                      ??_UART_init 0075  
                 ??_SPI_transfer 0075                 ___lwdiv@quotient 0025                   __size_of_putch 0017  
              interrupt_function 0004                      _MFRC522_CRC 02F6                        clear_ram0 064B  
__size_of_MFRC522_ReadCardSerial 0016                      __stringbase 03A7                      __stringdata 03B2  
                       _SPI_init 062E                       printf@_val 0034                       printf@flag 0031  
                     printf@prec 0032                   _MFRC522_ToCard 004E                        _writeData 00A0  
                 _MFRC522_isCard 0600            MFRC522_SelectTag@size 004F           __size_of_MFRC522_Reset 0009  
               ?_MFRC522_Set_Bit 0029            MFRC522_Clear_Bit@addr 002C                 ?_MFRC522_Request 003F  
          MFRC522_Clear_Bit@mask 0029                 __size_of___lwdiv 0040                 __size_of___lwmod 0036  
             __end_of__stringtab 03A8           __end_of_MFRC522_ToCard 0183           _MFRC522_ReadCardSerial 05B3  
                ___lwdiv@divisor 0020                  ___lwdiv@counter 0024                         __ptext10 023D  
                       __ptext11 0438                         __ptext20 05C9                         __ptext12 062E  
                       __ptext21 059C                         __ptext13 0639                         __ptext22 03F2  
                       __ptext14 0642                         __ptext23 056A                         __ptext15 0534  
                       __ptext16 004E                         __ptext17 02F6                         __ptext18 0620  
                       __ptext19 0610           __end_of_MFRC522_isCard 0610      MFRC522_AntiColl@serNumCheck 0044  
                  __size_of__ISR 001B                    __size_of_main 0051             __end_of_SPI_transfer 0438  
                     _MFRC522_Rd 059C                       _MFRC522_Wr 05C9        __size_of_MFRC522_AntiColl 005D  
                       main@size 0055                    _MFRC522_Reset 0639                        putch@data 0075  
                ?_MFRC522_ToCard 002D                  ?_MFRC522_isCard 0070                         intlevel1 0000  
               ___lwmod@dividend 0029                        stringcode 03A2                         printf@ap 0033  
                 ?_MFRC522_Reset 0070                  ___lwmod@divisor 0027                  ___lwmod@counter 002B  
                       stringdir 03A2                         stringtab 03A2                    ?_MFRC522_Halt 0070  
                  ?_MFRC522_Init 0070               __CFG_FOSC$INTOSCIO 0000                     ?_MFRC522_CRC 002D  
                    ?_MFRC522_Rd 0070                      ?_MFRC522_Wr 0026  
