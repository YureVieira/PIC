

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Apr 01 17:44:50 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	idataCOMRAM
    43  000D7A                     __pidataCOMRAM:
    44                           	opt stack 0
    45                           
    46                           ;initializer for MIFARE_SetUid@F4812
    47  000D7A  FF                 	db	255
    48  000D7B  FF                 	db	255
    49  000D7C  FF                 	db	255
    50  000D7D  FF                 	db	255
    51  000D7E  FF                 	db	255
    52  000D7F  FF                 	db	255
    53                           
    54                           	psect	idataBANK0
    55  000D60                     __pidataBANK0:
    56                           	opt stack 0
    57                           
    58                           ;initializer for MIFARE_UnbrickUidSector@F4826
    59  000D60  01                 	db	1
    60  000D61  02                 	db	2
    61  000D62  03                 	db	3
    62  000D63  04                 	db	4
    63  000D64  04                 	db	4
    64  000D65  00                 	db	0
    65  000D66  00                 	db	0
    66  000D67  00                 	db	0
    67  000D68  00                 	db	0
    68  000D69  00                 	db	0
    69  000D6A  00                 	db	0
    70  000D6B  00                 	db	0
    71  000D6C  00                 	db	0
    72  000D6D  00                 	db	0
    73  000D6E  00                 	db	0
    74  000D6F  00                 	db	0
    75                           
    76                           	psect	mediumconst
    77  007E16                     __pmediumconst:
    78                           	opt stack 0
    79  007E16  00                 	db	0
    80  007E17                     _FIFO_SIZE:
    81                           	opt stack 0
    82  007E17  40                 	db	64
    83  007E18                     __end_of_FIFO_SIZE:
    84                           	opt stack 0
    85  0000                     _PORTA	set	3968
    86  0000                     _RCREG	set	4014
    87  0000                     _RCSTAbits	set	4011
    88  0000                     _SPBRG	set	4015
    89  0000                     _TRISA	set	3986
    90  0000                     _TRISBbits	set	3987
    91  0000                     _TXREG	set	4013
    92  0000                     _TXSTAbits	set	4012
    93  0000                     _RCIF	set	31989
    94  0000                     _TXIF	set	31988
    95  007E18                     __stringdata:
    96                           	opt stack 0
    97  007E18  49                 	db	73	;'I'
    98  007E19  6E                 	db	110	;'n'
    99  007E1A  74                 	db	116	;'t'
   100  007E1B  65                 	db	101	;'e'
   101  007E1C  72                 	db	114	;'r'
   102  007E1D  6E                 	db	110	;'n'
   103  007E1E  61                 	db	97	;'a'
   104  007E1F  6C                 	db	108	;'l'
   105  007E20  20                 	db	32
   106  007E21  65                 	db	101	;'e'
   107  007E22  72                 	db	114	;'r'
   108  007E23  72                 	db	114	;'r'
   109  007E24  6F                 	db	111	;'o'
   110  007E25  72                 	db	114	;'r'
   111  007E26  20                 	db	32
   112  007E27  69                 	db	105	;'i'
   113  007E28  6E                 	db	110	;'n'
   114  007E29  20                 	db	32
   115  007E2A  74                 	db	116	;'t'
   116  007E2B  68                 	db	104	;'h'
   117  007E2C  65                 	db	101	;'e'
   118  007E2D  20                 	db	32
   119  007E2E  63                 	db	99	;'c'
   120  007E2F  6F                 	db	111	;'o'
   121  007E30  64                 	db	100	;'d'
   122  007E31  65                 	db	101	;'e'
   123  007E32  2E                 	db	46
   124  007E33  20                 	db	32
   125  007E34  53                 	db	83	;'S'
   126  007E35  68                 	db	104	;'h'
   127  007E36  6F                 	db	111	;'o'
   128  007E37  75                 	db	117	;'u'
   129  007E38  6C                 	db	108	;'l'
   130  007E39  64                 	db	100	;'d'
   131  007E3A  20                 	db	32
   132  007E3B  6E                 	db	110	;'n'
   133  007E3C  6F                 	db	111	;'o'
   134  007E3D  74                 	db	116	;'t'
   135  007E3E  20                 	db	32
   136  007E3F  68                 	db	104	;'h'
   137  007E40  61                 	db	97	;'a'
   138  007E41  70                 	db	112	;'p'
   139  007E42  70                 	db	112	;'p'
   140  007E43  65                 	db	101	;'e'
   141  007E44  6E                 	db	110	;'n'
   142  007E45  2E                 	db	46
   143  007E46  00                 	db	0
   144  007E47  50                 	db	80	;'P'
   145  007E48  49                 	db	73	;'I'
   146  007E49  43                 	db	67	;'C'
   147  007E4A  43                 	db	67	;'C'
   148  007E4B  20                 	db	32
   149  007E4C  63                 	db	99	;'c'
   150  007E4D  6F                 	db	111	;'o'
   151  007E4E  6D                 	db	109	;'m'
   152  007E4F  70                 	db	112	;'p'
   153  007E50  6C                 	db	108	;'l'
   154  007E51  69                 	db	105	;'i'
   155  007E52  61                 	db	97	;'a'
   156  007E53  6E                 	db	110	;'n'
   157  007E54  74                 	db	116	;'t'
   158  007E55  20                 	db	32
   159  007E56  77                 	db	119	;'w'
   160  007E57  69                 	db	105	;'i'
   161  007E58  74                 	db	116	;'t'
   162  007E59  68                 	db	104	;'h'
   163  007E5A  20                 	db	32
   164  007E5B  49                 	db	73	;'I'
   165  007E5C  53                 	db	83	;'S'
   166  007E5D  4F                 	db	79	;'O'
   167  007E5E  2F                 	db	47
   168  007E5F  49                 	db	73	;'I'
   169  007E60  45                 	db	69	;'E'
   170  007E61  43                 	db	67	;'C'
   171  007E62  20                 	db	32
   172  007E63  31                 	db	49	;'1'
   173  007E64  38                 	db	56	;'8'
   174  007E65  30                 	db	48	;'0'
   175  007E66  39                 	db	57	;'9'
   176  007E67  32                 	db	50	;'2'
   177  007E68  20                 	db	32
   178  007E69  28                 	db	40
   179  007E6A  4E                 	db	78	;'N'
   180  007E6B  46                 	db	70	;'F'
   181  007E6C  43                 	db	67	;'C'
   182  007E6D  29                 	db	41
   183  007E6E  00                 	db	0
   184  007E6F  50                 	db	80	;'P'
   185  007E70  49                 	db	73	;'I'
   186  007E71  43                 	db	67	;'C'
   187  007E72  43                 	db	67	;'C'
   188  007E73  20                 	db	32
   189  007E74  63                 	db	99	;'c'
   190  007E75  6F                 	db	111	;'o'
   191  007E76  6D                 	db	109	;'m'
   192  007E77  70                 	db	112	;'p'
   193  007E78  6C                 	db	108	;'l'
   194  007E79  69                 	db	105	;'i'
   195  007E7A  61                 	db	97	;'a'
   196  007E7B  6E                 	db	110	;'n'
   197  007E7C  74                 	db	116	;'t'
   198  007E7D  20                 	db	32
   199  007E7E  77                 	db	119	;'w'
   200  007E7F  69                 	db	105	;'i'
   201  007E80  74                 	db	116	;'t'
   202  007E81  68                 	db	104	;'h'
   203  007E82  20                 	db	32
   204  007E83  49                 	db	73	;'I'
   205  007E84  53                 	db	83	;'S'
   206  007E85  4F                 	db	79	;'O'
   207  007E86  2F                 	db	47
   208  007E87  49                 	db	73	;'I'
   209  007E88  45                 	db	69	;'E'
   210  007E89  43                 	db	67	;'C'
   211  007E8A  20                 	db	32
   212  007E8B  31                 	db	49	;'1'
   213  007E8C  34                 	db	52	;'4'
   214  007E8D  34                 	db	52	;'4'
   215  007E8E  34                 	db	52	;'4'
   216  007E8F  33                 	db	51	;'3'
   217  007E90  2D                 	db	45
   218  007E91  34                 	db	52	;'4'
   219  007E92  00                 	db	0
   220  007E93  53                 	db	83	;'S'
   221  007E94  41                 	db	65	;'A'
   222  007E95  4B                 	db	75	;'K'
   223  007E96  20                 	db	32
   224  007E97  69                 	db	105	;'i'
   225  007E98  6E                 	db	110	;'n'
   226  007E99  64                 	db	100	;'d'
   227  007E9A  69                 	db	105	;'i'
   228  007E9B  63                 	db	99	;'c'
   229  007E9C  61                 	db	97	;'a'
   230  007E9D  74                 	db	116	;'t'
   231  007E9E  65                 	db	101	;'e'
   232  007E9F  73                 	db	115	;'s'
   233  007EA0  20                 	db	32
   234  007EA1  55                 	db	85	;'U'
   235  007EA2  49                 	db	73	;'I'
   236  007EA3  44                 	db	68	;'D'
   237  007EA4  20                 	db	32
   238  007EA5  69                 	db	105	;'i'
   239  007EA6  73                 	db	115	;'s'
   240  007EA7  20                 	db	32
   241  007EA8  6E                 	db	110	;'n'
   242  007EA9  6F                 	db	111	;'o'
   243  007EAA  74                 	db	116	;'t'
   244  007EAB  20                 	db	32
   245  007EAC  63                 	db	99	;'c'
   246  007EAD  6F                 	db	111	;'o'
   247  007EAE  6D                 	db	109	;'m'
   248  007EAF  70                 	db	112	;'p'
   249  007EB0  6C                 	db	108	;'l'
   250  007EB1  65                 	db	101	;'e'
   251  007EB2  74                 	db	116	;'t'
   252  007EB3  65                 	db	101	;'e'
   253  007EB4  2E                 	db	46
   254  007EB5  00                 	db	0
   255  007EB6  41                 	db	65	;'A'
   256  007EB7  20                 	db	32
   257  007EB8  4D                 	db	77	;'M'
   258  007EB9  49                 	db	73	;'I'
   259  007EBA  46                 	db	70	;'F'
   260  007EBB  41                 	db	65	;'A'
   261  007EBC  52                 	db	82	;'R'
   262  007EBD  45                 	db	69	;'E'
   263  007EBE  20                 	db	32
   264  007EBF  50                 	db	80	;'P'
   265  007EC0  49                 	db	73	;'I'
   266  007EC1  43                 	db	67	;'C'
   267  007EC2  43                 	db	67	;'C'
   268  007EC3  20                 	db	32
   269  007EC4  72                 	db	114	;'r'
   270  007EC5  65                 	db	101	;'e'
   271  007EC6  73                 	db	115	;'s'
   272  007EC7  70                 	db	112	;'p'
   273  007EC8  6F                 	db	111	;'o'
   274  007EC9  6E                 	db	110	;'n'
   275  007ECA  64                 	db	100	;'d'
   276  007ECB  65                 	db	101	;'e'
   277  007ECC  64                 	db	100	;'d'
   278  007ECD  20                 	db	32
   279  007ECE  77                 	db	119	;'w'
   280  007ECF  69                 	db	105	;'i'
   281  007ED0  74                 	db	116	;'t'
   282  007ED1  68                 	db	104	;'h'
   283  007ED2  20                 	db	32
   284  007ED3  4E                 	db	78	;'N'
   285  007ED4  41                 	db	65	;'A'
   286  007ED5  4B                 	db	75	;'K'
   287  007ED6  2E                 	db	46
   288  007ED7  00                 	db	0
   289  007ED8  4D                 	db	77	;'M'
   290  007ED9  49                 	db	73	;'I'
   291  007EDA  46                 	db	70	;'F'
   292  007EDB  41                 	db	65	;'A'
   293  007EDC  52                 	db	82	;'R'
   294  007EDD  45                 	db	69	;'E'
   295  007EDE  20                 	db	32
   296  007EDF  55                 	db	85	;'U'
   297  007EE0  6C                 	db	108	;'l'
   298  007EE1  74                 	db	116	;'t'
   299  007EE2  72                 	db	114	;'r'
   300  007EE3  61                 	db	97	;'a'
   301  007EE4  6C                 	db	108	;'l'
   302  007EE5  69                 	db	105	;'i'
   303  007EE6  67                 	db	103	;'g'
   304  007EE7  68                 	db	104	;'h'
   305  007EE8  74                 	db	116	;'t'
   306  007EE9  20                 	db	32
   307  007EEA  6F                 	db	111	;'o'
   308  007EEB  72                 	db	114	;'r'
   309  007EEC  20                 	db	32
   310  007EED  55                 	db	85	;'U'
   311  007EEE  6C                 	db	108	;'l'
   312  007EEF  74                 	db	116	;'t'
   313  007EF0  72                 	db	114	;'r'
   314  007EF1  61                 	db	97	;'a'
   315  007EF2  6C                 	db	108	;'l'
   316  007EF3  69                 	db	105	;'i'
   317  007EF4  67                 	db	103	;'g'
   318  007EF5  68                 	db	104	;'h'
   319  007EF6  74                 	db	116	;'t'
   320  007EF7  20                 	db	32
   321  007EF8  43                 	db	67	;'C'
   322  007EF9  00                 	db	0
   323  007EFA  4D                 	db	77	;'M'
   324  007EFB  49                 	db	73	;'I'
   325  007EFC  46                 	db	70	;'F'
   326  007EFD  41                 	db	65	;'A'
   327  007EFE  52                 	db	82	;'R'
   328  007EFF  45                 	db	69	;'E'
   329  007F00  20                 	db	32
   330  007F01  4D                 	db	77	;'M'
   331  007F02  69                 	db	105	;'i'
   332  007F03  6E                 	db	110	;'n'
   333  007F04  69                 	db	105	;'i'
   334  007F05  2C                 	db	44
   335  007F06  20                 	db	32
   336  007F07  33                 	db	51	;'3'
   337  007F08  32                 	db	50	;'2'
   338  007F09  30                 	db	48	;'0'
   339  007F0A  20                 	db	32
   340  007F0B  75                 	db	117	;'u'
   341  007F0C  6E                 	db	110	;'n'
   342  007F0D  73                 	db	115	;'s'
   343  007F0E  69                 	db	105	;'i'
   344  007F0F  67                 	db	103	;'g'
   345  007F10  6E                 	db	110	;'n'
   346  007F11  65                 	db	101	;'e'
   347  007F12  64                 	db	100	;'d'
   348  007F13  20                 	db	32
   349  007F14  63                 	db	99	;'c'
   350  007F15  68                 	db	104	;'h'
   351  007F16  61                 	db	97	;'a'
   352  007F17  72                 	db	114	;'r'
   353  007F18  73                 	db	115	;'s'
   354  007F19  00                 	db	0
   355  007F1A  41                 	db	65	;'A'
   356  007F1B  20                 	db	32
   357  007F1C  62                 	db	98	;'b'
   358  007F1D  75                 	db	117	;'u'
   359  007F1E  66                 	db	102	;'f'
   360  007F1F  66                 	db	102	;'f'
   361  007F20  65                 	db	101	;'e'
   362  007F21  72                 	db	114	;'r'
   363  007F22  20                 	db	32
   364  007F23  69                 	db	105	;'i'
   365  007F24  73                 	db	115	;'s'
   366  007F25  20                 	db	32
   367  007F26  6E                 	db	110	;'n'
   368  007F27  6F                 	db	111	;'o'
   369  007F28  74                 	db	116	;'t'
   370  007F29  20                 	db	32
   371  007F2A  62                 	db	98	;'b'
   372  007F2B  69                 	db	105	;'i'
   373  007F2C  67                 	db	103	;'g'
   374  007F2D  20                 	db	32
   375  007F2E  65                 	db	101	;'e'
   376  007F2F  6E                 	db	110	;'n'
   377  007F30  6F                 	db	111	;'o'
   378  007F31  75                 	db	117	;'u'
   379  007F32  67                 	db	103	;'g'
   380  007F33  68                 	db	104	;'h'
   381  007F34  2E                 	db	46
   382  007F35  00                 	db	0
   383  007F36  54                 	db	84	;'T'
   384  007F37  68                 	db	104	;'h'
   385  007F38  65                 	db	101	;'e'
   386  007F39  20                 	db	32
   387  007F3A  43                 	db	67	;'C'
   388  007F3B  52                 	db	82	;'R'
   389  007F3C  43                 	db	67	;'C'
   390  007F3D  5F                 	db	95	;'_'
   391  007F3E  41                 	db	65	;'A'
   392  007F3F  20                 	db	32
   393  007F40  64                 	db	100	;'d'
   394  007F41  6F                 	db	111	;'o'
   395  007F42  65                 	db	101	;'e'
   396  007F43  73                 	db	115	;'s'
   397  007F44  20                 	db	32
   398  007F45  6E                 	db	110	;'n'
   399  007F46  6F                 	db	111	;'o'
   400  007F47  74                 	db	116	;'t'
   401  007F48  20                 	db	32
   402  007F49  6D                 	db	109	;'m'
   403  007F4A  61                 	db	97	;'a'
   404  007F4B  74                 	db	116	;'t'
   405  007F4C  63                 	db	99	;'c'
   406  007F4D  68                 	db	104	;'h'
   407  007F4E  2E                 	db	46
   408  007F4F  00                 	db	0
   409  007F50  54                 	db	84	;'T'
   410  007F51  69                 	db	105	;'i'
   411  007F52  6D                 	db	109	;'m'
   412  007F53  65                 	db	101	;'e'
   413  007F54  6F                 	db	111	;'o'
   414  007F55  75                 	db	117	;'u'
   415  007F56  74                 	db	116	;'t'
   416  007F57  20                 	db	32
   417  007F58  69                 	db	105	;'i'
   418  007F59  6E                 	db	110	;'n'
   419  007F5A  20                 	db	32
   420  007F5B  63                 	db	99	;'c'
   421  007F5C  6F                 	db	111	;'o'
   422  007F5D  6D                 	db	109	;'m'
   423  007F5E  6D                 	db	109	;'m'
   424  007F5F  75                 	db	117	;'u'
   425  007F60  6E                 	db	110	;'n'
   426  007F61  69                 	db	105	;'i'
   427  007F62  63                 	db	99	;'c'
   428  007F63  61                 	db	97	;'a'
   429  007F64  74                 	db	116	;'t'
   430  007F65  69                 	db	105	;'i'
   431  007F66  6F                 	db	111	;'o'
   432  007F67  6E                 	db	110	;'n'
   433  007F68  2E                 	db	46
   434  007F69  00                 	db	0
   435  007F6A  45                 	db	69	;'E'
   436  007F6B  72                 	db	114	;'r'
   437  007F6C  72                 	db	114	;'r'
   438  007F6D  6F                 	db	111	;'o'
   439  007F6E  72                 	db	114	;'r'
   440  007F6F  20                 	db	32
   441  007F70  69                 	db	105	;'i'
   442  007F71  6E                 	db	110	;'n'
   443  007F72  20                 	db	32
   444  007F73  63                 	db	99	;'c'
   445  007F74  6F                 	db	111	;'o'
   446  007F75  6D                 	db	109	;'m'
   447  007F76  6D                 	db	109	;'m'
   448  007F77  75                 	db	117	;'u'
   449  007F78  6E                 	db	110	;'n'
   450  007F79  69                 	db	105	;'i'
   451  007F7A  63                 	db	99	;'c'
   452  007F7B  61                 	db	97	;'a'
   453  007F7C  74                 	db	116	;'t'
   454  007F7D  69                 	db	105	;'i'
   455  007F7E  6F                 	db	111	;'o'
   456  007F7F  6E                 	db	110	;'n'
   457  007F80  2E                 	db	46
   458  007F81  00                 	db	0
   459  007F82  43                 	db	67	;'C'
   460  007F83  6F                 	db	111	;'o'
   461  007F84  6C                 	db	108	;'l'
   462  007F85  6C                 	db	108	;'l'
   463  007F86  69                 	db	105	;'i'
   464  007F87  73                 	db	115	;'s'
   465  007F88  73                 	db	115	;'s'
   466  007F89  69                 	db	105	;'i'
   467  007F8A  6F                 	db	111	;'o'
   468  007F8B  6E                 	db	110	;'n'
   469  007F8C  20                 	db	32
   470  007F8D  64                 	db	100	;'d'
   471  007F8E  65                 	db	101	;'e'
   472  007F8F  74                 	db	116	;'t'
   473  007F90  65                 	db	101	;'e'
   474  007F91  63                 	db	99	;'c'
   475  007F92  74                 	db	116	;'t'
   476  007F93  65                 	db	101	;'e'
   477  007F94  64                 	db	100	;'d'
   478  007F95  2E                 	db	46
   479  007F96  00                 	db	0
   480  007F97  49                 	db	73	;'I'
   481  007F98  6E                 	db	110	;'n'
   482  007F99  76                 	db	118	;'v'
   483  007F9A  61                 	db	97	;'a'
   484  007F9B  6C                 	db	108	;'l'
   485  007F9C  69                 	db	105	;'i'
   486  007F9D  64                 	db	100	;'d'
   487  007F9E  20                 	db	32
   488  007F9F  61                 	db	97	;'a'
   489  007FA0  72                 	db	114	;'r'
   490  007FA1  67                 	db	103	;'g'
   491  007FA2  75                 	db	117	;'u'
   492  007FA3  6D                 	db	109	;'m'
   493  007FA4  65                 	db	101	;'e'
   494  007FA5  6E                 	db	110	;'n'
   495  007FA6  74                 	db	116	;'t'
   496  007FA7  2E                 	db	46
   497  007FA8  00                 	db	0
   498  007FA9  4D                 	db	77	;'M'
   499  007FAA  49                 	db	73	;'I'
   500  007FAB  46                 	db	70	;'F'
   501  007FAC  41                 	db	65	;'A'
   502  007FAD  52                 	db	82	;'R'
   503  007FAE  45                 	db	69	;'E'
   504  007FAF  20                 	db	32
   505  007FB0  54                 	db	84	;'T'
   506  007FB1  4E                 	db	78	;'N'
   507  007FB2  50                 	db	80	;'P'
   508  007FB3  33                 	db	51	;'3'
   509  007FB4  58                 	db	88	;'X'
   510  007FB5  58                 	db	88	;'X'
   511  007FB6  58                 	db	88	;'X'
   512  007FB7  00                 	db	0
   513  007FB8  55                 	db	85	;'U'
   514  007FB9  6E                 	db	110	;'n'
   515  007FBA  6B                 	db	107	;'k'
   516  007FBB  6E                 	db	110	;'n'
   517  007FBC  6F                 	db	111	;'o'
   518  007FBD  77                 	db	119	;'w'
   519  007FBE  6E                 	db	110	;'n'
   520  007FBF  20                 	db	32
   521  007FC0  65                 	db	101	;'e'
   522  007FC1  72                 	db	114	;'r'
   523  007FC2  72                 	db	114	;'r'
   524  007FC3  6F                 	db	111	;'o'
   525  007FC4  72                 	db	114	;'r'
   526  007FC5  00                 	db	0
   527  007FC6  55                 	db	85	;'U'
   528  007FC7  6E                 	db	110	;'n'
   529  007FC8  6B                 	db	107	;'k'
   530  007FC9  6E                 	db	110	;'n'
   531  007FCA  6F                 	db	111	;'o'
   532  007FCB  77                 	db	119	;'w'
   533  007FCC  6E                 	db	110	;'n'
   534  007FCD  20                 	db	32
   535  007FCE  74                 	db	116	;'t'
   536  007FCF  79                 	db	121	;'y'
   537  007FD0  70                 	db	112	;'p'
   538  007FD1  65                 	db	101	;'e'
   539  007FD2  00                 	db	0
   540  007FD3  4D                 	db	77	;'M'
   541  007FD4  49                 	db	73	;'I'
   542  007FD5  46                 	db	70	;'F'
   543  007FD6  41                 	db	65	;'A'
   544  007FD7  52                 	db	82	;'R'
   545  007FD8  45                 	db	69	;'E'
   546  007FD9  20                 	db	32
   547  007FDA  50                 	db	80	;'P'
   548  007FDB  6C                 	db	108	;'l'
   549  007FDC  75                 	db	117	;'u'
   550  007FDD  73                 	db	115	;'s'
   551  007FDE  00                 	db	0
   552  007FDF  4D                 	db	77	;'M'
   553  007FE0  49                 	db	73	;'I'
   554  007FE1  46                 	db	70	;'F'
   555  007FE2  41                 	db	65	;'A'
   556  007FE3  52                 	db	82	;'R'
   557  007FE4  45                 	db	69	;'E'
   558  007FE5  20                 	db	32
   559  007FE6  31                 	db	49	;'1'
   560  007FE7  4B                 	db	75	;'K'
   561  007FE8  42                 	db	66	;'B'
   562  007FE9  00                 	db	0
   563  007FEA  4D                 	db	77	;'M'
   564  007FEB  49                 	db	73	;'I'
   565  007FEC  46                 	db	70	;'F'
   566  007FED  41                 	db	65	;'A'
   567  007FEE  52                 	db	82	;'R'
   568  007FEF  45                 	db	69	;'E'
   569  007FF0  20                 	db	32
   570  007FF1  34                 	db	52	;'4'
   571  007FF2  4B                 	db	75	;'K'
   572  007FF3  42                 	db	66	;'B'
   573  007FF4  00                 	db	0
   574  007FF5  53                 	db	83	;'S'
   575  007FF6  75                 	db	117	;'u'
   576  007FF7  63                 	db	99	;'c'
   577  007FF8  63                 	db	99	;'c'
   578  007FF9  65                 	db	101	;'e'
   579  007FFA  73                 	db	115	;'s'
   580  007FFB  73                 	db	115	;'s'
   581  007FFC  2E                 	db	46
   582  007FFD  00                 	db	0
   583  007FFE                     __end_of__stringdata:
   584                           	opt stack 0
   585  007FFE  00                 	db	0	; dummy byte at the end
   586  0000                     
   587                           	psect	nvCOMRAM
   588  000063                     __pnvCOMRAM:
   589                           	opt stack 0
   590  000063                     __mode:
   591                           	opt stack 0
   592  000063                     	ds	1
   593                           
   594                           ; #config settings
   595                           
   596                           	psect	cinit
   597  000B4A                     __pcinit:
   598                           	opt stack 0
   599  000B4A                     start_initialization:
   600                           	opt stack 0
   601  000B4A                     __initialization:
   602                           	opt stack 0
   603                           
   604                           ; Clear objects allocated to BANK0 (28 bytes)
   605  000B4A  EE00  F0A3         	lfsr	0,__pbssBANK0
   606  000B4E  0E1C               	movlw	28
   607  000B50                     clear_0:
   608  000B50  6AEE               	clrf	postinc0,c
   609  000B52  06E8               	decf	wreg,f,c
   610  000B54  E1FD               	bnz	clear_0
   611                           
   612                           ; Clear objects allocated to COMRAM (2 bytes)
   613  000B56  6A62               	clrf	(__pbssCOMRAM+1)& (0+255),c
   614  000B58  6A61               	clrf	__pbssCOMRAM& (0+255),c
   615                           
   616                           ; Initialize objects allocated to BANK0 (16 bytes)
   617                           ; load TBLPTR registers with __pidataBANK0
   618  000B5A  0E60               	movlw	low __pidataBANK0
   619  000B5C  6EF6               	movwf	tblptrl,c
   620  000B5E  0E0D               	movlw	high __pidataBANK0
   621  000B60  6EF7               	movwf	tblptrh,c
   622  000B62  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   623  000B64  6EF8               	movwf	tblptru,c
   624  000B66  EE00  F0BF         	lfsr	0,__pdataBANK0
   625  000B6A  EE10 F010          	lfsr	1,16
   626  000B6E                     copy_data0:
   627  000B6E  0009               	tblrd		*+
   628  000B70  CFF5 FFEE          	movff	tablat,postinc0
   629  000B74  50E5               	movf	postdec1,w,c
   630  000B76  50E1               	movf	fsr1l,w,c
   631  000B78  E1FA               	bnz	copy_data0
   632                           
   633                           ; Initialize objects allocated to COMRAM (6 bytes)
   634                           ; load TBLPTR registers with __pidataCOMRAM
   635  000B7A  0E7A               	movlw	low __pidataCOMRAM
   636  000B7C  6EF6               	movwf	tblptrl,c
   637  000B7E  0E0D               	movlw	high __pidataCOMRAM
   638  000B80  6EF7               	movwf	tblptrh,c
   639  000B82  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   640  000B84  6EF8               	movwf	tblptru,c
   641  000B86  EE00  F05B         	lfsr	0,__pdataCOMRAM
   642  000B8A  EE10 F006          	lfsr	1,6
   643  000B8E                     copy_data1:
   644  000B8E  0009               	tblrd		*+
   645  000B90  CFF5 FFEE          	movff	tablat,postinc0
   646  000B94  50E5               	movf	postdec1,w,c
   647  000B96  50E1               	movf	fsr1l,w,c
   648  000B98  E1FA               	bnz	copy_data1
   649  000B9A                     end_of_initialization:
   650                           	opt stack 0
   651  000B9A                     __end_of__initialization:
   652                           	opt stack 0
   653  000B9A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   654  000B9C  6EF8               	movwf	tblptru,c
   655  000B9E  0100               	movlb	0
   656  000BA0  EF49  F006         	goto	_main	;jump to C main() function
   657                           tblptru	equ	0xFF8
   658                           tblptrh	equ	0xFF7
   659                           tblptrl	equ	0xFF6
   660                           tablat	equ	0xFF5
   661                           postinc0	equ	0xFEE
   662                           wreg	equ	0xFE8
   663                           postdec1	equ	0xFE5
   664                           fsr1l	equ	0xFE1
   665                           
   666                           	psect	bssCOMRAM
   667  000061                     __pbssCOMRAM:
   668                           	opt stack 0
   669  000061                     _count:
   670                           	opt stack 0
   671  000061                     	ds	2
   672                           tblptru	equ	0xFF8
   673                           tblptrh	equ	0xFF7
   674                           tblptrl	equ	0xFF6
   675                           tablat	equ	0xFF5
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           postdec1	equ	0xFE5
   679                           fsr1l	equ	0xFE1
   680                           
   681                           	psect	dataCOMRAM
   682  00005B                     __pdataCOMRAM:
   683                           	opt stack 0
   684  00005B                     MIFARE_SetUid@F4812:
   685                           	opt stack 0
   686  00005B                     	ds	6
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           tblptrl	equ	0xFF6
   690                           tablat	equ	0xFF5
   691                           postinc0	equ	0xFEE
   692                           wreg	equ	0xFE8
   693                           postdec1	equ	0xFE5
   694                           fsr1l	equ	0xFE1
   695                           
   696                           	psect	bssBANK0
   697  0000A3                     __pbssBANK0:
   698                           	opt stack 0
   699  0000A3                     _buffer:
   700                           	opt stack 0
   701  0000A3                     	ds	16
   702  0000B3                     _uid:
   703                           	opt stack 0
   704  0000B3                     	ds	12
   705                           tblptru	equ	0xFF8
   706                           tblptrh	equ	0xFF7
   707                           tblptrl	equ	0xFF6
   708                           tablat	equ	0xFF5
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           postdec1	equ	0xFE5
   712                           fsr1l	equ	0xFE1
   713                           
   714                           	psect	dataBANK0
   715  0000BF                     __pdataBANK0:
   716                           	opt stack 0
   717  0000BF                     MIFARE_UnbrickUidSector@F4826:
   718                           	opt stack 0
   719  0000BF                     	ds	16
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           postinc0	equ	0xFEE
   725                           wreg	equ	0xFE8
   726                           postdec1	equ	0xFE5
   727                           fsr1l	equ	0xFE1
   728                           
   729                           	psect	cstackBANK0
   730  000080                     __pcstackBANK0:
   731                           	opt stack 0
   732  000080                     _PICC_Select$549:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x0
   736  000080                     	ds	2
   737  000082                     _PICC_Select$551:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x2
   741  000082                     	ds	2
   742  000084                     _PICC_Select$552:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x4
   746  000084                     	ds	2
   747  000086                     PICC_Select@uidComplete:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x6
   751  000086                     	ds	1
   752  000087                     PICC_Select@selectDone:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x7
   756  000087                     	ds	1
   757  000088                     PICC_Select@bufferUsed:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x8
   761  000088                     	ds	1
   762  000089                     _PICC_Select$545:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x9
   766  000089                     	ds	1
   767  00008A                     _PICC_Select$546:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0xA
   771  00008A                     	ds	1
   772  00008B                     PICC_Select@rxAlign:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0xB
   776  00008B                     	ds	1
   777  00008C                     PICC_Select@maxbytes:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0xC
   781  00008C                     	ds	1
   782  00008D                     PICC_Select@cascadeLevel:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0xD
   786  00008D                     	ds	1
   787  00008E                     PICC_Select@buffer:
   788                           	opt stack 0
   789                           
   790                           ; 9 bytes @ 0xE
   791  00008E                     	ds	9
   792  000097                     PICC_Select@collisionPos:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x17
   796  000097                     	ds	1
   797  000098                     PICC_Select@useCascadeTag:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x18
   801  000098                     	ds	1
   802  000099                     PICC_Select@uidIndex:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x19
   806  000099                     	ds	1
   807  00009A                     PICC_Select@bytesToCopy:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x1A
   811  00009A                     	ds	1
   812  00009B                     PICC_Select@responseLength:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x1B
   816  00009B                     	ds	1
   817  00009C                     PICC_Select@responseBuffer:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x1C
   821  00009C                     	ds	2
   822  00009E                     PICC_Select@txLastBits:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x1E
   826  00009E                     	ds	1
   827  00009F                     PICC_Select@count:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x1F
   831  00009F                     	ds	1
   832  0000A0                     PICC_Select@index:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x20
   836  0000A0                     	ds	1
   837  0000A1                     PICC_Select@result:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x21
   841  0000A1                     	ds	1
   842  0000A2                     PICC_Select@currentLevelKnownBits:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x22
   846  0000A2                     	ds	1
   847                           tblptru	equ	0xFF8
   848                           tblptrh	equ	0xFF7
   849                           tblptrl	equ	0xFF6
   850                           tablat	equ	0xFF5
   851                           postinc0	equ	0xFEE
   852                           wreg	equ	0xFE8
   853                           postdec1	equ	0xFE5
   854                           fsr1l	equ	0xFE1
   855                           
   856                           	psect	cstackCOMRAM
   857  000001                     __pcstackCOMRAM:
   858                           	opt stack 0
   859  000001                     ??__ISR:
   860  000001                     
   861                           ; 1 bytes @ 0x0
   862  000001                     	ds	14
   863  00000F                     ?___awdiv:
   864                           	opt stack 0
   865  00000F                     SPI_init@mode:
   866                           	opt stack 0
   867  00000F                     SPI_transfer@i:
   868                           	opt stack 0
   869  00000F                     ___awdiv@dividend:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0xE
   873  00000F                     	ds	2
   874  000011                     SPI_transfer@i_416:
   875                           	opt stack 0
   876  000011                     ___awdiv@divisor:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x10
   880  000011                     	ds	2
   881  000013                     SPI_transfer@ret:
   882                           	opt stack 0
   883  000013                     ___awdiv@counter:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x12
   887  000013                     	ds	1
   888  000014                     SPI_transfer@data:
   889                           	opt stack 0
   890  000014                     ___awdiv@sign:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x13
   894  000014                     	ds	1
   895  000015                     PCD_WriteRegister@value:
   896                           	opt stack 0
   897  000015                     PCD_WriteRegisterVector@count:
   898                           	opt stack 0
   899  000015                     PCD_ReadRegister@reg:
   900                           	opt stack 0
   901  000015                     PCD_ReadRegisterVector@count:
   902                           	opt stack 0
   903  000015                     ___awdiv@quotient:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x14
   907  000015                     	ds	1
   908  000016                     PCD_WriteRegister@reg:
   909                           	opt stack 0
   910  000016                     PCD_ReadRegister@value:
   911                           	opt stack 0
   912  000016                     PCD_WriteRegisterVector@values:
   913                           	opt stack 0
   914  000016                     PCD_ReadRegisterVector@values:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x15
   918  000016                     	ds	1
   919  000017                     PCD_SetRegisterBitMask@mask:
   920                           	opt stack 0
   921  000017                     PCD_ClearRegisterBitMask@mask:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x16
   925  000017                     	ds	1
   926  000018                     PCD_WriteRegisterVector@reg:
   927                           	opt stack 0
   928  000018                     PCD_ReadRegisterVector@rxAlign:
   929                           	opt stack 0
   930  000018                     PCD_SetRegisterBitMask@tmp:
   931                           	opt stack 0
   932  000018                     PCD_ClearRegisterBitMask@tmp:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x17
   936  000018                     	ds	1
   937  000019                     ??_PCD_ReadRegisterVector:
   938  000019                     PCD_WriteRegisterVector@index:
   939                           	opt stack 0
   940  000019                     PCD_SetRegisterBitMask@reg:
   941                           	opt stack 0
   942  000019                     PCD_ClearRegisterBitMask@reg:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x18
   946  000019                     	ds	1
   947  00001A                     PCD_CalculateCRC@data:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x19
   951  00001A                     	ds	1
   952  00001B                     PCD_ReadRegisterVector@reg:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x1A
   956  00001B                     	ds	1
   957  00001C                     PCD_ReadRegisterVector@value:
   958                           	opt stack 0
   959  00001C                     PCD_CalculateCRC@length:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x1B
   963  00001C                     	ds	1
   964  00001D                     PCD_ReadRegisterVector@mask:
   965                           	opt stack 0
   966  00001D                     PCD_CalculateCRC@result:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x1C
   970  00001D                     	ds	1
   971  00001E                     PCD_ReadRegisterVector@address:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x1D
   975  00001E                     	ds	1
   976  00001F                     PCD_ReadRegisterVector@i:
   977                           	opt stack 0
   978  00001F                     PCD_CalculateCRC@i:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x1E
   982  00001F                     	ds	1
   983  000020                     PCD_ReadRegisterVector@index:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x1F
   987  000020                     	ds	1
   988  000021                     PCD_CalculateCRC@n:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x20
   992  000021                     	ds	1
   993  000022                     PCD_CommunicateWithPICC@waitIRq:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x21
   997  000022                     	ds	1
   998  000023                     PCD_CommunicateWithPICC@sendData:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x22
  1002  000023                     	ds	2
  1003  000025                     PCD_CommunicateWithPICC@sendLen:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x24
  1007  000025                     	ds	1
  1008  000026                     PCD_CommunicateWithPICC@backData:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x25
  1012  000026                     	ds	2
  1013  000028                     PCD_CommunicateWithPICC@backLen:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x27
  1017  000028                     	ds	2
  1018  00002A                     PCD_CommunicateWithPICC@validBits:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0x29
  1022  00002A                     	ds	2
  1023  00002C                     PCD_CommunicateWithPICC@rxAlign:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x2B
  1027  00002C                     	ds	1
  1028  00002D                     PCD_CommunicateWithPICC@checkCRC:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x2C
  1032  00002D                     	ds	1
  1033  00002E                     ??_PCD_CommunicateWithPICC:
  1034                           
  1035                           ; 0 bytes @ 0x2D
  1036  00002E                     	ds	4
  1037  000032                     PCD_CommunicateWithPICC@i:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0x31
  1041  000032                     	ds	2
  1042  000034                     PCD_CommunicateWithPICC@txLastBits:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x33
  1046  000034                     	ds	1
  1047  000035                     PCD_CommunicateWithPICC@bitFraming:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x34
  1051  000035                     	ds	1
  1052  000036                     _PCD_CommunicateWithPICC$494:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x35
  1056  000036                     	ds	2
  1057  000038                     PCD_CommunicateWithPICC@command:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x37
  1061  000038                     	ds	1
  1062  000039                     PCD_CommunicateWithPICC@controlBuffer:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x38
  1066  000039                     	ds	2
  1067  00003B                     PCD_CommunicateWithPICC@errorRegValue:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x3A
  1071  00003B                     	ds	1
  1072  00003C                     PCD_CommunicateWithPICC@_validBits:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x3B
  1076  00003C                     	ds	1
  1077  00003D                     PCD_CommunicateWithPICC@n:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x3C
  1081  00003D                     	ds	1
  1082  00003E                     PCD_TransceiveData@sendData:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x3D
  1086  00003E                     	ds	2
  1087  000040                     PCD_TransceiveData@sendLen:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x3F
  1091  000040                     	ds	1
  1092  000041                     PCD_TransceiveData@backData:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x40
  1096  000041                     	ds	2
  1097  000043                     PCD_TransceiveData@backLen:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x42
  1101  000043                     	ds	2
  1102  000045                     PCD_TransceiveData@validBits:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x44
  1106  000045                     	ds	2
  1107  000047                     PCD_TransceiveData@rxAlign:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x46
  1111  000047                     	ds	1
  1112  000048                     PCD_TransceiveData@checkCRC:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x47
  1116  000048                     	ds	1
  1117  000049                     PCD_TransceiveData@waitIRq:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x48
  1121  000049                     	ds	1
  1122  00004A                     PICC_REQA_or_WUPA@bufferATQA:
  1123                           	opt stack 0
  1124  00004A                     PICC_Select@uid:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x49
  1128  00004A                     	ds	2
  1129  00004C                     PICC_Select@validBits:
  1130                           	opt stack 0
  1131  00004C                     PICC_REQA_or_WUPA@bufferSize:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x4B
  1135  00004C                     	ds	1
  1136  00004D                     ??_PICC_Select:
  1137                           
  1138                           ; 0 bytes @ 0x4C
  1139  00004D                     	ds	1
  1140  00004E                     ??_PICC_REQA_or_WUPA:
  1141                           
  1142                           ; 0 bytes @ 0x4D
  1143  00004E                     	ds	1
  1144  00004F                     PICC_REQA_or_WUPA@command:
  1145                           	opt stack 0
  1146  00004F                     PICC_ReadCardSerial@result:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x4E
  1150  00004F                     	ds	1
  1151  000050                     PICC_REQA_or_WUPA@status:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x4F
  1155  000050                     	ds	1
  1156  000051                     PICC_REQA_or_WUPA@validBits:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x50
  1160  000051                     	ds	1
  1161  000052                     PICC_RequestA@bufferATQA:
  1162                           	opt stack 0
  1163                           
  1164                           ; 2 bytes @ 0x51
  1165  000052                     	ds	2
  1166  000054                     PICC_RequestA@bufferSize:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x53
  1170  000054                     	ds	2
  1171  000056                     _PICC_IsNewCardPresent$752:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0x55
  1175  000056                     	ds	1
  1176  000057                     PICC_IsNewCardPresent@bufferATQA:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x56
  1180  000057                     	ds	2
  1181  000059                     PICC_IsNewCardPresent@result:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0x58
  1185  000059                     	ds	1
  1186  00005A                     PICC_IsNewCardPresent@bufferSize:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x59
  1190  00005A                     	ds	1
  1191  00005B                     tblptru	equ	0xFF8
  1192                           tblptrh	equ	0xFF7
  1193                           tblptrl	equ	0xFF6
  1194                           tablat	equ	0xFF5
  1195                           postinc0	equ	0xFEE
  1196                           wreg	equ	0xFE8
  1197                           postdec1	equ	0xFE5
  1198                           fsr1l	equ	0xFE1
  1199                           
  1200                           ; 0 bytes @ 0x5A
  1201 ;;
  1202 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1203 ;;
  1204 ;; *************** function _main *****************
  1205 ;; Defined at:
  1206 ;;		line 31 in file "main.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;		None
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;		None
  1211 ;; Return value:  Size  Location     Type
  1212 ;;		None               void
  1213 ;; Registers used:
  1214 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1220 ;;      Params:         0       0       0       0       0       0       0
  1221 ;;      Locals:         0       0       0       0       0       0       0
  1222 ;;      Temps:          0       0       0       0       0       0       0
  1223 ;;      Totals:         0       0       0       0       0       0       0
  1224 ;;Total ram usage:        0 bytes
  1225 ;; Hardware stack levels required when called:   11
  1226 ;; This function calls:
  1227 ;;		_PICC_IsNewCardPresent
  1228 ;;		_PICC_ReadCardSerial
  1229 ;;		_RFID_init
  1230 ;;		_SPI_init
  1231 ;;		_UART_init
  1232 ;; This function is called by:
  1233 ;;		Startup code after reset
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           	psect	text0
  1238  000C92                     __ptext0:
  1239                           	opt stack 0
  1240  000C92                     _main:
  1241                           	opt stack 20
  1242                           
  1243                           ;main.c: 33: UART_init();
  1244                           
  1245                           ;incstack = 0
  1246  000C92  EC9A  F006         	call	_UART_init	;wreg free
  1247                           
  1248                           ;main.c: 34: SPI_init(0);
  1249  000C96  0E00               	movlw	0
  1250  000C98  EC25  F006         	call	_SPI_init
  1251                           
  1252                           ;main.c: 35: RFID_init();
  1253  000C9C  ECB8  F006         	call	_RFID_init	;wreg free
  1254  000CA0                     l5071:
  1255                           
  1256                           ;main.c: 41: if ( PICC_IsNewCardPresent()!=0 )
  1257  000CA0  EC0B  F006         	call	_PICC_IsNewCardPresent	;wreg free
  1258  000CA4  0900               	iorlw	0
  1259  000CA6  A4D8               	btfss	status,2,c
  1260  000CA8  D7FB               	goto	l5071
  1261                           
  1262                           ;main.c: 44: }
  1263                           ;main.c: 46: if (PICC_ReadCardSerial()!=0)
  1264                           
  1265                           ;main.c: 42: {
  1266                           ;main.c: 43: goto inicio;
  1267  000CAA  EC37  F006         	call	_PICC_ReadCardSerial	;wreg free
  1268  000CAE  D7F8               	goto	l5071
  1269  000CB0                     __end_of_main:
  1270                           	opt stack 0
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           postdec1	equ	0xFE5
  1278                           fsr1l	equ	0xFE1
  1279                           status	equ	0xFD8
  1280                           
  1281 ;; *************** function _UART_init *****************
  1282 ;; Defined at:
  1283 ;;		line 24 in file "UART.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;		None
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;		None
  1288 ;; Return value:  Size  Location     Type
  1289 ;;		None               void
  1290 ;; Registers used:
  1291 ;;		wreg, status,2
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1297 ;;      Params:         0       0       0       0       0       0       0
  1298 ;;      Locals:         0       0       0       0       0       0       0
  1299 ;;      Temps:          0       0       0       0       0       0       0
  1300 ;;      Totals:         0       0       0       0       0       0       0
  1301 ;;Total ram usage:        0 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    2
  1304 ;; This function calls:
  1305 ;;		Nothing
  1306 ;; This function is called by:
  1307 ;;		_main
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text1
  1312  000D34                     __ptext1:
  1313                           	opt stack 0
  1314  000D34                     _UART_init:
  1315                           	opt stack 28
  1316                           
  1317                           ;UART.c: 27: TRISBbits.TRISB1 = 1;
  1318                           
  1319                           ;incstack = 0
  1320  000D34  8293               	bsf	3987,1,c	;volatile
  1321                           
  1322                           ;UART.c: 28: TRISBbits.TRISB2 = 1;
  1323  000D36  8493               	bsf	3987,2,c	;volatile
  1324                           
  1325                           ;UART.c: 30: TXSTAbits.CSRC = 1;
  1326  000D38  8EAC               	bsf	4012,7,c	;volatile
  1327                           
  1328                           ;UART.c: 31: TXSTAbits.TXEN = 1;
  1329  000D3A  8AAC               	bsf	4012,5,c	;volatile
  1330                           
  1331                           ;UART.c: 32: TXSTAbits.SYNC = 0;
  1332  000D3C  98AC               	bcf	4012,4,c	;volatile
  1333                           
  1334                           ;UART.c: 35: RCSTAbits.SPEN = 1;
  1335  000D3E  8EAB               	bsf	4011,7,c	;volatile
  1336                           
  1337                           ;UART.c: 36: RCSTAbits.CREN = 1;
  1338  000D40  88AB               	bsf	4011,4,c	;volatile
  1339                           
  1340                           ;UART.c: 40: TXSTAbits.BRGH = 0;
  1341  000D42  94AC               	bcf	4012,2,c	;volatile
  1342                           
  1343                           ;UART.c: 41: SPBRG = 25;
  1344  000D44  0E19               	movlw	25
  1345  000D46  6EAF               	movwf	4015,c	;volatile
  1346  000D48  0012               	return	
  1347  000D4A                     __end_of_UART_init:
  1348                           	opt stack 0
  1349                           tblptru	equ	0xFF8
  1350                           tblptrh	equ	0xFF7
  1351                           tblptrl	equ	0xFF6
  1352                           tablat	equ	0xFF5
  1353                           postinc0	equ	0xFEE
  1354                           wreg	equ	0xFE8
  1355                           postdec1	equ	0xFE5
  1356                           fsr1l	equ	0xFE1
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function _SPI_init *****************
  1360 ;; Defined at:
  1361 ;;		line 32 in file "SPI.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  mode            1    wreg     unsigned char 
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  mode            1   14[COMRAM] unsigned char 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;		None               void
  1368 ;; Registers used:
  1369 ;;		wreg, status,2, status,0
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1375 ;;      Params:         0       0       0       0       0       0       0
  1376 ;;      Locals:         1       0       0       0       0       0       0
  1377 ;;      Temps:          0       0       0       0       0       0       0
  1378 ;;      Totals:         1       0       0       0       0       0       0
  1379 ;;Total ram usage:        1 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    2
  1382 ;; This function calls:
  1383 ;;		Nothing
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text2
  1390  000C4A                     __ptext2:
  1391                           	opt stack 0
  1392  000C4A                     _SPI_init:
  1393                           	opt stack 28
  1394                           
  1395                           ;incstack = 0
  1396                           ;SPI_init@mode stored from wreg
  1397  000C4A  6E0F               	movwf	SPI_init@mode,c
  1398                           
  1399                           ;SPI.c: 34: _mode = mode;
  1400  000C4C  C00F  F063         	movff	SPI_init@mode,__mode
  1401                           
  1402                           ;SPI.c: 35: TRISA &= ~(1<<7 | 1<<6);
  1403  000C50  0E3F               	movlw	63
  1404  000C52  1692               	andwf	3986,f,c	;volatile
  1405                           
  1406                           ;SPI.c: 36: TRISA |= (1<<5);
  1407  000C54  8A92               	bsf	3986,5,c	;volatile
  1408                           
  1409                           ;SPI.c: 37: if(mode == 2 || mode == 3)
  1410  000C56  500F               	movf	SPI_init@mode,w,c
  1411  000C58  0A02               	xorlw	2
  1412  000C5A  B4D8               	btfsc	status,2,c
  1413  000C5C  D004               	goto	l1835
  1414  000C5E  500F               	movf	SPI_init@mode,w,c
  1415  000C60  0A03               	xorlw	3
  1416  000C62  A4D8               	btfss	status,2,c
  1417  000C64  D002               	goto	l1837
  1418  000C66                     l1835:
  1419                           
  1420                           ;SPI.c: 38: PORTA |= (1<<7);
  1421  000C66  8E80               	bsf	3968,7,c	;volatile
  1422  000C68  D001               	goto	l80
  1423  000C6A                     l1837:
  1424                           
  1425                           ;SPI.c: 39: else
  1426                           ;SPI.c: 40: PORTA &= ~(1<<7);
  1427  000C6A  9E80               	bcf	3968,7,c	;volatile
  1428  000C6C                     l80:
  1429  000C6C  0012               	return	
  1430  000C6E                     __end_of_SPI_init:
  1431                           	opt stack 0
  1432                           tblptru	equ	0xFF8
  1433                           tblptrh	equ	0xFF7
  1434                           tblptrl	equ	0xFF6
  1435                           tablat	equ	0xFF5
  1436                           postinc0	equ	0xFEE
  1437                           wreg	equ	0xFE8
  1438                           postdec1	equ	0xFE5
  1439                           fsr1l	equ	0xFE1
  1440                           status	equ	0xFD8
  1441                           
  1442 ;; *************** function _RFID_init *****************
  1443 ;; Defined at:
  1444 ;;		line 37 in file "RFID.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;		None
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;		None
  1449 ;; Return value:  Size  Location     Type
  1450 ;;		None               void
  1451 ;; Registers used:
  1452 ;;		status,2, status,0
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1458 ;;      Params:         0       0       0       0       0       0       0
  1459 ;;      Locals:         0       0       0       0       0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0
  1461 ;;      Totals:         0       0       0       0       0       0       0
  1462 ;;Total ram usage:        0 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; Hardware stack levels required when called:    2
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_main
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text3
  1473  000D70                     __ptext3:
  1474                           	opt stack 0
  1475  000D70                     _RFID_init:
  1476                           	opt stack 28
  1477                           
  1478                           ;RFID.c: 39: TRISA&=~(1<<4);
  1479                           
  1480                           ;incstack = 0
  1481  000D70  9892               	bcf	3986,4,c	;volatile
  1482                           
  1483                           ;RFID.c: 40: PORTA|=(1<<4) ;
  1484  000D72  8880               	bsf	3968,4,c	;volatile
  1485                           
  1486                           ;RFID.c: 43: TRISA&=~(1<<3);
  1487  000D74  9692               	bcf	3986,3,c	;volatile
  1488                           
  1489                           ;RFID.c: 44: PORTA&=~(1<<3) ;
  1490  000D76  9680               	bcf	3968,3,c	;volatile
  1491  000D78  0012               	return	
  1492  000D7A                     __end_of_RFID_init:
  1493                           	opt stack 0
  1494                           tblptru	equ	0xFF8
  1495                           tblptrh	equ	0xFF7
  1496                           tblptrl	equ	0xFF6
  1497                           tablat	equ	0xFF5
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           postdec1	equ	0xFE5
  1501                           fsr1l	equ	0xFE1
  1502                           status	equ	0xFD8
  1503                           
  1504 ;; *************** function _PICC_ReadCardSerial *****************
  1505 ;; Defined at:
  1506 ;;		line 1746 in file "RFID.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;		None
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  result          1   78[COMRAM] unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      unsigned char 
  1513 ;; Registers used:
  1514 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1520 ;;      Params:         0       0       0       0       0       0       0
  1521 ;;      Locals:         1       0       0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0       0       0
  1523 ;;      Totals:         1       0       0       0       0       0       0
  1524 ;;Total ram usage:        1 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    9
  1527 ;; This function calls:
  1528 ;;		_PICC_Select
  1529 ;; This function is called by:
  1530 ;;		_main
  1531 ;;		_MIFARE_SetUid
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text4
  1536  000C6E                     __ptext4:
  1537                           	opt stack 0
  1538  000C6E                     _PICC_ReadCardSerial:
  1539                           	opt stack 21
  1540                           
  1541                           ;RFID.c: 1747: unsigned char result = PICC_Select(&uid,0);
  1542                           
  1543                           ;incstack = 0
  1544  000C6E  0100               	movlb	0	; () banked
  1545  000C70  0E00               	movlw	high _uid
  1546  000C72  6E4B               	movwf	PICC_Select@uid+1,c
  1547  000C74  0100               	movlb	0	; () banked
  1548  000C76  0EB3               	movlw	low _uid
  1549  000C78  6E4A               	movwf	PICC_Select@uid,c
  1550  000C7A  0E00               	movlw	0
  1551  000C7C  6E4C               	movwf	PICC_Select@validBits,c
  1552  000C7E  EC0E  F000         	call	_PICC_Select	;wreg free
  1553  000C82  6E4F               	movwf	PICC_ReadCardSerial@result,c
  1554                           
  1555                           ;RFID.c: 1748: return (result == STATUS_OK);
  1556  000C84  044F               	decf	PICC_ReadCardSerial@result,w,c
  1557  000C86  A4D8               	btfss	status,2,c
  1558  000C88  D002               	goto	u4710
  1559  000C8A  0E01               	movlw	1
  1560  000C8C  D001               	goto	l533
  1561  000C8E                     u4710:
  1562  000C8E  0E00               	movlw	0
  1563  000C90                     l533:
  1564  000C90  0012               	return	
  1565  000C92                     __end_of_PICC_ReadCardSerial:
  1566                           	opt stack 0
  1567                           tblptru	equ	0xFF8
  1568                           tblptrh	equ	0xFF7
  1569                           tblptrl	equ	0xFF6
  1570                           tablat	equ	0xFF5
  1571                           postinc0	equ	0xFEE
  1572                           wreg	equ	0xFE8
  1573                           postdec1	equ	0xFE5
  1574                           fsr1l	equ	0xFE1
  1575                           status	equ	0xFD8
  1576                           
  1577 ;; *************** function _PICC_Select *****************
  1578 ;; Defined at:
  1579 ;;		line 551 in file "RFID.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;  uid             2   73[COMRAM] PTR struct .
  1582 ;;		 -> uid(12), 
  1583 ;;  validBits       1   75[COMRAM] unsigned char 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  collisionPos    1   23[BANK0 ] unsigned char 
  1586 ;;  maxbytes        1   12[BANK0 ] unsigned char 
  1587 ;;  bytesToCopy     1   26[BANK0 ] unsigned char 
  1588 ;;  buffer          9   14[BANK0 ] unsigned char [9]
  1589 ;;  responseBuff    2   28[BANK0 ] PTR unsigned char 
  1590 ;;		 -> PICC_Select@buffer(9), 
  1591 ;;  currentLevel    1   34[BANK0 ] unsigned char 
  1592 ;;  result          1   33[BANK0 ] unsigned char 
  1593 ;;  index           1   32[BANK0 ] unsigned char 
  1594 ;;  count           1   31[BANK0 ] unsigned char 
  1595 ;;  txLastBits      1   30[BANK0 ] unsigned char 
  1596 ;;  responseLeng    1   27[BANK0 ] unsigned char 
  1597 ;;  uidIndex        1   25[BANK0 ] unsigned char 
  1598 ;;  useCascadeTa    1   24[BANK0 ] unsigned char 
  1599 ;;  cascadeLevel    1   13[BANK0 ] unsigned char 
  1600 ;;  rxAlign         1   11[BANK0 ] unsigned char 
  1601 ;;  bufferUsed      1    8[BANK0 ] unsigned char 
  1602 ;;  selectDone      1    7[BANK0 ] unsigned char 
  1603 ;;  uidComplete     1    6[BANK0 ] unsigned char 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      unsigned char 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1613 ;;      Params:         3       0       0       0       0       0       0
  1614 ;;      Locals:         0      35       0       0       0       0       0
  1615 ;;      Temps:          2       0       0       0       0       0       0
  1616 ;;      Totals:         5      35       0       0       0       0       0
  1617 ;;Total ram usage:       40 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    8
  1620 ;; This function calls:
  1621 ;;		_PCD_CalculateCRC
  1622 ;;		_PCD_ClearRegisterBitMask
  1623 ;;		_PCD_ReadRegister
  1624 ;;		_PCD_TransceiveData
  1625 ;;		_PCD_WriteRegister
  1626 ;;		___awdiv
  1627 ;; This function is called by:
  1628 ;;		_PICC_ReadCardSerial
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text5
  1633  00001C                     __ptext5:
  1634                           	opt stack 0
  1635  00001C                     _PICC_Select:
  1636                           	opt stack 21
  1637                           
  1638                           ;RFID.c: 554: unsigned char uidComplete;
  1639                           ;RFID.c: 555: unsigned char selectDone;
  1640                           ;RFID.c: 556: unsigned char useCascadeTag;
  1641                           ;RFID.c: 557: unsigned char cascadeLevel = 1;
  1642                           
  1643                           ;incstack = 0
  1644  00001C  0E01               	movlw	1
  1645  00001E  0100               	movlb	0	; () banked
  1646  000020  6F8D               	movwf	PICC_Select@cascadeLevel& (0+255),b
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;RFID.c: 558: unsigned char result;
  1650                           ;RFID.c: 559: unsigned char count;
  1651                           ;RFID.c: 560: unsigned char index;
  1652                           ;RFID.c: 561: unsigned char uidIndex;
  1653                           ;RFID.c: 562: char currentLevelKnownBits;
  1654                           ;RFID.c: 563: unsigned char buffer[9];
  1655                           ;RFID.c: 564: unsigned char bufferUsed;
  1656                           ;RFID.c: 565: unsigned char rxAlign;
  1657                           ;RFID.c: 566: unsigned char txLastBits;
  1658                           ;RFID.c: 567: unsigned char *responseBuffer;
  1659                           ;RFID.c: 568: unsigned char responseLength;
  1660                           ;RFID.c: 593: if (validBits > 80) {
  1661  000022  0E50               	movlw	80
  1662  000024  644C               	cpfsgt	PICC_Select@validBits,c
  1663  000026  D002               	goto	l4207
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;RFID.c: 594: return STATUS_INVALID;
  1667  000028  0E07               	movlw	7
  1668  00002A  D2AC               	goto	l217
  1669  00002C                     l4207:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;RFID.c: 595: }
  1673                           ;RFID.c: 598: PCD_ClearRegisterBitMask(CollReg, 0x80);
  1674  00002C  0E80               	movlw	128
  1675  00002E  6E17               	movwf	PCD_ClearRegisterBitMask@mask,c
  1676  000030  0E1C               	movlw	28
  1677  000032  EC75  F006         	call	_PCD_ClearRegisterBitMask
  1678                           
  1679                           ;RFID.c: 601: uidComplete = 0;
  1680  000036  0E00               	movlw	0
  1681  000038  0100               	movlb	0	; () banked
  1682  00003A  6F86               	movwf	PICC_Select@uidComplete& (0+255),b
  1683                           
  1684                           ;RFID.c: 602: while ( ! uidComplete) {
  1685  00003C  D295               	goto	l4419
  1686  00003E                     l4211:
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;RFID.c: 606: buffer[0] = PICC_CMD_SEL_CL1;
  1690  00003E  0E93               	movlw	147
  1691  000040  0100               	movlb	0	; () banked
  1692  000042  6F8E               	movwf	PICC_Select@buffer& (0+255),b
  1693                           
  1694                           ;RFID.c: 607: uidIndex = 0;
  1695  000044  0E00               	movlw	0
  1696  000046  0100               	movlb	0	; () banked
  1697  000048  6F99               	movwf	PICC_Select@uidIndex& (0+255),b
  1698                           
  1699                           ;RFID.c: 608: useCascadeTag = validBits && uid->size > 4;
  1700  00004A  0E00               	movlw	0
  1701  00004C  0100               	movlb	0	; () banked
  1702  00004E  6F89               	movwf	_PICC_Select$545& (0+255),b
  1703  000050  504C               	movf	PICC_Select@validBits,w,c
  1704  000052  B4D8               	btfsc	status,2,c
  1705  000054  D00A               	goto	l4217
  1706                           
  1707                           ; BSR set to: 0
  1708  000056  C04A  FFD9         	movff	PICC_Select@uid,fsr2l
  1709  00005A  C04B  FFDA         	movff	PICC_Select@uid+1,fsr2h
  1710  00005E  0E04               	movlw	4
  1711  000060  64DF               	cpfsgt	indf2,c
  1712  000062  D003               	goto	l4217
  1713                           
  1714                           ; BSR set to: 0
  1715  000064  0E01               	movlw	1
  1716  000066  0100               	movlb	0	; () banked
  1717  000068  6F89               	movwf	_PICC_Select$545& (0+255),b
  1718  00006A                     l4217:
  1719                           
  1720                           ; BSR set to: 0
  1721  00006A  C089  F098         	movff	_PICC_Select$545,PICC_Select@useCascadeTag
  1722                           
  1723                           ;RFID.c: 609: break;
  1724  00006E  D02F               	goto	l4239
  1725  000070                     l4219:
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;RFID.c: 612: buffer[0] = PICC_CMD_SEL_CL2;
  1729  000070  0E95               	movlw	149
  1730  000072  0100               	movlb	0	; () banked
  1731  000074  6F8E               	movwf	PICC_Select@buffer& (0+255),b
  1732                           
  1733                           ;RFID.c: 613: uidIndex = 3;
  1734  000076  0E03               	movlw	3
  1735  000078  0100               	movlb	0	; () banked
  1736  00007A  6F99               	movwf	PICC_Select@uidIndex& (0+255),b
  1737                           
  1738                           ;RFID.c: 614: useCascadeTag = validBits && uid->size > 7;
  1739  00007C  0E00               	movlw	0
  1740  00007E  0100               	movlb	0	; () banked
  1741  000080  6F8A               	movwf	_PICC_Select$546& (0+255),b
  1742  000082  504C               	movf	PICC_Select@validBits,w,c
  1743  000084  B4D8               	btfsc	status,2,c
  1744  000086  D00A               	goto	l4225
  1745                           
  1746                           ; BSR set to: 0
  1747  000088  C04A  FFD9         	movff	PICC_Select@uid,fsr2l
  1748  00008C  C04B  FFDA         	movff	PICC_Select@uid+1,fsr2h
  1749  000090  0E07               	movlw	7
  1750  000092  64DF               	cpfsgt	indf2,c
  1751  000094  D003               	goto	l4225
  1752                           
  1753                           ; BSR set to: 0
  1754  000096  0E01               	movlw	1
  1755  000098  0100               	movlb	0	; () banked
  1756  00009A  6F8A               	movwf	_PICC_Select$546& (0+255),b
  1757  00009C                     l4225:
  1758                           
  1759                           ; BSR set to: 0
  1760  00009C  C08A  F098         	movff	_PICC_Select$546,PICC_Select@useCascadeTag
  1761                           
  1762                           ;RFID.c: 615: break;
  1763  0000A0  D016               	goto	l4239
  1764  0000A2                     l4227:
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;RFID.c: 618: buffer[0] = PICC_CMD_SEL_CL3;
  1768  0000A2  0E97               	movlw	151
  1769  0000A4  0100               	movlb	0	; () banked
  1770  0000A6  6F8E               	movwf	PICC_Select@buffer& (0+255),b
  1771                           
  1772                           ;RFID.c: 619: uidIndex = 6;
  1773  0000A8  0E06               	movlw	6
  1774  0000AA  0100               	movlb	0	; () banked
  1775  0000AC  6F99               	movwf	PICC_Select@uidIndex& (0+255),b
  1776                           
  1777                           ;RFID.c: 620: useCascadeTag = 0;
  1778  0000AE  0E00               	movlw	0
  1779  0000B0  0100               	movlb	0	; () banked
  1780  0000B2  6F98               	movwf	PICC_Select@useCascadeTag& (0+255),b
  1781                           
  1782                           ;RFID.c: 621: break;
  1783  0000B4  D00C               	goto	l4239
  1784  0000B6                     l4237:
  1785                           
  1786                           ; BSR set to: 0
  1787  0000B6  0100               	movlb	0	; () banked
  1788  0000B8  518D               	movf	PICC_Select@cascadeLevel& (0+255),w,b
  1789                           
  1790                           ; Switch size 1, requested type "space"
  1791                           ; Number of cases is 3, Range of values is 1 to 3
  1792                           ; switch strategies available:
  1793                           ; Name         Instructions Cycles
  1794                           ; simple_byte           10     6 (average)
  1795                           ;	Chosen strategy is simple_byte
  1796  0000BA  0A01               	xorlw	1	; case 1
  1797  0000BC  B4D8               	btfsc	status,2,c
  1798  0000BE  D7BF               	goto	l4211
  1799  0000C0  0A03               	xorlw	3	; case 2
  1800  0000C2  B4D8               	btfsc	status,2,c
  1801  0000C4  D7D5               	goto	l4219
  1802  0000C6  0A01               	xorlw	1	; case 3
  1803  0000C8  B4D8               	btfsc	status,2,c
  1804  0000CA  D7EB               	goto	l4227
  1805  0000CC  D151               	goto	u4250
  1806  0000CE                     l4239:
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;RFID.c: 629: currentLevelKnownBits = validBits - (8 * uidIndex);
  1810  0000CE  0100               	movlb	0	; () banked
  1811  0000D0  5199               	movf	PICC_Select@uidIndex& (0+255),w,b
  1812  0000D2  0D08               	mullw	8
  1813  0000D4  50F3               	movf	prodl,w,c
  1814  0000D6  0800               	sublw	0
  1815  0000D8  244C               	addwf	PICC_Select@validBits,w,c
  1816  0000DA  0100               	movlb	0	; () banked
  1817  0000DC  6FA2               	movwf	PICC_Select@currentLevelKnownBits& (0+255),b
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;RFID.c: 630: if (currentLevelKnownBits <= 1 ) {
  1821  0000DE  0E02               	movlw	2
  1822  0000E0  0100               	movlb	0	; () banked
  1823  0000E2  5DA2               	subwf	PICC_Select@currentLevelKnownBits& (0+255),w,b
  1824  0000E4  B0D8               	btfsc	status,0,c
  1825  0000E6  D003               	goto	l230
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;RFID.c: 631: currentLevelKnownBits = 0;
  1829  0000E8  0E00               	movlw	0
  1830  0000EA  0100               	movlb	0	; () banked
  1831  0000EC  6FA2               	movwf	PICC_Select@currentLevelKnownBits& (0+255),b
  1832  0000EE                     l230:
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;RFID.c: 632: }
  1836                           ;RFID.c: 634: index = 2;
  1837  0000EE  0E02               	movlw	2
  1838  0000F0  0100               	movlb	0	; () banked
  1839  0000F2  6FA0               	movwf	PICC_Select@index& (0+255),b
  1840                           
  1841                           ;RFID.c: 635: if (useCascadeTag) {
  1842  0000F4  0100               	movlb	0	; () banked
  1843  0000F6  5198               	movf	PICC_Select@useCascadeTag& (0+255),w,b
  1844  0000F8  B4D8               	btfsc	status,2,c
  1845  0000FA  D00F               	goto	l4249
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;RFID.c: 636: buffer[index++] = PICC_CMD_CT;
  1849  0000FC  0100               	movlb	0	; () banked
  1850  0000FE  51A0               	movf	PICC_Select@index& (0+255),w,b
  1851  000100  0D01               	mullw	1
  1852  000102  0100               	movlb	0	; () banked
  1853  000104  0E8E               	movlw	low PICC_Select@buffer
  1854  000106  24F3               	addwf	prodl,w,c
  1855  000108  6ED9               	movwf	fsr2l,c
  1856  00010A  0100               	movlb	0	; () banked
  1857  00010C  0E00               	movlw	high PICC_Select@buffer
  1858  00010E  20F4               	addwfc	prodh,w,c
  1859  000110  6EDA               	movwf	fsr2h,c
  1860  000112  0E88               	movlw	136
  1861  000114  6EDF               	movwf	indf2,c
  1862                           
  1863                           ; BSR set to: 0
  1864  000116  0100               	movlb	0	; () banked
  1865  000118  2BA0               	incf	PICC_Select@index& (0+255),f,b
  1866  00011A                     l4249:
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;RFID.c: 637: }
  1870                           ;RFID.c: 638: unsigned char bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnown
      +                          Bits % 8 ? 1 : 0);
  1871  00011A  C0A2  F04D         	movff	PICC_Select@currentLevelKnownBits,??_PICC_Select
  1872  00011E  0E07               	movlw	7
  1873  000120  164D               	andwf	??_PICC_Select,f,c
  1874  000122  B4D8               	btfsc	status,2,c
  1875  000124  D002               	goto	u4140
  1876  000126  0E01               	movlw	1
  1877  000128  D001               	goto	u4146
  1878  00012A                     u4140:
  1879  00012A  0E00               	movlw	0
  1880  00012C                     u4146:
  1881  00012C  6E4E               	movwf	(??_PICC_Select+1)& (0+255),c
  1882  00012E  0100               	movlb	0	; () banked
  1883  000130  C0A2  F00F         	movff	PICC_Select@currentLevelKnownBits,___awdiv@dividend
  1884  000134  6A10               	clrf	___awdiv@dividend+1,c
  1885  000136  0E00               	movlw	0
  1886  000138  6E12               	movwf	___awdiv@divisor+1,c
  1887  00013A  0E08               	movlw	8
  1888  00013C  6E11               	movwf	___awdiv@divisor,c
  1889  00013E  EC90  F004         	call	___awdiv	;wreg free
  1890  000142  500F               	movf	?___awdiv,w,c
  1891  000144  244E               	addwf	??_PICC_Select+1,w,c
  1892  000146  0100               	movlb	0	; () banked
  1893  000148  6F9A               	movwf	PICC_Select@bytesToCopy& (0+255),b
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;RFID.c: 639: if (bytesToCopy) {
  1897  00014A  0100               	movlb	0	; () banked
  1898  00014C  519A               	movf	PICC_Select@bytesToCopy& (0+255),w,b
  1899  00014E  B4D8               	btfsc	status,2,c
  1900  000150  D045               	goto	l4275
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;RFID.c: 640: unsigned char maxbytes = useCascadeTag ? 3 : 4;
  1904  000152  0100               	movlb	0	; () banked
  1905  000154  6798               	tstfsz	PICC_Select@useCascadeTag& (0+255),b
  1906  000156  D005               	goto	l4257
  1907                           
  1908                           ; BSR set to: 0
  1909  000158  0E00               	movlw	0
  1910  00015A  0100               	movlb	0	; () banked
  1911  00015C  6F81               	movwf	(_PICC_Select$549+1)& (0+255),b
  1912  00015E  0E04               	movlw	4
  1913  000160  D004               	goto	L1
  1914  000162                     l4257:
  1915                           
  1916                           ; BSR set to: 0
  1917  000162  0E00               	movlw	0
  1918  000164  0100               	movlb	0	; () banked
  1919  000166  6F81               	movwf	(_PICC_Select$549+1)& (0+255),b
  1920  000168  0E03               	movlw	3
  1921  00016A                     L1:
  1922  00016A  0100               	movlb	0	; () banked
  1923  00016C  6F80               	movwf	_PICC_Select$549& (0+255),b
  1924                           
  1925                           ; BSR set to: 0
  1926                           
  1927                           ; BSR set to: 0
  1928  00016E  C080  F08C         	movff	_PICC_Select$549,PICC_Select@maxbytes
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;RFID.c: 641: if (bytesToCopy > maxbytes) {
  1932  000172  0100               	movlb	0	; () banked
  1933  000174  519A               	movf	PICC_Select@bytesToCopy& (0+255),w,b
  1934  000176  0100               	movlb	0	; () banked
  1935  000178  5D8C               	subwf	PICC_Select@maxbytes& (0+255),w,b
  1936  00017A  A0D8               	btfss	status,0,c
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;RFID.c: 642: bytesToCopy = maxbytes;
  1940  00017C  C08C  F09A         	movff	PICC_Select@maxbytes,PICC_Select@bytesToCopy
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;RFID.c: 643: }
  1944                           ;RFID.c: 644: for (count = 0; count < bytesToCopy; count++) {
  1945                           
  1946                           ; BSR set to: 0
  1947  000180  0E00               	movlw	0
  1948  000182  0100               	movlb	0	; () banked
  1949  000184  6F9F               	movwf	PICC_Select@count& (0+255),b
  1950  000186  D024               	goto	l4273
  1951  000188                     l4267:
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;RFID.c: 645: buffer[index++] = uid->uidByte[uidIndex + count];
  1955  000188  0100               	movlb	0	; () banked
  1956  00018A  519F               	movf	PICC_Select@count& (0+255),w,b
  1957  00018C  0100               	movlb	0	; () banked
  1958  00018E  C099  F04D         	movff	PICC_Select@uidIndex,??_PICC_Select
  1959  000192  6A4E               	clrf	(??_PICC_Select+1)& (0+255),c
  1960  000194  264D               	addwf	??_PICC_Select,f,c
  1961  000196  0E00               	movlw	0
  1962  000198  224E               	addwfc	??_PICC_Select+1,f,c
  1963  00019A  0E01               	movlw	1
  1964  00019C  264D               	addwf	??_PICC_Select,f,c
  1965  00019E  0E00               	movlw	0
  1966  0001A0  224E               	addwfc	??_PICC_Select+1,f,c
  1967  0001A2  504D               	movf	??_PICC_Select,w,c
  1968  0001A4  244A               	addwf	PICC_Select@uid,w,c
  1969  0001A6  6ED9               	movwf	fsr2l,c
  1970  0001A8  504E               	movf	??_PICC_Select+1,w,c
  1971  0001AA  204B               	addwfc	PICC_Select@uid+1,w,c
  1972  0001AC  6EDA               	movwf	fsr2h,c
  1973  0001AE  0100               	movlb	0	; () banked
  1974  0001B0  51A0               	movf	PICC_Select@index& (0+255),w,b
  1975  0001B2  0D01               	mullw	1
  1976  0001B4  0100               	movlb	0	; () banked
  1977  0001B6  0E8E               	movlw	low PICC_Select@buffer
  1978  0001B8  24F3               	addwf	prodl,w,c
  1979  0001BA  6EE1               	movwf	fsr1l,c
  1980  0001BC  0100               	movlb	0	; () banked
  1981  0001BE  0E00               	movlw	high PICC_Select@buffer
  1982  0001C0  20F4               	addwfc	prodh,w,c
  1983  0001C2  6EE2               	movwf	fsr1h,c
  1984  0001C4  CFDF FFE7          	movff	indf2,indf1
  1985                           
  1986                           ; BSR set to: 0
  1987  0001C8  0100               	movlb	0	; () banked
  1988  0001CA  2BA0               	incf	PICC_Select@index& (0+255),f,b
  1989                           
  1990                           ; BSR set to: 0
  1991  0001CC  0100               	movlb	0	; () banked
  1992  0001CE  2B9F               	incf	PICC_Select@count& (0+255),f,b
  1993  0001D0                     l4273:
  1994                           
  1995                           ; BSR set to: 0
  1996  0001D0  0100               	movlb	0	; () banked
  1997  0001D2  519A               	movf	PICC_Select@bytesToCopy& (0+255),w,b
  1998  0001D4  0100               	movlb	0	; () banked
  1999  0001D6  5D9F               	subwf	PICC_Select@count& (0+255),w,b
  2000  0001D8  A0D8               	btfss	status,0,c
  2001  0001DA  D7D6               	goto	l4267
  2002  0001DC                     l4275:
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;RFID.c: 646: }
  2006                           ;RFID.c: 647: }
  2007                           ;RFID.c: 649: if (useCascadeTag) {
  2008  0001DC  0100               	movlb	0	; () banked
  2009  0001DE  5198               	movf	PICC_Select@useCascadeTag& (0+255),w,b
  2010  0001E0  B4D8               	btfsc	status,2,c
  2011  0001E2  D003               	goto	l4279
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;RFID.c: 650: currentLevelKnownBits += 8;
  2015  0001E4  0E08               	movlw	8
  2016  0001E6  0100               	movlb	0	; () banked
  2017  0001E8  27A2               	addwf	PICC_Select@currentLevelKnownBits& (0+255),f,b
  2018  0001EA                     l4279:
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;RFID.c: 651: }
  2022                           ;RFID.c: 654: selectDone = 0;
  2023  0001EA  0E00               	movlw	0
  2024  0001EC  D102               	goto	L2
  2025  0001EE                     l4281:
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;RFID.c: 657: if (currentLevelKnownBits >= 32) {
  2029  0001EE  0E1F               	movlw	31
  2030  0001F0  0100               	movlb	0	; () banked
  2031  0001F2  65A2               	cpfsgt	PICC_Select@currentLevelKnownBits& (0+255),b
  2032  0001F4  D033               	goto	l4301
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;RFID.c: 659: buffer[1] = 0x70;
  2036  0001F6  0E70               	movlw	112
  2037  0001F8  0100               	movlb	0	; () banked
  2038  0001FA  6F8F               	movwf	(PICC_Select@buffer+1)& (0+255),b
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;RFID.c: 661: buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
  2042  0001FC  0100               	movlb	0	; () banked
  2043  0001FE  5190               	movf	(PICC_Select@buffer+2)& (0+255),w,b
  2044  000200  0100               	movlb	0	; () banked
  2045  000202  1991               	xorwf	(PICC_Select@buffer+3)& (0+255),w,b
  2046  000204  0100               	movlb	0	; () banked
  2047  000206  1992               	xorwf	(PICC_Select@buffer+4)& (0+255),w,b
  2048  000208  0100               	movlb	0	; () banked
  2049  00020A  1993               	xorwf	(PICC_Select@buffer+5)& (0+255),w,b
  2050  00020C  0100               	movlb	0	; () banked
  2051  00020E  6F94               	movwf	(PICC_Select@buffer+6)& (0+255),b
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;RFID.c: 663: result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
  2055  000210  0100               	movlb	0	; () banked
  2056  000212  0E00               	movlw	high PICC_Select@buffer
  2057  000214  6E1B               	movwf	PCD_CalculateCRC@data+1,c
  2058  000216  0100               	movlb	0	; () banked
  2059  000218  0E8E               	movlw	low PICC_Select@buffer
  2060  00021A  6E1A               	movwf	PCD_CalculateCRC@data,c
  2061  00021C  0E07               	movlw	7
  2062  00021E  6E1C               	movwf	PCD_CalculateCRC@length,c
  2063  000220  0100               	movlb	0	; () banked
  2064  000222  0E00               	movlw	high (PICC_Select@buffer+7)
  2065  000224  6E1E               	movwf	PCD_CalculateCRC@result+1,c
  2066  000226  0100               	movlb	0	; () banked
  2067  000228  0E95               	movlw	low (PICC_Select@buffer+7)
  2068  00022A  6E1D               	movwf	PCD_CalculateCRC@result,c
  2069  00022C  ECE2  F004         	call	_PCD_CalculateCRC	;wreg free
  2070  000230  0100               	movlb	0	; () banked
  2071  000232  6FA1               	movwf	PICC_Select@result& (0+255),b
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;RFID.c: 664: if (result != STATUS_OK) {
  2075  000234  0100               	movlb	0	; () banked
  2076  000236  05A1               	decf	PICC_Select@result& (0+255),w,b
  2077  000238  A4D8               	btfss	status,2,c
  2078  00023A  D158               	goto	u4350
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;RFID.c: 666: }
  2082                           ;RFID.c: 667: txLastBits = 0;
  2083                           
  2084                           ; BSR set to: 0
  2085                           
  2086                           ; BSR set to: 0
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;RFID.c: 665: return result;
  2090  00023C  0E00               	movlw	0
  2091  00023E  0100               	movlb	0	; () banked
  2092  000240  6F9E               	movwf	PICC_Select@txLastBits& (0+255),b
  2093                           
  2094                           ;RFID.c: 668: bufferUsed = 9;
  2095  000242  0E09               	movlw	9
  2096  000244  0100               	movlb	0	; () banked
  2097  000246  6F88               	movwf	PICC_Select@bufferUsed& (0+255),b
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;RFID.c: 670: responseBuffer = &buffer[6];
  2101  000248  0100               	movlb	0	; () banked
  2102  00024A  0E00               	movlw	high (PICC_Select@buffer+6)
  2103  00024C  0100               	movlb	0	; () banked
  2104  00024E  6F9D               	movwf	(PICC_Select@responseBuffer+1)& (0+255),b
  2105  000250  0100               	movlb	0	; () banked
  2106  000252  0E94               	movlw	low (PICC_Select@buffer+6)
  2107  000254  0100               	movlb	0	; () banked
  2108  000256  6F9C               	movwf	PICC_Select@responseBuffer& (0+255),b
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;RFID.c: 671: responseLength = 3;
  2112  000258  0E03               	movlw	3
  2113  00025A  D03B               	goto	L3
  2114  00025C                     l4301:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;RFID.c: 673: else {
  2118                           ;RFID.c: 675: txLastBits = currentLevelKnownBits % 8;
  2119  00025C  0100               	movlb	0	; () banked
  2120  00025E  51A2               	movf	PICC_Select@currentLevelKnownBits& (0+255),w,b
  2121  000260  0B07               	andlw	7
  2122  000262  0100               	movlb	0	; () banked
  2123  000264  6F9E               	movwf	PICC_Select@txLastBits& (0+255),b
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;RFID.c: 676: count = currentLevelKnownBits / 8;
  2127  000266  0100               	movlb	0	; () banked
  2128  000268  C0A2  F00F         	movff	PICC_Select@currentLevelKnownBits,___awdiv@dividend
  2129  00026C  6A10               	clrf	___awdiv@dividend+1,c
  2130  00026E  0E00               	movlw	0
  2131  000270  6E12               	movwf	___awdiv@divisor+1,c
  2132  000272  0E08               	movlw	8
  2133  000274  6E11               	movwf	___awdiv@divisor,c
  2134  000276  EC90  F004         	call	___awdiv	;wreg free
  2135  00027A  500F               	movf	?___awdiv,w,c
  2136  00027C  0100               	movlb	0	; () banked
  2137  00027E  6F9F               	movwf	PICC_Select@count& (0+255),b
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;RFID.c: 677: index = 2 + count;
  2141  000280  0100               	movlb	0	; () banked
  2142  000282  519F               	movf	PICC_Select@count& (0+255),w,b
  2143  000284  0F02               	addlw	2
  2144  000286  0100               	movlb	0	; () banked
  2145  000288  6FA0               	movwf	PICC_Select@index& (0+255),b
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;RFID.c: 678: buffer[1] = (index << 4) + txLastBits;
  2149  00028A  0100               	movlb	0	; () banked
  2150  00028C  39A0               	swapf	PICC_Select@index& (0+255),w,b
  2151  00028E  0BF0               	andlw	240
  2152  000290  0100               	movlb	0	; () banked
  2153  000292  259E               	addwf	PICC_Select@txLastBits& (0+255),w,b
  2154  000294  0100               	movlb	0	; () banked
  2155  000296  6F8F               	movwf	(PICC_Select@buffer+1)& (0+255),b
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;RFID.c: 679: bufferUsed = index + (txLastBits ? 1 : 0);
  2159  000298  0E00               	movlw	0
  2160  00029A  6AF3               	clrf	prodl,c
  2161  00029C  0100               	movlb	0	; () banked
  2162  00029E  639E               	cpfseq	PICC_Select@txLastBits& (0+255),b
  2163  0002A0  2AF3               	incf	prodl,f,c
  2164  0002A2  CFF3 F04D          	movff	prodl,??_PICC_Select
  2165  0002A6  504D               	movf	??_PICC_Select,w,c
  2166  0002A8  0100               	movlb	0	; () banked
  2167  0002AA  25A0               	addwf	PICC_Select@index& (0+255),w,b
  2168  0002AC  0100               	movlb	0	; () banked
  2169  0002AE  6F88               	movwf	PICC_Select@bufferUsed& (0+255),b
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;RFID.c: 681: responseBuffer = &buffer[index];
  2173  0002B0  0100               	movlb	0	; () banked
  2174  0002B2  51A0               	movf	PICC_Select@index& (0+255),w,b
  2175  0002B4  0D01               	mullw	1
  2176  0002B6  0100               	movlb	0	; () banked
  2177  0002B8  0E8E               	movlw	low PICC_Select@buffer
  2178  0002BA  24F3               	addwf	prodl,w,c
  2179  0002BC  0100               	movlb	0	; () banked
  2180  0002BE  6F9C               	movwf	PICC_Select@responseBuffer& (0+255),b
  2181  0002C0  0100               	movlb	0	; () banked
  2182  0002C2  0E00               	movlw	high PICC_Select@buffer
  2183  0002C4  20F4               	addwfc	prodh,w,c
  2184  0002C6  0100               	movlb	0	; () banked
  2185  0002C8  6F9D               	movwf	(PICC_Select@responseBuffer+1)& (0+255),b
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;RFID.c: 682: responseLength = sizeof(buffer) - index;
  2189  0002CA  0100               	movlb	0	; () banked
  2190  0002CC  51A0               	movf	PICC_Select@index& (0+255),w,b
  2191  0002CE  0800               	sublw	0
  2192  0002D0  0F09               	addlw	9
  2193  0002D2                     L3:
  2194  0002D2  0100               	movlb	0	; () banked
  2195  0002D4  6F9B               	movwf	PICC_Select@responseLength& (0+255),b
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;RFID.c: 683: }
  2199                           ;RFID.c: 686: rxAlign = txLastBits;
  2200                           
  2201                           ; BSR set to: 0
  2202  0002D6  C09E  F08B         	movff	PICC_Select@txLastBits,PICC_Select@rxAlign
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;RFID.c: 687: PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);
  2206  0002DA  0100               	movlb	0	; () banked
  2207  0002DC  398B               	swapf	PICC_Select@rxAlign& (0+255),w,b
  2208  0002DE  0BF0               	andlw	240
  2209  0002E0  0100               	movlb	0	; () banked
  2210  0002E2  259E               	addwf	PICC_Select@txLastBits& (0+255),w,b
  2211  0002E4  6E15               	movwf	PCD_WriteRegister@value,c
  2212  0002E6  0E1A               	movlw	26
  2213  0002E8  ECA5  F006         	call	_PCD_WriteRegister
  2214                           
  2215                           ;RFID.c: 690: result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseL
      +                          ength, &txLastBits, rxAlign,0);
  2216  0002EC  0100               	movlb	0	; () banked
  2217  0002EE  0E00               	movlw	high PICC_Select@buffer
  2218  0002F0  6E3F               	movwf	PCD_TransceiveData@sendData+1,c
  2219  0002F2  0100               	movlb	0	; () banked
  2220  0002F4  0E8E               	movlw	low PICC_Select@buffer
  2221  0002F6  6E3E               	movwf	PCD_TransceiveData@sendData,c
  2222  0002F8  C088  F040         	movff	PICC_Select@bufferUsed,PCD_TransceiveData@sendLen
  2223  0002FC  0100               	movlb	0	; () banked
  2224  0002FE  C09D  F042         	movff	PICC_Select@responseBuffer+1,PCD_TransceiveData@backData+1
  2225  000302  0100               	movlb	0	; () banked
  2226  000304  C09C  F041         	movff	PICC_Select@responseBuffer,PCD_TransceiveData@backData
  2227  000308  0100               	movlb	0	; () banked
  2228  00030A  0E00               	movlw	high PICC_Select@responseLength
  2229  00030C  6E44               	movwf	PCD_TransceiveData@backLen+1,c
  2230  00030E  0100               	movlb	0	; () banked
  2231  000310  0E9B               	movlw	low PICC_Select@responseLength
  2232  000312  6E43               	movwf	PCD_TransceiveData@backLen,c
  2233  000314  0100               	movlb	0	; () banked
  2234  000316  0E00               	movlw	high PICC_Select@txLastBits
  2235  000318  6E46               	movwf	PCD_TransceiveData@validBits+1,c
  2236  00031A  0100               	movlb	0	; () banked
  2237  00031C  0E9E               	movlw	low PICC_Select@txLastBits
  2238  00031E  6E45               	movwf	PCD_TransceiveData@validBits,c
  2239  000320  C08B  F047         	movff	PICC_Select@rxAlign,PCD_TransceiveData@rxAlign
  2240  000324  0E00               	movlw	0
  2241  000326  6E48               	movwf	PCD_TransceiveData@checkCRC,c
  2242  000328  ECD2  F005         	call	_PCD_TransceiveData	;wreg free
  2243  00032C  0100               	movlb	0	; () banked
  2244  00032E  6FA1               	movwf	PICC_Select@result& (0+255),b
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;RFID.c: 691: if (result == STATUS_COLLISION) {
  2248  000330  0100               	movlb	0	; () banked
  2249  000332  51A1               	movf	PICC_Select@result& (0+255),w,b
  2250  000334  0A03               	xorlw	3
  2251  000336  A4D8               	btfss	status,2,c
  2252  000338  D053               	goto	l4349
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;RFID.c: 692: result = PCD_ReadRegister(CollReg);
  2256  00033A  0E1C               	movlw	28
  2257  00033C  EC67  F006         	call	_PCD_ReadRegister
  2258  000340  0100               	movlb	0	; () banked
  2259  000342  6FA1               	movwf	PICC_Select@result& (0+255),b
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;RFID.c: 693: if (result & 0x20) {
  2263  000344  0100               	movlb	0	; () banked
  2264  000346  ABA1               	btfss	PICC_Select@result& (0+255),5,b
  2265  000348  D002               	goto	l4331
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;RFID.c: 694: return STATUS_COLLISION;
  2269  00034A  0E03               	movlw	3
  2270  00034C  D11B               	goto	l217
  2271  00034E                     l4331:
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;RFID.c: 695: }
  2275                           ;RFID.c: 696: unsigned char collisionPos = result & 0x1F;
  2276  00034E  0100               	movlb	0	; () banked
  2277  000350  51A1               	movf	PICC_Select@result& (0+255),w,b
  2278  000352  0B1F               	andlw	31
  2279  000354  0100               	movlb	0	; () banked
  2280  000356  6F97               	movwf	PICC_Select@collisionPos& (0+255),b
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;RFID.c: 697: if (collisionPos == 0) {
  2284  000358  0100               	movlb	0	; () banked
  2285  00035A  6797               	tstfsz	PICC_Select@collisionPos& (0+255),b
  2286  00035C  D003               	goto	l4337
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;RFID.c: 698: collisionPos = 32;
  2290  00035E  0E20               	movlw	32
  2291  000360  0100               	movlb	0	; () banked
  2292  000362  6F97               	movwf	PICC_Select@collisionPos& (0+255),b
  2293  000364                     l4337:
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;RFID.c: 699: }
  2297                           ;RFID.c: 700: if (collisionPos <= currentLevelKnownBits) {
  2298  000364  0100               	movlb	0	; () banked
  2299  000366  5197               	movf	PICC_Select@collisionPos& (0+255),w,b
  2300  000368  0100               	movlb	0	; () banked
  2301  00036A  5DA2               	subwf	PICC_Select@currentLevelKnownBits& (0+255),w,b
  2302  00036C  A0D8               	btfss	status,0,c
  2303  00036E  D002               	goto	l250
  2304  000370                     u4250:
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;RFID.c: 701: return STATUS_INTERNAL_ERROR;
  2308  000370  0E06               	movlw	6
  2309  000372  D108               	goto	l217
  2310  000374                     l250:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;RFID.c: 702: }
  2314                           ;RFID.c: 704: currentLevelKnownBits = collisionPos;
  2315  000374  C097  F0A2         	movff	PICC_Select@collisionPos,PICC_Select@currentLevelKnownBits
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;RFID.c: 705: count = (currentLevelKnownBits - 1) % 8;
  2319  000378  0100               	movlb	0	; () banked
  2320  00037A  05A2               	decf	PICC_Select@currentLevelKnownBits& (0+255),w,b
  2321  00037C  0B07               	andlw	7
  2322  00037E  0100               	movlb	0	; () banked
  2323  000380  6F9F               	movwf	PICC_Select@count& (0+255),b
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;RFID.c: 706: index = 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0);
  2327  000382  0E00               	movlw	0
  2328  000384  6AF3               	clrf	prodl,c
  2329  000386  0100               	movlb	0	; () banked
  2330  000388  639F               	cpfseq	PICC_Select@count& (0+255),b
  2331  00038A  2AF3               	incf	prodl,f,c
  2332  00038C  CFF3 F04D          	movff	prodl,??_PICC_Select
  2333  000390  0100               	movlb	0	; () banked
  2334  000392  C0A2  F00F         	movff	PICC_Select@currentLevelKnownBits,___awdiv@dividend
  2335  000396  6A10               	clrf	___awdiv@dividend+1,c
  2336  000398  0E00               	movlw	0
  2337  00039A  6E12               	movwf	___awdiv@divisor+1,c
  2338  00039C  0E08               	movlw	8
  2339  00039E  6E11               	movwf	___awdiv@divisor,c
  2340  0003A0  EC90  F004         	call	___awdiv	;wreg free
  2341  0003A4  500F               	movf	?___awdiv,w,c
  2342  0003A6  244D               	addwf	??_PICC_Select,w,c
  2343  0003A8  6E4E               	movwf	(??_PICC_Select+1)& (0+255),c
  2344  0003AA  284E               	incf	??_PICC_Select+1,w,c
  2345  0003AC  0100               	movlb	0	; () banked
  2346  0003AE  6FA0               	movwf	PICC_Select@index& (0+255),b
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;RFID.c: 707: buffer[index] |= (1 << count);
  2350  0003B0  C09F  F04D         	movff	PICC_Select@count,??_PICC_Select
  2351  0003B4  0E01               	movlw	1
  2352  0003B6  6E4E               	movwf	(??_PICC_Select+1)& (0+255),c
  2353  0003B8  2A4D               	incf	??_PICC_Select,f,c
  2354  0003BA  D002               	goto	u4264
  2355  0003BC                     u4265:
  2356  0003BC  90D8               	bcf	status,0,c
  2357  0003BE  364E               	rlcf	??_PICC_Select+1,f,c
  2358  0003C0                     u4264:
  2359  0003C0  2E4D               	decfsz	??_PICC_Select,f,c
  2360  0003C2  D7FC               	goto	u4265
  2361  0003C4  0100               	movlb	0	; () banked
  2362  0003C6  51A0               	movf	PICC_Select@index& (0+255),w,b
  2363  0003C8  0D01               	mullw	1
  2364  0003CA  0100               	movlb	0	; () banked
  2365  0003CC  0E8E               	movlw	low PICC_Select@buffer
  2366  0003CE  24F3               	addwf	prodl,w,c
  2367  0003D0  6ED9               	movwf	fsr2l,c
  2368  0003D2  0100               	movlb	0	; () banked
  2369  0003D4  0E00               	movlw	high PICC_Select@buffer
  2370  0003D6  20F4               	addwfc	prodh,w,c
  2371  0003D8  6EDA               	movwf	fsr2h,c
  2372  0003DA  504E               	movf	??_PICC_Select+1,w,c
  2373  0003DC  12DF               	iorwf	indf2,f,c
  2374                           
  2375                           ;RFID.c: 708: }
  2376  0003DE  D00F               	goto	l242
  2377  0003E0                     l4349:
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;RFID.c: 709: else if (result != STATUS_OK) {
  2381  0003E0  0100               	movlb	0	; () banked
  2382  0003E2  05A1               	decf	PICC_Select@result& (0+255),w,b
  2383  0003E4  A4D8               	btfss	status,2,c
  2384  0003E6  D082               	goto	u4350
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;RFID.c: 712: else {
  2388                           ;RFID.c: 713: if (currentLevelKnownBits >= 32) {
  2389                           
  2390                           ; BSR set to: 0
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;RFID.c: 711: }
  2394                           
  2395                           ; BSR set to: 0
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;RFID.c: 710: return result;
  2399  0003E8  0E1F               	movlw	31
  2400  0003EA  0100               	movlb	0	; () banked
  2401  0003EC  65A2               	cpfsgt	PICC_Select@currentLevelKnownBits& (0+255),b
  2402  0003EE  D004               	goto	l4361
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;RFID.c: 714: selectDone = 1;
  2406  0003F0  0E01               	movlw	1
  2407  0003F2                     L2:
  2408  0003F2  0100               	movlb	0	; () banked
  2409  0003F4  6F87               	movwf	PICC_Select@selectDone& (0+255),b
  2410                           
  2411                           ;RFID.c: 716: }
  2412  0003F6  D003               	goto	l242
  2413  0003F8                     l4361:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;RFID.c: 717: else {
  2417                           ;RFID.c: 719: currentLevelKnownBits = 32;
  2418  0003F8  0E20               	movlw	32
  2419  0003FA  0100               	movlb	0	; () banked
  2420  0003FC  6FA2               	movwf	PICC_Select@currentLevelKnownBits& (0+255),b
  2421  0003FE                     l242:
  2422                           
  2423                           ; BSR set to: 0
  2424  0003FE  0100               	movlb	0	; () banked
  2425  000400  5187               	movf	PICC_Select@selectDone& (0+255),w,b
  2426  000402  B4D8               	btfsc	status,2,c
  2427  000404  D6F4               	goto	l4281
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;RFID.c: 721: }
  2431                           ;RFID.c: 722: }
  2432                           ;RFID.c: 723: }
  2433                           ;RFID.c: 728: index = (buffer[2] == PICC_CMD_CT) ? 3 : 2;
  2434                           
  2435                           ; BSR set to: 0
  2436  000406  0100               	movlb	0	; () banked
  2437  000408  5190               	movf	(PICC_Select@buffer+2)& (0+255),w,b
  2438  00040A  0A88               	xorlw	136
  2439  00040C  B4D8               	btfsc	status,2,c
  2440  00040E  D005               	goto	l4367
  2441                           
  2442                           ; BSR set to: 0
  2443  000410  0E00               	movlw	0
  2444  000412  0100               	movlb	0	; () banked
  2445  000414  6F83               	movwf	(_PICC_Select$551+1)& (0+255),b
  2446  000416  0E02               	movlw	2
  2447  000418  D004               	goto	L4
  2448  00041A                     l4367:
  2449                           
  2450                           ; BSR set to: 0
  2451  00041A  0E00               	movlw	0
  2452  00041C  0100               	movlb	0	; () banked
  2453  00041E  6F83               	movwf	(_PICC_Select$551+1)& (0+255),b
  2454  000420  0E03               	movlw	3
  2455  000422                     L4:
  2456  000422  0100               	movlb	0	; () banked
  2457  000424  6F82               	movwf	_PICC_Select$551& (0+255),b
  2458                           
  2459                           ; BSR set to: 0
  2460                           
  2461                           ; BSR set to: 0
  2462  000426  C082  F0A0         	movff	_PICC_Select$551,PICC_Select@index
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;RFID.c: 729: bytesToCopy = (buffer[2] == PICC_CMD_CT) ? 3 : 4;
  2466  00042A  0100               	movlb	0	; () banked
  2467  00042C  5190               	movf	(PICC_Select@buffer+2)& (0+255),w,b
  2468  00042E  0A88               	xorlw	136
  2469  000430  B4D8               	btfsc	status,2,c
  2470  000432  D005               	goto	l4375
  2471                           
  2472                           ; BSR set to: 0
  2473  000434  0E00               	movlw	0
  2474  000436  0100               	movlb	0	; () banked
  2475  000438  6F85               	movwf	(_PICC_Select$552+1)& (0+255),b
  2476  00043A  0E04               	movlw	4
  2477  00043C  D004               	goto	L5
  2478  00043E                     l4375:
  2479                           
  2480                           ; BSR set to: 0
  2481  00043E  0E00               	movlw	0
  2482  000440  0100               	movlb	0	; () banked
  2483  000442  6F85               	movwf	(_PICC_Select$552+1)& (0+255),b
  2484  000444  0E03               	movlw	3
  2485  000446                     L5:
  2486  000446  0100               	movlb	0	; () banked
  2487  000448  6F84               	movwf	_PICC_Select$552& (0+255),b
  2488                           
  2489                           ; BSR set to: 0
  2490                           
  2491                           ; BSR set to: 0
  2492  00044A  C084  F09A         	movff	_PICC_Select$552,PICC_Select@bytesToCopy
  2493                           
  2494                           ;RFID.c: 730: for (count = 0; count < bytesToCopy; count++) {
  2495  00044E  0E00               	movlw	0
  2496  000450  0100               	movlb	0	; () banked
  2497  000452  6F9F               	movwf	PICC_Select@count& (0+255),b
  2498  000454  D024               	goto	l4385
  2499  000456                     l4379:
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;RFID.c: 731: uid->uidByte[uidIndex + count] = buffer[index++];
  2503  000456  0100               	movlb	0	; () banked
  2504  000458  51A0               	movf	PICC_Select@index& (0+255),w,b
  2505  00045A  0D01               	mullw	1
  2506  00045C  0100               	movlb	0	; () banked
  2507  00045E  0E8E               	movlw	low PICC_Select@buffer
  2508  000460  24F3               	addwf	prodl,w,c
  2509  000462  6ED9               	movwf	fsr2l,c
  2510  000464  0100               	movlb	0	; () banked
  2511  000466  0E00               	movlw	high PICC_Select@buffer
  2512  000468  20F4               	addwfc	prodh,w,c
  2513  00046A  6EDA               	movwf	fsr2h,c
  2514  00046C  0100               	movlb	0	; () banked
  2515  00046E  519F               	movf	PICC_Select@count& (0+255),w,b
  2516  000470  0100               	movlb	0	; () banked
  2517  000472  C099  F04D         	movff	PICC_Select@uidIndex,??_PICC_Select
  2518  000476  6A4E               	clrf	(??_PICC_Select+1)& (0+255),c
  2519  000478  264D               	addwf	??_PICC_Select,f,c
  2520  00047A  0E00               	movlw	0
  2521  00047C  224E               	addwfc	??_PICC_Select+1,f,c
  2522  00047E  0E01               	movlw	1
  2523  000480  264D               	addwf	??_PICC_Select,f,c
  2524  000482  0E00               	movlw	0
  2525  000484  224E               	addwfc	??_PICC_Select+1,f,c
  2526  000486  504D               	movf	??_PICC_Select,w,c
  2527  000488  244A               	addwf	PICC_Select@uid,w,c
  2528  00048A  6EE1               	movwf	fsr1l,c
  2529  00048C  504E               	movf	??_PICC_Select+1,w,c
  2530  00048E  204B               	addwfc	PICC_Select@uid+1,w,c
  2531  000490  6EE2               	movwf	fsr1h,c
  2532  000492  CFDF FFE7          	movff	indf2,indf1
  2533                           
  2534                           ; BSR set to: 0
  2535  000496  0100               	movlb	0	; () banked
  2536  000498  2BA0               	incf	PICC_Select@index& (0+255),f,b
  2537                           
  2538                           ; BSR set to: 0
  2539  00049A  0100               	movlb	0	; () banked
  2540  00049C  2B9F               	incf	PICC_Select@count& (0+255),f,b
  2541  00049E                     l4385:
  2542                           
  2543                           ; BSR set to: 0
  2544  00049E  0100               	movlb	0	; () banked
  2545  0004A0  519A               	movf	PICC_Select@bytesToCopy& (0+255),w,b
  2546  0004A2  0100               	movlb	0	; () banked
  2547  0004A4  5D9F               	subwf	PICC_Select@count& (0+255),w,b
  2548  0004A6  A0D8               	btfss	status,0,c
  2549  0004A8  D7D6               	goto	l4379
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;RFID.c: 732: }
  2553                           ;RFID.c: 735: if (responseLength != 3 || txLastBits != 0) {
  2554                           
  2555                           ; BSR set to: 0
  2556  0004AA  0100               	movlb	0	; () banked
  2557  0004AC  519B               	movf	PICC_Select@responseLength& (0+255),w,b
  2558  0004AE  0A03               	xorlw	3
  2559  0004B0  A4D8               	btfss	status,2,c
  2560  0004B2  D004               	goto	l4391
  2561                           
  2562                           ; BSR set to: 0
  2563  0004B4  0100               	movlb	0	; () banked
  2564  0004B6  519E               	movf	PICC_Select@txLastBits& (0+255),w,b
  2565  0004B8  B4D8               	btfsc	status,2,c
  2566  0004BA  D002               	goto	l4395
  2567  0004BC                     l4391:
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;RFID.c: 736: return STATUS_ERROR;
  2571  0004BC  0E02               	movlw	2
  2572  0004BE  D062               	goto	l217
  2573  0004C0                     l4395:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;RFID.c: 737: }
  2577                           ;RFID.c: 739: result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
  2578  0004C0  0100               	movlb	0	; () banked
  2579  0004C2  C09D  F01B         	movff	PICC_Select@responseBuffer+1,PCD_CalculateCRC@data+1
  2580  0004C6  0100               	movlb	0	; () banked
  2581  0004C8  C09C  F01A         	movff	PICC_Select@responseBuffer,PCD_CalculateCRC@data
  2582  0004CC  0E01               	movlw	1
  2583  0004CE  6E1C               	movwf	PCD_CalculateCRC@length,c
  2584  0004D0  0100               	movlb	0	; () banked
  2585  0004D2  0E00               	movlw	high (PICC_Select@buffer+2)
  2586  0004D4  6E1E               	movwf	PCD_CalculateCRC@result+1,c
  2587  0004D6  0100               	movlb	0	; () banked
  2588  0004D8  0E90               	movlw	low (PICC_Select@buffer+2)
  2589  0004DA  6E1D               	movwf	PCD_CalculateCRC@result,c
  2590  0004DC  ECE2  F004         	call	_PCD_CalculateCRC	;wreg free
  2591  0004E0  0100               	movlb	0	; () banked
  2592  0004E2  6FA1               	movwf	PICC_Select@result& (0+255),b
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;RFID.c: 740: if (result != STATUS_OK) {
  2596  0004E4  0100               	movlb	0	; () banked
  2597  0004E6  05A1               	decf	PICC_Select@result& (0+255),w,b
  2598  0004E8  B4D8               	btfsc	status,2,c
  2599  0004EA  D003               	goto	l4403
  2600  0004EC                     u4350:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;RFID.c: 741: return result;
  2604  0004EC  0100               	movlb	0	; () banked
  2605  0004EE  51A1               	movf	PICC_Select@result& (0+255),w,b
  2606  0004F0  D049               	goto	l217
  2607  0004F2                     l4403:
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;RFID.c: 742: }
  2611                           ;RFID.c: 743: if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) 
      +                          {
  2612  0004F2  0100               	movlb	0	; () banked
  2613  0004F4  EE20 F001          	lfsr	2,1
  2614  0004F8  0100               	movlb	0	; () banked
  2615  0004FA  519C               	movf	PICC_Select@responseBuffer& (0+255),w,b
  2616  0004FC  26D9               	addwf	fsr2l,f,c
  2617  0004FE  0100               	movlb	0	; () banked
  2618  000500  519D               	movf	(PICC_Select@responseBuffer+1)& (0+255),w,b
  2619  000502  22DA               	addwfc	fsr2h,f,c
  2620  000504  50DF               	movf	indf2,w,c
  2621  000506  0100               	movlb	0	; () banked
  2622  000508  EE20  F090         	lfsr	2,PICC_Select@buffer+2
  2623  00050C  62DF               	cpfseq	indf2,c
  2624  00050E  D010               	goto	l4407
  2625                           
  2626                           ; BSR set to: 0
  2627  000510  0100               	movlb	0	; () banked
  2628  000512  EE20 F002          	lfsr	2,2
  2629  000516  0100               	movlb	0	; () banked
  2630  000518  519C               	movf	PICC_Select@responseBuffer& (0+255),w,b
  2631  00051A  26D9               	addwf	fsr2l,f,c
  2632  00051C  0100               	movlb	0	; () banked
  2633  00051E  519D               	movf	(PICC_Select@responseBuffer+1)& (0+255),w,b
  2634  000520  22DA               	addwfc	fsr2h,f,c
  2635  000522  50DF               	movf	indf2,w,c
  2636  000524  6E4D               	movwf	??_PICC_Select& (0+255),c
  2637  000526  0100               	movlb	0	; () banked
  2638  000528  5191               	movf	(PICC_Select@buffer+3)& (0+255),w,b
  2639  00052A  184D               	xorwf	??_PICC_Select,w,c
  2640  00052C  B4D8               	btfsc	status,2,c
  2641  00052E  D002               	goto	l4411
  2642  000530                     l4407:
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;RFID.c: 744: return STATUS_CRC_WRONG;
  2646  000530  0E08               	movlw	8
  2647  000532  D028               	goto	l217
  2648  000534                     l4411:
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;RFID.c: 745: }
  2652                           ;RFID.c: 746: if (responseBuffer[0] & 0x04) {
  2653  000534  C09C  FFD9         	movff	PICC_Select@responseBuffer,fsr2l
  2654  000538  C09D  FFDA         	movff	PICC_Select@responseBuffer+1,fsr2h
  2655  00053C  50DF               	movf	indf2,w,c
  2656  00053E  6E4D               	movwf	??_PICC_Select& (0+255),c
  2657  000540  A44D               	btfss	??_PICC_Select,2,c
  2658  000542  D003               	goto	l4415
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;RFID.c: 747: cascadeLevel++;
  2662  000544  0100               	movlb	0	; () banked
  2663  000546  2B8D               	incf	PICC_Select@cascadeLevel& (0+255),f,b
  2664                           
  2665                           ;RFID.c: 748: }
  2666  000548  D00F               	goto	l4419
  2667  00054A                     l4415:
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;RFID.c: 749: else {
  2671                           ;RFID.c: 750: uidComplete = 1;
  2672  00054A  0E01               	movlw	1
  2673  00054C  0100               	movlb	0	; () banked
  2674  00054E  6F86               	movwf	PICC_Select@uidComplete& (0+255),b
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;RFID.c: 751: uid->sak = responseBuffer[0];
  2678  000550  C09C  FFD9         	movff	PICC_Select@responseBuffer,fsr2l
  2679  000554  C09D  FFDA         	movff	PICC_Select@responseBuffer+1,fsr2h
  2680  000558  EE10 F00B          	lfsr	1,11
  2681  00055C  504A               	movf	PICC_Select@uid,w,c
  2682  00055E  26E1               	addwf	fsr1l,f,c
  2683  000560  504B               	movf	PICC_Select@uid+1,w,c
  2684  000562  22E2               	addwfc	fsr1h,f,c
  2685  000564  CFDF FFE7          	movff	indf2,indf1
  2686  000568                     l4419:
  2687                           
  2688                           ; BSR set to: 0
  2689  000568  0100               	movlb	0	; () banked
  2690  00056A  5186               	movf	PICC_Select@uidComplete& (0+255),w,b
  2691  00056C  B4D8               	btfsc	status,2,c
  2692  00056E  D5A3               	goto	l4237
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;RFID.c: 752: }
  2696                           ;RFID.c: 753: }
  2697                           ;RFID.c: 756: uid->size = 3 * cascadeLevel + 1;
  2698                           
  2699                           ; BSR set to: 0
  2700  000570  0100               	movlb	0	; () banked
  2701  000572  518D               	movf	PICC_Select@cascadeLevel& (0+255),w,b
  2702  000574  0D03               	mullw	3
  2703  000576  28F3               	incf	prodl,w,c
  2704  000578  C04A  FFD9         	movff	PICC_Select@uid,fsr2l
  2705  00057C  C04B  FFDA         	movff	PICC_Select@uid+1,fsr2h
  2706  000580  6EDF               	movwf	indf2,c
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;RFID.c: 758: return STATUS_OK;
  2710  000582  0E01               	movlw	1
  2711  000584                     l217:
  2712                           
  2713                           ; BSR set to: 0
  2714  000584  0012               	return	
  2715  000586                     __end_of_PICC_Select:
  2716                           	opt stack 0
  2717                           tblptru	equ	0xFF8
  2718                           tblptrh	equ	0xFF7
  2719                           tblptrl	equ	0xFF6
  2720                           tablat	equ	0xFF5
  2721                           prodh	equ	0xFF4
  2722                           prodl	equ	0xFF3
  2723                           postinc0	equ	0xFEE
  2724                           wreg	equ	0xFE8
  2725                           indf1	equ	0xFE7
  2726                           postdec1	equ	0xFE5
  2727                           fsr1h	equ	0xFE2
  2728                           fsr1l	equ	0xFE1
  2729                           indf2	equ	0xFDF
  2730                           fsr2h	equ	0xFDA
  2731                           fsr2l	equ	0xFD9
  2732                           status	equ	0xFD8
  2733                           
  2734 ;; *************** function ___awdiv *****************
  2735 ;; Defined at:
  2736 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  dividend        2   14[COMRAM] int 
  2739 ;;  divisor         2   16[COMRAM] int 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  quotient        2   20[COMRAM] int 
  2742 ;;  sign            1   19[COMRAM] unsigned char 
  2743 ;;  counter         1   18[COMRAM] unsigned char 
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  2   14[COMRAM] int 
  2746 ;; Registers used:
  2747 ;;		wreg, status,2, status,0, prodl
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2753 ;;      Params:         4       0       0       0       0       0       0
  2754 ;;      Locals:         4       0       0       0       0       0       0
  2755 ;;      Temps:          0       0       0       0       0       0       0
  2756 ;;      Totals:         8       0       0       0       0       0       0
  2757 ;;Total ram usage:        8 bytes
  2758 ;; Hardware stack levels used:    1
  2759 ;; Hardware stack levels required when called:    2
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_PICC_Select
  2764 ;;		_PICC_DumpMifareClassicSectorToSerial
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text6
  2769  000920                     __ptext6:
  2770                           	opt stack 0
  2771  000920                     ___awdiv:
  2772                           	opt stack 26
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;incstack = 0
  2776  000920  0E00               	movlw	0
  2777  000922  6E14               	movwf	___awdiv@sign,c
  2778  000924  5012               	movf	___awdiv@divisor+1,w,c
  2779  000926  0A80               	xorlw	128
  2780  000928  6EF3               	movwf	prodl,c
  2781  00092A  0E80               	movlw	128
  2782  00092C  5CF3               	subwf	prodl,w,c
  2783  00092E  0E00               	movlw	0
  2784  000930  B4D8               	btfsc	status,2,c
  2785  000932  5C11               	subwf	___awdiv@divisor,w,c
  2786  000934  B0D8               	btfsc	status,0,c
  2787  000936  D006               	goto	l4159
  2788  000938  6C11               	negf	___awdiv@divisor,c
  2789  00093A  1E12               	comf	___awdiv@divisor+1,f,c
  2790  00093C  B0D8               	btfsc	status,0,c
  2791  00093E  2A12               	incf	___awdiv@divisor+1,f,c
  2792  000940  0E01               	movlw	1
  2793  000942  6E14               	movwf	___awdiv@sign,c
  2794  000944                     l4159:
  2795  000944  5010               	movf	___awdiv@dividend+1,w,c
  2796  000946  0A80               	xorlw	128
  2797  000948  6EF3               	movwf	prodl,c
  2798  00094A  0E80               	movlw	128
  2799  00094C  5CF3               	subwf	prodl,w,c
  2800  00094E  0E00               	movlw	0
  2801  000950  B4D8               	btfsc	status,2,c
  2802  000952  5C0F               	subwf	___awdiv@dividend,w,c
  2803  000954  B0D8               	btfsc	status,0,c
  2804  000956  D006               	goto	l4165
  2805  000958  6C0F               	negf	___awdiv@dividend,c
  2806  00095A  1E10               	comf	___awdiv@dividend+1,f,c
  2807  00095C  B0D8               	btfsc	status,0,c
  2808  00095E  2A10               	incf	___awdiv@dividend+1,f,c
  2809  000960  0E01               	movlw	1
  2810  000962  1A14               	xorwf	___awdiv@sign,f,c
  2811  000964                     l4165:
  2812  000964  0E00               	movlw	0
  2813  000966  6E16               	movwf	___awdiv@quotient+1,c
  2814  000968  0E00               	movlw	0
  2815  00096A  6E15               	movwf	___awdiv@quotient,c
  2816  00096C  5012               	movf	___awdiv@divisor+1,w,c
  2817  00096E  1011               	iorwf	___awdiv@divisor,w,c
  2818  000970  B4D8               	btfsc	status,2,c
  2819  000972  D01C               	goto	l4187
  2820  000974  0E01               	movlw	1
  2821  000976  6E13               	movwf	___awdiv@counter,c
  2822  000978  D004               	goto	l4173
  2823  00097A                     l4171:
  2824  00097A  90D8               	bcf	status,0,c
  2825  00097C  3611               	rlcf	___awdiv@divisor,f,c
  2826  00097E  3612               	rlcf	___awdiv@divisor+1,f,c
  2827  000980  2A13               	incf	___awdiv@counter,f,c
  2828  000982                     l4173:
  2829  000982  AE12               	btfss	___awdiv@divisor+1,7,c
  2830  000984  D7FA               	goto	l4171
  2831  000986                     l4175:
  2832  000986  90D8               	bcf	status,0,c
  2833  000988  3615               	rlcf	___awdiv@quotient,f,c
  2834  00098A  3616               	rlcf	___awdiv@quotient+1,f,c
  2835  00098C  5011               	movf	___awdiv@divisor,w,c
  2836  00098E  5C0F               	subwf	___awdiv@dividend,w,c
  2837  000990  5012               	movf	___awdiv@divisor+1,w,c
  2838  000992  5810               	subwfb	___awdiv@dividend+1,w,c
  2839  000994  A0D8               	btfss	status,0,c
  2840  000996  D005               	goto	l4183
  2841  000998  5011               	movf	___awdiv@divisor,w,c
  2842  00099A  5E0F               	subwf	___awdiv@dividend,f,c
  2843  00099C  5012               	movf	___awdiv@divisor+1,w,c
  2844  00099E  5A10               	subwfb	___awdiv@dividend+1,f,c
  2845  0009A0  8015               	bsf	___awdiv@quotient,0,c
  2846  0009A2                     l4183:
  2847  0009A2  90D8               	bcf	status,0,c
  2848  0009A4  3212               	rrcf	___awdiv@divisor+1,f,c
  2849  0009A6  3211               	rrcf	___awdiv@divisor,f,c
  2850  0009A8  2E13               	decfsz	___awdiv@counter,f,c
  2851  0009AA  D7ED               	goto	l4175
  2852  0009AC                     l4187:
  2853  0009AC  5014               	movf	___awdiv@sign,w,c
  2854  0009AE  B4D8               	btfsc	status,2,c
  2855  0009B0  D004               	goto	l4191
  2856  0009B2  6C15               	negf	___awdiv@quotient,c
  2857  0009B4  1E16               	comf	___awdiv@quotient+1,f,c
  2858  0009B6  B0D8               	btfsc	status,0,c
  2859  0009B8  2A16               	incf	___awdiv@quotient+1,f,c
  2860  0009BA                     l4191:
  2861  0009BA  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  2862  0009BE  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  2863  0009C2  0012               	return	
  2864  0009C4                     __end_of___awdiv:
  2865                           	opt stack 0
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           indf1	equ	0xFE7
  2875                           postdec1	equ	0xFE5
  2876                           fsr1h	equ	0xFE2
  2877                           fsr1l	equ	0xFE1
  2878                           indf2	equ	0xFDF
  2879                           fsr2h	equ	0xFDA
  2880                           fsr2l	equ	0xFD9
  2881                           status	equ	0xFD8
  2882                           
  2883 ;; *************** function _PICC_IsNewCardPresent *****************
  2884 ;; Defined at:
  2885 ;;		line 1731 in file "RFID.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;		None
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  bufferATQA      2   86[COMRAM] unsigned char [2]
  2890 ;;  bufferSize      1   89[COMRAM] unsigned char 
  2891 ;;  result          1   88[COMRAM] unsigned char 
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      unsigned char 
  2894 ;; Registers used:
  2895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2901 ;;      Params:         0       0       0       0       0       0       0
  2902 ;;      Locals:         5       0       0       0       0       0       0
  2903 ;;      Temps:          0       0       0       0       0       0       0
  2904 ;;      Totals:         5       0       0       0       0       0       0
  2905 ;;Total ram usage:        5 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:   10
  2908 ;; This function calls:
  2909 ;;		_PICC_RequestA
  2910 ;; This function is called by:
  2911 ;;		_main
  2912 ;;		_MIFARE_SetUid
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           	psect	text7
  2917  000C16                     __ptext7:
  2918                           	opt stack 0
  2919  000C16                     _PICC_IsNewCardPresent:
  2920                           	opt stack 20
  2921                           
  2922                           ;RFID.c: 1732: unsigned char bufferATQA[2];
  2923                           ;RFID.c: 1733: unsigned char bufferSize = sizeof(bufferATQA);
  2924                           
  2925                           ;incstack = 0
  2926  000C16  0E02               	movlw	2
  2927  000C18  6E5A               	movwf	PICC_IsNewCardPresent@bufferSize,c
  2928                           
  2929                           ;RFID.c: 1734: unsigned char result = PICC_RequestA(bufferATQA, &bufferSize);
  2930  000C1A  0E00               	movlw	high PICC_IsNewCardPresent@bufferATQA
  2931  000C1C  6E53               	movwf	PICC_RequestA@bufferATQA+1,c
  2932  000C1E  0E57               	movlw	low PICC_IsNewCardPresent@bufferATQA
  2933  000C20  6E52               	movwf	PICC_RequestA@bufferATQA,c
  2934  000C22  0E00               	movlw	high PICC_IsNewCardPresent@bufferSize
  2935  000C24  6E55               	movwf	PICC_RequestA@bufferSize+1,c
  2936  000C26  0E5A               	movlw	low PICC_IsNewCardPresent@bufferSize
  2937  000C28  6E54               	movwf	PICC_RequestA@bufferSize,c
  2938  000C2A  EC82  F006         	call	_PICC_RequestA	;wreg free
  2939  000C2E  6E59               	movwf	PICC_IsNewCardPresent@result,c
  2940                           
  2941                           ;RFID.c: 1735: return (result == STATUS_OK || result == STATUS_COLLISION);
  2942  000C30  0E01               	movlw	1
  2943  000C32  6E56               	movwf	_PICC_IsNewCardPresent$752,c
  2944  000C34  0459               	decf	PICC_IsNewCardPresent@result,w,c
  2945  000C36  B4D8               	btfsc	status,2,c
  2946  000C38  D006               	goto	l529
  2947  000C3A  5059               	movf	PICC_IsNewCardPresent@result,w,c
  2948  000C3C  0A03               	xorlw	3
  2949  000C3E  B4D8               	btfsc	status,2,c
  2950  000C40  D002               	goto	l529
  2951  000C42  0E00               	movlw	0
  2952  000C44  6E56               	movwf	_PICC_IsNewCardPresent$752,c
  2953  000C46                     l529:
  2954  000C46  5056               	movf	_PICC_IsNewCardPresent$752,w,c
  2955  000C48  0012               	return	
  2956  000C4A                     __end_of_PICC_IsNewCardPresent:
  2957                           	opt stack 0
  2958                           tblptru	equ	0xFF8
  2959                           tblptrh	equ	0xFF7
  2960                           tblptrl	equ	0xFF6
  2961                           tablat	equ	0xFF5
  2962                           prodh	equ	0xFF4
  2963                           prodl	equ	0xFF3
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           indf1	equ	0xFE7
  2967                           postdec1	equ	0xFE5
  2968                           fsr1h	equ	0xFE2
  2969                           fsr1l	equ	0xFE1
  2970                           indf2	equ	0xFDF
  2971                           fsr2h	equ	0xFDA
  2972                           fsr2l	equ	0xFD9
  2973                           status	equ	0xFD8
  2974                           
  2975 ;; *************** function _PICC_RequestA *****************
  2976 ;; Defined at:
  2977 ;;		line 515 in file "RFID.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;  bufferATQA      2   81[COMRAM] PTR unsigned char 
  2980 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), 
  2981 ;;  bufferSize      2   83[COMRAM] PTR unsigned char 
  2982 ;;		 -> PICC_IsNewCardPresent@bufferSize(1), 
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;		None
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  1    wreg      unsigned char 
  2987 ;; Registers used:
  2988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2994 ;;      Params:         4       0       0       0       0       0       0
  2995 ;;      Locals:         0       0       0       0       0       0       0
  2996 ;;      Temps:          0       0       0       0       0       0       0
  2997 ;;      Totals:         4       0       0       0       0       0       0
  2998 ;;Total ram usage:        4 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    9
  3001 ;; This function calls:
  3002 ;;		_PICC_REQA_or_WUPA
  3003 ;; This function is called by:
  3004 ;;		_PICC_IsNewCardPresent
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text8
  3009  000D04                     __ptext8:
  3010                           	opt stack 0
  3011  000D04                     _PICC_RequestA:
  3012                           	opt stack 20
  3013                           
  3014                           ;RFID.c: 518: return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
  3015                           
  3016                           ;incstack = 0
  3017  000D04  C053  F04B         	movff	PICC_RequestA@bufferATQA+1,PICC_REQA_or_WUPA@bufferATQA+1
  3018  000D08  C052  F04A         	movff	PICC_RequestA@bufferATQA,PICC_REQA_or_WUPA@bufferATQA
  3019  000D0C  C055  F04D         	movff	PICC_RequestA@bufferSize+1,PICC_REQA_or_WUPA@bufferSize+1
  3020  000D10  C054  F04C         	movff	PICC_RequestA@bufferSize,PICC_REQA_or_WUPA@bufferSize
  3021  000D14  0E26               	movlw	38
  3022  000D16  EC2B  F005         	call	_PICC_REQA_or_WUPA
  3023  000D1A  0012               	return	
  3024  000D1C                     __end_of_PICC_RequestA:
  3025                           	opt stack 0
  3026                           tblptru	equ	0xFF8
  3027                           tblptrh	equ	0xFF7
  3028                           tblptrl	equ	0xFF6
  3029                           tablat	equ	0xFF5
  3030                           prodh	equ	0xFF4
  3031                           prodl	equ	0xFF3
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           indf1	equ	0xFE7
  3035                           postdec1	equ	0xFE5
  3036                           fsr1h	equ	0xFE2
  3037                           fsr1l	equ	0xFE1
  3038                           indf2	equ	0xFDF
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function _PICC_REQA_or_WUPA *****************
  3044 ;; Defined at:
  3045 ;;		line 487 in file "RFID.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  command         1    wreg     unsigned char 
  3048 ;;  bufferATQA      2   73[COMRAM] PTR unsigned char 
  3049 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), 
  3050 ;;  bufferSize      2   75[COMRAM] PTR unsigned char 
  3051 ;;		 -> PICC_IsNewCardPresent@bufferSize(1), MIFARE_SetUid@atqa_size(1), 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  command         1   78[COMRAM] unsigned char 
  3054 ;;  validBits       1   80[COMRAM] unsigned char 
  3055 ;;  status          1   79[COMRAM] unsigned char 
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      unsigned char 
  3058 ;; Registers used:
  3059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3065 ;;      Params:         4       0       0       0       0       0       0
  3066 ;;      Locals:         3       0       0       0       0       0       0
  3067 ;;      Temps:          1       0       0       0       0       0       0
  3068 ;;      Totals:         8       0       0       0       0       0       0
  3069 ;;Total ram usage:        8 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; Hardware stack levels required when called:    8
  3072 ;; This function calls:
  3073 ;;		_PCD_ClearRegisterBitMask
  3074 ;;		_PCD_TransceiveData
  3075 ;; This function is called by:
  3076 ;;		_PICC_RequestA
  3077 ;;		_PICC_WakeupA
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text9
  3082  000A56                     __ptext9:
  3083                           	opt stack 0
  3084  000A56                     _PICC_REQA_or_WUPA:
  3085                           	opt stack 20
  3086                           
  3087                           ;incstack = 0
  3088                           ;PICC_REQA_or_WUPA@command stored from wreg
  3089  000A56  6E4F               	movwf	PICC_REQA_or_WUPA@command,c
  3090                           
  3091                           ;RFID.c: 491: unsigned char validBits;
  3092                           ;RFID.c: 492: unsigned char status;
  3093                           ;RFID.c: 494: if (bufferATQA == (0) || *bufferSize < 2) {
  3094  000A58  504B               	movf	PICC_REQA_or_WUPA@bufferATQA+1,w,c
  3095  000A5A  104A               	iorwf	PICC_REQA_or_WUPA@bufferATQA,w,c
  3096  000A5C  B4D8               	btfsc	status,2,c
  3097  000A5E  D00A               	goto	l4123
  3098  000A60  C04C  FFD9         	movff	PICC_REQA_or_WUPA@bufferSize,fsr2l
  3099  000A64  C04D  FFDA         	movff	PICC_REQA_or_WUPA@bufferSize+1,fsr2h
  3100  000A68  50DF               	movf	indf2,w,c
  3101  000A6A  6E4E               	movwf	??_PICC_REQA_or_WUPA& (0+255),c
  3102  000A6C  0E02               	movlw	2
  3103  000A6E  5C4E               	subwf	??_PICC_REQA_or_WUPA,w,c
  3104  000A70  B0D8               	btfsc	status,0,c
  3105  000A72  D002               	goto	l4127
  3106  000A74                     l4123:
  3107                           
  3108                           ;RFID.c: 495: return STATUS_NO_ROOM;
  3109  000A74  0E05               	movlw	5
  3110  000A76  D032               	goto	l203
  3111  000A78                     l4127:
  3112                           
  3113                           ;RFID.c: 496: }
  3114                           ;RFID.c: 497: PCD_ClearRegisterBitMask(CollReg, 0x80);
  3115  000A78  0E80               	movlw	128
  3116  000A7A  6E17               	movwf	PCD_ClearRegisterBitMask@mask,c
  3117  000A7C  0E1C               	movlw	28
  3118  000A7E  EC75  F006         	call	_PCD_ClearRegisterBitMask
  3119                           
  3120                           ;RFID.c: 498: validBits = 7;
  3121  000A82  0E07               	movlw	7
  3122  000A84  6E51               	movwf	PICC_REQA_or_WUPA@validBits,c
  3123                           
  3124                           ;RFID.c: 499: status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBit
      +                          s,0,0);
  3125  000A86  0E00               	movlw	high PICC_REQA_or_WUPA@command
  3126  000A88  6E3F               	movwf	PCD_TransceiveData@sendData+1,c
  3127  000A8A  0E4F               	movlw	low PICC_REQA_or_WUPA@command
  3128  000A8C  6E3E               	movwf	PCD_TransceiveData@sendData,c
  3129  000A8E  0E01               	movlw	1
  3130  000A90  6E40               	movwf	PCD_TransceiveData@sendLen,c
  3131  000A92  C04B  F042         	movff	PICC_REQA_or_WUPA@bufferATQA+1,PCD_TransceiveData@backData+1
  3132  000A96  C04A  F041         	movff	PICC_REQA_or_WUPA@bufferATQA,PCD_TransceiveData@backData
  3133  000A9A  C04D  F044         	movff	PICC_REQA_or_WUPA@bufferSize+1,PCD_TransceiveData@backLen+1
  3134  000A9E  C04C  F043         	movff	PICC_REQA_or_WUPA@bufferSize,PCD_TransceiveData@backLen
  3135  000AA2  0E00               	movlw	high PICC_REQA_or_WUPA@validBits
  3136  000AA4  6E46               	movwf	PCD_TransceiveData@validBits+1,c
  3137  000AA6  0E51               	movlw	low PICC_REQA_or_WUPA@validBits
  3138  000AA8  6E45               	movwf	PCD_TransceiveData@validBits,c
  3139  000AAA  0E00               	movlw	0
  3140  000AAC  6E47               	movwf	PCD_TransceiveData@rxAlign,c
  3141  000AAE  0E00               	movlw	0
  3142  000AB0  6E48               	movwf	PCD_TransceiveData@checkCRC,c
  3143  000AB2  ECD2  F005         	call	_PCD_TransceiveData	;wreg free
  3144  000AB6  6E50               	movwf	PICC_REQA_or_WUPA@status,c
  3145                           
  3146                           ;RFID.c: 500: if (status != STATUS_OK) {
  3147  000AB8  0450               	decf	PICC_REQA_or_WUPA@status,w,c
  3148  000ABA  B4D8               	btfsc	status,2,c
  3149  000ABC  D002               	goto	l4139
  3150                           
  3151                           ;RFID.c: 501: return status;
  3152  000ABE  5050               	movf	PICC_REQA_or_WUPA@status,w,c
  3153  000AC0  D00D               	goto	l203
  3154  000AC2                     l4139:
  3155                           
  3156                           ;RFID.c: 502: }
  3157                           ;RFID.c: 503: if (*bufferSize != 2 || validBits != 0) {
  3158  000AC2  0E02               	movlw	2
  3159  000AC4  C04C  FFD9         	movff	PICC_REQA_or_WUPA@bufferSize,fsr2l
  3160  000AC8  C04D  FFDA         	movff	PICC_REQA_or_WUPA@bufferSize+1,fsr2h
  3161  000ACC  62DF               	cpfseq	indf2,c
  3162  000ACE  D003               	goto	l4143
  3163  000AD0  5051               	movf	PICC_REQA_or_WUPA@validBits,w,c
  3164  000AD2  B4D8               	btfsc	status,2,c
  3165  000AD4  D002               	goto	l4147
  3166  000AD6                     l4143:
  3167                           
  3168                           ;RFID.c: 504: return STATUS_ERROR;
  3169  000AD6  0E02               	movlw	2
  3170  000AD8  D001               	goto	l203
  3171  000ADA                     l4147:
  3172                           
  3173                           ;RFID.c: 505: }
  3174                           ;RFID.c: 506: return STATUS_OK;
  3175  000ADA  0E01               	movlw	1
  3176  000ADC                     l203:
  3177  000ADC  0012               	return	
  3178  000ADE                     __end_of_PICC_REQA_or_WUPA:
  3179                           	opt stack 0
  3180                           tblptru	equ	0xFF8
  3181                           tblptrh	equ	0xFF7
  3182                           tblptrl	equ	0xFF6
  3183                           tablat	equ	0xFF5
  3184                           prodh	equ	0xFF4
  3185                           prodl	equ	0xFF3
  3186                           postinc0	equ	0xFEE
  3187                           wreg	equ	0xFE8
  3188                           indf1	equ	0xFE7
  3189                           postdec1	equ	0xFE5
  3190                           fsr1h	equ	0xFE2
  3191                           fsr1l	equ	0xFE1
  3192                           indf2	equ	0xFDF
  3193                           fsr2h	equ	0xFDA
  3194                           fsr2l	equ	0xFD9
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function _PCD_TransceiveData *****************
  3198 ;; Defined at:
  3199 ;;		line 469 in file "RFID.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;  sendData        2   61[COMRAM] PTR unsigned char 
  3202 ;;		 -> MIFARE_SetUid@block0_buffer(18), MIFARE_OpenUidBackdoor@cmd(1), PICC_DumpMifareUltralightToSerial@buffer(18), PI
      +CC_DumpMifareClassicSectorToSerial@buffer(18), 
  3203 ;;		 -> MIFARE_GetValue@buffer(18), PICC_HaltA@buffer(4), PICC_Select@buffer(9), PICC_REQA_or_WUPA@command(1), 
  3204 ;;  sendLen         1   63[COMRAM] unsigned char 
  3205 ;;  backData        2   64[COMRAM] PTR unsigned char 
  3206 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  3207 ;;		 -> PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSerial@buffer(18), MIFARE_GetValue@b
      +uffer(18), PICC_Select@buffer(9), 
  3208 ;;		 -> NULL(0), 
  3209 ;;  backLen         2   66[COMRAM] PTR unsigned char 
  3210 ;;		 -> PICC_IsNewCardPresent@bufferSize(1), MIFARE_SetUid@atqa_size(1), MIFARE_SetUid@byteCount(1), MIFARE_OpenUidBackd
      +oor@received(1), 
  3211 ;;		 -> PICC_DumpMifareUltralightToSerial@byteCount(1), PICC_DumpMifareClassicSectorToSerial@byteCount(1), MIFARE_GetVal
      +ue@size(1), PICC_Select@responseLength(1), 
  3212 ;;		 -> NULL(0), 
  3213 ;;  validBits       2   68[COMRAM] PTR unsigned char 
  3214 ;;		 -> MIFARE_OpenUidBackdoor@validBits(1), PICC_Select@txLastBits(1), PICC_REQA_or_WUPA@validBits(1), NULL(0), 
  3215 ;;  rxAlign         1   70[COMRAM] unsigned char 
  3216 ;;  checkCRC        1   71[COMRAM] unsigned char 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  waitIRq         1   72[COMRAM] unsigned char 
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  1    wreg      unsigned char 
  3221 ;; Registers used:
  3222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3228 ;;      Params:        11       0       0       0       0       0       0
  3229 ;;      Locals:         1       0       0       0       0       0       0
  3230 ;;      Temps:          0       0       0       0       0       0       0
  3231 ;;      Totals:        12       0       0       0       0       0       0
  3232 ;;Total ram usage:       12 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; Hardware stack levels required when called:    7
  3235 ;; This function calls:
  3236 ;;		_PCD_CommunicateWithPICC
  3237 ;; This function is called by:
  3238 ;;		_PICC_REQA_or_WUPA
  3239 ;;		_PICC_Select
  3240 ;;		_PICC_HaltA
  3241 ;;		_MIFARE_Read
  3242 ;;		_MIFARE_OpenUidBackdoor
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text10
  3247  000BA4                     __ptext10:
  3248                           	opt stack 0
  3249  000BA4                     _PCD_TransceiveData:
  3250                           	opt stack 21
  3251                           
  3252                           ;RFID.c: 477: unsigned char waitIRq = 0x30;
  3253                           
  3254                           ;incstack = 0
  3255  000BA4  0E30               	movlw	48
  3256  000BA6  6E49               	movwf	PCD_TransceiveData@waitIRq,c
  3257                           
  3258                           ;RFID.c: 478: return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen,
      +                           backData, backLen, validBits, rxAlign, checkCRC);
  3259  000BA8  C049  F022         	movff	PCD_TransceiveData@waitIRq,PCD_CommunicateWithPICC@waitIRq
  3260  000BAC  C03F  F024         	movff	PCD_TransceiveData@sendData+1,PCD_CommunicateWithPICC@sendData+1
  3261  000BB0  C03E  F023         	movff	PCD_TransceiveData@sendData,PCD_CommunicateWithPICC@sendData
  3262  000BB4  C040  F025         	movff	PCD_TransceiveData@sendLen,PCD_CommunicateWithPICC@sendLen
  3263  000BB8  C042  F027         	movff	PCD_TransceiveData@backData+1,PCD_CommunicateWithPICC@backData+1
  3264  000BBC  C041  F026         	movff	PCD_TransceiveData@backData,PCD_CommunicateWithPICC@backData
  3265  000BC0  C044  F029         	movff	PCD_TransceiveData@backLen+1,PCD_CommunicateWithPICC@backLen+1
  3266  000BC4  C043  F028         	movff	PCD_TransceiveData@backLen,PCD_CommunicateWithPICC@backLen
  3267  000BC8  C046  F02B         	movff	PCD_TransceiveData@validBits+1,PCD_CommunicateWithPICC@validBits+1
  3268  000BCC  C045  F02A         	movff	PCD_TransceiveData@validBits,PCD_CommunicateWithPICC@validBits
  3269  000BD0  C047  F02C         	movff	PCD_TransceiveData@rxAlign,PCD_CommunicateWithPICC@rxAlign
  3270  000BD4  C048  F02D         	movff	PCD_TransceiveData@checkCRC,PCD_CommunicateWithPICC@checkCRC
  3271  000BD8  0E0C               	movlw	12
  3272  000BDA  ECC3  F002         	call	_PCD_CommunicateWithPICC
  3273  000BDE  0012               	return	
  3274  000BE0                     __end_of_PCD_TransceiveData:
  3275                           	opt stack 0
  3276                           tblptru	equ	0xFF8
  3277                           tblptrh	equ	0xFF7
  3278                           tblptrl	equ	0xFF6
  3279                           tablat	equ	0xFF5
  3280                           prodh	equ	0xFF4
  3281                           prodl	equ	0xFF3
  3282                           postinc0	equ	0xFEE
  3283                           wreg	equ	0xFE8
  3284                           indf1	equ	0xFE7
  3285                           postdec1	equ	0xFE5
  3286                           fsr1h	equ	0xFE2
  3287                           fsr1l	equ	0xFE1
  3288                           indf2	equ	0xFDF
  3289                           fsr2h	equ	0xFDA
  3290                           fsr2l	equ	0xFD9
  3291                           status	equ	0xFD8
  3292                           
  3293 ;; *************** function _PCD_CommunicateWithPICC *****************
  3294 ;; Defined at:
  3295 ;;		line 370 in file "RFID.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  command         1    wreg     unsigned char 
  3298 ;;  waitIRq         1   33[COMRAM] unsigned char 
  3299 ;;  sendData        2   34[COMRAM] PTR unsigned char 
  3300 ;;		 -> MIFARE_SetUid@block0_buffer(18), MIFARE_OpenUidBackdoor@cmd(1), PICC_DumpMifareUltralightToSerial@buffer(18), PI
      +CC_DumpMifareClassicSectorToSerial@buffer(18), 
  3301 ;;		 -> PCD_MIFARE_Transceive@cmdBuffer(18), MIFARE_GetValue@buffer(18), PCD_Authenticate@sendData(12), PICC_HaltA@buffe
      +r(4), 
  3302 ;;		 -> PICC_Select@buffer(9), PICC_REQA_or_WUPA@command(1), 
  3303 ;;  sendLen         1   36[COMRAM] unsigned char 
  3304 ;;  backData        2   37[COMRAM] PTR unsigned char 
  3305 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  3306 ;;		 -> PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSerial@buffer(18), PCD_MIFARE_Transc
      +eive@cmdBuffer(18), MIFARE_GetValue@buffer(18), 
  3307 ;;		 -> PICC_Select@buffer(9), NULL(0), 
  3308 ;;  backLen         2   39[COMRAM] PTR unsigned char 
  3309 ;;		 -> PICC_IsNewCardPresent@bufferSize(1), MIFARE_SetUid@atqa_size(1), MIFARE_SetUid@byteCount(1), MIFARE_OpenUidBackd
      +oor@received(1), 
  3310 ;;		 -> PICC_DumpMifareUltralightToSerial@byteCount(1), PICC_DumpMifareClassicSectorToSerial@byteCount(1), PCD_MIFARE_Tr
      +ansceive@cmdBufferSize(1), MIFARE_GetValue@size(1), 
  3311 ;;		 -> PICC_Select@responseLength(1), NULL(0), 
  3312 ;;  validBits       2   41[COMRAM] PTR unsigned char 
  3313 ;;		 -> MIFARE_OpenUidBackdoor@validBits(1), PCD_MIFARE_Transceive@validBits(1), PICC_Select@txLastBits(1), PICC_REQA_or
      +_WUPA@validBits(1), 
  3314 ;;		 -> NULL(0), 
  3315 ;;  rxAlign         1   43[COMRAM] unsigned char 
  3316 ;;  checkCRC        1   44[COMRAM] unsigned char 
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;  command         1   55[COMRAM] unsigned char 
  3319 ;;  controlBuffe    2   56[COMRAM] unsigned char [2]
  3320 ;;  i               2   49[COMRAM] unsigned int 
  3321 ;;  n               1   60[COMRAM] unsigned char 
  3322 ;;  _validBits      1   59[COMRAM] unsigned char 
  3323 ;;  errorRegValu    1   58[COMRAM] unsigned char 
  3324 ;;  bitFraming      1   52[COMRAM] unsigned char 
  3325 ;;  txLastBits      1   51[COMRAM] unsigned char 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      unsigned char 
  3328 ;; Registers used:
  3329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3335 ;;      Params:        12       0       0       0       0       0       0
  3336 ;;      Locals:        12       0       0       0       0       0       0
  3337 ;;      Temps:          4       0       0       0       0       0       0
  3338 ;;      Totals:        28       0       0       0       0       0       0
  3339 ;;Total ram usage:       28 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    6
  3342 ;; This function calls:
  3343 ;;		_PCD_CalculateCRC
  3344 ;;		_PCD_ReadRegister
  3345 ;;		_PCD_ReadRegisterVector
  3346 ;;		_PCD_SetRegisterBitMask
  3347 ;;		_PCD_WriteRegister
  3348 ;;		_PCD_WriteRegisterVector
  3349 ;; This function is called by:
  3350 ;;		_PCD_TransceiveData
  3351 ;;		_PCD_Authenticate
  3352 ;;		_PCD_MIFARE_Transceive
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           	psect	text11
  3357  000586                     __ptext11:
  3358                           	opt stack 0
  3359  000586                     _PCD_CommunicateWithPICC:
  3360                           	opt stack 21
  3361                           
  3362                           ;incstack = 0
  3363                           ;PCD_CommunicateWithPICC@command stored from wreg
  3364  000586  6E38               	movwf	PCD_CommunicateWithPICC@command,c
  3365                           
  3366                           ;RFID.c: 380: unsigned char n, _validBits;
  3367                           ;RFID.c: 381: unsigned int i;
  3368                           ;RFID.c: 384: unsigned char txLastBits = validBits ? *validBits : 0;
  3369  000588  502B               	movf	PCD_CommunicateWithPICC@validBits+1,w,c
  3370  00058A  102A               	iorwf	PCD_CommunicateWithPICC@validBits,w,c
  3371  00058C  A4D8               	btfss	status,2,c
  3372  00058E  D005               	goto	l3993
  3373  000590  0E00               	movlw	0
  3374  000592  6E37               	movwf	_PCD_CommunicateWithPICC$494+1,c
  3375  000594  0E00               	movlw	0
  3376  000596  6E36               	movwf	_PCD_CommunicateWithPICC$494,c
  3377  000598  D009               	goto	l3995
  3378  00059A                     l3993:
  3379  00059A  C02A  FFD9         	movff	PCD_CommunicateWithPICC@validBits,fsr2l
  3380  00059E  C02B  FFDA         	movff	PCD_CommunicateWithPICC@validBits+1,fsr2h
  3381  0005A2  50DF               	movf	indf2,w,c
  3382  0005A4  6E2E               	movwf	??_PCD_CommunicateWithPICC& (0+255),c
  3383  0005A6  502E               	movf	??_PCD_CommunicateWithPICC,w,c
  3384  0005A8  6E36               	movwf	_PCD_CommunicateWithPICC$494,c
  3385  0005AA  6A37               	clrf	_PCD_CommunicateWithPICC$494+1,c
  3386  0005AC                     l3995:
  3387  0005AC  C036  F034         	movff	_PCD_CommunicateWithPICC$494,PCD_CommunicateWithPICC@txLastBits
  3388                           
  3389                           ;RFID.c: 385: unsigned char bitFraming = (rxAlign << 4) + txLastBits;
  3390  0005B0  382C               	swapf	PCD_CommunicateWithPICC@rxAlign,w,c
  3391  0005B2  0BF0               	andlw	240
  3392  0005B4  2434               	addwf	PCD_CommunicateWithPICC@txLastBits,w,c
  3393  0005B6  6E35               	movwf	PCD_CommunicateWithPICC@bitFraming,c
  3394                           
  3395                           ;RFID.c: 387: PCD_WriteRegister(CommandReg, PCD_Idle);
  3396  0005B8  0E00               	movlw	0
  3397  0005BA  6E15               	movwf	PCD_WriteRegister@value,c
  3398  0005BC  0E02               	movlw	2
  3399  0005BE  ECA5  F006         	call	_PCD_WriteRegister
  3400                           
  3401                           ;RFID.c: 388: PCD_WriteRegister(ComIrqReg, 0x7F);
  3402  0005C2  0E7F               	movlw	127
  3403  0005C4  6E15               	movwf	PCD_WriteRegister@value,c
  3404  0005C6  0E08               	movlw	8
  3405  0005C8  ECA5  F006         	call	_PCD_WriteRegister
  3406                           
  3407                           ;RFID.c: 389: PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);
  3408  0005CC  0E80               	movlw	128
  3409  0005CE  6E17               	movwf	PCD_SetRegisterBitMask@mask,c
  3410  0005D0  0E14               	movlw	20
  3411  0005D2  EC8E  F006         	call	_PCD_SetRegisterBitMask
  3412                           
  3413                           ;RFID.c: 390: PCD_WriteRegisterVector(FIFODataReg, sendLen, sendData);
  3414  0005D6  C025  F015         	movff	PCD_CommunicateWithPICC@sendLen,PCD_WriteRegisterVector@count
  3415  0005DA  C024  F017         	movff	PCD_CommunicateWithPICC@sendData+1,PCD_WriteRegisterVector@values+1
  3416  0005DE  C023  F016         	movff	PCD_CommunicateWithPICC@sendData,PCD_WriteRegisterVector@values
  3417  0005E2  0E12               	movlw	18
  3418  0005E4  ECF0  F005         	call	_PCD_WriteRegisterVector
  3419                           
  3420                           ;RFID.c: 391: PCD_WriteRegister(BitFramingReg, bitFraming);
  3421  0005E8  C035  F015         	movff	PCD_CommunicateWithPICC@bitFraming,PCD_WriteRegister@value
  3422  0005EC  0E1A               	movlw	26
  3423  0005EE  ECA5  F006         	call	_PCD_WriteRegister
  3424                           
  3425                           ;RFID.c: 392: PCD_WriteRegister(CommandReg, command);
  3426  0005F2  C038  F015         	movff	PCD_CommunicateWithPICC@command,PCD_WriteRegister@value
  3427  0005F6  0E02               	movlw	2
  3428  0005F8  ECA5  F006         	call	_PCD_WriteRegister
  3429                           
  3430                           ;RFID.c: 393: if (command == PCD_Transceive) {
  3431  0005FC  5038               	movf	PCD_CommunicateWithPICC@command,w,c
  3432  0005FE  0A0C               	xorlw	12
  3433  000600  A4D8               	btfss	status,2,c
  3434  000602  D005               	goto	l4015
  3435                           
  3436                           ;RFID.c: 394: PCD_SetRegisterBitMask(BitFramingReg, 0x80);
  3437  000604  0E80               	movlw	128
  3438  000606  6E17               	movwf	PCD_SetRegisterBitMask@mask,c
  3439  000608  0E1A               	movlw	26
  3440  00060A  EC8E  F006         	call	_PCD_SetRegisterBitMask
  3441  00060E                     l4015:
  3442                           
  3443                           ;RFID.c: 395: }
  3444                           ;RFID.c: 400: i = 2000;
  3445  00060E  0E07               	movlw	7
  3446  000610  6E33               	movwf	PCD_CommunicateWithPICC@i+1,c
  3447  000612  0ED0               	movlw	208
  3448  000614  6E32               	movwf	PCD_CommunicateWithPICC@i,c
  3449  000616                     l4017:
  3450                           
  3451                           ;RFID.c: 402: n = PCD_ReadRegister(ComIrqReg);
  3452  000616  0E08               	movlw	8
  3453  000618  EC67  F006         	call	_PCD_ReadRegister
  3454  00061C  6E3D               	movwf	PCD_CommunicateWithPICC@n,c
  3455                           
  3456                           ;RFID.c: 403: if (n & waitIRq) {
  3457  00061E  503D               	movf	PCD_CommunicateWithPICC@n,w,c
  3458  000620  1422               	andwf	PCD_CommunicateWithPICC@waitIRq,w,c
  3459  000622  0900               	iorlw	0
  3460  000624  A4D8               	btfss	status,2,c
  3461  000626  D00B               	goto	l4033
  3462                           
  3463                           ;RFID.c: 405: }
  3464                           ;RFID.c: 406: if (n & 0x01) {
  3465                           
  3466                           ;RFID.c: 404: break;
  3467  000628  B03D               	btfsc	PCD_CommunicateWithPICC@n,0,c
  3468  00062A  D007               	goto	u3790
  3469                           
  3470                           ;RFID.c: 408: }
  3471                           ;RFID.c: 409: if (--i == 0) {
  3472                           
  3473                           ;RFID.c: 407: return STATUS_TIMEOUT;
  3474  00062C  0632               	decf	PCD_CommunicateWithPICC@i,f,c
  3475  00062E  A0D8               	btfss	status,0,c
  3476  000630  0633               	decf	PCD_CommunicateWithPICC@i+1,f,c
  3477  000632  5033               	movf	(PCD_CommunicateWithPICC@i+1)& (0+255),w,c
  3478  000634  1032               	iorwf	PCD_CommunicateWithPICC@i& (0+255),w,c
  3479  000636  A4D8               	btfss	status,2,c
  3480  000638  D7EE               	goto	l4017
  3481  00063A                     u3790:
  3482                           
  3483                           ;RFID.c: 410: return STATUS_TIMEOUT;
  3484  00063A  0E04               	movlw	4
  3485  00063C  D0B5               	goto	l178
  3486  00063E                     l4033:
  3487                           
  3488                           ;RFID.c: 411: }
  3489                           ;RFID.c: 412: }
  3490                           ;RFID.c: 415: unsigned char errorRegValue = PCD_ReadRegister(ErrorReg);
  3491  00063E  0E0C               	movlw	12
  3492  000640  EC67  F006         	call	_PCD_ReadRegister
  3493  000644  6E3B               	movwf	PCD_CommunicateWithPICC@errorRegValue,c
  3494                           
  3495                           ;RFID.c: 416: if (errorRegValue & 0x13) {
  3496  000646  C03B  F02E         	movff	PCD_CommunicateWithPICC@errorRegValue,??_PCD_CommunicateWithPICC
  3497  00064A  0E13               	movlw	19
  3498  00064C  162E               	andwf	??_PCD_CommunicateWithPICC,f,c
  3499  00064E  B4D8               	btfsc	status,2,c
  3500  000650  D002               	goto	l4041
  3501                           
  3502                           ;RFID.c: 417: return STATUS_ERROR;
  3503  000652  0E02               	movlw	2
  3504  000654  D0A9               	goto	l178
  3505  000656                     l4041:
  3506                           
  3507                           ;RFID.c: 418: }
  3508                           ;RFID.c: 421: if (backData && backLen) {
  3509  000656  5027               	movf	PCD_CommunicateWithPICC@backData+1,w,c
  3510  000658  1026               	iorwf	PCD_CommunicateWithPICC@backData,w,c
  3511  00065A  B4D8               	btfsc	status,2,c
  3512  00065C  D034               	goto	l4063
  3513  00065E  5029               	movf	PCD_CommunicateWithPICC@backLen+1,w,c
  3514  000660  1028               	iorwf	PCD_CommunicateWithPICC@backLen,w,c
  3515  000662  B4D8               	btfsc	status,2,c
  3516  000664  D030               	goto	l4063
  3517                           
  3518                           ;RFID.c: 422: n = PCD_ReadRegister(FIFOLevelReg);
  3519  000666  0E14               	movlw	20
  3520  000668  EC67  F006         	call	_PCD_ReadRegister
  3521  00066C  6E3D               	movwf	PCD_CommunicateWithPICC@n,c
  3522                           
  3523                           ;RFID.c: 423: if (n > *backLen) {
  3524  00066E  C028  FFD9         	movff	PCD_CommunicateWithPICC@backLen,fsr2l
  3525  000672  C029  FFDA         	movff	PCD_CommunicateWithPICC@backLen+1,fsr2h
  3526  000676  50DF               	movf	indf2,w,c
  3527  000678  6E2E               	movwf	??_PCD_CommunicateWithPICC& (0+255),c
  3528  00067A  503D               	movf	PCD_CommunicateWithPICC@n,w,c
  3529  00067C  5C2E               	subwf	??_PCD_CommunicateWithPICC,w,c
  3530  00067E  B0D8               	btfsc	status,0,c
  3531  000680  D002               	goto	l4053
  3532                           
  3533                           ;RFID.c: 424: return STATUS_NO_ROOM;
  3534  000682  0E05               	movlw	5
  3535  000684  D091               	goto	l178
  3536  000686                     l4053:
  3537                           
  3538                           ;RFID.c: 425: }
  3539                           ;RFID.c: 426: *backLen = n;
  3540  000686  C028  FFD9         	movff	PCD_CommunicateWithPICC@backLen,fsr2l
  3541  00068A  C029  FFDA         	movff	PCD_CommunicateWithPICC@backLen+1,fsr2h
  3542  00068E  C03D  FFDF         	movff	PCD_CommunicateWithPICC@n,indf2
  3543                           
  3544                           ;RFID.c: 427: PCD_ReadRegisterVector(FIFODataReg, n, backData, rxAlign);
  3545  000692  C03D  F015         	movff	PCD_CommunicateWithPICC@n,PCD_ReadRegisterVector@count
  3546  000696  C027  F017         	movff	PCD_CommunicateWithPICC@backData+1,PCD_ReadRegisterVector@values+1
  3547  00069A  C026  F016         	movff	PCD_CommunicateWithPICC@backData,PCD_ReadRegisterVector@values
  3548  00069E  C02C  F018         	movff	PCD_CommunicateWithPICC@rxAlign,PCD_ReadRegisterVector@rxAlign
  3549  0006A2  0E12               	movlw	18
  3550  0006A4  ECD5  F003         	call	_PCD_ReadRegisterVector
  3551                           
  3552                           ;RFID.c: 428: _validBits = PCD_ReadRegister(ControlReg) & 0x07;
  3553  0006A8  0E18               	movlw	24
  3554  0006AA  EC67  F006         	call	_PCD_ReadRegister
  3555  0006AE  0B07               	andlw	7
  3556  0006B0  6E3C               	movwf	PCD_CommunicateWithPICC@_validBits,c
  3557                           
  3558                           ;RFID.c: 429: if (validBits) {
  3559  0006B2  502B               	movf	PCD_CommunicateWithPICC@validBits+1,w,c
  3560  0006B4  102A               	iorwf	PCD_CommunicateWithPICC@validBits,w,c
  3561  0006B6  B4D8               	btfsc	status,2,c
  3562  0006B8  D006               	goto	l4063
  3563                           
  3564                           ;RFID.c: 430: *validBits = _validBits;
  3565  0006BA  C02A  FFD9         	movff	PCD_CommunicateWithPICC@validBits,fsr2l
  3566  0006BE  C02B  FFDA         	movff	PCD_CommunicateWithPICC@validBits+1,fsr2h
  3567  0006C2  C03C  FFDF         	movff	PCD_CommunicateWithPICC@_validBits,indf2
  3568  0006C6                     l4063:
  3569                           
  3570                           ;RFID.c: 431: }
  3571                           ;RFID.c: 432: }
  3572                           ;RFID.c: 435: if (errorRegValue & 0x08) {
  3573  0006C6  A63B               	btfss	PCD_CommunicateWithPICC@errorRegValue,3,c
  3574  0006C8  D002               	goto	l4069
  3575                           
  3576                           ;RFID.c: 436: return STATUS_COLLISION;
  3577  0006CA  0E03               	movlw	3
  3578  0006CC  D06D               	goto	l178
  3579  0006CE                     l4069:
  3580                           
  3581                           ;RFID.c: 437: }
  3582                           ;RFID.c: 440: if (backData && backLen && checkCRC) {
  3583  0006CE  5027               	movf	PCD_CommunicateWithPICC@backData+1,w,c
  3584  0006D0  1026               	iorwf	PCD_CommunicateWithPICC@backData,w,c
  3585  0006D2  B4D8               	btfsc	status,2,c
  3586  0006D4  D068               	goto	l4107
  3587  0006D6  5029               	movf	PCD_CommunicateWithPICC@backLen+1,w,c
  3588  0006D8  1028               	iorwf	PCD_CommunicateWithPICC@backLen,w,c
  3589  0006DA  B4D8               	btfsc	status,2,c
  3590  0006DC  D064               	goto	l4107
  3591  0006DE  502D               	movf	PCD_CommunicateWithPICC@checkCRC,w,c
  3592  0006E0  B4D8               	btfsc	status,2,c
  3593  0006E2  D061               	goto	l4107
  3594                           
  3595                           ;RFID.c: 442: if (*backLen == 1 && _validBits == 4) {
  3596  0006E4  0E01               	movlw	1
  3597  0006E6  C028  FFD9         	movff	PCD_CommunicateWithPICC@backLen,fsr2l
  3598  0006EA  C029  FFDA         	movff	PCD_CommunicateWithPICC@backLen+1,fsr2h
  3599  0006EE  62DF               	cpfseq	indf2,c
  3600  0006F0  D006               	goto	l4083
  3601  0006F2  503C               	movf	PCD_CommunicateWithPICC@_validBits,w,c
  3602  0006F4  0A04               	xorlw	4
  3603  0006F6  A4D8               	btfss	status,2,c
  3604  0006F8  D002               	goto	l4083
  3605                           
  3606                           ;RFID.c: 443: return STATUS_MIFARE_NACK;
  3607  0006FA  0E09               	movlw	9
  3608  0006FC  D055               	goto	l178
  3609  0006FE                     l4083:
  3610                           
  3611                           ;RFID.c: 444: }
  3612                           ;RFID.c: 446: if (*backLen < 2 || _validBits != 0) {
  3613  0006FE  C028  FFD9         	movff	PCD_CommunicateWithPICC@backLen,fsr2l
  3614  000702  C029  FFDA         	movff	PCD_CommunicateWithPICC@backLen+1,fsr2h
  3615  000706  0E01               	movlw	1
  3616  000708  64DF               	cpfsgt	indf2,c
  3617  00070A  D04B               	goto	l4103
  3618  00070C  503C               	movf	PCD_CommunicateWithPICC@_validBits,w,c
  3619  00070E  A4D8               	btfss	status,2,c
  3620  000710  D048               	goto	l4103
  3621                           
  3622                           ;RFID.c: 448: }
  3623                           ;RFID.c: 450: unsigned char controlBuffer[2];
  3624                           ;RFID.c: 451: n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
  3625                           
  3626                           ;RFID.c: 447: return STATUS_CRC_WRONG;
  3627  000712  C027  F01B         	movff	PCD_CommunicateWithPICC@backData+1,PCD_CalculateCRC@data+1
  3628  000716  C026  F01A         	movff	PCD_CommunicateWithPICC@backData,PCD_CalculateCRC@data
  3629  00071A  C028  FFD9         	movff	PCD_CommunicateWithPICC@backLen,fsr2l
  3630  00071E  C029  FFDA         	movff	PCD_CommunicateWithPICC@backLen+1,fsr2h
  3631  000722  50DF               	movf	indf2,w,c
  3632  000724  0FFE               	addlw	254
  3633  000726  6E1C               	movwf	PCD_CalculateCRC@length,c
  3634  000728  0E00               	movlw	high PCD_CommunicateWithPICC@controlBuffer
  3635  00072A  6E1E               	movwf	PCD_CalculateCRC@result+1,c
  3636  00072C  0E39               	movlw	low PCD_CommunicateWithPICC@controlBuffer
  3637  00072E  6E1D               	movwf	PCD_CalculateCRC@result,c
  3638  000730  ECE2  F004         	call	_PCD_CalculateCRC	;wreg free
  3639  000734  6E3D               	movwf	PCD_CommunicateWithPICC@n,c
  3640                           
  3641                           ;RFID.c: 452: if (n != STATUS_OK) {
  3642  000736  043D               	decf	PCD_CommunicateWithPICC@n,w,c
  3643  000738  B4D8               	btfsc	status,2,c
  3644  00073A  D002               	goto	l4099
  3645                           
  3646                           ;RFID.c: 453: return n;
  3647  00073C  503D               	movf	PCD_CommunicateWithPICC@n,w,c
  3648  00073E  D034               	goto	l178
  3649  000740                     l4099:
  3650                           
  3651                           ;RFID.c: 454: }
  3652                           ;RFID.c: 455: if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1
      +                          ] != controlBuffer[1])) {
  3653  000740  0EFE               	movlw	254
  3654  000742  6E2E               	movwf	??_PCD_CommunicateWithPICC& (0+255),c
  3655  000744  0EFF               	movlw	255
  3656  000746  6E2F               	movwf	(??_PCD_CommunicateWithPICC+1)& (0+255),c
  3657  000748  C028  FFD9         	movff	PCD_CommunicateWithPICC@backLen,fsr2l
  3658  00074C  C029  FFDA         	movff	PCD_CommunicateWithPICC@backLen+1,fsr2h
  3659  000750  50DF               	movf	indf2,w,c
  3660  000752  6E30               	movwf	(??_PCD_CommunicateWithPICC+2)& (0+255),c
  3661  000754  6A31               	clrf	(??_PCD_CommunicateWithPICC+3)& (0+255),c
  3662  000756  502E               	movf	??_PCD_CommunicateWithPICC,w,c
  3663  000758  2630               	addwf	??_PCD_CommunicateWithPICC+2,f,c
  3664  00075A  502F               	movf	??_PCD_CommunicateWithPICC+1,w,c
  3665  00075C  2231               	addwfc	??_PCD_CommunicateWithPICC+3,f,c
  3666  00075E  5030               	movf	??_PCD_CommunicateWithPICC+2,w,c
  3667  000760  2426               	addwf	PCD_CommunicateWithPICC@backData,w,c
  3668  000762  6ED9               	movwf	fsr2l,c
  3669  000764  5031               	movf	??_PCD_CommunicateWithPICC+3,w,c
  3670  000766  2027               	addwfc	PCD_CommunicateWithPICC@backData+1,w,c
  3671  000768  6EDA               	movwf	fsr2h,c
  3672  00076A  5039               	movf	PCD_CommunicateWithPICC@controlBuffer,w,c
  3673  00076C  62DF               	cpfseq	indf2,c
  3674  00076E  D019               	goto	l4103
  3675  000770  0EFF               	movlw	255
  3676  000772  6E2E               	movwf	??_PCD_CommunicateWithPICC& (0+255),c
  3677  000774  0EFF               	movlw	255
  3678  000776  6E2F               	movwf	(??_PCD_CommunicateWithPICC+1)& (0+255),c
  3679  000778  C028  FFD9         	movff	PCD_CommunicateWithPICC@backLen,fsr2l
  3680  00077C  C029  FFDA         	movff	PCD_CommunicateWithPICC@backLen+1,fsr2h
  3681  000780  50DF               	movf	indf2,w,c
  3682  000782  6E30               	movwf	(??_PCD_CommunicateWithPICC+2)& (0+255),c
  3683  000784  6A31               	clrf	(??_PCD_CommunicateWithPICC+3)& (0+255),c
  3684  000786  502E               	movf	??_PCD_CommunicateWithPICC,w,c
  3685  000788  2630               	addwf	??_PCD_CommunicateWithPICC+2,f,c
  3686  00078A  502F               	movf	??_PCD_CommunicateWithPICC+1,w,c
  3687  00078C  2231               	addwfc	??_PCD_CommunicateWithPICC+3,f,c
  3688  00078E  5030               	movf	??_PCD_CommunicateWithPICC+2,w,c
  3689  000790  2426               	addwf	PCD_CommunicateWithPICC@backData,w,c
  3690  000792  6ED9               	movwf	fsr2l,c
  3691  000794  5031               	movf	??_PCD_CommunicateWithPICC+3,w,c
  3692  000796  2027               	addwfc	PCD_CommunicateWithPICC@backData+1,w,c
  3693  000798  6EDA               	movwf	fsr2h,c
  3694  00079A  50DF               	movf	indf2,w,c
  3695  00079C  183A               	xorwf	PCD_CommunicateWithPICC@controlBuffer+1,w,c
  3696  00079E  B4D8               	btfsc	status,2,c
  3697  0007A0  D002               	goto	l4107
  3698  0007A2                     l4103:
  3699                           
  3700                           ;RFID.c: 456: return STATUS_CRC_WRONG;
  3701  0007A2  0E08               	movlw	8
  3702  0007A4  D001               	goto	l178
  3703  0007A6                     l4107:
  3704                           
  3705                           ;RFID.c: 457: }
  3706                           ;RFID.c: 458: }
  3707                           ;RFID.c: 460: return STATUS_OK;
  3708  0007A6  0E01               	movlw	1
  3709  0007A8                     l178:
  3710  0007A8  0012               	return	
  3711  0007AA                     __end_of_PCD_CommunicateWithPICC:
  3712                           	opt stack 0
  3713                           tblptru	equ	0xFF8
  3714                           tblptrh	equ	0xFF7
  3715                           tblptrl	equ	0xFF6
  3716                           tablat	equ	0xFF5
  3717                           prodh	equ	0xFF4
  3718                           prodl	equ	0xFF3
  3719                           postinc0	equ	0xFEE
  3720                           wreg	equ	0xFE8
  3721                           indf1	equ	0xFE7
  3722                           postdec1	equ	0xFE5
  3723                           fsr1h	equ	0xFE2
  3724                           fsr1l	equ	0xFE1
  3725                           indf2	equ	0xFDF
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _PCD_ReadRegisterVector *****************
  3731 ;; Defined at:
  3732 ;;		line 110 in file "RFID.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  reg             1    wreg     unsigned char 
  3735 ;;  count           1   20[COMRAM] unsigned char 
  3736 ;;  values          2   21[COMRAM] PTR unsigned char 
  3737 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  3738 ;;		 -> PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSerial@buffer(18), PCD_MIFARE_Transc
      +eive@cmdBuffer(18), MIFARE_GetValue@buffer(18), 
  3739 ;;		 -> PICC_Select@buffer(9), NULL(0), 
  3740 ;;  rxAlign         1   23[COMRAM] unsigned char 
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;  reg             1   26[COMRAM] unsigned char 
  3743 ;;  i               1   30[COMRAM] unsigned char 
  3744 ;;  mask            1   28[COMRAM] unsigned char 
  3745 ;;  value           1   27[COMRAM] unsigned char 
  3746 ;;  index           1   31[COMRAM] unsigned char 
  3747 ;;  address         1   29[COMRAM] unsigned char 
  3748 ;; Return value:  Size  Location     Type
  3749 ;;		None               void
  3750 ;; Registers used:
  3751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3757 ;;      Params:         4       0       0       0       0       0       0
  3758 ;;      Locals:         6       0       0       0       0       0       0
  3759 ;;      Temps:          2       0       0       0       0       0       0
  3760 ;;      Totals:        12       0       0       0       0       0       0
  3761 ;;Total ram usage:       12 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    3
  3764 ;; This function calls:
  3765 ;;		_SPI_transfer
  3766 ;; This function is called by:
  3767 ;;		_PCD_CommunicateWithPICC
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text12
  3772  0007AA                     __ptext12:
  3773                           	opt stack 0
  3774  0007AA                     _PCD_ReadRegisterVector:
  3775                           	opt stack 23
  3776                           
  3777                           ;incstack = 0
  3778                           ;PCD_ReadRegisterVector@reg stored from wreg
  3779  0007AA  6E1B               	movwf	PCD_ReadRegisterVector@reg,c
  3780                           
  3781                           ;RFID.c: 115: if (count == 0) {
  3782  0007AC  6615               	tstfsz	PCD_ReadRegisterVector@count,c
  3783  0007AE  D001               	goto	l3921
  3784  0007B0  D05E               	goto	l120
  3785  0007B2                     l3921:
  3786                           
  3787                           ;RFID.c: 117: }
  3788                           ;RFID.c: 119: unsigned char address = 0x80 | (reg & 0x7E);
  3789  0007B2  501B               	movf	PCD_ReadRegisterVector@reg,w,c
  3790  0007B4  0B7E               	andlw	126
  3791  0007B6  0980               	iorlw	128
  3792  0007B8  6E1E               	movwf	PCD_ReadRegisterVector@address,c
  3793                           
  3794                           ;RFID.c: 120: unsigned char index = 0;
  3795  0007BA  0E00               	movlw	0
  3796  0007BC  6E20               	movwf	PCD_ReadRegisterVector@index,c
  3797                           
  3798                           ;RFID.c: 121: PORTA&=~(1<<4) ;
  3799  0007BE  9880               	bcf	3968,4,c	;volatile
  3800                           
  3801                           ;RFID.c: 122: count--;
  3802  0007C0  0615               	decf	PCD_ReadRegisterVector@count,f,c
  3803                           
  3804                           ;RFID.c: 123: SPI_transfer(address);
  3805  0007C2  501E               	movf	PCD_ReadRegisterVector@address,w,c
  3806  0007C4  EC38  F004         	call	_SPI_transfer
  3807                           
  3808                           ;RFID.c: 124: while (index < count) {
  3809  0007C8  D041               	goto	l3953
  3810  0007CA                     l122:
  3811                           
  3812                           ;RFID.c: 125: if (index == 0 && rxAlign) {
  3813  0007CA  6620               	tstfsz	PCD_ReadRegisterVector@index,c
  3814  0007CC  D032               	goto	l3949
  3815  0007CE  5018               	movf	PCD_ReadRegisterVector@rxAlign,w,c
  3816  0007D0  B4D8               	btfsc	status,2,c
  3817  0007D2  D02F               	goto	l3949
  3818                           
  3819                           ;RFID.c: 127: unsigned char mask = 0;
  3820  0007D4  0E00               	movlw	0
  3821  0007D6  6E1D               	movwf	PCD_ReadRegisterVector@mask,c
  3822                           
  3823                           ;RFID.c: 128: for (unsigned char i = rxAlign; i <= 7; i++) {
  3824  0007D8  C018  F01F         	movff	PCD_ReadRegisterVector@rxAlign,PCD_ReadRegisterVector@i
  3825  0007DC  D00D               	goto	L7
  3826  0007DE                     l3941:
  3827                           
  3828                           ;RFID.c: 129: mask |= (1 << i);
  3829  0007DE  C01F  F019         	movff	PCD_ReadRegisterVector@i,??_PCD_ReadRegisterVector
  3830  0007E2  0E01               	movlw	1
  3831  0007E4  6E1A               	movwf	(??_PCD_ReadRegisterVector+1)& (0+255),c
  3832  0007E6  2A19               	incf	??_PCD_ReadRegisterVector,f,c
  3833  0007E8  D002               	goto	u3704
  3834  0007EA                     u3705:
  3835  0007EA  90D8               	bcf	status,0,c
  3836  0007EC  361A               	rlcf	??_PCD_ReadRegisterVector+1,f,c
  3837  0007EE                     u3704:
  3838  0007EE  2E19               	decfsz	??_PCD_ReadRegisterVector,f,c
  3839  0007F0  D7FC               	goto	u3705
  3840  0007F2  501A               	movf	??_PCD_ReadRegisterVector+1,w,c
  3841  0007F4  121D               	iorwf	PCD_ReadRegisterVector@mask,f,c
  3842  0007F6  2A1F               	incf	PCD_ReadRegisterVector@i,f,c
  3843  0007F8                     L7:
  3844  0007F8  0E07               	movlw	7
  3845  0007FA  641F               	cpfsgt	PCD_ReadRegisterVector@i,c
  3846  0007FC  D7F0               	goto	l3941
  3847                           
  3848                           ;RFID.c: 130: }
  3849                           ;RFID.c: 132: unsigned char value = SPI_transfer(address);
  3850  0007FE  501E               	movf	PCD_ReadRegisterVector@address,w,c
  3851  000800  EC38  F004         	call	_SPI_transfer
  3852  000804  6E1C               	movwf	PCD_ReadRegisterVector@value,c
  3853                           
  3854                           ;RFID.c: 134: values[0] = (values[index] & ~mask) | (value & mask);
  3855  000806  501C               	movf	PCD_ReadRegisterVector@value,w,c
  3856  000808  141D               	andwf	PCD_ReadRegisterVector@mask,w,c
  3857  00080A  6E19               	movwf	??_PCD_ReadRegisterVector& (0+255),c
  3858  00080C  5020               	movf	PCD_ReadRegisterVector@index,w,c
  3859  00080E  0D01               	mullw	1
  3860  000810  50F3               	movf	prodl,w,c
  3861  000812  2416               	addwf	PCD_ReadRegisterVector@values,w,c
  3862  000814  6ED9               	movwf	fsr2l,c
  3863  000816  50F4               	movf	prodh,w,c
  3864  000818  2017               	addwfc	PCD_ReadRegisterVector@values+1,w,c
  3865  00081A  6EDA               	movwf	fsr2h,c
  3866  00081C  50DF               	movf	indf2,w,c
  3867  00081E  6E1A               	movwf	(??_PCD_ReadRegisterVector+1)& (0+255),c
  3868  000820  501D               	movf	PCD_ReadRegisterVector@mask,w,c
  3869  000822  0AFF               	xorlw	255
  3870  000824  141A               	andwf	??_PCD_ReadRegisterVector+1,w,c
  3871  000826  1019               	iorwf	??_PCD_ReadRegisterVector,w,c
  3872  000828  C016  FFD9         	movff	PCD_ReadRegisterVector@values,fsr2l
  3873  00082C  C017  FFDA         	movff	PCD_ReadRegisterVector@values+1,fsr2h
  3874  000830  D00B               	goto	L6
  3875  000832                     l3949:
  3876                           
  3877                           ;RFID.c: 136: else {
  3878                           ;RFID.c: 137: values[index] = SPI_transfer(address);
  3879  000832  5020               	movf	PCD_ReadRegisterVector@index,w,c
  3880  000834  0D01               	mullw	1
  3881  000836  50F3               	movf	prodl,w,c
  3882  000838  2416               	addwf	PCD_ReadRegisterVector@values,w,c
  3883  00083A  6ED9               	movwf	fsr2l,c
  3884  00083C  50F4               	movf	prodh,w,c
  3885  00083E  2017               	addwfc	PCD_ReadRegisterVector@values+1,w,c
  3886  000840  6EDA               	movwf	fsr2h,c
  3887  000842  501E               	movf	PCD_ReadRegisterVector@address,w,c
  3888  000844  EC38  F004         	call	_SPI_transfer
  3889  000848                     L6:
  3890  000848  6EDF               	movwf	indf2,c
  3891                           
  3892                           ;RFID.c: 138: }
  3893                           ;RFID.c: 139: index++;
  3894  00084A  2A20               	incf	PCD_ReadRegisterVector@index,f,c
  3895  00084C                     l3953:
  3896  00084C  5015               	movf	PCD_ReadRegisterVector@count,w,c
  3897  00084E  5C20               	subwf	PCD_ReadRegisterVector@index,w,c
  3898  000850  A0D8               	btfss	status,0,c
  3899  000852  D7BB               	goto	l122
  3900                           
  3901                           ;RFID.c: 140: }
  3902                           ;RFID.c: 141: values[index] = SPI_transfer(0);
  3903  000854  5020               	movf	PCD_ReadRegisterVector@index,w,c
  3904  000856  0D01               	mullw	1
  3905  000858  50F3               	movf	prodl,w,c
  3906  00085A  2416               	addwf	PCD_ReadRegisterVector@values,w,c
  3907  00085C  6ED9               	movwf	fsr2l,c
  3908  00085E  50F4               	movf	prodh,w,c
  3909  000860  2017               	addwfc	PCD_ReadRegisterVector@values+1,w,c
  3910  000862  6EDA               	movwf	fsr2h,c
  3911  000864  0E00               	movlw	0
  3912  000866  EC38  F004         	call	_SPI_transfer
  3913  00086A  6EDF               	movwf	indf2,c
  3914                           
  3915                           ;RFID.c: 142: PORTA|=(1<<4) ;
  3916  00086C  8880               	bsf	3968,4,c	;volatile
  3917  00086E                     l120:
  3918  00086E  0012               	return	
  3919  000870                     __end_of_PCD_ReadRegisterVector:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           postinc0	equ	0xFEE
  3928                           wreg	equ	0xFE8
  3929                           indf1	equ	0xFE7
  3930                           postdec1	equ	0xFE5
  3931                           fsr1h	equ	0xFE2
  3932                           fsr1l	equ	0xFE1
  3933                           indf2	equ	0xFDF
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function _PCD_CalculateCRC *****************
  3939 ;; Defined at:
  3940 ;;		line 173 in file "RFID.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  data            2   25[COMRAM] PTR unsigned char 
  3943 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  3944 ;;		 -> PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSerial@buffer(18), PCD_MIFARE_Transc
      +eive@cmdBuffer(18), MIFARE_GetValue@buffer(18), 
  3945 ;;		 -> PICC_HaltA@buffer(4), PICC_Select@buffer(9), NULL(0), 
  3946 ;;  length          1   27[COMRAM] unsigned char 
  3947 ;;  result          2   28[COMRAM] PTR unsigned char 
  3948 ;;		 -> MIFARE_SetUid@block0_buffer(18), PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSer
      +ial@buffer(18), PCD_MIFARE_Transceive@cmdBuffer(18), 
  3949 ;;		 -> MIFARE_GetValue@buffer(18), PICC_HaltA@buffer(4), PICC_Select@buffer(9), PCD_CommunicateWithPICC@controlBuffer(2
      +), 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  i               2   30[COMRAM] unsigned int 
  3952 ;;  n               1   32[COMRAM] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      unsigned char 
  3955 ;; Registers used:
  3956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3962 ;;      Params:         5       0       0       0       0       0       0
  3963 ;;      Locals:         3       0       0       0       0       0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0
  3965 ;;      Totals:         8       0       0       0       0       0       0
  3966 ;;Total ram usage:        8 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    5
  3969 ;; This function calls:
  3970 ;;		_PCD_ReadRegister
  3971 ;;		_PCD_SetRegisterBitMask
  3972 ;;		_PCD_WriteRegister
  3973 ;;		_PCD_WriteRegisterVector
  3974 ;; This function is called by:
  3975 ;;		_PCD_CommunicateWithPICC
  3976 ;;		_PICC_Select
  3977 ;;		_PICC_HaltA
  3978 ;;		_MIFARE_Read
  3979 ;;		_PCD_MIFARE_Transceive
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text13
  3984  0009C4                     __ptext13:
  3985                           	opt stack 0
  3986  0009C4                     _PCD_CalculateCRC:
  3987                           	opt stack 21
  3988                           
  3989                           ;RFID.c: 177: PCD_WriteRegister(CommandReg, PCD_Idle);
  3990                           
  3991                           ;incstack = 0
  3992  0009C4  0E00               	movlw	0
  3993  0009C6  6E15               	movwf	PCD_WriteRegister@value,c
  3994  0009C8  0E02               	movlw	2
  3995  0009CA  ECA5  F006         	call	_PCD_WriteRegister
  3996                           
  3997                           ;RFID.c: 178: PCD_WriteRegister(DivIrqReg, 0x04);
  3998  0009CE  0E04               	movlw	4
  3999  0009D0  6E15               	movwf	PCD_WriteRegister@value,c
  4000  0009D2  0E0A               	movlw	10
  4001  0009D4  ECA5  F006         	call	_PCD_WriteRegister
  4002                           
  4003                           ;RFID.c: 179: PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);
  4004  0009D8  0E80               	movlw	128
  4005  0009DA  6E17               	movwf	PCD_SetRegisterBitMask@mask,c
  4006  0009DC  0E14               	movlw	20
  4007  0009DE  EC8E  F006         	call	_PCD_SetRegisterBitMask
  4008                           
  4009                           ;RFID.c: 180: PCD_WriteRegisterVector(FIFODataReg, length, data);
  4010  0009E2  C01C  F015         	movff	PCD_CalculateCRC@length,PCD_WriteRegisterVector@count
  4011  0009E6  C01B  F017         	movff	PCD_CalculateCRC@data+1,PCD_WriteRegisterVector@values+1
  4012  0009EA  C01A  F016         	movff	PCD_CalculateCRC@data,PCD_WriteRegisterVector@values
  4013  0009EE  0E12               	movlw	18
  4014  0009F0  ECF0  F005         	call	_PCD_WriteRegisterVector
  4015                           
  4016                           ;RFID.c: 181: PCD_WriteRegister(CommandReg, PCD_CalcCRC);
  4017  0009F4  0E03               	movlw	3
  4018  0009F6  6E15               	movwf	PCD_WriteRegister@value,c
  4019  0009F8  0E02               	movlw	2
  4020  0009FA  ECA5  F006         	call	_PCD_WriteRegister
  4021                           
  4022                           ;RFID.c: 184: unsigned int i = 5000;
  4023  0009FE  0E13               	movlw	19
  4024  000A00  6E20               	movwf	PCD_CalculateCRC@i+1,c
  4025  000A02  0E88               	movlw	136
  4026  000A04  6E1F               	movwf	PCD_CalculateCRC@i,c
  4027  000A06                     l3967:
  4028                           
  4029                           ;RFID.c: 187: n = PCD_ReadRegister(DivIrqReg);
  4030  000A06  0E0A               	movlw	10
  4031  000A08  EC67  F006         	call	_PCD_ReadRegister
  4032  000A0C  6E21               	movwf	PCD_CalculateCRC@n,c
  4033                           
  4034                           ;RFID.c: 188: if (n & 0x04) {
  4035  000A0E  B421               	btfsc	PCD_CalculateCRC@n,2,c
  4036  000A10  D009               	goto	l3979
  4037                           
  4038                           ;RFID.c: 190: }
  4039                           ;RFID.c: 191: if (--i == 0) {
  4040                           
  4041                           ;RFID.c: 189: break;
  4042  000A12  061F               	decf	PCD_CalculateCRC@i,f,c
  4043  000A14  A0D8               	btfss	status,0,c
  4044  000A16  0620               	decf	PCD_CalculateCRC@i+1,f,c
  4045  000A18  5020               	movf	(PCD_CalculateCRC@i+1)& (0+255),w,c
  4046  000A1A  101F               	iorwf	PCD_CalculateCRC@i& (0+255),w,c
  4047  000A1C  A4D8               	btfss	status,2,c
  4048  000A1E  D7F3               	goto	l3967
  4049                           
  4050                           ;RFID.c: 192: return STATUS_TIMEOUT;
  4051  000A20  0E04               	movlw	4
  4052  000A22  D018               	goto	l140
  4053  000A24                     l3979:
  4054                           
  4055                           ;RFID.c: 193: }
  4056                           ;RFID.c: 194: }
  4057                           ;RFID.c: 195: PCD_WriteRegister(CommandReg, PCD_Idle);
  4058  000A24  0E00               	movlw	0
  4059  000A26  6E15               	movwf	PCD_WriteRegister@value,c
  4060  000A28  0E02               	movlw	2
  4061  000A2A  ECA5  F006         	call	_PCD_WriteRegister
  4062                           
  4063                           ;RFID.c: 198: result[0] = PCD_ReadRegister(CRCResultRegL);
  4064  000A2E  0E44               	movlw	68
  4065  000A30  EC67  F006         	call	_PCD_ReadRegister
  4066  000A34  C01D  FFD9         	movff	PCD_CalculateCRC@result,fsr2l
  4067  000A38  C01E  FFDA         	movff	PCD_CalculateCRC@result+1,fsr2h
  4068  000A3C  6EDF               	movwf	indf2,c
  4069                           
  4070                           ;RFID.c: 199: result[1] = PCD_ReadRegister(CRCResultRegH);
  4071  000A3E  EE20 F001          	lfsr	2,1
  4072  000A42  501D               	movf	PCD_CalculateCRC@result,w,c
  4073  000A44  26D9               	addwf	fsr2l,f,c
  4074  000A46  501E               	movf	PCD_CalculateCRC@result+1,w,c
  4075  000A48  22DA               	addwfc	fsr2h,f,c
  4076  000A4A  0E42               	movlw	66
  4077  000A4C  EC67  F006         	call	_PCD_ReadRegister
  4078  000A50  6EDF               	movwf	indf2,c
  4079                           
  4080                           ;RFID.c: 200: return STATUS_OK;
  4081  000A52  0E01               	movlw	1
  4082  000A54                     l140:
  4083  000A54  0012               	return	
  4084  000A56                     __end_of_PCD_CalculateCRC:
  4085                           	opt stack 0
  4086                           tblptru	equ	0xFF8
  4087                           tblptrh	equ	0xFF7
  4088                           tblptrl	equ	0xFF6
  4089                           tablat	equ	0xFF5
  4090                           prodh	equ	0xFF4
  4091                           prodl	equ	0xFF3
  4092                           postinc0	equ	0xFEE
  4093                           wreg	equ	0xFE8
  4094                           indf1	equ	0xFE7
  4095                           postdec1	equ	0xFE5
  4096                           fsr1h	equ	0xFE2
  4097                           fsr1l	equ	0xFE1
  4098                           indf2	equ	0xFDF
  4099                           fsr2h	equ	0xFDA
  4100                           fsr2l	equ	0xFD9
  4101                           status	equ	0xFD8
  4102                           
  4103 ;; *************** function _PCD_WriteRegisterVector *****************
  4104 ;; Defined at:
  4105 ;;		line 80 in file "RFID.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;  reg             1    wreg     unsigned char 
  4108 ;;  count           1   20[COMRAM] unsigned char 
  4109 ;;  values          2   21[COMRAM] PTR unsigned char 
  4110 ;;		 -> PICC_IsNewCardPresent@bufferATQA(2), MIFARE_SetUid@atqa_answer(2), MIFARE_SetUid@block0_buffer(18), MIFARE_OpenU
      +idBackdoor@response(32), 
  4111 ;;		 -> MIFARE_OpenUidBackdoor@cmd(1), PICC_DumpMifareUltralightToSerial@buffer(18), PICC_DumpMifareClassicSectorToSeria
      +l@buffer(18), PCD_MIFARE_Transceive@cmdBuffer(18), 
  4112 ;;		 -> MIFARE_GetValue@buffer(18), PCD_Authenticate@sendData(12), PICC_HaltA@buffer(4), PICC_Select@buffer(9), 
  4113 ;;		 -> PICC_REQA_or_WUPA@command(1), NULL(0), 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  reg             1   23[COMRAM] unsigned char 
  4116 ;;  index           1   24[COMRAM] unsigned char 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;		None               void
  4119 ;; Registers used:
  4120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4126 ;;      Params:         3       0       0       0       0       0       0
  4127 ;;      Locals:         2       0       0       0       0       0       0
  4128 ;;      Temps:          0       0       0       0       0       0       0
  4129 ;;      Totals:         5       0       0       0       0       0       0
  4130 ;;Total ram usage:        5 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    3
  4133 ;; This function calls:
  4134 ;;		_SPI_transfer
  4135 ;; This function is called by:
  4136 ;;		_PCD_CalculateCRC
  4137 ;;		_PCD_CommunicateWithPICC
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           	psect	text14
  4142  000BE0                     __ptext14:
  4143                           	opt stack 0
  4144  000BE0                     _PCD_WriteRegisterVector:
  4145                           	opt stack 23
  4146                           
  4147                           ;incstack = 0
  4148                           ;PCD_WriteRegisterVector@reg stored from wreg
  4149  000BE0  6E18               	movwf	PCD_WriteRegisterVector@reg,c
  4150                           
  4151                           ;RFID.c: 84: PORTA&=~(1<<4) ;
  4152  000BE2  9880               	bcf	3968,4,c	;volatile
  4153                           
  4154                           ;RFID.c: 85: SPI_transfer(reg & 0x7E);
  4155  000BE4  5018               	movf	PCD_WriteRegisterVector@reg,w,c
  4156  000BE6  0B7E               	andlw	126
  4157  000BE8  EC38  F004         	call	_SPI_transfer
  4158                           
  4159                           ;RFID.c: 86: for (unsigned char index = 0; index < count; index++) {
  4160  000BEC  0E00               	movlw	0
  4161  000BEE  6E19               	movwf	PCD_WriteRegisterVector@index,c
  4162  000BF0  D00C               	goto	l3911
  4163  000BF2                     l3907:
  4164                           
  4165                           ;RFID.c: 87: SPI_transfer(values[index]);
  4166  000BF2  5019               	movf	PCD_WriteRegisterVector@index,w,c
  4167  000BF4  0D01               	mullw	1
  4168  000BF6  50F3               	movf	prodl,w,c
  4169  000BF8  2416               	addwf	PCD_WriteRegisterVector@values,w,c
  4170  000BFA  6ED9               	movwf	fsr2l,c
  4171  000BFC  50F4               	movf	prodh,w,c
  4172  000BFE  2017               	addwfc	PCD_WriteRegisterVector@values+1,w,c
  4173  000C00  6EDA               	movwf	fsr2h,c
  4174  000C02  50DF               	movf	indf2,w,c
  4175  000C04  EC38  F004         	call	_SPI_transfer
  4176  000C08  2A19               	incf	PCD_WriteRegisterVector@index,f,c
  4177  000C0A                     l3911:
  4178  000C0A  5015               	movf	PCD_WriteRegisterVector@count,w,c
  4179  000C0C  5C19               	subwf	PCD_WriteRegisterVector@index,w,c
  4180  000C0E  A0D8               	btfss	status,0,c
  4181  000C10  D7F0               	goto	l3907
  4182                           
  4183                           ;RFID.c: 88: }
  4184                           ;RFID.c: 89: PORTA|=(1<<4) ;
  4185  000C12  8880               	bsf	3968,4,c	;volatile
  4186  000C14  0012               	return	
  4187  000C16                     __end_of_PCD_WriteRegisterVector:
  4188                           	opt stack 0
  4189                           tblptru	equ	0xFF8
  4190                           tblptrh	equ	0xFF7
  4191                           tblptrl	equ	0xFF6
  4192                           tablat	equ	0xFF5
  4193                           prodh	equ	0xFF4
  4194                           prodl	equ	0xFF3
  4195                           postinc0	equ	0xFEE
  4196                           wreg	equ	0xFE8
  4197                           indf1	equ	0xFE7
  4198                           postdec1	equ	0xFE5
  4199                           fsr1h	equ	0xFE2
  4200                           fsr1l	equ	0xFE1
  4201                           indf2	equ	0xFDF
  4202                           fsr2h	equ	0xFDA
  4203                           fsr2l	equ	0xFD9
  4204                           status	equ	0xFD8
  4205                           
  4206 ;; *************** function _PCD_SetRegisterBitMask *****************
  4207 ;; Defined at:
  4208 ;;		line 148 in file "RFID.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  reg             1    wreg     unsigned char 
  4211 ;;  mask            1   22[COMRAM] unsigned char 
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;  reg             1   24[COMRAM] unsigned char 
  4214 ;;  tmp             1   23[COMRAM] unsigned char 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;		None               void
  4217 ;; Registers used:
  4218 ;;		wreg, status,2, status,0, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4224 ;;      Params:         1       0       0       0       0       0       0
  4225 ;;      Locals:         2       0       0       0       0       0       0
  4226 ;;      Temps:          0       0       0       0       0       0       0
  4227 ;;      Totals:         3       0       0       0       0       0       0
  4228 ;;Total ram usage:        3 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    4
  4231 ;; This function calls:
  4232 ;;		_PCD_ReadRegister
  4233 ;;		_PCD_WriteRegister
  4234 ;; This function is called by:
  4235 ;;		_PCD_CalculateCRC
  4236 ;;		_PCD_CommunicateWithPICC
  4237 ;;		_PCD_SetAntennaGain
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text15
  4242  000D1C                     __ptext15:
  4243                           	opt stack 0
  4244  000D1C                     _PCD_SetRegisterBitMask:
  4245                           	opt stack 22
  4246                           
  4247                           ;incstack = 0
  4248                           ;PCD_SetRegisterBitMask@reg stored from wreg
  4249  000D1C  6E19               	movwf	PCD_SetRegisterBitMask@reg,c
  4250                           
  4251                           ;RFID.c: 151: unsigned char tmp;
  4252                           ;RFID.c: 152: tmp = PCD_ReadRegister(reg);
  4253  000D1E  5019               	movf	PCD_SetRegisterBitMask@reg,w,c
  4254  000D20  EC67  F006         	call	_PCD_ReadRegister
  4255  000D24  6E18               	movwf	PCD_SetRegisterBitMask@tmp,c
  4256                           
  4257                           ;RFID.c: 153: PCD_WriteRegister(reg, tmp | mask);
  4258  000D26  5018               	movf	PCD_SetRegisterBitMask@tmp,w,c
  4259  000D28  1017               	iorwf	PCD_SetRegisterBitMask@mask,w,c
  4260  000D2A  6E15               	movwf	PCD_WriteRegister@value,c
  4261  000D2C  5019               	movf	PCD_SetRegisterBitMask@reg,w,c
  4262  000D2E  ECA5  F006         	call	_PCD_WriteRegister
  4263  000D32  0012               	return	
  4264  000D34                     __end_of_PCD_SetRegisterBitMask:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           indf1	equ	0xFE7
  4275                           postdec1	equ	0xFE5
  4276                           fsr1h	equ	0xFE2
  4277                           fsr1l	equ	0xFE1
  4278                           indf2	equ	0xFDF
  4279                           fsr2h	equ	0xFDA
  4280                           fsr2l	equ	0xFD9
  4281                           status	equ	0xFD8
  4282                           
  4283 ;; *************** function _PCD_ClearRegisterBitMask *****************
  4284 ;; Defined at:
  4285 ;;		line 159 in file "RFID.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  reg             1    wreg     unsigned char 
  4288 ;;  mask            1   22[COMRAM] unsigned char 
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;  reg             1   24[COMRAM] unsigned char 
  4291 ;;  tmp             1   23[COMRAM] unsigned char 
  4292 ;; Return value:  Size  Location     Type
  4293 ;;		None               void
  4294 ;; Registers used:
  4295 ;;		wreg, status,2, status,0, cstack
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4301 ;;      Params:         1       0       0       0       0       0       0
  4302 ;;      Locals:         2       0       0       0       0       0       0
  4303 ;;      Temps:          0       0       0       0       0       0       0
  4304 ;;      Totals:         3       0       0       0       0       0       0
  4305 ;;Total ram usage:        3 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; Hardware stack levels required when called:    4
  4308 ;; This function calls:
  4309 ;;		_PCD_ReadRegister
  4310 ;;		_PCD_WriteRegister
  4311 ;; This function is called by:
  4312 ;;		_PICC_REQA_or_WUPA
  4313 ;;		_PICC_Select
  4314 ;;		_PCD_AntennaOff
  4315 ;;		_PCD_SetAntennaGain
  4316 ;;		_PCD_StopCrypto1
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text16
  4321  000CEA                     __ptext16:
  4322                           	opt stack 0
  4323  000CEA                     _PCD_ClearRegisterBitMask:
  4324                           	opt stack 24
  4325                           
  4326                           ;incstack = 0
  4327                           ;PCD_ClearRegisterBitMask@reg stored from wreg
  4328  000CEA  6E19               	movwf	PCD_ClearRegisterBitMask@reg,c
  4329                           
  4330                           ;RFID.c: 162: unsigned char tmp;
  4331                           ;RFID.c: 163: tmp = PCD_ReadRegister(reg);
  4332  000CEC  5019               	movf	PCD_ClearRegisterBitMask@reg,w,c
  4333  000CEE  EC67  F006         	call	_PCD_ReadRegister
  4334  000CF2  6E18               	movwf	PCD_ClearRegisterBitMask@tmp,c
  4335                           
  4336                           ;RFID.c: 164: PCD_WriteRegister(reg, tmp & (~mask));
  4337  000CF4  5017               	movf	PCD_ClearRegisterBitMask@mask,w,c
  4338  000CF6  0AFF               	xorlw	255
  4339  000CF8  1418               	andwf	PCD_ClearRegisterBitMask@tmp,w,c
  4340  000CFA  6E15               	movwf	PCD_WriteRegister@value,c
  4341  000CFC  5019               	movf	PCD_ClearRegisterBitMask@reg,w,c
  4342  000CFE  ECA5  F006         	call	_PCD_WriteRegister
  4343  000D02  0012               	return	
  4344  000D04                     __end_of_PCD_ClearRegisterBitMask:
  4345                           	opt stack 0
  4346                           tblptru	equ	0xFF8
  4347                           tblptrh	equ	0xFF7
  4348                           tblptrl	equ	0xFF6
  4349                           tablat	equ	0xFF5
  4350                           prodh	equ	0xFF4
  4351                           prodl	equ	0xFF3
  4352                           postinc0	equ	0xFEE
  4353                           wreg	equ	0xFE8
  4354                           indf1	equ	0xFE7
  4355                           postdec1	equ	0xFE5
  4356                           fsr1h	equ	0xFE2
  4357                           fsr1l	equ	0xFE1
  4358                           indf2	equ	0xFDF
  4359                           fsr2h	equ	0xFDA
  4360                           fsr2l	equ	0xFD9
  4361                           status	equ	0xFD8
  4362                           
  4363 ;; *************** function _PCD_WriteRegister *****************
  4364 ;; Defined at:
  4365 ;;		line 67 in file "RFID.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;  reg             1    wreg     unsigned char 
  4368 ;;  value           1   20[COMRAM] unsigned char 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  reg             1   21[COMRAM] unsigned char 
  4371 ;; Return value:  Size  Location     Type
  4372 ;;		None               void
  4373 ;; Registers used:
  4374 ;;		wreg, status,2, status,0, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4380 ;;      Params:         1       0       0       0       0       0       0
  4381 ;;      Locals:         1       0       0       0       0       0       0
  4382 ;;      Temps:          0       0       0       0       0       0       0
  4383 ;;      Totals:         2       0       0       0       0       0       0
  4384 ;;Total ram usage:        2 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    3
  4387 ;; This function calls:
  4388 ;;		_SPI_transfer
  4389 ;; This function is called by:
  4390 ;;		_PCD_SetRegisterBitMask
  4391 ;;		_PCD_ClearRegisterBitMask
  4392 ;;		_PCD_CalculateCRC
  4393 ;;		_PCD_CommunicateWithPICC
  4394 ;;		_PICC_Select
  4395 ;;		_PCD_Reset
  4396 ;;		_PCD_AntennaOn
  4397 ;;		_PCD_Init
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           	psect	text17
  4402  000D4A                     __ptext17:
  4403                           	opt stack 0
  4404  000D4A                     _PCD_WriteRegister:
  4405                           	opt stack 25
  4406                           
  4407                           ;incstack = 0
  4408                           ;PCD_WriteRegister@reg stored from wreg
  4409  000D4A  6E16               	movwf	PCD_WriteRegister@reg,c
  4410                           
  4411                           ;RFID.c: 70: PORTA&=~(1<<4) ;
  4412  000D4C  9880               	bcf	3968,4,c	;volatile
  4413                           
  4414                           ;RFID.c: 71: SPI_transfer(reg & 0x7E);
  4415  000D4E  5016               	movf	PCD_WriteRegister@reg,w,c
  4416  000D50  0B7E               	andlw	126
  4417  000D52  EC38  F004         	call	_SPI_transfer
  4418                           
  4419                           ;RFID.c: 72: SPI_transfer(value);
  4420  000D56  5015               	movf	PCD_WriteRegister@value,w,c
  4421  000D58  EC38  F004         	call	_SPI_transfer
  4422                           
  4423                           ;RFID.c: 73: PORTA|=(1<<4) ;
  4424  000D5C  8880               	bsf	3968,4,c	;volatile
  4425  000D5E  0012               	return	
  4426  000D60                     __end_of_PCD_WriteRegister:
  4427                           	opt stack 0
  4428                           tblptru	equ	0xFF8
  4429                           tblptrh	equ	0xFF7
  4430                           tblptrl	equ	0xFF6
  4431                           tablat	equ	0xFF5
  4432                           prodh	equ	0xFF4
  4433                           prodl	equ	0xFF3
  4434                           postinc0	equ	0xFEE
  4435                           wreg	equ	0xFE8
  4436                           indf1	equ	0xFE7
  4437                           postdec1	equ	0xFE5
  4438                           fsr1h	equ	0xFE2
  4439                           fsr1l	equ	0xFE1
  4440                           indf2	equ	0xFDF
  4441                           fsr2h	equ	0xFDA
  4442                           fsr2l	equ	0xFD9
  4443                           status	equ	0xFD8
  4444                           
  4445 ;; *************** function _PCD_ReadRegister *****************
  4446 ;; Defined at:
  4447 ;;		line 96 in file "RFID.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;  reg             1    wreg     unsigned char 
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;  reg             1   20[COMRAM] unsigned char 
  4452 ;;  value           1   21[COMRAM] unsigned char 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  1    wreg      unsigned char 
  4455 ;; Registers used:
  4456 ;;		wreg, status,2, status,0, cstack
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4462 ;;      Params:         0       0       0       0       0       0       0
  4463 ;;      Locals:         2       0       0       0       0       0       0
  4464 ;;      Temps:          0       0       0       0       0       0       0
  4465 ;;      Totals:         2       0       0       0       0       0       0
  4466 ;;Total ram usage:        2 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    3
  4469 ;; This function calls:
  4470 ;;		_SPI_transfer
  4471 ;; This function is called by:
  4472 ;;		_PCD_SetRegisterBitMask
  4473 ;;		_PCD_ClearRegisterBitMask
  4474 ;;		_PCD_CalculateCRC
  4475 ;;		_PCD_CommunicateWithPICC
  4476 ;;		_PICC_Select
  4477 ;;		_PCD_Reset
  4478 ;;		_PCD_AntennaOn
  4479 ;;		_PCD_GetAntennaGain
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text18
  4484  000CCE                     __ptext18:
  4485                           	opt stack 0
  4486  000CCE                     _PCD_ReadRegister:
  4487                           	opt stack 22
  4488                           
  4489                           ;incstack = 0
  4490                           ;PCD_ReadRegister@reg stored from wreg
  4491  000CCE  6E15               	movwf	PCD_ReadRegister@reg,c
  4492                           
  4493                           ;RFID.c: 98: unsigned char value;
  4494                           ;RFID.c: 99: PORTA&=~(1<<4) ;
  4495  000CD0  9880               	bcf	3968,4,c	;volatile
  4496                           
  4497                           ;RFID.c: 100: SPI_transfer(0x80 | (reg & 0x7E));
  4498  000CD2  5015               	movf	PCD_ReadRegister@reg,w,c
  4499  000CD4  0B7E               	andlw	126
  4500  000CD6  0980               	iorlw	128
  4501  000CD8  EC38  F004         	call	_SPI_transfer
  4502                           
  4503                           ;RFID.c: 101: value = SPI_transfer(0);
  4504  000CDC  0E00               	movlw	0
  4505  000CDE  EC38  F004         	call	_SPI_transfer
  4506  000CE2  6E16               	movwf	PCD_ReadRegister@value,c
  4507                           
  4508                           ;RFID.c: 102: PORTA|=(1<<4) ;
  4509  000CE4  8880               	bsf	3968,4,c	;volatile
  4510                           
  4511                           ;RFID.c: 103: return value;
  4512  000CE6  5016               	movf	PCD_ReadRegister@value,w,c
  4513  000CE8  0012               	return	
  4514  000CEA                     __end_of_PCD_ReadRegister:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           postinc0	equ	0xFEE
  4523                           wreg	equ	0xFE8
  4524                           indf1	equ	0xFE7
  4525                           postdec1	equ	0xFE5
  4526                           fsr1h	equ	0xFE2
  4527                           fsr1l	equ	0xFE1
  4528                           indf2	equ	0xFDF
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function _SPI_transfer *****************
  4534 ;; Defined at:
  4535 ;;		line 42 in file "SPI.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  data            1    wreg     unsigned char 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  data            1   19[COMRAM] unsigned char 
  4540 ;;  i               2   16[COMRAM] int 
  4541 ;;  i               2   14[COMRAM] int 
  4542 ;;  ret             1   18[COMRAM] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      unsigned char 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4552 ;;      Params:         0       0       0       0       0       0       0
  4553 ;;      Locals:         6       0       0       0       0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0
  4555 ;;      Totals:         6       0       0       0       0       0       0
  4556 ;;Total ram usage:        6 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    2
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_PCD_WriteRegister
  4563 ;;		_PCD_WriteRegisterVector
  4564 ;;		_PCD_ReadRegister
  4565 ;;		_PCD_ReadRegisterVector
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text19
  4570  000870                     __ptext19:
  4571                           	opt stack 0
  4572  000870                     _SPI_transfer:
  4573                           	opt stack 25
  4574                           
  4575                           ;incstack = 0
  4576                           ;SPI_transfer@data stored from wreg
  4577  000870  6E14               	movwf	SPI_transfer@data,c
  4578                           
  4579                           ;SPI.c: 44: unsigned char ret=0;
  4580  000872  0E00               	movlw	0
  4581  000874  6E13               	movwf	SPI_transfer@ret,c
  4582                           
  4583                           ;SPI.c: 45: if(_mode==1 || _mode==3)
  4584  000876  0463               	decf	__mode,w,c
  4585  000878  B4D8               	btfsc	status,2,c
  4586  00087A  D004               	goto	l3837
  4587  00087C  5063               	movf	__mode,w,c
  4588  00087E  0A03               	xorlw	3
  4589  000880  A4D8               	btfss	status,2,c
  4590  000882  D026               	goto	l3859
  4591  000884                     l3837:
  4592                           
  4593                           ;SPI.c: 46: {
  4594                           ;SPI.c: 47: for(int i=0;i<8;i++)
  4595  000884  0E00               	movlw	0
  4596  000886  6E10               	movwf	SPI_transfer@i+1,c
  4597  000888  0E00               	movlw	0
  4598  00088A  6E0F               	movwf	SPI_transfer@i,c
  4599  00088C  5010               	movf	SPI_transfer@i+1,w,c
  4600  00088E  0A80               	xorlw	128
  4601  000890  0F80               	addlw	-128
  4602  000892  0E08               	movlw	8
  4603  000894  B4D8               	btfsc	status,2,c
  4604  000896  5C0F               	subwf	SPI_transfer@i,w,c
  4605  000898  B0D8               	btfsc	status,0,c
  4606  00089A  D040               	goto	l3881
  4607                           
  4608                           ;SPI.c: 48: {
  4609                           ;SPI.c: 50: if(data & 0x80)PORTA |= (1<<6);
  4610  00089C  AE14               	btfss	SPI_transfer@data,7,c
  4611  00089E  D002               	goto	l3845
  4612  0008A0  8C80               	bsf	3968,6,c	;volatile
  4613  0008A2  D001               	goto	l3847
  4614  0008A4                     l3845:
  4615                           
  4616                           ;SPI.c: 51: else PORTA &= ~(1<<6);
  4617  0008A4  9C80               	bcf	3968,6,c	;volatile
  4618  0008A6                     l3847:
  4619                           
  4620                           ;SPI.c: 53: PORTA ^= (1<<7);
  4621  0008A6  0E80               	movlw	128
  4622  0008A8  1A80               	xorwf	3968,f,c	;volatile
  4623                           
  4624                           ;SPI.c: 54: if(PORTA & (1<<5))ret|=1;
  4625  0008AA  BA80               	btfsc	3968,5,c	;volatile
  4626  0008AC  8013               	bsf	SPI_transfer@ret,0,c
  4627                           
  4628                           ;SPI.c: 55: _delay((unsigned long)((10)*(4000000/4000000.0)));
  4629  0008AE  0E03               	movlw	3
  4630  0008B0                     u5257:
  4631  0008B0  2EE8               	decfsz	wreg,f,c
  4632  0008B2  D7FE               	goto	u5257
  4633  0008B4  F000               	nop	
  4634                           
  4635                           ;SPI.c: 56: PORTA ^= (1<<7);
  4636  0008B6  0E80               	movlw	128
  4637  0008B8  1A80               	xorwf	3968,f,c	;volatile
  4638                           
  4639                           ;SPI.c: 58: ret<<=1;
  4640  0008BA  90D8               	bcf	status,0,c
  4641  0008BC  3613               	rlcf	SPI_transfer@ret,f,c
  4642                           
  4643                           ;SPI.c: 59: data<<=1;
  4644  0008BE  90D8               	bcf	status,0,c
  4645  0008C0  3614               	rlcf	SPI_transfer@data,f,c
  4646                           
  4647                           ;SPI.c: 60: _delay((unsigned long)((10)*(4000000/4000000.0)));
  4648  0008C2  0E03               	movlw	3
  4649  0008C4                     u5267:
  4650  0008C4  2EE8               	decfsz	wreg,f,c
  4651  0008C6  D7FE               	goto	u5267
  4652  0008C8  F000               	nop	
  4653  0008CA  4A0F               	infsnz	SPI_transfer@i,f,c
  4654  0008CC  2A10               	incf	SPI_transfer@i+1,f,c
  4655  0008CE  D7DE               	goto	L8
  4656  0008D0                     l3859:
  4657                           
  4658                           ;SPI.c: 63: else
  4659                           ;SPI.c: 64: {
  4660                           ;SPI.c: 65: for(int i=0;i<8;i++)
  4661  0008D0  0E00               	movlw	0
  4662  0008D2  6E12               	movwf	SPI_transfer@i_416+1,c
  4663  0008D4  0E00               	movlw	0
  4664  0008D6  6E11               	movwf	SPI_transfer@i_416,c
  4665  0008D8  5012               	movf	SPI_transfer@i_416+1,w,c
  4666  0008DA  0A80               	xorlw	128
  4667  0008DC  0F80               	addlw	-128
  4668  0008DE  0E08               	movlw	8
  4669  0008E0  B4D8               	btfsc	status,2,c
  4670  0008E2  5C11               	subwf	SPI_transfer@i_416,w,c
  4671  0008E4  B0D8               	btfsc	status,0,c
  4672  0008E6  D01A               	goto	l3881
  4673                           
  4674                           ;SPI.c: 66: {
  4675                           ;SPI.c: 68: if(PORTA & (1<<5))ret|=1;
  4676  0008E8  BA80               	btfsc	3968,5,c	;volatile
  4677  0008EA  8013               	bsf	SPI_transfer@ret,0,c
  4678                           
  4679                           ;SPI.c: 69: PORTA ^= (1<<7);
  4680  0008EC  0E80               	movlw	128
  4681  0008EE  1A80               	xorwf	3968,f,c	;volatile
  4682                           
  4683                           ;SPI.c: 72: if(data & 0x80)PORTA |= (1<<6);
  4684  0008F0  AE14               	btfss	SPI_transfer@data,7,c
  4685  0008F2  D002               	goto	l3873
  4686  0008F4  8C80               	bsf	3968,6,c	;volatile
  4687  0008F6  D001               	goto	l3875
  4688  0008F8                     l3873:
  4689                           
  4690                           ;SPI.c: 73: else PORTA &= ~(1<<6);
  4691  0008F8  9C80               	bcf	3968,6,c	;volatile
  4692  0008FA                     l3875:
  4693                           
  4694                           ;SPI.c: 74: _delay((unsigned long)((10)*(4000000/4000000.0)));
  4695  0008FA  0E03               	movlw	3
  4696  0008FC                     u5277:
  4697  0008FC  2EE8               	decfsz	wreg,f,c
  4698  0008FE  D7FE               	goto	u5277
  4699  000900  F000               	nop	
  4700                           
  4701                           ;SPI.c: 75: PORTA ^= (1<<7);
  4702  000902  0E80               	movlw	128
  4703  000904  1A80               	xorwf	3968,f,c	;volatile
  4704                           
  4705                           ;SPI.c: 77: ret<<=1;
  4706  000906  90D8               	bcf	status,0,c
  4707  000908  3613               	rlcf	SPI_transfer@ret,f,c
  4708                           
  4709                           ;SPI.c: 78: data<<=1;
  4710  00090A  90D8               	bcf	status,0,c
  4711  00090C  3614               	rlcf	SPI_transfer@data,f,c
  4712                           
  4713                           ;SPI.c: 79: _delay((unsigned long)((10)*(4000000/4000000.0)));
  4714  00090E  0E03               	movlw	3
  4715  000910                     u5287:
  4716  000910  2EE8               	decfsz	wreg,f,c
  4717  000912  D7FE               	goto	u5287
  4718  000914  F000               	nop	
  4719  000916  4A11               	infsnz	SPI_transfer@i_416,f,c
  4720  000918  2A12               	incf	SPI_transfer@i_416+1,f,c
  4721  00091A  D7DE               	goto	L9
  4722  00091C                     l3881:
  4723                           
  4724                           ;SPI.c: 80: }
  4725                           ;SPI.c: 81: }
  4726                           ;SPI.c: 82: return ret;
  4727  00091C  5013               	movf	SPI_transfer@ret,w,c
  4728  00091E  0012               	return	
  4729  000920                     __end_of_SPI_transfer:
  4730                           	opt stack 0
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodh	equ	0xFF4
  4736                           prodl	equ	0xFF3
  4737                           postinc0	equ	0xFEE
  4738                           wreg	equ	0xFE8
  4739                           indf1	equ	0xFE7
  4740                           postdec1	equ	0xFE5
  4741                           fsr1h	equ	0xFE2
  4742                           fsr1l	equ	0xFE1
  4743                           indf2	equ	0xFDF
  4744                           fsr2h	equ	0xFDA
  4745                           fsr2l	equ	0xFD9
  4746                           status	equ	0xFD8
  4747                           
  4748 ;; *************** function __ISR *****************
  4749 ;; Defined at:
  4750 ;;		line 61 in file "main.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;		None
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;		None
  4755 ;; Return value:  Size  Location     Type
  4756 ;;		None               void
  4757 ;; Registers used:
  4758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4764 ;;      Params:         0       0       0       0       0       0       0
  4765 ;;      Locals:         0       0       0       0       0       0       0
  4766 ;;      Temps:         14       0       0       0       0       0       0
  4767 ;;      Totals:        14       0       0       0       0       0       0
  4768 ;;Total ram usage:       14 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    1
  4771 ;; This function calls:
  4772 ;;		__ISR_UART
  4773 ;; This function is called by:
  4774 ;;		Interrupt level 2
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	intcode
  4779  000008                     __pintcode:
  4780                           	opt stack 0
  4781  000008                     __ISR:
  4782                           	opt stack 20
  4783                           
  4784                           ;incstack = 0
  4785  000008  CFFA F001          	movff	pclath,??__ISR
  4786  00000C  CFFB F002          	movff	pclatu,??__ISR+1
  4787  000010  CFE9 F003          	movff	fsr0l,??__ISR+2
  4788  000014  ED6F  F005         	call	int_func,f	;refresh shadow registers
  4789                           pclatu	equ	0xFFB
  4790                           pclath	equ	0xFFA
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           prodh	equ	0xFF4
  4796                           prodl	equ	0xFF3
  4797                           postinc0	equ	0xFEE
  4798                           fsr0l	equ	0xFE9
  4799                           wreg	equ	0xFE8
  4800                           indf1	equ	0xFE7
  4801                           postdec1	equ	0xFE5
  4802                           fsr1h	equ	0xFE2
  4803                           fsr1l	equ	0xFE1
  4804                           indf2	equ	0xFDF
  4805                           fsr2h	equ	0xFDA
  4806                           fsr2l	equ	0xFD9
  4807                           status	equ	0xFD8
  4808                           
  4809                           	psect	intcode_body
  4810  000ADE                     __pintcode_body:
  4811                           	opt stack 20
  4812  000ADE                     int_func:
  4813                           	opt stack 20
  4814  000ADE  0006               	pop		; remove dummy address from shadow register refresh
  4815  000AE0  CFEA F004          	movff	fsr0h,??__ISR+3
  4816  000AE4  CFE1 F005          	movff	fsr1l,??__ISR+4
  4817  000AE8  CFE2 F006          	movff	fsr1h,??__ISR+5
  4818  000AEC  CFD9 F007          	movff	fsr2l,??__ISR+6
  4819  000AF0  CFDA F008          	movff	fsr2h,??__ISR+7
  4820  000AF4  CFF3 F009          	movff	prodl,??__ISR+8
  4821  000AF8  CFF4 F00A          	movff	prodh,??__ISR+9
  4822  000AFC  CFF6 F00B          	movff	tblptrl,??__ISR+10
  4823  000B00  CFF7 F00C          	movff	tblptrh,??__ISR+11
  4824  000B04  CFF8 F00D          	movff	tblptru,??__ISR+12
  4825  000B08  CFF5 F00E          	movff	tablat,??__ISR+13
  4826                           
  4827                           ;main.c: 63: _ISR_UART();
  4828  000B0C  EC58  F006         	call	__ISR_UART	;wreg free
  4829  000B10  C00E  FFF5         	movff	??__ISR+13,tablat
  4830  000B14  C00D  FFF8         	movff	??__ISR+12,tblptru
  4831  000B18  C00C  FFF7         	movff	??__ISR+11,tblptrh
  4832  000B1C  C00B  FFF6         	movff	??__ISR+10,tblptrl
  4833  000B20  C00A  FFF4         	movff	??__ISR+9,prodh
  4834  000B24  C009  FFF3         	movff	??__ISR+8,prodl
  4835  000B28  C008  FFDA         	movff	??__ISR+7,fsr2h
  4836  000B2C  C007  FFD9         	movff	??__ISR+6,fsr2l
  4837  000B30  C006  FFE2         	movff	??__ISR+5,fsr1h
  4838  000B34  C005  FFE1         	movff	??__ISR+4,fsr1l
  4839  000B38  C004  FFEA         	movff	??__ISR+3,fsr0h
  4840  000B3C  C003  FFE9         	movff	??__ISR+2,fsr0l
  4841  000B40  C002  FFFB         	movff	??__ISR+1,pclatu
  4842  000B44  C001  FFFA         	movff	??__ISR,pclath
  4843  000B48  0011               	retfie		f
  4844  000B4A                     __end_of__ISR:
  4845                           	opt stack 0
  4846                           pclatu	equ	0xFFB
  4847                           pclath	equ	0xFFA
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           postinc0	equ	0xFEE
  4855                           fsr0h	equ	0xFEA
  4856                           fsr0l	equ	0xFE9
  4857                           wreg	equ	0xFE8
  4858                           indf1	equ	0xFE7
  4859                           postdec1	equ	0xFE5
  4860                           fsr1h	equ	0xFE2
  4861                           fsr1l	equ	0xFE1
  4862                           indf2	equ	0xFDF
  4863                           fsr2h	equ	0xFDA
  4864                           fsr2l	equ	0xFD9
  4865                           status	equ	0xFD8
  4866                           
  4867 ;; *************** function __ISR_UART *****************
  4868 ;; Defined at:
  4869 ;;		line 60 in file "UART.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;		None
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;		None
  4874 ;; Return value:  Size  Location     Type
  4875 ;;		None               void
  4876 ;; Registers used:
  4877 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4883 ;;      Params:         0       0       0       0       0       0       0
  4884 ;;      Locals:         0       0       0       0       0       0       0
  4885 ;;      Temps:          0       0       0       0       0       0       0
  4886 ;;      Totals:         0       0       0       0       0       0       0
  4887 ;;Total ram usage:        0 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; This function calls:
  4890 ;;		Nothing
  4891 ;; This function is called by:
  4892 ;;		__ISR
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text21
  4897  000CB0                     __ptext21:
  4898                           	opt stack 0
  4899  000CB0                     __ISR_UART:
  4900                           	opt stack 20
  4901                           
  4902                           ;UART.c: 62: if(RCIF)
  4903                           
  4904                           ;incstack = 0
  4905  000CB0  AA9E               	btfss	3998,5,c	;volatile
  4906  000CB2  D00C               	goto	i2l71
  4907                           
  4908                           ;UART.c: 63: {
  4909                           ;UART.c: 64: buffer[count] = RCREG;
  4910  000CB4  0100               	movlb	0	; () banked
  4911  000CB6  0EA3               	movlw	low _buffer
  4912  000CB8  2461               	addwf	_count,w,c
  4913  000CBA  6ED9               	movwf	fsr2l,c
  4914  000CBC  0100               	movlb	0	; () banked
  4915  000CBE  0E00               	movlw	high _buffer
  4916  000CC0  2062               	addwfc	_count+1,w,c
  4917  000CC2  6EDA               	movwf	fsr2h,c
  4918  000CC4  CFAE FFDF          	movff	4014,indf2	;volatile
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;UART.c: 65: count++;
  4922  000CC8  4A61               	infsnz	_count,f,c
  4923  000CCA  2A62               	incf	_count+1,f,c
  4924  000CCC                     i2l71:
  4925  000CCC  0012               	return	
  4926  000CCE                     __end_of__ISR_UART:
  4927                           	opt stack 0
  4928                           pclatu	equ	0xFFB
  4929                           pclath	equ	0xFFA
  4930                           tblptru	equ	0xFF8
  4931                           tblptrh	equ	0xFF7
  4932                           tblptrl	equ	0xFF6
  4933                           tablat	equ	0xFF5
  4934                           prodh	equ	0xFF4
  4935                           prodl	equ	0xFF3
  4936                           postinc0	equ	0xFEE
  4937                           fsr0h	equ	0xFEA
  4938                           fsr0l	equ	0xFE9
  4939                           wreg	equ	0xFE8
  4940                           indf1	equ	0xFE7
  4941                           postdec1	equ	0xFE5
  4942                           fsr1h	equ	0xFE2
  4943                           fsr1l	equ	0xFE1
  4944                           indf2	equ	0xFDF
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           pclatu	equ	0xFFB
  4949                           pclath	equ	0xFFA
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           postinc0	equ	0xFEE
  4957                           fsr0h	equ	0xFEA
  4958                           fsr0l	equ	0xFE9
  4959                           wreg	equ	0xFE8
  4960                           indf1	equ	0xFE7
  4961                           postdec1	equ	0xFE5
  4962                           fsr1h	equ	0xFE2
  4963                           fsr1l	equ	0xFE1
  4964                           indf2	equ	0xFDF
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969                           	psect	rparam
  4970  0000                     pclatu	equ	0xFFB
  4971                           pclath	equ	0xFFA
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           prodh	equ	0xFF4
  4977                           prodl	equ	0xFF3
  4978                           postinc0	equ	0xFEE
  4979                           fsr0h	equ	0xFEA
  4980                           fsr0l	equ	0xFE9
  4981                           wreg	equ	0xFE8
  4982                           indf1	equ	0xFE7
  4983                           postdec1	equ	0xFE5
  4984                           fsr1h	equ	0xFE2
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           fsr2h	equ	0xFDA
  4988                           fsr2l	equ	0xFD9
  4989                           status	equ	0xFD8


Data Sizes:
    Strings     486
    Constant    1
    Data        22
    BSS         30
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     90      99
    BANK0           128     35      79
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sp__PICC_GetTypeName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_20(CODE[13]), STR_19(CODE[35]), STR_18(CODE[15]), STR_17(CODE[12]), 
		 -> STR_16(CODE[34]), STR_15(CODE[11]), STR_14(CODE[11]), STR_13(CODE[32]), 
		 -> STR_12(CODE[40]), STR_11(CODE[36]), ROM(CODE[32767]), 

    sp__GetStatusCodeName	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), STR_10(CODE[14]), STR_9(CODE[34]), STR_8(CODE[26]), 
		 -> STR_7(CODE[18]), STR_6(CODE[47]), STR_5(CODE[28]), STR_4(CODE[26]), 
		 -> STR_3(CODE[21]), STR_2(CODE[24]), STR_1(CODE[9]), 

    sp__memcpy	PTR void  size(2) Largest target is 18
		 -> PCD_MIFARE_Transceive@cmdBuffer(COMRAM[18]), MIFARE_Ultralight_Write@cmdBuffer(COMRAM[6]), 

    PICC_Select@responseBuffer	PTR unsigned char  size(2) Largest target is 9
		 -> PICC_Select@buffer(BANK0[9]), 

    PICC_Select@uid	PTR struct . size(2) Largest target is 12
		 -> uid(BANK0[12]), 

    PICC_RequestA@bufferSize	PTR unsigned char  size(2) Largest target is 1
		 -> PICC_IsNewCardPresent@bufferSize(COMRAM[1]), 

    PICC_RequestA@bufferATQA	PTR unsigned char  size(2) Largest target is 2
		 -> PICC_IsNewCardPresent@bufferATQA(COMRAM[2]), 

    PICC_REQA_or_WUPA@bufferSize	PTR unsigned char  size(2) Largest target is 1
		 -> PICC_IsNewCardPresent@bufferSize(COMRAM[1]), MIFARE_SetUid@atqa_size(COMRAM[1]), 

    PICC_REQA_or_WUPA@bufferATQA	PTR unsigned char  size(2) Largest target is 2
		 -> PICC_IsNewCardPresent@bufferATQA(COMRAM[2]), MIFARE_SetUid@atqa_answer(COMRAM[2]), 

    PCD_TransceiveData@validBits	PTR unsigned char  size(2) Largest target is 1
		 -> MIFARE_OpenUidBackdoor@validBits(COMRAM[1]), PICC_Select@txLastBits(BANK0[1]), PICC_REQA_or_WUPA@validBits(COMRAM[1]), NULL(NULL[0]), 

    PCD_TransceiveData@backLen	PTR unsigned char  size(2) Largest target is 1
		 -> PICC_IsNewCardPresent@bufferSize(COMRAM[1]), MIFARE_SetUid@atqa_size(COMRAM[1]), MIFARE_SetUid@byteCount(COMRAM[1]), MIFARE_OpenUidBackdoor@received(COMRAM[1]), 
		 -> PICC_DumpMifareUltralightToSerial@byteCount(COMRAM[1]), PICC_DumpMifareClassicSectorToSerial@byteCount(COMRAM[1]), MIFARE_GetValue@size(COMRAM[1]), PICC_Select@responseLength(BANK0[1]), 
		 -> NULL(NULL[0]), 

    PCD_TransceiveData@backData	PTR unsigned char  size(2) Largest target is 32
		 -> PICC_IsNewCardPresent@bufferATQA(COMRAM[2]), MIFARE_SetUid@atqa_answer(COMRAM[2]), MIFARE_SetUid@block0_buffer(COMRAM[18]), MIFARE_OpenUidBackdoor@response(COMRAM[32]), 
		 -> PICC_DumpMifareUltralightToSerial@buffer(COMRAM[18]), PICC_DumpMifareClassicSectorToSerial@buffer(COMRAM[18]), MIFARE_GetValue@buffer(COMRAM[18]), PICC_Select@buffer(BANK0[9]), 
		 -> NULL(NULL[0]), 

    PCD_TransceiveData@sendData	PTR unsigned char  size(2) Largest target is 18
		 -> MIFARE_SetUid@block0_buffer(COMRAM[18]), MIFARE_OpenUidBackdoor@cmd(COMRAM[1]), PICC_DumpMifareUltralightToSerial@buffer(COMRAM[18]), PICC_DumpMifareClassicSectorToSerial@buffer(COMRAM[18]), 
		 -> MIFARE_GetValue@buffer(COMRAM[18]), PICC_HaltA@buffer(COMRAM[4]), PICC_Select@buffer(BANK0[9]), PICC_REQA_or_WUPA@command(COMRAM[1]), 

    PCD_CommunicateWithPICC@backLen	PTR unsigned char  size(2) Largest target is 1
		 -> PICC_IsNewCardPresent@bufferSize(COMRAM[1]), MIFARE_SetUid@atqa_size(COMRAM[1]), MIFARE_SetUid@byteCount(COMRAM[1]), MIFARE_OpenUidBackdoor@received(COMRAM[1]), 
		 -> PICC_DumpMifareUltralightToSerial@byteCount(COMRAM[1]), PICC_DumpMifareClassicSectorToSerial@byteCount(COMRAM[1]), PCD_MIFARE_Transceive@cmdBufferSize(COMRAM[1]), MIFARE_GetValue@size(COMRAM[1]), 
		 -> PICC_Select@responseLength(BANK0[1]), NULL(NULL[0]), 

    PCD_CommunicateWithPICC@backData	PTR unsigned char  size(2) Largest target is 32
		 -> PICC_IsNewCardPresent@bufferATQA(COMRAM[2]), MIFARE_SetUid@atqa_answer(COMRAM[2]), MIFARE_SetUid@block0_buffer(COMRAM[18]), MIFARE_OpenUidBackdoor@response(COMRAM[32]), 
		 -> PICC_DumpMifareUltralightToSerial@buffer(COMRAM[18]), PICC_DumpMifareClassicSectorToSerial@buffer(COMRAM[18]), PCD_MIFARE_Transceive@cmdBuffer(COMRAM[18]), MIFARE_GetValue@buffer(COMRAM[18]), 
		 -> PICC_Select@buffer(BANK0[9]), NULL(NULL[0]), 

    PCD_CommunicateWithPICC@sendData	PTR unsigned char  size(2) Largest target is 18
		 -> MIFARE_SetUid@block0_buffer(COMRAM[18]), MIFARE_OpenUidBackdoor@cmd(COMRAM[1]), PICC_DumpMifareUltralightToSerial@buffer(COMRAM[18]), PICC_DumpMifareClassicSectorToSerial@buffer(COMRAM[18]), 
		 -> PCD_MIFARE_Transceive@cmdBuffer(COMRAM[18]), MIFARE_GetValue@buffer(COMRAM[18]), PCD_Authenticate@sendData(COMRAM[12]), PICC_HaltA@buffer(COMRAM[4]), 
		 -> PICC_Select@buffer(BANK0[9]), PICC_REQA_or_WUPA@command(COMRAM[1]), 

    PCD_CommunicateWithPICC@validBits	PTR unsigned char  size(2) Largest target is 1
		 -> MIFARE_OpenUidBackdoor@validBits(COMRAM[1]), PCD_MIFARE_Transceive@validBits(COMRAM[1]), PICC_Select@txLastBits(BANK0[1]), PICC_REQA_or_WUPA@validBits(COMRAM[1]), 
		 -> NULL(NULL[0]), 

    PCD_CalculateCRC@result	PTR unsigned char  size(2) Largest target is 18
		 -> MIFARE_SetUid@block0_buffer(COMRAM[18]), PICC_DumpMifareUltralightToSerial@buffer(COMRAM[18]), PICC_DumpMifareClassicSectorToSerial@buffer(COMRAM[18]), PCD_MIFARE_Transceive@cmdBuffer(COMRAM[18]), 
		 -> MIFARE_GetValue@buffer(COMRAM[18]), PICC_HaltA@buffer(COMRAM[4]), PICC_Select@buffer(BANK0[9]), PCD_CommunicateWithPICC@controlBuffer(COMRAM[2]), 

    PCD_CalculateCRC@data	PTR unsigned char  size(2) Largest target is 32
		 -> PICC_IsNewCardPresent@bufferATQA(COMRAM[2]), MIFARE_SetUid@atqa_answer(COMRAM[2]), MIFARE_SetUid@block0_buffer(COMRAM[18]), MIFARE_OpenUidBackdoor@response(COMRAM[32]), 
		 -> PICC_DumpMifareUltralightToSerial@buffer(COMRAM[18]), PICC_DumpMifareClassicSectorToSerial@buffer(COMRAM[18]), PCD_MIFARE_Transceive@cmdBuffer(COMRAM[18]), MIFARE_GetValue@buffer(COMRAM[18]), 
		 -> PICC_HaltA@buffer(COMRAM[4]), PICC_Select@buffer(BANK0[9]), NULL(NULL[0]), 

    PCD_ReadRegisterVector@values	PTR unsigned char  size(2) Largest target is 32
		 -> PICC_IsNewCardPresent@bufferATQA(COMRAM[2]), MIFARE_SetUid@atqa_answer(COMRAM[2]), MIFARE_SetUid@block0_buffer(COMRAM[18]), MIFARE_OpenUidBackdoor@response(COMRAM[32]), 
		 -> PICC_DumpMifareUltralightToSerial@buffer(COMRAM[18]), PICC_DumpMifareClassicSectorToSerial@buffer(COMRAM[18]), PCD_MIFARE_Transceive@cmdBuffer(COMRAM[18]), MIFARE_GetValue@buffer(COMRAM[18]), 
		 -> PICC_Select@buffer(BANK0[9]), NULL(NULL[0]), 

    PCD_WriteRegisterVector@values	PTR unsigned char  size(2) Largest target is 32
		 -> PICC_IsNewCardPresent@bufferATQA(COMRAM[2]), MIFARE_SetUid@atqa_answer(COMRAM[2]), MIFARE_SetUid@block0_buffer(COMRAM[18]), MIFARE_OpenUidBackdoor@response(COMRAM[32]), 
		 -> MIFARE_OpenUidBackdoor@cmd(COMRAM[1]), PICC_DumpMifareUltralightToSerial@buffer(COMRAM[18]), PICC_DumpMifareClassicSectorToSerial@buffer(COMRAM[18]), PCD_MIFARE_Transceive@cmdBuffer(COMRAM[18]), 
		 -> MIFARE_GetValue@buffer(COMRAM[18]), PCD_Authenticate@sendData(COMRAM[12]), PICC_HaltA@buffer(COMRAM[4]), PICC_Select@buffer(BANK0[9]), 
		 -> PICC_REQA_or_WUPA@command(COMRAM[1]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_PICC_IsNewCardPresent
    _PICC_ReadCardSerial->_PICC_Select
    _PICC_Select->_PCD_TransceiveData
    _PICC_IsNewCardPresent->_PICC_RequestA
    _PICC_RequestA->_PICC_REQA_or_WUPA
    _PICC_REQA_or_WUPA->_PCD_TransceiveData
    _PCD_TransceiveData->_PCD_CommunicateWithPICC
    _PCD_CommunicateWithPICC->_PCD_CalculateCRC
    _PCD_ReadRegisterVector->_SPI_transfer
    _PCD_CalculateCRC->_PCD_SetRegisterBitMask
    _PCD_CalculateCRC->_PCD_WriteRegisterVector
    _PCD_WriteRegisterVector->_SPI_transfer
    _PCD_SetRegisterBitMask->_PCD_ReadRegister
    _PCD_SetRegisterBitMask->_PCD_WriteRegister
    _PCD_ClearRegisterBitMask->_PCD_ReadRegister
    _PCD_ClearRegisterBitMask->_PCD_WriteRegister
    _PCD_WriteRegister->_SPI_transfer
    _PCD_ReadRegister->_SPI_transfer

Critical Paths under __ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _PICC_ReadCardSerial->_PICC_Select

Critical Paths under __ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under __ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under __ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under __ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under __ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   60897
              _PICC_IsNewCardPresent
                _PICC_ReadCardSerial
                          _RFID_init
                           _SPI_init
                          _UART_init
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             1     1      0      45
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RFID_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PICC_ReadCardSerial                                  1     1      0   36900
                                             78 COMRAM     1     1      0
                        _PICC_Select
 ---------------------------------------------------------------------------------
 (2) _PICC_Select                                         40    37      3   36866
                                             73 COMRAM     5     2      3
                                              0 BANK0     35    35      0
                   _PCD_CalculateCRC
           _PCD_ClearRegisterBitMask
                   _PCD_ReadRegister
                 _PCD_TransceiveData
                  _PCD_WriteRegister
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1215
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _PICC_IsNewCardPresent                                5     5      0   23952
                                             85 COMRAM     5     5      0
                      _PICC_RequestA
 ---------------------------------------------------------------------------------
 (2) _PICC_RequestA                                        4     0      4   23725
                                             81 COMRAM     4     0      4
                  _PICC_REQA_or_WUPA
 ---------------------------------------------------------------------------------
 (3) _PICC_REQA_or_WUPA                                    8     4      4   23509
                                             73 COMRAM     8     4      4
           _PCD_ClearRegisterBitMask
                 _PCD_TransceiveData
 ---------------------------------------------------------------------------------
 (3) _PCD_TransceiveData                                  12     1     11   20271
                                             61 COMRAM    12     1     11
            _PCD_CommunicateWithPICC
 ---------------------------------------------------------------------------------
 (4) _PCD_CommunicateWithPICC                             28    16     12   16786
                                             33 COMRAM    28    16     12
                   _PCD_CalculateCRC
                   _PCD_ReadRegister
             _PCD_ReadRegisterVector
             _PCD_SetRegisterBitMask
                  _PCD_WriteRegister
            _PCD_WriteRegisterVector
 ---------------------------------------------------------------------------------
 (5) _PCD_ReadRegisterVector                              12     8      4    1221
                                             20 COMRAM    12     8      4
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (5) _PCD_CalculateCRC                                     8     3      5    6912
                                             25 COMRAM     8     3      5
                   _PCD_ReadRegister
             _PCD_SetRegisterBitMask
                  _PCD_WriteRegister
            _PCD_WriteRegisterVector
 ---------------------------------------------------------------------------------
 (5) _PCD_WriteRegisterVector                              5     2      3     719
                                             20 COMRAM     5     2      3
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (5) _PCD_SetRegisterBitMask                               3     2      1    2525
                                             22 COMRAM     3     2      1
                   _PCD_ReadRegister
                  _PCD_WriteRegister
 ---------------------------------------------------------------------------------
 (3) _PCD_ClearRegisterBitMask                             3     2      1    2602
                                             22 COMRAM     3     2      1
                   _PCD_ReadRegister
                  _PCD_WriteRegister
 ---------------------------------------------------------------------------------
 (3) _PCD_WriteRegister                                    2     1      1    1775
                                             20 COMRAM     2     1      1
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (6) _PCD_ReadRegister                                     2     2      0     315
                                             20 COMRAM     2     2      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _SPI_transfer                                         6     6      0     250
                                             14 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) __ISR                                               14    14      0       0
                                              0 COMRAM    14    14      0
                          __ISR_UART
 ---------------------------------------------------------------------------------
 (11) __ISR_UART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PICC_IsNewCardPresent
     _PICC_RequestA
       _PICC_REQA_or_WUPA
         _PCD_ClearRegisterBitMask
           _PCD_ReadRegister
             _SPI_transfer
           _PCD_WriteRegister
             _SPI_transfer
         _PCD_TransceiveData
           _PCD_CommunicateWithPICC
             _PCD_CalculateCRC
               _PCD_ReadRegister
                 _SPI_transfer
               _PCD_SetRegisterBitMask
                 _PCD_ReadRegister
                   _SPI_transfer
                 _PCD_WriteRegister
                   _SPI_transfer
               _PCD_WriteRegister
                 _SPI_transfer
               _PCD_WriteRegisterVector
                 _SPI_transfer
             _PCD_ReadRegister
               _SPI_transfer
             _PCD_ReadRegisterVector
               _SPI_transfer
             _PCD_SetRegisterBitMask
               _PCD_ReadRegister
                 _SPI_transfer
               _PCD_WriteRegister
                 _SPI_transfer
             _PCD_WriteRegister
               _SPI_transfer
             _PCD_WriteRegisterVector
               _SPI_transfer
   _PICC_ReadCardSerial
     _PICC_Select
       _PCD_CalculateCRC
         _PCD_ReadRegister
           _SPI_transfer
         _PCD_SetRegisterBitMask
           _PCD_ReadRegister
             _SPI_transfer
           _PCD_WriteRegister
             _SPI_transfer
         _PCD_WriteRegister
           _SPI_transfer
         _PCD_WriteRegisterVector
           _SPI_transfer
       _PCD_ClearRegisterBitMask
         _PCD_ReadRegister
           _SPI_transfer
         _PCD_WriteRegister
           _SPI_transfer
       _PCD_ReadRegister
         _SPI_transfer
       _PCD_TransceiveData
         _PCD_CommunicateWithPICC
           _PCD_CalculateCRC
             _PCD_ReadRegister
               _SPI_transfer
             _PCD_SetRegisterBitMask
               _PCD_ReadRegister
                 _SPI_transfer
               _PCD_WriteRegister
                 _SPI_transfer
             _PCD_WriteRegister
               _SPI_transfer
             _PCD_WriteRegisterVector
               _SPI_transfer
           _PCD_ReadRegister
             _SPI_transfer
           _PCD_ReadRegisterVector
             _SPI_transfer
           _PCD_SetRegisterBitMask
             _PCD_ReadRegister
               _SPI_transfer
             _PCD_WriteRegister
               _SPI_transfer
           _PCD_WriteRegister
             _SPI_transfer
           _PCD_WriteRegisterVector
             _SPI_transfer
       _PCD_WriteRegister
         _SPI_transfer
       ___awdiv
   _RFID_init
   _SPI_init
   _UART_init

 __ISR (ROOT)
   __ISR_UART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     23      4F       5       61.7%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     5A      63       1       78.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B2      15        0.0%
DATA                 0      0      B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Apr 01 17:44:50 2015

                                  l80 0C6C                          ___awdiv@sign 0014  
                                 l120 086E                                   l122 07CA  
                                 l203 0ADC                                   l140 0A54  
                                 l230 00EE                                   l217 0584  
                                 l250 0374                                   l242 03FE  
                                 l178 07A8                                   l533 0C90  
                                 l529 0C46                                   _uid 00B3  
                                 prod 000FF3                                   wreg 000FE8  
                   _PICC_REQA_or_WUPA 0A56       __end_of_PCD_WriteRegisterVector 0C16  
               __size_of_SPI_transfer 00B0                    ?_PICC_REQA_or_WUPA 004A  
                                l4103 07A2                                  l4015 060E  
                                l4041 0656                                  l4033 063E  
                                l4017 0616                                  l4107 07A6  
                                l4123 0A74                                  l4211 003E  
                                l4053 0686                                  l4301 025C  
                                l4063 06C6                                  l4143 0AD6  
                                l4127 0A78                                  l4207 002C  
                                l4225 009C                                  l4217 006A  
                                l4083 06FE                                  l4147 0ADA  
                                l4139 0AC2                                  l4171 097A  
                                l4411 0534                                  l4403 04F2  
                                l4331 034E                                  l4227 00A2  
                                l4219 0070                                  l1835 0C66  
                                l4069 06CE                                  l4173 0982  
                                l4165 0964                                  l4237 00B6  
                                l1837 0C6A                                  l4191 09BA  
                                l4183 09A2                                  l4175 0986  
                                l4159 0944                                  l4415 054A  
                                l4407 0530                                  l4239 00CE  
                                l5071 0CA0                                  l4361 03F8  
                                l4337 0364                                  l4281 01EE  
                                l4273 01D0                                  l4257 0162  
                                l4249 011A                                  l4099 0740  
                                l4187 09AC                                  l4267 0188  
                                l4275 01DC                                  l4419 0568  
                                l4349 03E0                                  l3911 0C0A  
                                l4391 04BC                                  l4375 043E  
                                l4367 041A                                  l4279 01EA  
                                l3921 07B2                                  l4385 049E  
                                l3907 0BF2                                  l4395 04C0  
                                l4379 0456                                  l3845 08A4  
                                l3837 0884                                  l3941 07DE  
                                l3847 08A6                                  l3873 08F8  
                                l3881 091C                                  l3953 084C  
                                l3875 08FA                                  l3859 08D0  
                                l3949 0832                                  l3967 0A06  
         PICC_IsNewCardPresent@result 0059                                  l3993 059A  
                                l3979 0A24                                  l3995 05AC  
                                STR_1 7FF5                                  STR_2 7F6A  
                                STR_3 7F82                                  STR_4 7F50  
                                STR_5 7F1A                                  STR_6 7E18  
                                STR_7 7F97                                  STR_8 7F36  
                                STR_9 7EB6                                  u4140 012A  
                                u4250 0370                                  u4146 012C  
                                u4350 04EC                                  u3704 07EE  
                                u4264 03C0                                  u3705 07EA  
                                u4265 03BC                                  u4710 0C8E  
                                u5257 08B0                                  u5267 08C4  
                                _RCIF 007CF5                                  u5277 08FC  
                                u3790 063A                                  u5287 0910  
                                i2l71 0CCC                                  _TXIF 007CF4  
                                __ISR 0008                                  _main 0C92  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                pclat 000FFA                   ??_PICC_REQA_or_WUPA 004E  
                                prodh 000FF4                                  prodl 000FF3  
                                start 0018           _PCD_CommunicateWithPICC$494 0036  
                        ?_PICC_Select 004A                                 ?__ISR 0001  
         PCD_ReadRegisterVector@count 0015           PCD_ReadRegisterVector@index 0020  
                  __size_of_RFID_init 000A           PCD_ReadRegisterVector@value 001C  
                               ?_main 0001         PCD_ReadRegisterVector@address 001E  
                     __end_of___awdiv 09C4                                 STR_10 7FB8  
                               STR_11 7E6F                                 STR_20 7FC6  
                               STR_12 7E47                                 STR_13 7EFA  
                               STR_14 7FDF                                 STR_15 7FEA  
                               STR_16 7ED8                                 STR_17 7FD3  
                               STR_18 7FA9                                 STR_19 7E93  
                     ___awdiv@divisor 0011                      SPI_transfer@data 0014  
                     ___awdiv@counter 0013                                 _RCREG 000FAE  
                        _SPI_transfer 0870                                 _SPBRG 000FAF  
                               _PORTA 000F80             __end_of_PICC_REQA_or_WUPA 0ADE  
                               _TRISA 000F92                                 _TXREG 000FAD  
    __end_of_PCD_ClearRegisterBitMask 0D04                                 __mode 0063  
                  __size_of_UART_init 0016         PCD_ReadRegisterVector@rxAlign 0018  
                               _count 0061                                 tablat 000FF5  
                    __end_of_SPI_init 0C6E                                 status 000FD8  
                        __end_of__ISR 0B4A                       __initialization 0B4A  
                  MIFARE_SetUid@F4812 005B                     __end_of_FIFO_SIZE 7E18  
                        __end_of_main 0CB0             PCD_SetRegisterBitMask@reg 0019  
           PCD_SetRegisterBitMask@tmp 0018                      PICC_Select@count 009F  
                    PICC_Select@index 00A0                                ??__ISR 0001  
                              ??_main 005B             PCD_TransceiveData@backLen 0043  
                       __activetblptr 000002                __size_of_PICC_RequestA 0018  
                  __size_of__ISR_UART 001E                   _PICC_ReadCardSerial 0C6E  
                    _PCD_ReadRegister 0CCE             _PICC_IsNewCardPresent$752 0056  
                PCD_WriteRegister@reg 0016                      ___awdiv@dividend 000F  
                   SPI_transfer@i_416 0011             PCD_TransceiveData@sendLen 0040  
           PCD_TransceiveData@rxAlign 0047             PCD_TransceiveData@waitIRq 0049  
    PCD_CommunicateWithPICC@validBits 002A                   PICC_Select@maxbytes 008C  
                   __end_of_RFID_init 0D7A                   PICC_Select@uidIndex 0099  
                ?_PICC_ReadCardSerial 0001                     __end_of_UART_init 0D4A  
                           ??___awdiv 0013                                _buffer 00A3  
             ?_PCD_SetRegisterBitMask 0017      __size_of_PCD_WriteRegisterVector 0036  
                              clear_0 0B50                      ___awdiv@quotient 0015  
   PCD_CommunicateWithPICC@bitFraming 0035            PCD_WriteRegisterVector@reg 0018  
               _PICC_IsNewCardPresent 0C16            __size_of_PICC_REQA_or_WUPA 0088  
                        __pdataCOMRAM 005B                          __mediumconst 7E16  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                    _PCD_TransceiveData 0BA4  
   PCD_CommunicateWithPICC@_validBits 003C             PICC_Select@responseBuffer 009C  
           PICC_Select@responseLength 009B       PCD_CommunicateWithPICC@backData 0026  
            _PCD_ClearRegisterBitMask 0CEA                            __accesstop 0080  
             __end_of__initialization 0B9A                   ?_PCD_TransceiveData 003E  
               ??_PICC_ReadCardSerial 004F                         _PICC_RequestA 0D04  
     PCD_CommunicateWithPICC@checkCRC 002D                     ?_PCD_CalculateCRC 001A  
                   __end_of__ISR_UART 0CCE              ??_PCD_ReadRegisterVector 0019  
                        SPI_init@mode 000F                    ??_PCD_CalculateCRC 001F  
                      __pcstackCOMRAM 0001        __end_of_PCD_SetRegisterBitMask 0D34  
                        __pidataBANK0 0D60            PCD_SetRegisterBitMask@mask 0017  
        PCD_ClearRegisterBitMask@mask 0017                  ??_PCD_TransceiveData 0049  
                           ?_SPI_init 0001                  __size_of_PICC_Select 056A  
     PCD_CommunicateWithPICC@sendData 0023                     PICC_Select@buffer 008E  
                   PICC_Select@result 00A1            PCD_TransceiveData@backData 0041  
                          __pbssBANK0 00A3            PCD_TransceiveData@checkCRC 0048  
                      ?_PICC_RequestA 0052                            __pnvCOMRAM 0063  
            PICC_Select@useCascadeTag 0098                     PCD_CalculateCRC@i 001F  
                   PCD_CalculateCRC@n 0021              ?_PCD_CommunicateWithPICC 0022  
         PCD_ClearRegisterBitMask@reg 0019           PCD_ClearRegisterBitMask@tmp 0018  
          PCD_TransceiveData@sendData 003E                ?_PICC_IsNewCardPresent 0001  
                          ??_SPI_init 000F          MIFARE_UnbrickUidSector@F4826 00BF  
   PCD_CommunicateWithPICC@txLastBits 0034                  PICC_Select@validBits 004C  
                             __Hparam 0000               PICC_RequestA@bufferATQA 0052  
            __end_of_PCD_ReadRegister 0CEA                               __Lparam 0000  
     __size_of_PCD_ReadRegisterVector 00C6               PICC_RequestA@bufferSize 0054  
                             ___awdiv 0920               _PCD_WriteRegisterVector 0BE0  
            PCD_CommunicateWithPICC@i 0032              PCD_CommunicateWithPICC@n 003D  
                   _PCD_WriteRegister 0D4A                               __pcinit 0B4A  
                             __ramtop 0600                             _FIFO_SIZE 7E17  
                             __ptext0 0C92                               __ptext1 0D34  
                             __ptext2 0C4A                               __ptext3 0D70  
                             __ptext4 0C6E                               __ptext5 001C  
                             __ptext6 0920                               __ptext7 0C16  
                             __ptext8 0D04                               __ptext9 0A56  
                  ?_PCD_WriteRegister 0015                   ??_PCD_WriteRegister 0016  
                      __pintcode_body 0ADE                  end_of_initialization 0B9A  
                     ??_PICC_RequestA 0056  PCD_CommunicateWithPICC@controlBuffer 0039  
              PICC_Select@bytesToCopy 009A       __end_of_PCD_CommunicateWithPICC 07AA  
                       __Lmediumconst 7E16                               int_func 0ADE  
                           _RFID_init 0D70          PCD_WriteRegisterVector@count 0015  
        PCD_WriteRegisterVector@index 0019                             _RCSTAbits 000FAB  
           __end_of_PCD_WriteRegister 0D60                               postdec1 000FE5  
                             postinc0 000FEE               PICC_Select@cascadeLevel 008D  
                           _UART_init 0D34            ??_PCD_ClearRegisterBitMask 0018  
              _PCD_ReadRegisterVector 07AA                             _TRISBbits 000F93  
              PICC_Select@uidComplete 0086                PCD_CalculateCRC@length 001C  
                           _TXSTAbits 000FAC                PCD_CalculateCRC@result 001D  
           ??_PCD_WriteRegisterVector 0018                            ?_RFID_init 0001  
       PCD_WriteRegisterVector@values 0016                        PICC_Select@uid 004A  
                           __ISR_UART 0CB0            PCD_ReadRegisterVector@mask 001D  
             PCD_ReadRegisterVector@i 001F                       SPI_transfer@ret 0013  
                       __pidataCOMRAM 0D7A                            ?_UART_init 0001  
           __size_of_PCD_CalculateCRC 0092                   start_initialization 0B4A  
                   __size_of_SPI_init 0024           __end_of_PICC_ReadCardSerial 0C92  
         PICC_REQA_or_WUPA@bufferATQA 004A           PICC_REQA_or_WUPA@bufferSize 004C  
                  PICC_Select@rxAlign 008B            __size_of_PCD_WriteRegister 0016  
                          ?__ISR_UART 0001               ??_PICC_IsNewCardPresent 0056  
                       ??_PICC_Select 004D                           __pdataBANK0 00BF  
         __size_of_PCD_TransceiveData 003C                         ?_SPI_transfer 0001  
      PCD_CommunicateWithPICC@backLen 0028      __size_of_PCD_CommunicateWithPICC 0224  
               PCD_ReadRegister@value 0016                  PCD_CalculateCRC@data 001A  
                         __pbssCOMRAM 0061                         __pcstackBANK0 0080  
                 __end_of__stringdata 7FFE                         SPI_transfer@i 000F  
      PCD_CommunicateWithPICC@command 0038        PCD_CommunicateWithPICC@sendLen 0025  
      PCD_CommunicateWithPICC@rxAlign 002C        PCD_CommunicateWithPICC@waitIRq 0022  
PCD_CommunicateWithPICC@errorRegValue 003B       PICC_IsNewCardPresent@bufferATQA 0057  
     PICC_IsNewCardPresent@bufferSize 005A                           ??_RFID_init 000F  
                   ?_PCD_ReadRegister 0001                             __pintcode 0008  
                       __pmediumconst 7E16                              ?___awdiv 000F  
                  ??_PCD_ReadRegister 0015                 PICC_Select@bufferUsed 0088  
              PCD_WriteRegister@value 0015                           ??_UART_init 000F  
                      ??_SPI_transfer 000F                   __end_of_PICC_Select 0586  
    PICC_Select@currentLevelKnownBits 00A2           PCD_TransceiveData@validBits 0045  
            ??_PCD_SetRegisterBitMask 0018                           ??__ISR_UART 0001  
             PICC_Select@collisionPos 0097               ?_PCD_ReadRegisterVector 0015  
                    _PCD_CalculateCRC 09C4                           __stringdata 7E18  
                            _SPI_init 0C4A          PCD_ReadRegisterVector@values 0016  
               PICC_Select@selectDone 0087             PCD_ReadRegisterVector@reg 001B  
                           copy_data0 0B6E                             copy_data1 0B8E  
               __end_of_PICC_RequestA 0D1C                 PICC_Select@txLastBits 009E  
                            __Hrparam 0000                              __Lrparam 0000  
      __end_of_PCD_ReadRegisterVector 0870                      __size_of___awdiv 00A4  
                         _PICC_Select 001C               _PCD_CommunicateWithPICC 0586  
          PICC_REQA_or_WUPA@validBits 0051                              __ptext10 0BA4  
                            __ptext11 0586                              __ptext12 07AA  
                            __ptext21 0CB0                              __ptext13 09C4  
                            __ptext14 0BE0                              __ptext15 0D1C  
                            __ptext16 0CEA                              __ptext17 0D4A  
                            __ptext18 0CCE                              __ptext19 0870  
                       __size_of__ISR 0B42                         __size_of_main 001E  
                __end_of_SPI_transfer 0920       __size_of_PCD_SetRegisterBitMask 0018  
   __size_of_PCD_ClearRegisterBitMask 001A             ?_PCD_ClearRegisterBitMask 0017  
      __size_of_PICC_IsNewCardPresent 0034         __end_of_PICC_IsNewCardPresent 0C4A  
            PICC_REQA_or_WUPA@command 004F                   PCD_ReadRegister@reg 0015  
                            intlevel2 0000              ?_PCD_WriteRegisterVector 0015  
        __size_of_PICC_ReadCardSerial 0024            __end_of_PCD_TransceiveData 0BE0  
           ??_PCD_CommunicateWithPICC 002E                _PCD_SetRegisterBitMask 0D1C  
             PICC_REQA_or_WUPA@status 0050             PICC_ReadCardSerial@result 004F  
           __size_of_PCD_ReadRegister 001C              __end_of_PCD_CalculateCRC 0A56  
                     _PICC_Select$551 0082                       _PICC_Select$552 0084  
                     _PICC_Select$545 0089                       _PICC_Select$546 008A  
                     _PICC_Select$549 0080  
