

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat Mar 28 11:45:48 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000E                     	;# 
    52  000E                     	;# 
    53  000F                     	;# 
    54  0010                     	;# 
    55  0011                     	;# 
    56  0012                     	;# 
    57  0015                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0017                     	;# 
    61  0018                     	;# 
    62  0019                     	;# 
    63  001A                     	;# 
    64  001F                     	;# 
    65  0081                     	;# 
    66  0085                     	;# 
    67  0086                     	;# 
    68  008C                     	;# 
    69  008E                     	;# 
    70  0092                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009F                     	;# 
    78                           
    79                           	psect	idataBANK0
    80  0616                     __pidataBANK0:	
    81                           
    82                           ;initializer for _key
    83  0616  34FF               	retlw	255
    84  0617  34FF               	retlw	255
    85  0618  34FF               	retlw	255
    86  0619  34FF               	retlw	255
    87  061A  34FF               	retlw	255
    88  061B  34FF               	retlw	255
    89                           
    90                           	psect	idataBANK1
    91  05A0                     __pidataBANK1:	
    92                           
    93                           ;initializer for _writeData
    94  05A0  344D               	retlw	77
    95  05A1  3469               	retlw	105
    96  05A2  3463               	retlw	99
    97  05A3  3472               	retlw	114
    98  05A4  346F               	retlw	111
    99  05A5  3463               	retlw	99
   100  05A6  346F               	retlw	111
   101  05A7  346E               	retlw	110
   102  05A8  3474               	retlw	116
   103  05A9  3472               	retlw	114
   104  05AA  346F               	retlw	111
   105  05AB  346C               	retlw	108
   106  05AC  3461               	retlw	97
   107  05AD  346E               	retlw	110
   108  05AE  3464               	retlw	100
   109  05AF  346F               	retlw	111
   110  05B0  3473               	retlw	115
   111  05B1  3400               	retlw	0
   112                           
   113                           	psect	strings
   114  0500                     __pstrings:	
   115  0500                     stringtab:	
   116  0500                     __stringtab:	
   117  0500                     stringcode:	
   118                           ;	String table - string pointers are 1 byte each
   119                           
   120  0500                     stringdir:	
   121  0500  3005               	movlw	high stringdir
   122  0501  008A               	movwf	10
   123  0502  0804               	movf	4,w
   124  0503  0A84               	incf	4,f
   125  0504  0782               	addwf	2,f
   126  0505                     __stringbase:	
   127  0505  3400               	retlw	0
   128  0506                     __end_of__stringtab:	
   129  0506                     _dpowers:	
   130  0506  3401               	retlw	1
   131  0507  3400               	retlw	0
   132  0508  340A               	retlw	10
   133  0509  3400               	retlw	0
   134  050A  3464               	retlw	100
   135  050B  3400               	retlw	0
   136  050C  34E8               	retlw	232
   137  050D  3403               	retlw	3
   138  050E  3410               	retlw	16
   139  050F  3427               	retlw	39
   140  0510                     __end_of_dpowers:	
   141  0006                     _PORTB	set	6
   142  001A                     _RCREG	set	26
   143  0018                     _RCSTAbits	set	24
   144  0019                     _TXREG	set	25
   145  0065                     _RCIF	set	101
   146  0064                     _TXIF	set	100
   147  0099                     _SPBRG	set	153
   148  0086                     _TRISB	set	134
   149  0086                     _TRISBbits	set	134
   150  0098                     _TXSTAbits	set	152
   151  0510                     __stringdata:	
   152  0510                     STR_1:	
   153  0510  3454               	retlw	84	;'T'
   154  0511  3469               	retlw	105	;'i'
   155  0512  3470               	retlw	112	;'p'
   156  0513  346F               	retlw	111	;'o'
   157  0514  3420               	retlw	32	;' '
   158  0515  3464               	retlw	100	;'d'
   159  0516  3465               	retlw	101	;'e'
   160  0517  3420               	retlw	32	;' '
   161  0518  3454               	retlw	84	;'T'
   162  0519  3461               	retlw	97	;'a'
   163  051A  3467               	retlw	103	;'g'
   164  051B  343A               	retlw	58	;':'
   165  051C  3420               	retlw	32	;' '
   166  051D  3425               	retlw	37	;'%'
   167  051E  3464               	retlw	100	;'d'
   168  051F  340A               	retlw	10
   169  0520  3400               	retlw	0
   170  0521                     STR_2:	
   171  0521  3443               	retlw	67	;'C'
   172  0522  346F               	retlw	111	;'o'
   173  0523  3464               	retlw	100	;'d'
   174  0524  3469               	retlw	105	;'i'
   175  0525  3467               	retlw	103	;'g'
   176  0526  346F               	retlw	111	;'o'
   177  0527  343A               	retlw	58	;':'
   178  0528  3420               	retlw	32	;' '
   179  0529  3400               	retlw	0
   180  052A                     STR_3:	
   181  052A  3425               	retlw	37	;'%'
   182  052B  3463               	retlw	99	;'c'
   183  052C  3400               	retlw	0
   184  052D                     __end_of__stringdata:	
   185                           
   186                           	psect	cinit
   187  0011                     start_initialization:	
   188                           ; #config settings
   189                           
   190  0011                     __initialization:	
   191                           
   192                           ; Clear objects allocated to COMMON
   193  0011  01F7               	clrf	__pbssCOMMON& (0+127)
   194  0012  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   195                           
   196                           ; Clear objects allocated to BANK1
   197  0013  1383               	bcf	3,7	;select IRP bank0
   198  0014  30B2               	movlw	low __pbssBANK1
   199  0015  0084               	movwf	4
   200  0016  30C2               	movlw	low (__pbssBANK1+16)
   201  0017  260E               	fcall	clear_ram0
   202                           
   203                           ; Initialize objects allocated to BANK1
   204  0018  1683               	bsf	3,5	;RP0=1, select bank1
   205  0019  1303               	bcf	3,6	;RP1=0, select bank1
   206  001A  25A0               	fcall	__pidataBANK1	;fetch initializer
   207  001B  00A0               	movwf	__pdataBANK1& (0+127)
   208  001C  25A1               	fcall	__pidataBANK1+1	;fetch initializer
   209  001D  00A1               	movwf	(__pdataBANK1+1)& (0+127)
   210  001E  25A2               	fcall	__pidataBANK1+2	;fetch initializer
   211  001F  00A2               	movwf	(__pdataBANK1+2)& (0+127)
   212  0020  25A3               	fcall	__pidataBANK1+3	;fetch initializer
   213  0021  00A3               	movwf	(__pdataBANK1+3)& (0+127)
   214  0022  25A4               	fcall	__pidataBANK1+4	;fetch initializer
   215  0023  00A4               	movwf	(__pdataBANK1+4)& (0+127)
   216  0024  25A5               	fcall	__pidataBANK1+5	;fetch initializer
   217  0025  00A5               	movwf	(__pdataBANK1+5)& (0+127)
   218  0026  25A6               	fcall	__pidataBANK1+6	;fetch initializer
   219  0027  00A6               	movwf	(__pdataBANK1+6)& (0+127)
   220  0028  25A7               	fcall	__pidataBANK1+7	;fetch initializer
   221  0029  00A7               	movwf	(__pdataBANK1+7)& (0+127)
   222  002A  25A8               	fcall	__pidataBANK1+8	;fetch initializer
   223  002B  00A8               	movwf	(__pdataBANK1+8)& (0+127)
   224  002C  25A9               	fcall	__pidataBANK1+9	;fetch initializer
   225  002D  00A9               	movwf	(__pdataBANK1+9)& (0+127)
   226  002E  25AA               	fcall	__pidataBANK1+10	;fetch initializer
   227  002F  00AA               	movwf	(__pdataBANK1+10)& (0+127)
   228  0030  25AB               	fcall	__pidataBANK1+11	;fetch initializer
   229  0031  00AB               	movwf	(__pdataBANK1+11)& (0+127)
   230  0032  25AC               	fcall	__pidataBANK1+12	;fetch initializer
   231  0033  00AC               	movwf	(__pdataBANK1+12)& (0+127)
   232  0034  25AD               	fcall	__pidataBANK1+13	;fetch initializer
   233  0035  00AD               	movwf	(__pdataBANK1+13)& (0+127)
   234  0036  25AE               	fcall	__pidataBANK1+14	;fetch initializer
   235  0037  00AE               	movwf	(__pdataBANK1+14)& (0+127)
   236  0038  25AF               	fcall	__pidataBANK1+15	;fetch initializer
   237  0039  00AF               	movwf	(__pdataBANK1+15)& (0+127)
   238  003A  25B0               	fcall	__pidataBANK1+16	;fetch initializer
   239  003B  00B0               	movwf	(__pdataBANK1+16)& (0+127)
   240  003C  25B1               	fcall	__pidataBANK1+17	;fetch initializer
   241  003D  00B1               	movwf	(__pdataBANK1+17)& (0+127)
   242                           
   243                           ; Initialize objects allocated to BANK0
   244  003E  1283               	bcf	3,5	;RP0=0, select bank0
   245  003F  1303               	bcf	3,6	;RP1=0, select bank0
   246  0040  2616               	fcall	__pidataBANK0	;fetch initializer
   247  0041  00DF               	movwf	__pdataBANK0& (0+127)
   248  0042  2617               	fcall	__pidataBANK0+1	;fetch initializer
   249  0043  00E0               	movwf	(__pdataBANK0+1)& (0+127)
   250  0044  2618               	fcall	__pidataBANK0+2	;fetch initializer
   251  0045  00E1               	movwf	(__pdataBANK0+2)& (0+127)
   252  0046  2619               	fcall	__pidataBANK0+3	;fetch initializer
   253  0047  00E2               	movwf	(__pdataBANK0+3)& (0+127)
   254  0048  261A               	fcall	__pidataBANK0+4	;fetch initializer
   255  0049  00E3               	movwf	(__pdataBANK0+4)& (0+127)
   256  004A  261B               	fcall	__pidataBANK0+5	;fetch initializer
   257  004B  00E4               	movwf	(__pdataBANK0+5)& (0+127)
   258  004C                     end_of_initialization:	
   259                           ;End of C runtime variable initialization code
   260                           
   261  004C                     __end_of__initialization:	
   262  004C  0183               	clrf	3
   263  004D  2B96               	ljmp	_main	;jump to C main() function
   264                           
   265                           	psect	bssCOMMON
   266  0077                     __pbssCOMMON:	
   267  0077                     _count:	
   268  0077                     	ds	2
   269                           
   270                           	psect	dataBANK0
   271  005F                     __pdataBANK0:	
   272  005F                     _key:	
   273  005F                     	ds	6
   274                           
   275                           	psect	bssBANK1
   276  00B2                     __pbssBANK1:	
   277  00B2                     _buffer:	
   278  00B2                     	ds	16
   279                           
   280                           	psect	dataBANK1
   281  00A0                     __pdataBANK1:	
   282  00A0                     _writeData:	
   283  00A0                     	ds	18
   284                           
   285                           	psect	clrtext
   286  060E                     clear_ram0:	
   287                           ;	Called with FSR containing the base address, and
   288                           ;	W with the last address+1
   289                           
   290  060E  0064               	clrwdt	;clear the watchdog before getting into this loop
   291  060F                     clrloop0:	
   292  060F  0180               	clrf	0	;clear RAM location pointed to by FSR
   293  0610  0A84               	incf	4,f	;increment pointer
   294  0611  0604               	xorwf	4,w	;XOR with final address
   295  0612  1903               	btfsc	3,2	;have we reached the end yet?
   296  0613  3400               	retlw	0	;all done for this memory range, return
   297  0614  0604               	xorwf	4,w	;XOR again to restore value
   298  0615  2E0F               	goto	clrloop0	;do the next byte
   299                           
   300                           	psect	cstackCOMMON
   301  0070                     __pcstackCOMMON:	
   302  0070                     ?_putch:	
   303  0070                     ?_UART_init:	
   304                           ; 0 bytes @ 0x0
   305                           
   306  0070                     ?__ISR:	
   307                           ; 0 bytes @ 0x0
   308                           
   309  0070                     ??__ISR:	
   310                           ; 0 bytes @ 0x0
   311                           
   312  0070                     ?_SPI_init:	
   313                           ; 0 bytes @ 0x0
   314                           
   315  0070                     ?_MFRC522_Reset:	
   316                           ; 0 bytes @ 0x0
   317                           
   318  0070                     ?_MFRC522_AntennaOn:	
   319                           ; 0 bytes @ 0x0
   320                           
   321  0070                     ?_MFRC522_Init:	
   322                           ; 0 bytes @ 0x0
   323                           
   324  0070                     ?_MFRC522_Halt:	
   325                           ; 0 bytes @ 0x0
   326                           
   327  0070                     ?_main:	
   328                           ; 0 bytes @ 0x0
   329                           
   330  0070                     ?_SPI_transfer:	
   331                           ; 0 bytes @ 0x0
   332                           
   333  0070                     ?_MFRC522_Rd:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_MFRC522_SelectTag:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_MFRC522_AntiColl:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_MFRC522_isCard:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_MFRC522_ReadCardSerial:	
   346                           ; 1 bytes @ 0x0
   347                           
   348                           
   349                           ; 1 bytes @ 0x0
   350  0070                     	ds	5
   351  0075                     ??_putch:	
   352  0075                     ??_UART_init:	
   353                           ; 0 bytes @ 0x5
   354                           
   355  0075                     ??_SPI_init:	
   356                           ; 0 bytes @ 0x5
   357                           
   358  0075                     ??_SPI_transfer:	
   359                           ; 0 bytes @ 0x5
   360                           
   361  0075                     ??___lwdiv:	
   362                           ; 0 bytes @ 0x5
   363                           
   364  0075                     putch@data:	
   365                           ; 0 bytes @ 0x5
   366                           
   367                           
   368                           ; 1 bytes @ 0x5
   369  0075                     	ds	1
   370  0076                     ??_MFRC522_Rd:	
   371  0076                     ??___lwmod:	
   372                           ; 0 bytes @ 0x6
   373                           
   374                           
   375                           ; 0 bytes @ 0x6
   376  0076                     	ds	1
   377                           
   378                           	psect	cstackBANK0
   379  0020                     __pcstackBANK0:	
   380  0020                     ?___lwdiv:	
   381  0020                     SPI_transfer@data:	
   382                           ; 2 bytes @ 0x0
   383                           
   384  0020                     ___lwdiv@divisor:	
   385                           ; 1 bytes @ 0x0
   386                           
   387                           
   388                           ; 2 bytes @ 0x0
   389  0020                     	ds	1
   390  0021                     SPI_transfer@ret:	
   391                           
   392                           ; 1 bytes @ 0x1
   393  0021                     	ds	1
   394  0022                     SPI_transfer@i:	
   395  0022                     ___lwdiv@dividend:	
   396                           ; 2 bytes @ 0x2
   397                           
   398                           
   399                           ; 2 bytes @ 0x2
   400  0022                     	ds	2
   401  0024                     MFRC522_Rd@addr:	
   402  0024                     ___lwdiv@counter:	
   403                           ; 1 bytes @ 0x4
   404                           
   405                           
   406                           ; 1 bytes @ 0x4
   407  0024                     	ds	1
   408  0025                     MFRC522_Rd@value:	
   409  0025                     ___lwdiv@quotient:	
   410                           ; 1 bytes @ 0x5
   411                           
   412                           
   413                           ; 2 bytes @ 0x5
   414  0025                     	ds	1
   415  0026                     ?_MFRC522_Wr:	
   416  0026                     MFRC522_Wr@value:	
   417                           ; 0 bytes @ 0x6
   418                           
   419                           
   420                           ; 1 bytes @ 0x6
   421  0026                     	ds	1
   422  0027                     ??_MFRC522_Wr:	
   423  0027                     ?___lwmod:	
   424                           ; 0 bytes @ 0x7
   425                           
   426  0027                     ___lwmod@divisor:	
   427                           ; 2 bytes @ 0x7
   428                           
   429                           
   430                           ; 2 bytes @ 0x7
   431  0027                     	ds	1
   432  0028                     MFRC522_Wr@addr:	
   433                           
   434                           ; 1 bytes @ 0x8
   435  0028                     	ds	1
   436  0029                     ?_MFRC522_Clear_Bit:	
   437  0029                     ?_MFRC522_Set_Bit:	
   438                           ; 0 bytes @ 0x9
   439                           
   440  0029                     ??_MFRC522_Reset:	
   441                           ; 0 bytes @ 0x9
   442                           
   443  0029                     MFRC522_Clear_Bit@mask:	
   444                           ; 0 bytes @ 0x9
   445                           
   446  0029                     MFRC522_Set_Bit@mask:	
   447                           ; 1 bytes @ 0x9
   448                           
   449  0029                     ___lwmod@dividend:	
   450                           ; 1 bytes @ 0x9
   451                           
   452                           
   453                           ; 2 bytes @ 0x9
   454  0029                     	ds	1
   455  002A                     ??_MFRC522_Clear_Bit:	
   456  002A                     ??_MFRC522_Set_Bit:	
   457                           ; 0 bytes @ 0xA
   458                           
   459                           
   460                           ; 0 bytes @ 0xA
   461  002A                     	ds	1
   462  002B                     MFRC522_Set_Bit@addr:	
   463  002B                     ___lwmod@counter:	
   464                           ; 1 bytes @ 0xB
   465                           
   466                           
   467                           ; 1 bytes @ 0xB
   468  002B                     	ds	1
   469  002C                     ??_MFRC522_AntennaOn:	
   470  002C                     ?_printf:	
   471                           ; 0 bytes @ 0xC
   472                           
   473  002C                     MFRC522_Clear_Bit@addr:	
   474                           ; 2 bytes @ 0xC
   475                           
   476                           
   477                           ; 1 bytes @ 0xC
   478  002C                     	ds	1
   479  002D                     ??_MFRC522_Init:	
   480  002D                     ?_MFRC522_CRC:	
   481                           ; 0 bytes @ 0xD
   482                           
   483  002D                     ?_MFRC522_ToCard:	
   484                           ; 0 bytes @ 0xD
   485                           
   486  002D                     MFRC522_ToCard@sendData:	
   487                           ; 1 bytes @ 0xD
   488                           
   489  002D                     MFRC522_CRC@length:	
   490                           ; 1 bytes @ 0xD
   491                           
   492                           
   493                           ; 1 bytes @ 0xD
   494  002D                     	ds	1
   495  002E                     ??_printf:	
   496  002E                     MFRC522_ToCard@sendLen:	
   497                           ; 0 bytes @ 0xE
   498                           
   499  002E                     MFRC522_CRC@dataOut:	
   500                           ; 1 bytes @ 0xE
   501                           
   502                           
   503                           ; 1 bytes @ 0xE
   504  002E                     	ds	1
   505  002F                     ??_MFRC522_CRC:	
   506  002F                     MFRC522_ToCard@backData:	
   507                           ; 0 bytes @ 0xF
   508                           
   509                           
   510                           ; 1 bytes @ 0xF
   511  002F                     	ds	1
   512  0030                     MFRC522_ToCard@backLen:	
   513  0030                     MFRC522_CRC@n:	
   514                           ; 1 bytes @ 0x10
   515                           
   516                           
   517                           ; 1 bytes @ 0x10
   518  0030                     	ds	1
   519  0031                     ??_MFRC522_ToCard:	
   520  0031                     MFRC522_CRC@dataIn:	
   521                           ; 0 bytes @ 0x11
   522                           
   523  0031                     printf@flag:	
   524                           ; 1 bytes @ 0x11
   525                           
   526                           
   527                           ; 1 bytes @ 0x11
   528  0031                     	ds	1
   529  0032                     MFRC522_CRC@i:	
   530  0032                     printf@prec:	
   531                           ; 1 bytes @ 0x12
   532                           
   533                           
   534                           ; 1 bytes @ 0x12
   535  0032                     	ds	1
   536  0033                     printf@ap:	
   537                           
   538                           ; 1 bytes @ 0x13
   539  0033                     	ds	1
   540  0034                     printf@f:	
   541                           
   542                           ; 1 bytes @ 0x14
   543  0034                     	ds	1
   544  0035                     printf@_val:	
   545                           
   546                           ; 4 bytes @ 0x15
   547  0035                     	ds	2
   548  0037                     MFRC522_ToCard@waitIRq:	
   549                           
   550                           ; 1 bytes @ 0x17
   551  0037                     	ds	1
   552  0038                     MFRC522_ToCard@_status:	
   553                           
   554                           ; 1 bytes @ 0x18
   555  0038                     	ds	1
   556  0039                     MFRC522_ToCard@lastBits:	
   557  0039                     printf@c:	
   558                           ; 1 bytes @ 0x19
   559                           
   560                           
   561                           ; 1 bytes @ 0x19
   562  0039                     	ds	1
   563  003A                     MFRC522_ToCard@irqEn:	
   564                           
   565                           ; 1 bytes @ 0x1A
   566  003A                     	ds	1
   567  003B                     MFRC522_ToCard@command:	
   568                           
   569                           ; 1 bytes @ 0x1B
   570  003B                     	ds	1
   571  003C                     MFRC522_ToCard@i:	
   572                           
   573                           ; 2 bytes @ 0x1C
   574  003C                     	ds	2
   575  003E                     MFRC522_ToCard@n:	
   576                           
   577                           ; 1 bytes @ 0x1E
   578  003E                     	ds	1
   579  003F                     ??_MFRC522_SelectTag:	
   580  003F                     ??_MFRC522_Halt:	
   581                           ; 0 bytes @ 0x1F
   582                           
   583  003F                     ??_MFRC522_AntiColl:	
   584                           ; 0 bytes @ 0x1F
   585                           
   586  003F                     ?_MFRC522_Request:	
   587                           ; 0 bytes @ 0x1F
   588                           
   589  003F                     MFRC522_Request@TagType:	
   590                           ; 1 bytes @ 0x1F
   591                           
   592                           
   593                           ; 1 bytes @ 0x1F
   594  003F                     	ds	1
   595  0040                     ??_MFRC522_Request:	
   596                           
   597                           ; 0 bytes @ 0x20
   598  0040                     	ds	3
   599  0043                     MFRC522_Halt@buff:	
   600                           
   601                           ; 4 bytes @ 0x23
   602  0043                     	ds	1
   603  0044                     MFRC522_Request@reqMode:	
   604  0044                     MFRC522_AntiColl@serNumCheck:	
   605                           ; 1 bytes @ 0x24
   606                           
   607  0044                     MFRC522_SelectTag@buffer:	
   608                           ; 1 bytes @ 0x24
   609                           
   610                           
   611                           ; 9 bytes @ 0x24
   612  0044                     	ds	1
   613  0045                     MFRC522_Request@_status:	
   614  0045                     MFRC522_AntiColl@unLen:	
   615                           ; 1 bytes @ 0x25
   616                           
   617                           
   618                           ; 2 bytes @ 0x25
   619  0045                     	ds	1
   620  0046                     MFRC522_Request@backBits:	
   621                           
   622                           ; 2 bytes @ 0x26
   623  0046                     	ds	1
   624  0047                     MFRC522_AntiColl@_status:	
   625  0047                     MFRC522_Halt@unLen:	
   626                           ; 1 bytes @ 0x27
   627                           
   628                           
   629                           ; 2 bytes @ 0x27
   630  0047                     	ds	1
   631  0048                     ??_MFRC522_isCard:	
   632  0048                     MFRC522_AntiColl@i:	
   633                           ; 0 bytes @ 0x28
   634                           
   635                           
   636                           ; 1 bytes @ 0x28
   637  0048                     	ds	1
   638  0049                     MFRC522_AntiColl@serNum:	
   639  0049                     MFRC522_isCard@TagType:	
   640                           ; 1 bytes @ 0x29
   641                           
   642                           
   643                           ; 1 bytes @ 0x29
   644  0049                     	ds	1
   645  004A                     ??_MFRC522_ReadCardSerial:	
   646                           
   647                           ; 0 bytes @ 0x2A
   648  004A                     	ds	1
   649  004B                     MFRC522_ReadCardSerial@_status:	
   650                           
   651                           ; 1 bytes @ 0x2B
   652  004B                     	ds	1
   653  004C                     MFRC522_ReadCardSerial@str:	
   654                           
   655                           ; 1 bytes @ 0x2C
   656  004C                     	ds	1
   657  004D                     MFRC522_SelectTag@_status:	
   658                           
   659                           ; 1 bytes @ 0x2D
   660  004D                     	ds	1
   661  004E                     MFRC522_SelectTag@serNum:	
   662                           
   663                           ; 1 bytes @ 0x2E
   664  004E                     	ds	1
   665  004F                     MFRC522_SelectTag@size:	
   666                           
   667                           ; 1 bytes @ 0x2F
   668  004F                     	ds	1
   669  0050                     MFRC522_SelectTag@recvBits:	
   670                           
   671                           ; 2 bytes @ 0x30
   672  0050                     	ds	2
   673  0052                     MFRC522_SelectTag@i:	
   674                           
   675                           ; 1 bytes @ 0x32
   676  0052                     	ds	1
   677  0053                     ??_main:	
   678                           
   679                           ; 0 bytes @ 0x33
   680  0053                     	ds	2
   681  0055                     main@size:	
   682                           
   683                           ; 1 bytes @ 0x35
   684  0055                     	ds	1
   685  0056                     main@UID:	
   686                           
   687                           ; 6 bytes @ 0x36
   688  0056                     	ds	6
   689  005C                     main@i:	
   690                           
   691                           ; 1 bytes @ 0x3C
   692  005C                     	ds	1
   693  005D                     main@TagType:	
   694                           
   695                           ; 2 bytes @ 0x3D
   696  005D                     	ds	2
   697                           
   698                           	psect	maintext
   699  0396                     __pmaintext:	
   700 ;;
   701 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   702 ;;
   703 ;; *************** function _main *****************
   704 ;; Defined at:
   705 ;;		line 636 in file "main.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;  msg            12    0        unsigned char [12]
   710 ;;  UID             6   54[BANK0 ] unsigned char [6]
   711 ;;  TagType         2   61[BANK0 ] unsigned int 
   712 ;;  i               1   60[BANK0 ] unsigned char 
   713 ;;  size            1   53[BANK0 ] unsigned char 
   714 ;; Return value:  Size  Location     Type
   715 ;;		None               void
   716 ;; Registers used:
   717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 17F/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   723 ;;      Params:         0       0       0       0
   724 ;;      Locals:         0      10       0       0
   725 ;;      Temps:          0       2       0       0
   726 ;;      Totals:         0      12       0       0
   727 ;;Total ram usage:       12 bytes
   728 ;; Hardware stack levels required when called:    7
   729 ;; This function calls:
   730 ;;		_MFRC522_Halt
   731 ;;		_MFRC522_Init
   732 ;;		_MFRC522_ReadCardSerial
   733 ;;		_MFRC522_SelectTag
   734 ;;		_MFRC522_isCard
   735 ;;		_SPI_init
   736 ;;		_UART_init
   737 ;;		_printf
   738 ;; This function is called by:
   739 ;;		Startup code after reset
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           
   744                           ;psect for function _main
   745  0396                     _main:	
   746                           
   747                           ;main.c: 638: char msg[12];
   748                           ;main.c: 639: char UID[6];
   749                           ;main.c: 640: unsigned int TagType;
   750                           ;main.c: 641: char size;
   751                           ;main.c: 642: char i;
   752                           ;main.c: 644: SPI_init();
   753                           
   754                           ;incstack = 0
   755                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   756  0396  25F1               	fcall	_SPI_init
   757                           
   758                           ;main.c: 646: UART_init();
   759  0397  25B2               	fcall	_UART_init
   760                           
   761                           ;main.c: 649: MFRC522_Init();
   762  0398  2418               	fcall	_MFRC522_Init
   763  0399                     l2330:	
   764                           ;main.c: 651: while(1)
   765                           
   766                           
   767                           ;main.c: 652: {
   768                           ;main.c: 654: if( MFRC522_isCard( &TagType ) )
   769  0399  305D               	movlw	main@TagType& (0+255)
   770  039A  25C3               	fcall	_MFRC522_isCard
   771  039B  3A00               	xorlw	0
   772  039C  1903               	skipnz
   773  039D  2B99               	goto	l2330
   774                           
   775                           ;main.c: 655: {
   776                           ;main.c: 661: printf("Tipo de Tag: %d\n",TagType);
   777  039E  1283               	bcf	3,5	;RP0=0, select bank0
   778  039F  1303               	bcf	3,6	;RP1=0, select bank0
   779  03A0  085E               	movf	main@TagType+1,w
   780  03A1  01AD               	clrf	?_printf+1
   781  03A2  07AD               	addwf	?_printf+1,f
   782  03A3  085D               	movf	main@TagType,w
   783  03A4  01AC               	clrf	?_printf
   784  03A5  07AC               	addwf	?_printf,f
   785  03A6  300B               	movlw	(STR_1-__stringbase)& (0+255)
   786  03A7  2183               	fcall	_printf
   787                           
   788                           ;main.c: 663: if( MFRC522_ReadCardSerial( &UID ) )
   789  03A8  3056               	movlw	main@UID& (0+255)
   790  03A9  2576               	fcall	_MFRC522_ReadCardSerial
   791  03AA  3A00               	xorlw	0
   792  03AB  1903               	skipnz
   793  03AC  2BD6               	goto	l219
   794                           
   795                           ;main.c: 664: {
   796                           ;main.c: 665: printf("Codigo: ");
   797  03AD  301C               	movlw	(STR_2-__stringbase)& (0+255)
   798  03AE  2183               	fcall	_printf
   799                           
   800                           ;main.c: 666: for( i=0; i < 5; i++)
   801  03AF  1283               	bcf	3,5	;RP0=0, select bank0
   802  03B0  1303               	bcf	3,6	;RP1=0, select bank0
   803  03B1  01DC               	clrf	main@i
   804  03B2  3005               	movlw	5
   805  03B3  025C               	subwf	main@i,w
   806  03B4  1803               	btfsc	3,0
   807  03B5  2BCD               	goto	l2348
   808  03B6                     l2342:	
   809                           
   810                           ;main.c: 667: {
   811                           ;main.c: 668: printf("%c",UID[i]);
   812  03B6  085C               	movf	main@i,w
   813  03B7  3E56               	addlw	main@UID& (0+255)
   814  03B8  0084               	movwf	4
   815  03B9  1383               	bcf	3,7	;select IRP bank0
   816  03BA  0800               	movf	0,w
   817  03BB  00D3               	movwf	??_main
   818  03BC  01D4               	clrf	??_main+1
   819  03BD  0853               	movf	??_main,w
   820  03BE  00AC               	movwf	?_printf
   821  03BF  0854               	movf	??_main+1,w
   822  03C0  00AD               	movwf	?_printf+1
   823  03C1  3025               	movlw	(STR_3-__stringbase)& (0+255)
   824  03C2  2183               	fcall	_printf
   825  03C3  3001               	movlw	1
   826  03C4  1283               	bcf	3,5	;RP0=0, select bank0
   827  03C5  1303               	bcf	3,6	;RP1=0, select bank0
   828  03C6  00D3               	movwf	??_main
   829  03C7  0853               	movf	??_main,w
   830  03C8  07DC               	addwf	main@i,f
   831  03C9  3005               	movlw	5
   832  03CA  025C               	subwf	main@i,w
   833  03CB  1C03               	skipc
   834  03CC  2BB6               	goto	l2342
   835  03CD                     l2348:	
   836                           
   837                           ;main.c: 669: }
   838                           ;main.c: 670: printf("\n");
   839  03CD  301A               	movlw	((STR_1+15)-__stringbase)& (0+255)
   840  03CE  2183               	fcall	_printf
   841                           
   842                           ;main.c: 671: size = MFRC522_SelectTag( &UID );
   843  03CF  3056               	movlw	main@UID& (0+255)
   844  03D0  229A               	fcall	_MFRC522_SelectTag
   845  03D1  1283               	bcf	3,5	;RP0=0, select bank0
   846  03D2  1303               	bcf	3,6	;RP1=0, select bank0
   847  03D3  00D3               	movwf	??_main
   848  03D4  0853               	movf	??_main,w
   849  03D5  00D5               	movwf	main@size
   850  03D6                     l219:	
   851                           
   852                           ;main.c: 672: }
   853                           ;main.c: 697: MFRC522_Halt();
   854  03D6  248B               	fcall	_MFRC522_Halt
   855  03D7  2B99               	goto	l2330
   856  03D8                     __end_of_main:	
   857                           
   858                           	psect	text1
   859  0183                     __ptext1:	
   860 ;; *************** function _printf *****************
   861 ;; Defined at:
   862 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;  f               1    wreg     PTR const unsigned char 
   865 ;;		 -> STR_4(2), STR_3(3), STR_2(9), STR_1(17), 
   866 ;; Auto vars:     Size  Location     Type
   867 ;;  f               1   20[BANK0 ] PTR const unsigned char 
   868 ;;		 -> STR_4(2), STR_3(3), STR_2(9), STR_1(17), 
   869 ;;  _val            4   21[BANK0 ] struct .
   870 ;;  c               1   25[BANK0 ] char 
   871 ;;  ap              1   19[BANK0 ] PTR void [1]
   872 ;;		 -> ?_printf(2), 
   873 ;;  prec            1   18[BANK0 ] char 
   874 ;;  flag            1   17[BANK0 ] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  2   12[BANK0 ] int 
   877 ;; Registers used:
   878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   884 ;;      Params:         0       2       0       0
   885 ;;      Locals:         0       9       0       0
   886 ;;      Temps:          0       3       0       0
   887 ;;      Totals:         0      14       0       0
   888 ;;Total ram usage:       14 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; Hardware stack levels required when called:    2
   891 ;; This function calls:
   892 ;;		___lwdiv
   893 ;;		___lwmod
   894 ;;		_putch
   895 ;; This function is called by:
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           
   901                           ;psect for function _printf
   902  0183                     _printf:	
   903                           
   904                           ;incstack = 0
   905                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   906                           ;printf@f stored from wreg
   907  0183  1283               	bcf	3,5	;RP0=0, select bank0
   908  0184  1303               	bcf	3,6	;RP1=0, select bank0
   909  0185  00B4               	movwf	printf@f
   910                           
   911                           ;doprnt.c: 466: va_list ap;
   912                           ;doprnt.c: 499: signed char c;
   913                           ;doprnt.c: 506: signed char prec;
   914                           ;doprnt.c: 508: unsigned char flag;
   915                           ;doprnt.c: 527: union {
   916                           ;doprnt.c: 528: unsigned int _val;
   917                           ;doprnt.c: 529: struct {
   918                           ;doprnt.c: 530: const char * _cp;
   919                           ;doprnt.c: 531: unsigned _len;
   920                           ;doprnt.c: 532: } _str;
   921                           ;doprnt.c: 533: } _val;
   922                           ;doprnt.c: 542: *ap = __va_start();
   923  0186  302C               	movlw	?_printf& (0+255)
   924  0187  00AE               	movwf	??_printf
   925  0188  082E               	movf	??_printf,w
   926  0189  00B3               	movwf	printf@ap
   927  018A                     l2242:	
   928                           ;doprnt.c: 545: while(c = *f++) {
   929                           
   930  018A  3001               	movlw	1
   931  018B  1283               	bcf	3,5	;RP0=0, select bank0
   932  018C  1303               	bcf	3,6	;RP1=0, select bank0
   933  018D  07B4               	addwf	printf@f,f
   934  018E  30FF               	movlw	-1
   935  018F  0734               	addwf	printf@f,w
   936  0190  0084               	movwf	4
   937  0191  2500               	fcall	stringdir
   938  0192  00AE               	movwf	??_printf
   939  0193  082E               	movf	??_printf,w
   940  0194  00B9               	movwf	printf@c
   941  0195  08B9               	movf	printf@c,f
   942  0196  1903               	btfsc	3,2
   943  0197  0008               	return
   944                           
   945                           ;doprnt.c: 547: if(c != '%')
   946  0198  0839               	movf	printf@c,w
   947  0199  3A25               	xorlw	37
   948  019A  1903               	skipnz
   949  019B  299F               	goto	l2196
   950                           
   951                           ;doprnt.c: 549: {
   952                           ;doprnt.c: 550: (putch(c) );
   953  019C  0839               	movf	printf@c,w
   954  019D  2548               	fcall	_putch
   955                           
   956                           ;doprnt.c: 551: continue;
   957  019E  298A               	goto	l2242
   958  019F                     l2196:	
   959                           
   960                           ;doprnt.c: 552: }
   961                           ;doprnt.c: 557: flag = 0;
   962  019F  1283               	bcf	3,5	;RP0=0, select bank0
   963  01A0  1303               	bcf	3,6	;RP1=0, select bank0
   964  01A1  01B1               	clrf	printf@flag
   965                           
   966                           ;doprnt.c: 644: switch(c = *f++) {
   967  01A2  29B1               	goto	l2206
   968  01A3                     l2198:	
   969                           ;doprnt.c: 793: case 'c':
   970                           
   971                           ;doprnt.c: 707: case 'i':
   972                           ;doprnt.c: 708: break;
   973                           
   974                           ;doprnt.c: 706: case 'd':
   975                           
   976                           ;doprnt.c: 647: goto alldone;
   977                           
   978                           ;doprnt.c: 646: case 0:
   979                           
   980                           
   981                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
   982  01A3  0833               	movf	printf@ap,w
   983  01A4  0084               	movwf	4
   984  01A5  1383               	bcf	3,7	;select IRP bank0
   985  01A6  0800               	movf	0,w
   986  01A7  00AE               	movwf	??_printf
   987  01A8  082E               	movf	??_printf,w
   988  01A9  00B9               	movwf	printf@c
   989  01AA  3002               	movlw	2
   990  01AB  00AE               	movwf	??_printf
   991  01AC  082E               	movf	??_printf,w
   992  01AD  07B3               	addwf	printf@ap,f
   993  01AE                     l2202:	
   994                           ;doprnt.c: 811: default:
   995                           
   996                           
   997                           ;doprnt.c: 818: (putch(c) );
   998  01AE  0839               	movf	printf@c,w
   999  01AF  2548               	fcall	_putch
  1000                           
  1001                           ;doprnt.c: 819: continue;
  1002  01B0  298A               	goto	l2242
  1003  01B1                     l2206:	
  1004                           ;doprnt.c: 831: }
  1005                           
  1006  01B1  3001               	movlw	1
  1007  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1008  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1009  01B4  07B4               	addwf	printf@f,f
  1010  01B5  30FF               	movlw	-1
  1011  01B6  0734               	addwf	printf@f,w
  1012  01B7  0084               	movwf	4
  1013  01B8  2500               	fcall	stringdir
  1014  01B9  00B9               	movwf	printf@c
  1015                           
  1016                           ; Switch size 1, requested type "space"
  1017                           ; Number of cases is 4, Range of values is 0 to 105
  1018                           ; switch strategies available:
  1019                           ; Name         Instructions Cycles
  1020                           ; simple_byte           13     7 (average)
  1021                           ; direct_byte          112     6 (fixed)
  1022                           ; jumptable            260     6 (fixed)
  1023                           ;	Chosen strategy is simple_byte
  1024  01BA  3A00               	xorlw	0	; case 0
  1025  01BB  1903               	skipnz
  1026  01BC  2A3C               	goto	l255
  1027  01BD  3A63               	xorlw	99	; case 99
  1028  01BE  1903               	skipnz
  1029  01BF  29A3               	goto	l2198
  1030  01C0  3A07               	xorlw	7	; case 100
  1031  01C1  1903               	skipnz
  1032  01C2  29C7               	goto	l2208
  1033  01C3  3A0D               	xorlw	13	; case 105
  1034  01C4  1903               	skipnz
  1035  01C5  29C7               	goto	l2208
  1036  01C6  29AE               	goto	l2202
  1037  01C7                     l2208:	
  1038                           
  1039                           ;doprnt.c: 1262: {
  1040                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1041  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  1042  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  1043  01C9  0833               	movf	printf@ap,w
  1044  01CA  0084               	movwf	4
  1045  01CB  1383               	bcf	3,7	;select IRP bank0
  1046  01CC  0800               	movf	0,w
  1047  01CD  00B5               	movwf	printf@_val
  1048  01CE  0A84               	incf	4,f
  1049  01CF  0800               	movf	0,w
  1050  01D0  00B6               	movwf	printf@_val+1
  1051  01D1  3002               	movlw	2
  1052  01D2  00AE               	movwf	??_printf
  1053  01D3  082E               	movf	??_printf,w
  1054  01D4  07B3               	addwf	printf@ap,f
  1055                           
  1056                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  1057  01D5  1FB6               	btfss	printf@_val+1,7
  1058  01D6  29E0               	goto	l2218
  1059                           
  1060                           ;doprnt.c: 1271: flag |= 0x03;
  1061  01D7  3003               	movlw	3
  1062  01D8  00AE               	movwf	??_printf
  1063  01D9  082E               	movf	??_printf,w
  1064  01DA  04B1               	iorwf	printf@flag,f
  1065                           
  1066                           ;doprnt.c: 1272: _val._val = -_val._val;
  1067  01DB  09B5               	comf	printf@_val,f
  1068  01DC  09B6               	comf	printf@_val+1,f
  1069  01DD  0AB5               	incf	printf@_val,f
  1070  01DE  1903               	skipnz
  1071  01DF  0AB6               	incf	printf@_val+1,f
  1072  01E0                     l2218:	
  1073                           
  1074                           ;doprnt.c: 1273: }
  1075                           ;doprnt.c: 1275: }
  1076                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1077  01E0  01B9               	clrf	printf@c
  1078  01E1  0AB9               	incf	printf@c,f
  1079  01E2  0839               	movf	printf@c,w
  1080  01E3  3A05               	xorlw	5
  1081  01E4  1903               	btfsc	3,2
  1082  01E5  29FF               	goto	l2230
  1083  01E6                     l2222:	
  1084                           
  1085                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1086  01E6  0839               	movf	printf@c,w
  1087  01E7  00AE               	movwf	??_printf
  1088  01E8  072E               	addwf	??_printf,w
  1089  01E9  3E01               	addlw	low (_dpowers-__stringbase)
  1090  01EA  0084               	movwf	4
  1091  01EB  2500               	fcall	stringdir
  1092  01EC  00AF               	movwf	??_printf+1
  1093  01ED  2500               	fcall	stringdir
  1094  01EE  00B0               	movwf	??_printf+2
  1095  01EF  0830               	movf	??_printf+2,w
  1096  01F0  0236               	subwf	printf@_val+1,w
  1097  01F1  1D03               	skipz
  1098  01F2  29F5               	goto	u2115
  1099  01F3  082F               	movf	??_printf+1,w
  1100  01F4  0235               	subwf	printf@_val,w
  1101  01F5                     u2115:	
  1102  01F5  1C03               	btfss	3,0
  1103  01F6  29FF               	goto	l2230
  1104                           
  1105                           ;doprnt.c: 1316: break;
  1106  01F7  3001               	movlw	1
  1107  01F8  00AE               	movwf	??_printf
  1108  01F9  082E               	movf	??_printf,w
  1109  01FA  07B9               	addwf	printf@c,f
  1110  01FB  0839               	movf	printf@c,w
  1111  01FC  3A05               	xorlw	5
  1112  01FD  1D03               	skipz
  1113  01FE  29E6               	goto	l2222
  1114  01FF                     l2230:	
  1115                           
  1116                           ;doprnt.c: 1431: {
  1117                           ;doprnt.c: 1447: if(flag & 0x03)
  1118  01FF  0831               	movf	printf@flag,w
  1119  0200  3903               	andlw	3
  1120  0201  1903               	btfsc	3,2
  1121  0202  2A05               	goto	l2234
  1122                           
  1123                           ;doprnt.c: 1448: (putch('-') );
  1124  0203  302D               	movlw	45
  1125  0204  2548               	fcall	_putch
  1126  0205                     l2234:	
  1127                           
  1128                           ;doprnt.c: 1478: }
  1129                           ;doprnt.c: 1481: prec = c;
  1130  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1131  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1132  0207  0839               	movf	printf@c,w
  1133  0208  00AE               	movwf	??_printf
  1134  0209  082E               	movf	??_printf,w
  1135  020A  00B2               	movwf	printf@prec
  1136  020B                     l2240:	
  1137                           ;doprnt.c: 1483: while(prec--) {
  1138                           
  1139  020B  30FF               	movlw	-1
  1140  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1141  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1142  020E  00AE               	movwf	??_printf
  1143  020F  082E               	movf	??_printf,w
  1144  0210  07B2               	addwf	printf@prec,f
  1145  0211  0832               	movf	printf@prec,w
  1146  0212  3AFF               	xorlw	-1
  1147  0213  1903               	btfsc	3,2
  1148  0214  298A               	goto	l2242
  1149                           
  1150                           ;doprnt.c: 1487: {
  1151                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1152  0215  300A               	movlw	10
  1153  0216  00A7               	movwf	___lwmod@divisor
  1154  0217  3000               	movlw	0
  1155  0218  00A8               	movwf	___lwmod@divisor+1
  1156  0219  0832               	movf	printf@prec,w
  1157  021A  00AE               	movwf	??_printf
  1158  021B  072E               	addwf	??_printf,w
  1159  021C  3E01               	addlw	low (_dpowers-__stringbase)
  1160  021D  0084               	movwf	4
  1161  021E  2500               	fcall	stringdir
  1162  021F  00A0               	movwf	___lwdiv@divisor
  1163  0220  2500               	fcall	stringdir
  1164  0221  00A1               	movwf	___lwdiv@divisor+1
  1165  0222  0836               	movf	printf@_val+1,w
  1166  0223  01A3               	clrf	___lwdiv@dividend+1
  1167  0224  07A3               	addwf	___lwdiv@dividend+1,f
  1168  0225  0835               	movf	printf@_val,w
  1169  0226  01A2               	clrf	___lwdiv@dividend
  1170  0227  07A2               	addwf	___lwdiv@dividend,f
  1171  0228  23D8               	fcall	___lwdiv
  1172  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1173  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1174  022B  0821               	movf	?___lwdiv+1,w
  1175  022C  01AA               	clrf	___lwmod@dividend+1
  1176  022D  07AA               	addwf	___lwmod@dividend+1,f
  1177  022E  0820               	movf	?___lwdiv,w
  1178  022F  01A9               	clrf	___lwmod@dividend
  1179  0230  07A9               	addwf	___lwmod@dividend,f
  1180  0231  2455               	fcall	___lwmod
  1181  0232  1283               	bcf	3,5	;RP0=0, select bank0
  1182  0233  1303               	bcf	3,6	;RP1=0, select bank0
  1183  0234  0827               	movf	?___lwmod,w
  1184  0235  3E30               	addlw	48
  1185  0236  00AF               	movwf	??_printf+1
  1186  0237  082F               	movf	??_printf+1,w
  1187  0238  00B9               	movwf	printf@c
  1188                           
  1189                           ;doprnt.c: 1532: }
  1190                           ;doprnt.c: 1533: (putch(c) );
  1191  0239  0839               	movf	printf@c,w
  1192  023A  2548               	fcall	_putch
  1193  023B  2A0B               	goto	l2240
  1194  023C                     l255:	
  1195                           ;doprnt.c: 1549: return 0;
  1196                           ;	Return value of _printf is never used
  1197                           
  1198                           ;doprnt.c: 1534: }
  1199                           ;doprnt.c: 1542: }
  1200                           ;doprnt.c: 1544: alldone:
  1201                           
  1202  023C  0008               	return
  1203  023D                     __end_of_printf:	
  1204                           
  1205                           	psect	text2
  1206  0548                     __ptext2:	
  1207 ;; *************** function _putch *****************
  1208 ;; Defined at:
  1209 ;;		line 9 in file "main.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;  data            1    wreg     unsigned char 
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;  data            1    5[COMMON] unsigned char 
  1214 ;; Return value:  Size  Location     Type
  1215 ;;		None               void
  1216 ;; Registers used:
  1217 ;;		wreg
  1218 ;; Tracked objects:
  1219 ;;		On entry : 0/0
  1220 ;;		On exit  : 0/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1223 ;;      Params:         0       0       0       0
  1224 ;;      Locals:         1       0       0       0
  1225 ;;      Temps:          0       0       0       0
  1226 ;;      Totals:         1       0       0       0
  1227 ;;Total ram usage:        1 bytes
  1228 ;; Hardware stack levels used:    1
  1229 ;; Hardware stack levels required when called:    1
  1230 ;; This function calls:
  1231 ;;		Nothing
  1232 ;; This function is called by:
  1233 ;;		_printf
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           
  1238                           ;psect for function _putch
  1239  0548                     _putch:	
  1240                           
  1241                           ;incstack = 0
  1242                           ; Regs used in _putch: [wreg]
  1243                           ;putch@data stored from wreg
  1244  0548  00F5               	movwf	putch@data
  1245                           
  1246                           ;main.c: 11: if(data == 10)
  1247  0549  0875               	movf	putch@data,w
  1248  054A  3A0A               	xorlw	10
  1249  054B  1D03               	skipz
  1250  054C  2D58               	goto	l39
  1251  054D                     l32:	
  1252                           ;main.c: 14: continue;
  1253                           
  1254                           ;main.c: 12: {
  1255                           ;main.c: 13: while(!TXIF)
  1256                           
  1257  054D  1283               	bcf	3,5	;RP0=0, select bank0
  1258  054E  1303               	bcf	3,6	;RP1=0, select bank0
  1259  054F  1E0C               	btfss	12,4	;volatile
  1260  0550  2D4D               	goto	l32
  1261                           
  1262                           ;main.c: 15: TXREG = 10;
  1263  0551  300A               	movlw	10
  1264  0552  0099               	movwf	25	;volatile
  1265  0553                     l35:	
  1266                           ;main.c: 17: continue;
  1267                           
  1268                           ;main.c: 16: while(!TXIF)
  1269                           
  1270  0553  1E0C               	btfss	12,4	;volatile
  1271  0554  2D53               	goto	l35
  1272                           
  1273                           ;main.c: 18: TXREG = 13;
  1274  0555  300D               	movlw	13
  1275  0556  0099               	movwf	25	;volatile
  1276                           
  1277                           ;main.c: 19: return;
  1278  0557  0008               	return
  1279  0558                     l39:	
  1280                           ;main.c: 22: continue;
  1281                           
  1282                           ;main.c: 20: }
  1283                           ;main.c: 21: while(!TXIF)
  1284                           
  1285  0558  1283               	bcf	3,5	;RP0=0, select bank0
  1286  0559  1303               	bcf	3,6	;RP1=0, select bank0
  1287  055A  1E0C               	btfss	12,4	;volatile
  1288  055B  2D58               	goto	l39
  1289                           
  1290                           ;main.c: 23: TXREG = data;
  1291  055C  0875               	movf	putch@data,w
  1292  055D  0099               	movwf	25	;volatile
  1293  055E  0008               	return
  1294  055F                     __end_of_putch:	
  1295                           
  1296                           	psect	text3
  1297  0455                     __ptext3:	
  1298 ;; *************** function ___lwmod *****************
  1299 ;; Defined at:
  1300 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;  divisor         2    7[BANK0 ] unsigned int 
  1303 ;;  dividend        2    9[BANK0 ] unsigned int 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  counter         1   11[BANK0 ] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  2    7[BANK0 ] unsigned int 
  1308 ;; Registers used:
  1309 ;;		wreg, status,2, status,0
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1315 ;;      Params:         0       4       0       0
  1316 ;;      Locals:         0       1       0       0
  1317 ;;      Temps:          1       0       0       0
  1318 ;;      Totals:         1       5       0       0
  1319 ;;Total ram usage:        6 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; Hardware stack levels required when called:    1
  1322 ;; This function calls:
  1323 ;;		Nothing
  1324 ;; This function is called by:
  1325 ;;		_printf
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           
  1330                           ;psect for function ___lwmod
  1331  0455                     ___lwmod:	
  1332                           
  1333                           ;incstack = 0
  1334                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1335  0455  1283               	bcf	3,5	;RP0=0, select bank0
  1336  0456  1303               	bcf	3,6	;RP1=0, select bank0
  1337  0457  0828               	movf	___lwmod@divisor+1,w
  1338  0458  0427               	iorwf	___lwmod@divisor,w
  1339  0459  1903               	skipnz
  1340  045A  2C84               	goto	l2096
  1341  045B  01AB               	clrf	___lwmod@counter
  1342  045C  0AAB               	incf	___lwmod@counter,f
  1343  045D                     l2086:	
  1344  045D  1BA8               	btfsc	___lwmod@divisor+1,7
  1345  045E  2C6B               	goto	l2088
  1346  045F  3001               	movlw	1
  1347  0460                     u1975:	
  1348  0460  1003               	clrc
  1349  0461  0DA7               	rlf	___lwmod@divisor,f
  1350  0462  0DA8               	rlf	___lwmod@divisor+1,f
  1351  0463  3EFF               	addlw	-1
  1352  0464  1D03               	skipz
  1353  0465  2C60               	goto	u1975
  1354  0466  3001               	movlw	1
  1355  0467  00F6               	movwf	??___lwmod
  1356  0468  0876               	movf	??___lwmod,w
  1357  0469  07AB               	addwf	___lwmod@counter,f
  1358  046A  2C5D               	goto	l2086
  1359  046B                     l2088:	
  1360  046B  0828               	movf	___lwmod@divisor+1,w
  1361  046C  022A               	subwf	___lwmod@dividend+1,w
  1362  046D  1D03               	skipz
  1363  046E  2C71               	goto	u1995
  1364  046F  0827               	movf	___lwmod@divisor,w
  1365  0470  0229               	subwf	___lwmod@dividend,w
  1366  0471                     u1995:	
  1367  0471  1C03               	skipc
  1368  0472  2C79               	goto	l2092
  1369  0473  0827               	movf	___lwmod@divisor,w
  1370  0474  02A9               	subwf	___lwmod@dividend,f
  1371  0475  0828               	movf	___lwmod@divisor+1,w
  1372  0476  1C03               	skipc
  1373  0477  03AA               	decf	___lwmod@dividend+1,f
  1374  0478  02AA               	subwf	___lwmod@dividend+1,f
  1375  0479                     l2092:	
  1376  0479  3001               	movlw	1
  1377  047A                     u2005:	
  1378  047A  1003               	clrc
  1379  047B  0CA8               	rrf	___lwmod@divisor+1,f
  1380  047C  0CA7               	rrf	___lwmod@divisor,f
  1381  047D  3EFF               	addlw	-1
  1382  047E  1D03               	skipz
  1383  047F  2C7A               	goto	u2005
  1384  0480  3001               	movlw	1
  1385  0481  02AB               	subwf	___lwmod@counter,f
  1386  0482  1D03               	btfss	3,2
  1387  0483  2C6B               	goto	l2088
  1388  0484                     l2096:	
  1389  0484  082A               	movf	___lwmod@dividend+1,w
  1390  0485  01A8               	clrf	?___lwmod+1
  1391  0486  07A8               	addwf	?___lwmod+1,f
  1392  0487  0829               	movf	___lwmod@dividend,w
  1393  0488  01A7               	clrf	?___lwmod
  1394  0489  07A7               	addwf	?___lwmod,f
  1395  048A  0008               	return
  1396  048B                     __end_of___lwmod:	
  1397                           
  1398                           	psect	text4
  1399  03D8                     __ptext4:	
  1400 ;; *************** function ___lwdiv *****************
  1401 ;; Defined at:
  1402 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;  divisor         2    0[BANK0 ] unsigned int 
  1405 ;;  dividend        2    2[BANK0 ] unsigned int 
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;  quotient        2    5[BANK0 ] unsigned int 
  1408 ;;  counter         1    4[BANK0 ] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  2    0[BANK0 ] unsigned int 
  1411 ;; Registers used:
  1412 ;;		wreg, status,2, status,0
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1418 ;;      Params:         0       4       0       0
  1419 ;;      Locals:         0       3       0       0
  1420 ;;      Temps:          1       0       0       0
  1421 ;;      Totals:         1       7       0       0
  1422 ;;Total ram usage:        8 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    1
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_printf
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           
  1433                           ;psect for function ___lwdiv
  1434  03D8                     ___lwdiv:	
  1435                           
  1436                           ;incstack = 0
  1437                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1438  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  1439  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  1440  03DA  01A5               	clrf	___lwdiv@quotient
  1441  03DB  01A6               	clrf	___lwdiv@quotient+1
  1442  03DC  0821               	movf	___lwdiv@divisor+1,w
  1443  03DD  0420               	iorwf	___lwdiv@divisor,w
  1444  03DE  1903               	skipnz
  1445  03DF  2C11               	goto	l2074
  1446  03E0  01A4               	clrf	___lwdiv@counter
  1447  03E1  0AA4               	incf	___lwdiv@counter,f
  1448  03E2                     l2062:	
  1449  03E2  1BA1               	btfsc	___lwdiv@divisor+1,7
  1450  03E3  2BF0               	goto	l2064
  1451  03E4  3001               	movlw	1
  1452  03E5                     u1905:	
  1453  03E5  1003               	clrc
  1454  03E6  0DA0               	rlf	___lwdiv@divisor,f
  1455  03E7  0DA1               	rlf	___lwdiv@divisor+1,f
  1456  03E8  3EFF               	addlw	-1
  1457  03E9  1D03               	skipz
  1458  03EA  2BE5               	goto	u1905
  1459  03EB  3001               	movlw	1
  1460  03EC  00F5               	movwf	??___lwdiv
  1461  03ED  0875               	movf	??___lwdiv,w
  1462  03EE  07A4               	addwf	___lwdiv@counter,f
  1463  03EF  2BE2               	goto	l2062
  1464  03F0                     l2064:	
  1465  03F0  3001               	movlw	1
  1466  03F1                     u1925:	
  1467  03F1  1003               	clrc
  1468  03F2  0DA5               	rlf	___lwdiv@quotient,f
  1469  03F3  0DA6               	rlf	___lwdiv@quotient+1,f
  1470  03F4  3EFF               	addlw	-1
  1471  03F5  1D03               	skipz
  1472  03F6  2BF1               	goto	u1925
  1473  03F7  0821               	movf	___lwdiv@divisor+1,w
  1474  03F8  0223               	subwf	___lwdiv@dividend+1,w
  1475  03F9  1D03               	skipz
  1476  03FA  2BFD               	goto	u1935
  1477  03FB  0820               	movf	___lwdiv@divisor,w
  1478  03FC  0222               	subwf	___lwdiv@dividend,w
  1479  03FD                     u1935:	
  1480  03FD  1C03               	skipc
  1481  03FE  2C06               	goto	l2070
  1482  03FF  0820               	movf	___lwdiv@divisor,w
  1483  0400  02A2               	subwf	___lwdiv@dividend,f
  1484  0401  0821               	movf	___lwdiv@divisor+1,w
  1485  0402  1C03               	skipc
  1486  0403  03A3               	decf	___lwdiv@dividend+1,f
  1487  0404  02A3               	subwf	___lwdiv@dividend+1,f
  1488  0405  1425               	bsf	___lwdiv@quotient,0
  1489  0406                     l2070:	
  1490  0406  3001               	movlw	1
  1491  0407                     u1945:	
  1492  0407  1003               	clrc
  1493  0408  0CA1               	rrf	___lwdiv@divisor+1,f
  1494  0409  0CA0               	rrf	___lwdiv@divisor,f
  1495  040A  3EFF               	addlw	-1
  1496  040B  1D03               	skipz
  1497  040C  2C07               	goto	u1945
  1498  040D  3001               	movlw	1
  1499  040E  02A4               	subwf	___lwdiv@counter,f
  1500  040F  1D03               	btfss	3,2
  1501  0410  2BF0               	goto	l2064
  1502  0411                     l2074:	
  1503  0411  0826               	movf	___lwdiv@quotient+1,w
  1504  0412  01A1               	clrf	?___lwdiv+1
  1505  0413  07A1               	addwf	?___lwdiv+1,f
  1506  0414  0825               	movf	___lwdiv@quotient,w
  1507  0415  01A0               	clrf	?___lwdiv
  1508  0416  07A0               	addwf	?___lwdiv,f
  1509  0417  0008               	return
  1510  0418                     __end_of___lwdiv:	
  1511                           
  1512                           	psect	text5
  1513  05B2                     __ptext5:	
  1514 ;; *************** function _UART_init *****************
  1515 ;; Defined at:
  1516 ;;		line 25 in file "main.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;		None
  1521 ;; Return value:  Size  Location     Type
  1522 ;;		None               void
  1523 ;; Registers used:
  1524 ;;		wreg
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1530 ;;      Params:         0       0       0       0
  1531 ;;      Locals:         0       0       0       0
  1532 ;;      Temps:          0       0       0       0
  1533 ;;      Totals:         0       0       0       0
  1534 ;;Total ram usage:        0 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    1
  1537 ;; This function calls:
  1538 ;;		Nothing
  1539 ;; This function is called by:
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           
  1545                           ;psect for function _UART_init
  1546  05B2                     _UART_init:	
  1547                           
  1548                           ;main.c: 28: TRISBbits.TRISB1 = 1;
  1549                           
  1550                           ;incstack = 0
  1551                           ; Regs used in _UART_init: [wreg]
  1552  05B2  1683               	bsf	3,5	;RP0=1, select bank1
  1553  05B3  1303               	bcf	3,6	;RP1=0, select bank1
  1554  05B4  1486               	bsf	6,1	;volatile
  1555                           
  1556                           ;main.c: 29: TRISBbits.TRISB2 = 1;
  1557  05B5  1506               	bsf	6,2	;volatile
  1558                           
  1559                           ;main.c: 31: TXSTAbits.CSRC = 1;
  1560  05B6  1798               	bsf	24,7	;volatile
  1561                           
  1562                           ;main.c: 32: TXSTAbits.TXEN = 1;
  1563  05B7  1698               	bsf	24,5	;volatile
  1564                           
  1565                           ;main.c: 33: TXSTAbits.SYNC = 0;
  1566  05B8  1218               	bcf	24,4	;volatile
  1567                           
  1568                           ;main.c: 36: RCSTAbits.SPEN = 1;
  1569  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  1570  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  1571  05BB  1798               	bsf	24,7	;volatile
  1572                           
  1573                           ;main.c: 37: RCSTAbits.CREN = 1;
  1574  05BC  1618               	bsf	24,4	;volatile
  1575                           
  1576                           ;main.c: 41: TXSTAbits.BRGH = 0;
  1577  05BD  1683               	bsf	3,5	;RP0=1, select bank1
  1578  05BE  1303               	bcf	3,6	;RP1=0, select bank1
  1579  05BF  1118               	bcf	24,2	;volatile
  1580                           
  1581                           ;main.c: 42: SPBRG = 25;
  1582  05C0  3019               	movlw	25
  1583  05C1  0099               	movwf	25	;volatile
  1584  05C2  0008               	return
  1585  05C3                     __end_of_UART_init:	
  1586                           
  1587                           	psect	text6
  1588  05C3                     __ptext6:	
  1589 ;; *************** function _MFRC522_isCard *****************
  1590 ;; Defined at:
  1591 ;;		line 592 in file "main.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  TagType         1    wreg     PTR unsigned char 
  1594 ;;		 -> main@TagType(2), 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  TagType         1   41[BANK0 ] PTR unsigned char 
  1597 ;;		 -> main@TagType(2), 
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      unsigned char 
  1600 ;; Registers used:
  1601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1607 ;;      Params:         0       0       0       0
  1608 ;;      Locals:         0       1       0       0
  1609 ;;      Temps:          0       1       0       0
  1610 ;;      Totals:         0       2       0       0
  1611 ;;Total ram usage:        2 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    6
  1614 ;; This function calls:
  1615 ;;		_MFRC522_Request
  1616 ;; This function is called by:
  1617 ;;		_main
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           
  1622                           ;psect for function _MFRC522_isCard
  1623  05C3                     _MFRC522_isCard:	
  1624                           
  1625                           ;incstack = 0
  1626                           ; Regs used in _MFRC522_isCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1627                           ;MFRC522_isCard@TagType stored from wreg
  1628  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  1629  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  1630  05C5  00C9               	movwf	MFRC522_isCard@TagType
  1631                           
  1632                           ;main.c: 594: if (MFRC522_Request( 0x26, TagType ) == 0)
  1633  05C6  0849               	movf	MFRC522_isCard@TagType,w
  1634  05C7  00C8               	movwf	??_MFRC522_isCard
  1635  05C8  0848               	movf	??_MFRC522_isCard,w
  1636  05C9  00BF               	movwf	MFRC522_Request@TagType
  1637  05CA  3026               	movlw	38
  1638  05CB  24C1               	fcall	_MFRC522_Request
  1639  05CC  3800               	iorlw	0
  1640  05CD  1D03               	skipz
  1641  05CE  2DD1               	goto	l2170
  1642                           
  1643                           ;main.c: 595: return 1;
  1644  05CF  3001               	movlw	1
  1645  05D0  0008               	return
  1646  05D1                     l2170:	
  1647                           
  1648                           ;main.c: 596: else
  1649                           ;main.c: 597: return 0;
  1650  05D1  3000               	movlw	0
  1651  05D2  0008               	return
  1652  05D3                     __end_of_MFRC522_isCard:	
  1653                           
  1654                           	psect	text7
  1655  04C1                     __ptext7:	
  1656 ;; *************** function _MFRC522_Request *****************
  1657 ;; Defined at:
  1658 ;;		line 402 in file "main.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  reqMode         1    wreg     unsigned char 
  1661 ;;  TagType         1   31[BANK0 ] PTR unsigned char 
  1662 ;;		 -> main@TagType(2), 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  reqMode         1   36[BANK0 ] unsigned char 
  1665 ;;  backBits        2   38[BANK0 ] unsigned int 
  1666 ;;  _status         1   37[BANK0 ] unsigned char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      unsigned char 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1676 ;;      Params:         0       1       0       0
  1677 ;;      Locals:         0       4       0       0
  1678 ;;      Temps:          0       4       0       0
  1679 ;;      Totals:         0       9       0       0
  1680 ;;Total ram usage:        9 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; Hardware stack levels required when called:    5
  1683 ;; This function calls:
  1684 ;;		_MFRC522_ToCard
  1685 ;;		_MFRC522_Wr
  1686 ;; This function is called by:
  1687 ;;		_MFRC522_isCard
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           
  1692                           ;psect for function _MFRC522_Request
  1693  04C1                     _MFRC522_Request:	
  1694                           
  1695                           ;incstack = 0
  1696                           ; Regs used in _MFRC522_Request: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1697                           ;MFRC522_Request@reqMode stored from wreg
  1698  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  1699  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  1700  04C3  00C4               	movwf	MFRC522_Request@reqMode
  1701                           
  1702                           ;main.c: 404: char _status;
  1703                           ;main.c: 405: unsigned backBits;
  1704                           ;main.c: 406: MFRC522_Wr( 0x0D, 0x07 );
  1705  04C4  3007               	movlw	7
  1706  04C5  00C0               	movwf	??_MFRC522_Request
  1707  04C6  0840               	movf	??_MFRC522_Request,w
  1708  04C7  00A6               	movwf	MFRC522_Wr@value
  1709  04C8  300D               	movlw	13
  1710  04C9  258C               	fcall	_MFRC522_Wr
  1711                           
  1712                           ;main.c: 407: TagType[0] = reqMode;
  1713  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  1714  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  1715  04CC  0844               	movf	MFRC522_Request@reqMode,w
  1716  04CD  00C0               	movwf	??_MFRC522_Request
  1717  04CE  083F               	movf	MFRC522_Request@TagType,w
  1718  04CF  0084               	movwf	4
  1719  04D0  0840               	movf	??_MFRC522_Request,w
  1720  04D1  1383               	bcf	3,7	;select IRP bank0
  1721  04D2  0080               	movwf	0
  1722                           
  1723                           ;main.c: 408: _status = MFRC522_ToCard( 0x0C, TagType, 1, TagType, &backBits );
  1724  04D3  083F               	movf	MFRC522_Request@TagType,w
  1725  04D4  00C0               	movwf	??_MFRC522_Request
  1726  04D5  0840               	movf	??_MFRC522_Request,w
  1727  04D6  00AD               	movwf	MFRC522_ToCard@sendData
  1728  04D7  01AE               	clrf	MFRC522_ToCard@sendLen
  1729  04D8  0AAE               	incf	MFRC522_ToCard@sendLen,f
  1730  04D9  083F               	movf	MFRC522_Request@TagType,w
  1731  04DA  00C1               	movwf	??_MFRC522_Request+1
  1732  04DB  0841               	movf	??_MFRC522_Request+1,w
  1733  04DC  00AF               	movwf	MFRC522_ToCard@backData
  1734  04DD  3046               	movlw	MFRC522_Request@backBits& (0+255)
  1735  04DE  00C2               	movwf	??_MFRC522_Request+2
  1736  04DF  0842               	movf	??_MFRC522_Request+2,w
  1737  04E0  00B0               	movwf	MFRC522_ToCard@backLen
  1738  04E1  300C               	movlw	12
  1739  04E2  204E               	fcall	_MFRC522_ToCard
  1740  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  1741  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  1742  04E5  00C3               	movwf	??_MFRC522_Request+3
  1743  04E6  0843               	movf	??_MFRC522_Request+3,w
  1744  04E7  00C5               	movwf	MFRC522_Request@_status
  1745                           
  1746                           ;main.c: 409: if ( (_status != 0) || (backBits != 0x10) )
  1747  04E8  08C5               	movf	MFRC522_Request@_status,f
  1748  04E9  1D03               	skipz
  1749  04EA  2CF0               	goto	l1990
  1750  04EB  3010               	movlw	16
  1751  04EC  0646               	xorwf	MFRC522_Request@backBits,w
  1752  04ED  0447               	iorwf	MFRC522_Request@backBits+1,w
  1753  04EE  1903               	skipnz
  1754  04EF  2CF4               	goto	l142
  1755  04F0                     l1990:	
  1756                           
  1757                           ;main.c: 410: {
  1758                           ;main.c: 411: _status = 2;
  1759  04F0  3002               	movlw	2
  1760  04F1  00C0               	movwf	??_MFRC522_Request
  1761  04F2  0840               	movf	??_MFRC522_Request,w
  1762  04F3  00C5               	movwf	MFRC522_Request@_status
  1763  04F4                     l142:	
  1764                           
  1765                           ;main.c: 412: }
  1766                           ;main.c: 413: return _status;
  1767  04F4  0845               	movf	MFRC522_Request@_status,w
  1768  04F5  0008               	return
  1769  04F6                     __end_of_MFRC522_Request:	
  1770                           
  1771                           	psect	text8
  1772  029A                     __ptext8:	
  1773 ;; *************** function _MFRC522_SelectTag *****************
  1774 ;; Defined at:
  1775 ;;		line 441 in file "main.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;  serNum          1    wreg     PTR unsigned char 
  1778 ;;		 -> main@UID(6), 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  serNum          1   46[BANK0 ] PTR unsigned char 
  1781 ;;		 -> main@UID(6), 
  1782 ;;  buffer          9   36[BANK0 ] unsigned char [9]
  1783 ;;  recvBits        2   48[BANK0 ] unsigned int 
  1784 ;;  i               1   50[BANK0 ] unsigned char 
  1785 ;;  size            1   47[BANK0 ] unsigned char 
  1786 ;;  _status         1   45[BANK0 ] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      unsigned char 
  1789 ;; Registers used:
  1790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1796 ;;      Params:         0       0       0       0
  1797 ;;      Locals:         0      15       0       0
  1798 ;;      Temps:          0       5       0       0
  1799 ;;      Totals:         0      20       0       0
  1800 ;;Total ram usage:       20 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    5
  1803 ;; This function calls:
  1804 ;;		_MFRC522_CRC
  1805 ;;		_MFRC522_ToCard
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           
  1812                           ;psect for function _MFRC522_SelectTag
  1813  029A                     _MFRC522_SelectTag:	
  1814                           
  1815                           ;incstack = 0
  1816                           ; Regs used in _MFRC522_SelectTag: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1817                           ;MFRC522_SelectTag@serNum stored from wreg
  1818  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1819  029B  1303               	bcf	3,6	;RP1=0, select bank0
  1820  029C  00CE               	movwf	MFRC522_SelectTag@serNum
  1821                           
  1822                           ;main.c: 443: char i;
  1823                           ;main.c: 444: char _status;
  1824                           ;main.c: 445: char size;
  1825                           ;main.c: 446: unsigned recvBits;
  1826                           ;main.c: 447: char buffer[9];
  1827                           ;main.c: 451: buffer[0] = 0x93;
  1828  029D  3093               	movlw	147
  1829  029E  00BF               	movwf	??_MFRC522_SelectTag
  1830  029F  083F               	movf	??_MFRC522_SelectTag,w
  1831  02A0  00C4               	movwf	MFRC522_SelectTag@buffer
  1832                           
  1833                           ;main.c: 452: buffer[1] = 0x70;
  1834  02A1  3070               	movlw	112
  1835  02A2  00BF               	movwf	??_MFRC522_SelectTag
  1836  02A3  083F               	movf	??_MFRC522_SelectTag,w
  1837  02A4  00C5               	movwf	MFRC522_SelectTag@buffer+1
  1838                           
  1839                           ;main.c: 454: for ( i=2; i < 7; i++ )
  1840  02A5  3002               	movlw	2
  1841  02A6  00BF               	movwf	??_MFRC522_SelectTag
  1842  02A7  083F               	movf	??_MFRC522_SelectTag,w
  1843  02A8  00D2               	movwf	MFRC522_SelectTag@i
  1844  02A9  3007               	movlw	7
  1845  02AA  0252               	subwf	MFRC522_SelectTag@i,w
  1846  02AB  1803               	btfsc	3,0
  1847  02AC  2AC3               	goto	l2136
  1848  02AD                     l2128:	
  1849                           
  1850                           ;main.c: 455: {
  1851                           ;main.c: 456: buffer[i] = *serNum++;
  1852  02AD  084E               	movf	MFRC522_SelectTag@serNum,w
  1853  02AE  0084               	movwf	4
  1854  02AF  1383               	bcf	3,7	;select IRP bank0
  1855  02B0  0800               	movf	0,w
  1856  02B1  00BF               	movwf	??_MFRC522_SelectTag
  1857  02B2  0852               	movf	MFRC522_SelectTag@i,w
  1858  02B3  3E44               	addlw	MFRC522_SelectTag@buffer& (0+255)
  1859  02B4  0084               	movwf	4
  1860  02B5  083F               	movf	??_MFRC522_SelectTag,w
  1861  02B6  0080               	movwf	0
  1862  02B7  3001               	movlw	1
  1863  02B8  00BF               	movwf	??_MFRC522_SelectTag
  1864  02B9  083F               	movf	??_MFRC522_SelectTag,w
  1865  02BA  07CE               	addwf	MFRC522_SelectTag@serNum,f
  1866  02BB  3001               	movlw	1
  1867  02BC  00BF               	movwf	??_MFRC522_SelectTag
  1868  02BD  083F               	movf	??_MFRC522_SelectTag,w
  1869  02BE  07D2               	addwf	MFRC522_SelectTag@i,f
  1870  02BF  3007               	movlw	7
  1871  02C0  0252               	subwf	MFRC522_SelectTag@i,w
  1872  02C1  1C03               	skipc
  1873  02C2  2AAD               	goto	l2128
  1874  02C3                     l2136:	
  1875                           
  1876                           ;main.c: 457: }
  1877                           ;main.c: 459: MFRC522_CRC( buffer, 7, &buffer[7] );
  1878  02C3  3007               	movlw	7
  1879  02C4  00BF               	movwf	??_MFRC522_SelectTag
  1880  02C5  083F               	movf	??_MFRC522_SelectTag,w
  1881  02C6  00AD               	movwf	MFRC522_CRC@length
  1882  02C7  304B               	movlw	(MFRC522_SelectTag@buffer+7)& (0+255)
  1883  02C8  00C0               	movwf	??_MFRC522_SelectTag+1
  1884  02C9  0840               	movf	??_MFRC522_SelectTag+1,w
  1885  02CA  00AE               	movwf	MFRC522_CRC@dataOut
  1886  02CB  3044               	movlw	MFRC522_SelectTag@buffer& (0+255)
  1887  02CC  22F6               	fcall	_MFRC522_CRC
  1888                           
  1889                           ;main.c: 461: _status = MFRC522_ToCard( 0x0C, buffer, 9, buffer, &recvBits );
  1890  02CD  3044               	movlw	MFRC522_SelectTag@buffer& (0+255)
  1891  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1892  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  1893  02D0  00BF               	movwf	??_MFRC522_SelectTag
  1894  02D1  083F               	movf	??_MFRC522_SelectTag,w
  1895  02D2  00AD               	movwf	MFRC522_ToCard@sendData
  1896  02D3  3009               	movlw	9
  1897  02D4  00C0               	movwf	??_MFRC522_SelectTag+1
  1898  02D5  0840               	movf	??_MFRC522_SelectTag+1,w
  1899  02D6  00AE               	movwf	MFRC522_ToCard@sendLen
  1900  02D7  3044               	movlw	MFRC522_SelectTag@buffer& (0+255)
  1901  02D8  00C1               	movwf	??_MFRC522_SelectTag+2
  1902  02D9  0841               	movf	??_MFRC522_SelectTag+2,w
  1903  02DA  00AF               	movwf	MFRC522_ToCard@backData
  1904  02DB  3050               	movlw	MFRC522_SelectTag@recvBits& (0+255)
  1905  02DC  00C2               	movwf	??_MFRC522_SelectTag+3
  1906  02DD  0842               	movf	??_MFRC522_SelectTag+3,w
  1907  02DE  00B0               	movwf	MFRC522_ToCard@backLen
  1908  02DF  300C               	movlw	12
  1909  02E0  204E               	fcall	_MFRC522_ToCard
  1910  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  1911  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  1912  02E3  00C3               	movwf	??_MFRC522_SelectTag+4
  1913  02E4  0843               	movf	??_MFRC522_SelectTag+4,w
  1914  02E5  00CD               	movwf	MFRC522_SelectTag@_status
  1915                           
  1916                           ;main.c: 462: if ( (_status == 0) && (recvBits == 0x18) )
  1917  02E6  08CD               	movf	MFRC522_SelectTag@_status,f
  1918  02E7  1D03               	skipz
  1919  02E8  2AF3               	goto	l2144
  1920  02E9  3018               	movlw	24
  1921  02EA  0650               	xorwf	MFRC522_SelectTag@recvBits,w
  1922  02EB  0451               	iorwf	MFRC522_SelectTag@recvBits+1,w
  1923  02EC  1D03               	skipz
  1924  02ED  2AF3               	goto	l2144
  1925                           
  1926                           ;main.c: 463: {
  1927                           ;main.c: 464: size = buffer[0];
  1928  02EE  0844               	movf	MFRC522_SelectTag@buffer,w
  1929  02EF  00BF               	movwf	??_MFRC522_SelectTag
  1930  02F0  083F               	movf	??_MFRC522_SelectTag,w
  1931  02F1  00CF               	movwf	MFRC522_SelectTag@size
  1932                           
  1933                           ;main.c: 465: }
  1934  02F2  2AF4               	goto	l2146
  1935  02F3                     l2144:	
  1936                           
  1937                           ;main.c: 466: else
  1938                           ;main.c: 467: {
  1939                           ;main.c: 468: size = 0;
  1940  02F3  01CF               	clrf	MFRC522_SelectTag@size
  1941  02F4                     l2146:	
  1942                           
  1943                           ;main.c: 469: }
  1944                           ;main.c: 470: return size;
  1945  02F4  084F               	movf	MFRC522_SelectTag@size,w
  1946  02F5  0008               	return
  1947  02F6                     __end_of_MFRC522_SelectTag:	
  1948                           
  1949                           	psect	text9
  1950  0576                     __ptext9:	
  1951 ;; *************** function _MFRC522_ReadCardSerial *****************
  1952 ;; Defined at:
  1953 ;;		line 599 in file "main.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  str             1    wreg     PTR unsigned char 
  1956 ;;		 -> main@UID(6), 
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  str             1   44[BANK0 ] PTR unsigned char 
  1959 ;;		 -> main@UID(6), 
  1960 ;;  _status         1   43[BANK0 ] unsigned char 
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      unsigned char 
  1963 ;; Registers used:
  1964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1970 ;;      Params:         0       0       0       0
  1971 ;;      Locals:         0       2       0       0
  1972 ;;      Temps:          0       1       0       0
  1973 ;;      Totals:         0       3       0       0
  1974 ;;Total ram usage:        3 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    6
  1977 ;; This function calls:
  1978 ;;		_MFRC522_AntiColl
  1979 ;; This function is called by:
  1980 ;;		_main
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           
  1985                           ;psect for function _MFRC522_ReadCardSerial
  1986  0576                     _MFRC522_ReadCardSerial:	
  1987                           
  1988                           ;incstack = 0
  1989                           ; Regs used in _MFRC522_ReadCardSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1990                           ;MFRC522_ReadCardSerial@str stored from wreg
  1991  0576  1283               	bcf	3,5	;RP0=0, select bank0
  1992  0577  1303               	bcf	3,6	;RP1=0, select bank0
  1993  0578  00CC               	movwf	MFRC522_ReadCardSerial@str
  1994                           
  1995                           ;main.c: 601: char _status;
  1996                           ;main.c: 602: _status = MFRC522_AntiColl( str );
  1997  0579  084C               	movf	MFRC522_ReadCardSerial@str,w
  1998  057A  223D               	fcall	_MFRC522_AntiColl
  1999  057B  1283               	bcf	3,5	;RP0=0, select bank0
  2000  057C  1303               	bcf	3,6	;RP1=0, select bank0
  2001  057D  00CA               	movwf	??_MFRC522_ReadCardSerial
  2002  057E  084A               	movf	??_MFRC522_ReadCardSerial,w
  2003  057F  00CB               	movwf	MFRC522_ReadCardSerial@_status
  2004                           
  2005                           ;main.c: 603: str[5] = 0;
  2006  0580  084C               	movf	MFRC522_ReadCardSerial@str,w
  2007  0581  3E05               	addlw	5
  2008  0582  0084               	movwf	4
  2009  0583  1383               	bcf	3,7	;select IRP bank0
  2010  0584  0180               	clrf	0
  2011                           
  2012                           ;main.c: 604: if (_status == 0)
  2013  0585  08CB               	movf	MFRC522_ReadCardSerial@_status,f
  2014  0586  1D03               	skipz
  2015  0587  2D8A               	goto	l2186
  2016                           
  2017                           ;main.c: 605: return 1;
  2018  0588  3001               	movlw	1
  2019  0589  0008               	return
  2020  058A                     l2186:	
  2021                           
  2022                           ;main.c: 606: else
  2023                           ;main.c: 607: return 0;
  2024  058A  3000               	movlw	0
  2025  058B  0008               	return
  2026  058C                     __end_of_MFRC522_ReadCardSerial:	
  2027                           
  2028                           	psect	text10
  2029  023D                     __ptext10:	
  2030 ;; *************** function _MFRC522_AntiColl *****************
  2031 ;; Defined at:
  2032 ;;		line 562 in file "main.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  serNum          1    wreg     PTR unsigned char 
  2035 ;;		 -> main@UID(6), 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  serNum          1   41[BANK0 ] PTR unsigned char 
  2038 ;;		 -> main@UID(6), 
  2039 ;;  unLen           2   37[BANK0 ] unsigned int 
  2040 ;;  i               1   40[BANK0 ] unsigned char 
  2041 ;;  _status         1   39[BANK0 ] unsigned char 
  2042 ;;  serNumCheck     1   36[BANK0 ] unsigned char 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  1    wreg      unsigned char 
  2045 ;; Registers used:
  2046 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2052 ;;      Params:         0       0       0       0
  2053 ;;      Locals:         0       6       0       0
  2054 ;;      Temps:          0       5       0       0
  2055 ;;      Totals:         0      11       0       0
  2056 ;;Total ram usage:       11 bytes
  2057 ;; Hardware stack levels used:    1
  2058 ;; Hardware stack levels required when called:    5
  2059 ;; This function calls:
  2060 ;;		_MFRC522_Clear_Bit
  2061 ;;		_MFRC522_ToCard
  2062 ;;		_MFRC522_Wr
  2063 ;; This function is called by:
  2064 ;;		_MFRC522_ReadCardSerial
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           
  2069                           ;psect for function _MFRC522_AntiColl
  2070  023D                     _MFRC522_AntiColl:	
  2071                           
  2072                           ;incstack = 0
  2073                           ; Regs used in _MFRC522_AntiColl: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2074                           ;MFRC522_AntiColl@serNum stored from wreg
  2075  023D  1283               	bcf	3,5	;RP0=0, select bank0
  2076  023E  1303               	bcf	3,6	;RP1=0, select bank0
  2077  023F  00C9               	movwf	MFRC522_AntiColl@serNum
  2078                           
  2079                           ;main.c: 564: char _status;
  2080                           ;main.c: 565: char i;
  2081                           ;main.c: 566: char serNumCheck = 0;
  2082  0240  01C4               	clrf	MFRC522_AntiColl@serNumCheck
  2083                           
  2084                           ;main.c: 567: unsigned unLen;
  2085                           ;main.c: 568: MFRC522_Wr( 0x0D, 0x00 );
  2086  0241  01A6               	clrf	MFRC522_Wr@value
  2087  0242  300D               	movlw	13
  2088  0243  258C               	fcall	_MFRC522_Wr
  2089                           
  2090                           ;main.c: 569: serNum[0] = 0x93;
  2091  0244  3093               	movlw	147
  2092  0245  1283               	bcf	3,5	;RP0=0, select bank0
  2093  0246  1303               	bcf	3,6	;RP1=0, select bank0
  2094  0247  00BF               	movwf	??_MFRC522_AntiColl
  2095  0248  0849               	movf	MFRC522_AntiColl@serNum,w
  2096  0249  0084               	movwf	4
  2097  024A  083F               	movf	??_MFRC522_AntiColl,w
  2098  024B  1383               	bcf	3,7	;select IRP bank0
  2099  024C  0080               	movwf	0
  2100                           
  2101                           ;main.c: 570: serNum[1] = 0x20;
  2102  024D  3020               	movlw	32
  2103  024E  00BF               	movwf	??_MFRC522_AntiColl
  2104  024F  0A49               	incf	MFRC522_AntiColl@serNum,w
  2105  0250  0084               	movwf	4
  2106  0251  083F               	movf	??_MFRC522_AntiColl,w
  2107  0252  0080               	movwf	0
  2108                           
  2109                           ;main.c: 571: MFRC522_Clear_Bit( 0x08, 0x08 );
  2110  0253  3008               	movlw	8
  2111  0254  00BF               	movwf	??_MFRC522_AntiColl
  2112  0255  083F               	movf	??_MFRC522_AntiColl,w
  2113  0256  00A9               	movwf	MFRC522_Clear_Bit@mask
  2114  0257  3008               	movlw	8
  2115  0258  25D3               	fcall	_MFRC522_Clear_Bit
  2116                           
  2117                           ;main.c: 572: _status = MFRC522_ToCard( 0x0C, serNum, 2, serNum, &unLen );
  2118  0259  1283               	bcf	3,5	;RP0=0, select bank0
  2119  025A  1303               	bcf	3,6	;RP1=0, select bank0
  2120  025B  0849               	movf	MFRC522_AntiColl@serNum,w
  2121  025C  00BF               	movwf	??_MFRC522_AntiColl
  2122  025D  083F               	movf	??_MFRC522_AntiColl,w
  2123  025E  00AD               	movwf	MFRC522_ToCard@sendData
  2124  025F  3002               	movlw	2
  2125  0260  00C0               	movwf	??_MFRC522_AntiColl+1
  2126  0261  0840               	movf	??_MFRC522_AntiColl+1,w
  2127  0262  00AE               	movwf	MFRC522_ToCard@sendLen
  2128  0263  0849               	movf	MFRC522_AntiColl@serNum,w
  2129  0264  00C1               	movwf	??_MFRC522_AntiColl+2
  2130  0265  0841               	movf	??_MFRC522_AntiColl+2,w
  2131  0266  00AF               	movwf	MFRC522_ToCard@backData
  2132  0267  3045               	movlw	MFRC522_AntiColl@unLen& (0+255)
  2133  0268  00C2               	movwf	??_MFRC522_AntiColl+3
  2134  0269  0842               	movf	??_MFRC522_AntiColl+3,w
  2135  026A  00B0               	movwf	MFRC522_ToCard@backLen
  2136  026B  300C               	movlw	12
  2137  026C  204E               	fcall	_MFRC522_ToCard
  2138  026D  1283               	bcf	3,5	;RP0=0, select bank0
  2139  026E  1303               	bcf	3,6	;RP1=0, select bank0
  2140  026F  00C3               	movwf	??_MFRC522_AntiColl+4
  2141  0270  0843               	movf	??_MFRC522_AntiColl+4,w
  2142  0271  00C7               	movwf	MFRC522_AntiColl@_status
  2143                           
  2144                           ;main.c: 573: if (_status == 0)
  2145  0272  08C7               	movf	MFRC522_AntiColl@_status,f
  2146  0273  1D03               	skipz
  2147  0274  2A98               	goto	l196
  2148                           
  2149                           ;main.c: 574: {
  2150                           ;main.c: 575: for ( i=0; i < 4; i++ )
  2151  0275  01C8               	clrf	MFRC522_AntiColl@i
  2152  0276  3004               	movlw	4
  2153  0277  0248               	subwf	MFRC522_AntiColl@i,w
  2154  0278  1803               	btfsc	3,0
  2155  0279  2A8C               	goto	l2046
  2156  027A                     l2040:	
  2157                           
  2158                           ;main.c: 576: {
  2159                           ;main.c: 577: serNumCheck ^= serNum[i];
  2160  027A  0848               	movf	MFRC522_AntiColl@i,w
  2161  027B  0749               	addwf	MFRC522_AntiColl@serNum,w
  2162  027C  00BF               	movwf	??_MFRC522_AntiColl
  2163  027D  083F               	movf	??_MFRC522_AntiColl,w
  2164  027E  0084               	movwf	4
  2165  027F  1383               	bcf	3,7	;select IRP bank0
  2166  0280  0800               	movf	0,w
  2167  0281  00C0               	movwf	??_MFRC522_AntiColl+1
  2168  0282  0840               	movf	??_MFRC522_AntiColl+1,w
  2169  0283  06C4               	xorwf	MFRC522_AntiColl@serNumCheck,f
  2170  0284  3001               	movlw	1
  2171  0285  00BF               	movwf	??_MFRC522_AntiColl
  2172  0286  083F               	movf	??_MFRC522_AntiColl,w
  2173  0287  07C8               	addwf	MFRC522_AntiColl@i,f
  2174  0288  3004               	movlw	4
  2175  0289  0248               	subwf	MFRC522_AntiColl@i,w
  2176  028A  1C03               	skipc
  2177  028B  2A7A               	goto	l2040
  2178  028C                     l2046:	
  2179                           
  2180                           ;main.c: 578: }
  2181                           ;main.c: 580: if ( serNumCheck != serNum[4] )
  2182  028C  0849               	movf	MFRC522_AntiColl@serNum,w
  2183  028D  3E04               	addlw	4
  2184  028E  0084               	movwf	4
  2185  028F  1383               	bcf	3,7	;select IRP bank0
  2186  0290  0800               	movf	0,w
  2187  0291  0644               	xorwf	MFRC522_AntiColl@serNumCheck,w
  2188  0292  1903               	skipnz
  2189  0293  2A98               	goto	l196
  2190                           
  2191                           ;main.c: 581: {
  2192                           ;main.c: 582: _status = 2;
  2193  0294  3002               	movlw	2
  2194  0295  00BF               	movwf	??_MFRC522_AntiColl
  2195  0296  083F               	movf	??_MFRC522_AntiColl,w
  2196  0297  00C7               	movwf	MFRC522_AntiColl@_status
  2197  0298                     l196:	
  2198                           
  2199                           ;main.c: 583: }
  2200                           ;main.c: 584: }
  2201                           ;main.c: 585: return _status;
  2202  0298  0847               	movf	MFRC522_AntiColl@_status,w
  2203  0299  0008               	return
  2204  029A                     __end_of_MFRC522_AntiColl:	
  2205                           
  2206                           	psect	text11
  2207  0418                     __ptext11:	
  2208 ;; *************** function _MFRC522_Init *****************
  2209 ;; Defined at:
  2210 ;;		line 277 in file "main.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;		None
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;		None
  2215 ;; Return value:  Size  Location     Type
  2216 ;;		None               void
  2217 ;; Registers used:
  2218 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2224 ;;      Params:         0       0       0       0
  2225 ;;      Locals:         0       0       0       0
  2226 ;;      Temps:          0       1       0       0
  2227 ;;      Totals:         0       1       0       0
  2228 ;;Total ram usage:        1 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    5
  2231 ;; This function calls:
  2232 ;;		_MFRC522_AntennaOn
  2233 ;;		_MFRC522_Reset
  2234 ;;		_MFRC522_Wr
  2235 ;;		_SPI_init
  2236 ;; This function is called by:
  2237 ;;		_main
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           
  2242                           ;psect for function _MFRC522_Init
  2243  0418                     _MFRC522_Init:	
  2244                           
  2245                           ;main.c: 279: TRISB &=~(1<<4 | 1<<3);
  2246                           
  2247                           ;incstack = 0
  2248                           ; Regs used in _MFRC522_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2249  0418  30E7               	movlw	231
  2250  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2251  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2252  041B  00AD               	movwf	??_MFRC522_Init
  2253  041C  082D               	movf	??_MFRC522_Init,w
  2254  041D  1683               	bsf	3,5	;RP0=1, select bank1
  2255  041E  1303               	bcf	3,6	;RP1=0, select bank1
  2256  041F  0586               	andwf	6,f	;volatile
  2257                           
  2258                           ;main.c: 280: PORTB|=(1<<4);
  2259  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2260  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2261  0422  1606               	bsf	6,4	;volatile
  2262                           
  2263                           ;main.c: 281: PORTB|=(1<<3);
  2264  0423  1586               	bsf	6,3	;volatile
  2265                           
  2266                           ;main.c: 283: SPI_init();
  2267  0424  25F1               	fcall	_SPI_init
  2268                           
  2269                           ;main.c: 284: MFRC522_Reset();
  2270  0425  25FC               	fcall	_MFRC522_Reset
  2271                           
  2272                           ;main.c: 286: MFRC522_Wr( 0x2A, 0x8D );
  2273  0426  308D               	movlw	141
  2274  0427  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0428  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0429  00AD               	movwf	??_MFRC522_Init
  2277  042A  082D               	movf	??_MFRC522_Init,w
  2278  042B  00A6               	movwf	MFRC522_Wr@value
  2279  042C  302A               	movlw	42
  2280  042D  258C               	fcall	_MFRC522_Wr
  2281                           
  2282                           ;main.c: 287: MFRC522_Wr( 0x2B, 0x3E );
  2283  042E  303E               	movlw	62
  2284  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2285  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2286  0431  00AD               	movwf	??_MFRC522_Init
  2287  0432  082D               	movf	??_MFRC522_Init,w
  2288  0433  00A6               	movwf	MFRC522_Wr@value
  2289  0434  302B               	movlw	43
  2290  0435  258C               	fcall	_MFRC522_Wr
  2291                           
  2292                           ;main.c: 288: MFRC522_Wr( 0x2D, 30 );
  2293  0436  301E               	movlw	30
  2294  0437  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0438  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0439  00AD               	movwf	??_MFRC522_Init
  2297  043A  082D               	movf	??_MFRC522_Init,w
  2298  043B  00A6               	movwf	MFRC522_Wr@value
  2299  043C  302D               	movlw	45
  2300  043D  258C               	fcall	_MFRC522_Wr
  2301                           
  2302                           ;main.c: 289: MFRC522_Wr( 0x2C, 0 );
  2303  043E  1283               	bcf	3,5	;RP0=0, select bank0
  2304  043F  1303               	bcf	3,6	;RP1=0, select bank0
  2305  0440  01A6               	clrf	MFRC522_Wr@value
  2306  0441  302C               	movlw	44
  2307  0442  258C               	fcall	_MFRC522_Wr
  2308                           
  2309                           ;main.c: 291: MFRC522_Wr( 0x15, 0x40 );
  2310  0443  3040               	movlw	64
  2311  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2312  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2313  0446  00AD               	movwf	??_MFRC522_Init
  2314  0447  082D               	movf	??_MFRC522_Init,w
  2315  0448  00A6               	movwf	MFRC522_Wr@value
  2316  0449  3015               	movlw	21
  2317  044A  258C               	fcall	_MFRC522_Wr
  2318                           
  2319                           ;main.c: 292: MFRC522_Wr( 0x11, 0x3D );
  2320  044B  303D               	movlw	61
  2321  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2322  044D  1303               	bcf	3,6	;RP1=0, select bank0
  2323  044E  00AD               	movwf	??_MFRC522_Init
  2324  044F  082D               	movf	??_MFRC522_Init,w
  2325  0450  00A6               	movwf	MFRC522_Wr@value
  2326  0451  3011               	movlw	17
  2327  0452  258C               	fcall	_MFRC522_Wr
  2328                           
  2329                           ;main.c: 297: MFRC522_AntennaOn();
  2330  0453  2605               	fcall	_MFRC522_AntennaOn
  2331  0454  0008               	return
  2332  0455                     __end_of_MFRC522_Init:	
  2333                           
  2334                           	psect	text12
  2335  05F1                     __ptext12:	
  2336 ;; *************** function _SPI_init *****************
  2337 ;; Defined at:
  2338 ;;		line 97 in file "main.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;		None
  2341 ;; Auto vars:     Size  Location     Type
  2342 ;;		None
  2343 ;; Return value:  Size  Location     Type
  2344 ;;		None               void
  2345 ;; Registers used:
  2346 ;;		wreg, status,2, status,0
  2347 ;; Tracked objects:
  2348 ;;		On entry : 0/0
  2349 ;;		On exit  : 0/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2352 ;;      Params:         0       0       0       0
  2353 ;;      Locals:         0       0       0       0
  2354 ;;      Temps:          1       0       0       0
  2355 ;;      Totals:         1       0       0       0
  2356 ;;Total ram usage:        1 bytes
  2357 ;; Hardware stack levels used:    1
  2358 ;; Hardware stack levels required when called:    1
  2359 ;; This function calls:
  2360 ;;		Nothing
  2361 ;; This function is called by:
  2362 ;;		_MFRC522_Init
  2363 ;;		_main
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           
  2368                           ;psect for function _SPI_init
  2369  05F1                     _SPI_init:	
  2370                           
  2371                           ;main.c: 99: TRISB &= ~(1<<7 | 1<<6);
  2372                           
  2373                           ;incstack = 0
  2374                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  2375  05F1  303F               	movlw	63
  2376  05F2  00F5               	movwf	??_SPI_init
  2377  05F3  0875               	movf	??_SPI_init,w
  2378  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  2379  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  2380  05F6  0586               	andwf	6,f	;volatile
  2381                           
  2382                           ;main.c: 100: TRISB |= (1<<5);
  2383  05F7  1686               	bsf	6,5	;volatile
  2384                           
  2385                           ;main.c: 101: PORTB |= (1<<7);
  2386  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  2387  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  2388  05FA  1786               	bsf	6,7	;volatile
  2389  05FB  0008               	return
  2390  05FC                     __end_of_SPI_init:	
  2391                           
  2392                           	psect	text13
  2393  05FC                     __ptext13:	
  2394 ;; *************** function _MFRC522_Reset *****************
  2395 ;; Defined at:
  2396 ;;		line 265 in file "main.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;		None
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;		None
  2401 ;; Return value:  Size  Location     Type
  2402 ;;		None               void
  2403 ;; Registers used:
  2404 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2410 ;;      Params:         0       0       0       0
  2411 ;;      Locals:         0       0       0       0
  2412 ;;      Temps:          0       1       0       0
  2413 ;;      Totals:         0       1       0       0
  2414 ;;Total ram usage:        1 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    3
  2417 ;; This function calls:
  2418 ;;		_MFRC522_Wr
  2419 ;; This function is called by:
  2420 ;;		_MFRC522_Init
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           
  2425                           ;psect for function _MFRC522_Reset
  2426  05FC                     _MFRC522_Reset:	
  2427                           
  2428                           ;main.c: 267: MFRC522_Wr( 0x01, 0x0F );
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in _MFRC522_Reset: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2432  05FC  300F               	movlw	15
  2433  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  2434  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  2435  05FF  00A9               	movwf	??_MFRC522_Reset
  2436  0600  0829               	movf	??_MFRC522_Reset,w
  2437  0601  00A6               	movwf	MFRC522_Wr@value
  2438  0602  3001               	movlw	1
  2439  0603  258C               	fcall	_MFRC522_Wr
  2440  0604  0008               	return
  2441  0605                     __end_of_MFRC522_Reset:	
  2442                           
  2443                           	psect	text14
  2444  0605                     __ptext14:	
  2445 ;; *************** function _MFRC522_AntennaOn *****************
  2446 ;; Defined at:
  2447 ;;		line 269 in file "main.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;		None
  2450 ;; Auto vars:     Size  Location     Type
  2451 ;;		None
  2452 ;; Return value:  Size  Location     Type
  2453 ;;		None               void
  2454 ;; Registers used:
  2455 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2456 ;; Tracked objects:
  2457 ;;		On entry : 0/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2461 ;;      Params:         0       0       0       0
  2462 ;;      Locals:         0       0       0       0
  2463 ;;      Temps:          0       1       0       0
  2464 ;;      Totals:         0       1       0       0
  2465 ;;Total ram usage:        1 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; Hardware stack levels required when called:    4
  2468 ;; This function calls:
  2469 ;;		_MFRC522_Set_Bit
  2470 ;; This function is called by:
  2471 ;;		_MFRC522_Init
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           
  2476                           ;psect for function _MFRC522_AntennaOn
  2477  0605                     _MFRC522_AntennaOn:	
  2478                           
  2479                           ;main.c: 271: MFRC522_Set_Bit( 0x14, 0x03 );
  2480                           
  2481                           ;incstack = 0
  2482                           ; Regs used in _MFRC522_AntennaOn: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2483  0605  3003               	movlw	3
  2484  0606  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0607  1303               	bcf	3,6	;RP1=0, select bank0
  2486  0608  00AC               	movwf	??_MFRC522_AntennaOn
  2487  0609  082C               	movf	??_MFRC522_AntennaOn,w
  2488  060A  00A9               	movwf	MFRC522_Set_Bit@mask
  2489  060B  3014               	movlw	20
  2490  060C  25E3               	fcall	_MFRC522_Set_Bit
  2491  060D  0008               	return
  2492  060E                     __end_of_MFRC522_AntennaOn:	
  2493                           
  2494                           	psect	text15
  2495  048B                     __ptext15:	
  2496 ;; *************** function _MFRC522_Halt *****************
  2497 ;; Defined at:
  2498 ;;		line 473 in file "main.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;		None
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  buff            4   35[BANK0 ] unsigned char [4]
  2503 ;;  unLen           2   39[BANK0 ] unsigned int 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;		None               void
  2506 ;; Registers used:
  2507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2513 ;;      Params:         0       0       0       0
  2514 ;;      Locals:         0       6       0       0
  2515 ;;      Temps:          0       4       0       0
  2516 ;;      Totals:         0      10       0       0
  2517 ;;Total ram usage:       10 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    5
  2520 ;; This function calls:
  2521 ;;		_MFRC522_CRC
  2522 ;;		_MFRC522_Clear_Bit
  2523 ;;		_MFRC522_ToCard
  2524 ;; This function is called by:
  2525 ;;		_main
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           
  2530                           ;psect for function _MFRC522_Halt
  2531  048B                     _MFRC522_Halt:	
  2532                           
  2533                           ;main.c: 475: unsigned unLen;
  2534                           ;main.c: 476: char buff[4];
  2535                           ;main.c: 478: buff[0] = 0x50;
  2536                           
  2537                           ;incstack = 0
  2538                           ; Regs used in _MFRC522_Halt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2539  048B  3050               	movlw	80
  2540  048C  1283               	bcf	3,5	;RP0=0, select bank0
  2541  048D  1303               	bcf	3,6	;RP1=0, select bank0
  2542  048E  00BF               	movwf	??_MFRC522_Halt
  2543  048F  083F               	movf	??_MFRC522_Halt,w
  2544  0490  00C3               	movwf	MFRC522_Halt@buff
  2545                           
  2546                           ;main.c: 479: buff[1] = 0;
  2547  0491  01C4               	clrf	MFRC522_Halt@buff+1
  2548                           
  2549                           ;main.c: 480: MFRC522_CRC( buff, 2, &buff[2] );
  2550  0492  3002               	movlw	2
  2551  0493  00BF               	movwf	??_MFRC522_Halt
  2552  0494  083F               	movf	??_MFRC522_Halt,w
  2553  0495  00AD               	movwf	MFRC522_CRC@length
  2554  0496  3045               	movlw	(MFRC522_Halt@buff+2)& (0+255)
  2555  0497  00C0               	movwf	??_MFRC522_Halt+1
  2556  0498  0840               	movf	??_MFRC522_Halt+1,w
  2557  0499  00AE               	movwf	MFRC522_CRC@dataOut
  2558  049A  3043               	movlw	MFRC522_Halt@buff& (0+255)
  2559  049B  22F6               	fcall	_MFRC522_CRC
  2560                           
  2561                           ;main.c: 481: MFRC522_Clear_Bit( 0x08, 0x80 );
  2562  049C  3080               	movlw	128
  2563  049D  1283               	bcf	3,5	;RP0=0, select bank0
  2564  049E  1303               	bcf	3,6	;RP1=0, select bank0
  2565  049F  00BF               	movwf	??_MFRC522_Halt
  2566  04A0  083F               	movf	??_MFRC522_Halt,w
  2567  04A1  00A9               	movwf	MFRC522_Clear_Bit@mask
  2568  04A2  3008               	movlw	8
  2569  04A3  25D3               	fcall	_MFRC522_Clear_Bit
  2570                           
  2571                           ;main.c: 482: MFRC522_ToCard( 0x0C, buff, 4, buff, &unLen );
  2572  04A4  3043               	movlw	MFRC522_Halt@buff& (0+255)
  2573  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  2574  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  2575  04A7  00BF               	movwf	??_MFRC522_Halt
  2576  04A8  083F               	movf	??_MFRC522_Halt,w
  2577  04A9  00AD               	movwf	MFRC522_ToCard@sendData
  2578  04AA  3004               	movlw	4
  2579  04AB  00C0               	movwf	??_MFRC522_Halt+1
  2580  04AC  0840               	movf	??_MFRC522_Halt+1,w
  2581  04AD  00AE               	movwf	MFRC522_ToCard@sendLen
  2582  04AE  3043               	movlw	MFRC522_Halt@buff& (0+255)
  2583  04AF  00C1               	movwf	??_MFRC522_Halt+2
  2584  04B0  0841               	movf	??_MFRC522_Halt+2,w
  2585  04B1  00AF               	movwf	MFRC522_ToCard@backData
  2586  04B2  3047               	movlw	MFRC522_Halt@unLen& (0+255)
  2587  04B3  00C2               	movwf	??_MFRC522_Halt+3
  2588  04B4  0842               	movf	??_MFRC522_Halt+3,w
  2589  04B5  00B0               	movwf	MFRC522_ToCard@backLen
  2590  04B6  300C               	movlw	12
  2591  04B7  204E               	fcall	_MFRC522_ToCard
  2592                           
  2593                           ;main.c: 483: MFRC522_Clear_Bit( 0x08, 0x08 );
  2594  04B8  3008               	movlw	8
  2595  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2596  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2597  04BB  00BF               	movwf	??_MFRC522_Halt
  2598  04BC  083F               	movf	??_MFRC522_Halt,w
  2599  04BD  00A9               	movwf	MFRC522_Clear_Bit@mask
  2600  04BE  3008               	movlw	8
  2601  04BF  25D3               	fcall	_MFRC522_Clear_Bit
  2602  04C0  0008               	return
  2603  04C1                     __end_of_MFRC522_Halt:	
  2604                           
  2605                           	psect	text16
  2606  004E                     __ptext16:	
  2607 ;; *************** function _MFRC522_ToCard *****************
  2608 ;; Defined at:
  2609 ;;		line 299 in file "main.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  command         1    wreg     unsigned char 
  2612 ;;  sendData        1   13[BANK0 ] PTR unsigned char 
  2613 ;;		 -> main@UID(6), main@TagType(2), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  2614 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2615 ;;  sendLen         1   14[BANK0 ] unsigned char 
  2616 ;;  backData        1   15[BANK0 ] PTR unsigned char 
  2617 ;;		 -> main@UID(6), main@TagType(2), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  2618 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2619 ;;  backLen         1   16[BANK0 ] PTR unsigned int 
  2620 ;;		 -> MFRC522_AntiColl@unLen(2), MFRC522_Read@unLen(2), MFRC522_Write@recvBits(2), MFRC522_Auth@recvBits(2), 
  2621 ;;		 -> MFRC522_Halt@unLen(2), MFRC522_SelectTag@recvBits(2), MFRC522_Request@backBits(2), 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  command         1   27[BANK0 ] unsigned char 
  2624 ;;  i               2   28[BANK0 ] unsigned int 
  2625 ;;  n               1   30[BANK0 ] unsigned char 
  2626 ;;  irqEn           1   26[BANK0 ] unsigned char 
  2627 ;;  lastBits        1   25[BANK0 ] unsigned char 
  2628 ;;  _status         1   24[BANK0 ] unsigned char 
  2629 ;;  waitIRq         1   23[BANK0 ] unsigned char 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      unsigned char 
  2632 ;; Registers used:
  2633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2639 ;;      Params:         0       4       0       0
  2640 ;;      Locals:         0       8       0       0
  2641 ;;      Temps:          0       6       0       0
  2642 ;;      Totals:         0      18       0       0
  2643 ;;Total ram usage:       18 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    4
  2646 ;; This function calls:
  2647 ;;		_MFRC522_Clear_Bit
  2648 ;;		_MFRC522_Rd
  2649 ;;		_MFRC522_Set_Bit
  2650 ;;		_MFRC522_Wr
  2651 ;; This function is called by:
  2652 ;;		_MFRC522_Request
  2653 ;;		_MFRC522_SelectTag
  2654 ;;		_MFRC522_Halt
  2655 ;;		_MFRC522_AntiColl
  2656 ;;		_MFRC522_Auth
  2657 ;;		_MFRC522_Write
  2658 ;;		_MFRC522_Read
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           
  2663                           ;psect for function _MFRC522_ToCard
  2664  004E                     _MFRC522_ToCard:	
  2665                           
  2666                           ;incstack = 0
  2667                           ; Regs used in _MFRC522_ToCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2668                           ;MFRC522_ToCard@command stored from wreg
  2669  004E  1283               	bcf	3,5	;RP0=0, select bank0
  2670  004F  1303               	bcf	3,6	;RP1=0, select bank0
  2671  0050  00BB               	movwf	MFRC522_ToCard@command
  2672                           
  2673                           ;main.c: 301: char _status = 2;
  2674  0051  3002               	movlw	2
  2675  0052  00B1               	movwf	??_MFRC522_ToCard
  2676  0053  0831               	movf	??_MFRC522_ToCard,w
  2677  0054  00B8               	movwf	MFRC522_ToCard@_status
  2678                           
  2679                           ;main.c: 302: char irqEn = 0x00;
  2680  0055  01BA               	clrf	MFRC522_ToCard@irqEn
  2681                           
  2682                           ;main.c: 303: char waitIRq = 0x00;
  2683  0056  01B7               	clrf	MFRC522_ToCard@waitIRq
  2684                           
  2685                           ;main.c: 304: char lastBits;
  2686                           ;main.c: 305: char n;
  2687                           ;main.c: 306: unsigned i;
  2688                           ;main.c: 308: switch (command)
  2689  0057  2867               	goto	l1906
  2690  0058                     l1900:	
  2691                           ;main.c: 309: {
  2692                           ;main.c: 310: case 0x0E:
  2693                           
  2694                           
  2695                           ;main.c: 311: {
  2696                           ;main.c: 312: irqEn = 0x12;
  2697  0058  3012               	movlw	18
  2698  0059  00B1               	movwf	??_MFRC522_ToCard
  2699  005A  0831               	movf	??_MFRC522_ToCard,w
  2700  005B  00BA               	movwf	MFRC522_ToCard@irqEn
  2701                           
  2702                           ;main.c: 313: waitIRq = 0x10;
  2703  005C  3010               	movlw	16
  2704  005D  2863               	goto	L1
  2705  005E                     l1902:	
  2706                           ;main.c: 315: }
  2707                           ;main.c: 316: case 0x0C:
  2708                           
  2709                           ;main.c: 314: break;
  2710                           
  2711                           
  2712                           ;main.c: 317: {
  2713                           ;main.c: 318: irqEn = 0x77;
  2714  005E  3077               	movlw	119
  2715  005F  00B1               	movwf	??_MFRC522_ToCard
  2716  0060  0831               	movf	??_MFRC522_ToCard,w
  2717  0061  00BA               	movwf	MFRC522_ToCard@irqEn
  2718                           
  2719                           ;main.c: 319: waitIRq = 0x30;
  2720  0062  3030               	movlw	48
  2721  0063                     L1:	
  2722  0063  00B1               	movwf	??_MFRC522_ToCard
  2723  0064  0831               	movf	??_MFRC522_ToCard,w
  2724  0065  00B7               	movwf	MFRC522_ToCard@waitIRq
  2725                           
  2726                           ;main.c: 324: }
  2727                           
  2728                           ;main.c: 323: break;
  2729                           
  2730                           ;main.c: 321: }
  2731                           ;main.c: 322: default:
  2732                           
  2733                           ;main.c: 320: break;
  2734  0066  286F               	goto	l1908
  2735  0067                     l1906:	
  2736  0067  083B               	movf	MFRC522_ToCard@command,w
  2737                           
  2738                           ; Switch size 1, requested type "space"
  2739                           ; Number of cases is 2, Range of values is 12 to 14
  2740                           ; switch strategies available:
  2741                           ; Name         Instructions Cycles
  2742                           ; simple_byte            7     4 (average)
  2743                           ; direct_byte           12     9 (fixed)
  2744                           ; jumptable            263     9 (fixed)
  2745                           ;	Chosen strategy is simple_byte
  2746  0068  3A0C               	xorlw	12	; case 12
  2747  0069  1903               	skipnz
  2748  006A  285E               	goto	l1902
  2749  006B  3A02               	xorlw	2	; case 14
  2750  006C  1903               	skipnz
  2751  006D  2858               	goto	l1900
  2752  006E  286F               	goto	l1908
  2753  006F                     l1908:	
  2754                           
  2755                           ;main.c: 325: MFRC522_Wr( 0x02, irqEn | 0x80 );
  2756  006F  083A               	movf	MFRC522_ToCard@irqEn,w
  2757  0070  3880               	iorlw	128
  2758  0071  00B1               	movwf	??_MFRC522_ToCard
  2759  0072  0831               	movf	??_MFRC522_ToCard,w
  2760  0073  00A6               	movwf	MFRC522_Wr@value
  2761  0074  3002               	movlw	2
  2762  0075  258C               	fcall	_MFRC522_Wr
  2763                           
  2764                           ;main.c: 326: MFRC522_Clear_Bit( 0x04, 0x80 );
  2765  0076  3080               	movlw	128
  2766  0077  1283               	bcf	3,5	;RP0=0, select bank0
  2767  0078  1303               	bcf	3,6	;RP1=0, select bank0
  2768  0079  00B1               	movwf	??_MFRC522_ToCard
  2769  007A  0831               	movf	??_MFRC522_ToCard,w
  2770  007B  00A9               	movwf	MFRC522_Clear_Bit@mask
  2771  007C  3004               	movlw	4
  2772  007D  25D3               	fcall	_MFRC522_Clear_Bit
  2773                           
  2774                           ;main.c: 327: MFRC522_Set_Bit( 0x0A, 0x80 );
  2775  007E  3080               	movlw	128
  2776  007F  1283               	bcf	3,5	;RP0=0, select bank0
  2777  0080  1303               	bcf	3,6	;RP1=0, select bank0
  2778  0081  00B1               	movwf	??_MFRC522_ToCard
  2779  0082  0831               	movf	??_MFRC522_ToCard,w
  2780  0083  00A9               	movwf	MFRC522_Set_Bit@mask
  2781  0084  300A               	movlw	10
  2782  0085  25E3               	fcall	_MFRC522_Set_Bit
  2783                           
  2784                           ;main.c: 328: MFRC522_Wr( 0x01, 0x00 );
  2785  0086  1283               	bcf	3,5	;RP0=0, select bank0
  2786  0087  1303               	bcf	3,6	;RP1=0, select bank0
  2787  0088  01A6               	clrf	MFRC522_Wr@value
  2788  0089  3001               	movlw	1
  2789  008A  258C               	fcall	_MFRC522_Wr
  2790                           
  2791                           ;main.c: 333: for ( i=0; i < sendLen; i++ )
  2792  008B  1283               	bcf	3,5	;RP0=0, select bank0
  2793  008C  1303               	bcf	3,6	;RP1=0, select bank0
  2794  008D  01BC               	clrf	MFRC522_ToCard@i
  2795  008E  01BD               	clrf	MFRC522_ToCard@i+1
  2796  008F                     l1916:	
  2797  008F  082E               	movf	MFRC522_ToCard@sendLen,w
  2798  0090  00B1               	movwf	??_MFRC522_ToCard
  2799  0091  01B2               	clrf	??_MFRC522_ToCard+1
  2800  0092  0832               	movf	??_MFRC522_ToCard+1,w
  2801  0093  023D               	subwf	MFRC522_ToCard@i+1,w
  2802  0094  1D03               	skipz
  2803  0095  2898               	goto	u1675
  2804  0096  0831               	movf	??_MFRC522_ToCard,w
  2805  0097  023C               	subwf	MFRC522_ToCard@i,w
  2806  0098                     u1675:	
  2807  0098  1803               	btfsc	3,0
  2808  0099  28AF               	goto	l1918
  2809                           
  2810                           ;main.c: 334: {
  2811                           ;main.c: 335: MFRC522_Wr( 0x09, sendData[i] );
  2812  009A  083C               	movf	MFRC522_ToCard@i,w
  2813  009B  072D               	addwf	MFRC522_ToCard@sendData,w
  2814  009C  00B1               	movwf	??_MFRC522_ToCard
  2815  009D  0831               	movf	??_MFRC522_ToCard,w
  2816  009E  0084               	movwf	4
  2817  009F  1383               	bcf	3,7	;select IRP bank0
  2818  00A0  0800               	movf	0,w
  2819  00A1  00B2               	movwf	??_MFRC522_ToCard+1
  2820  00A2  0832               	movf	??_MFRC522_ToCard+1,w
  2821  00A3  00A6               	movwf	MFRC522_Wr@value
  2822  00A4  3009               	movlw	9
  2823  00A5  258C               	fcall	_MFRC522_Wr
  2824  00A6  3001               	movlw	1
  2825  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  2826  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  2827  00A9  07BC               	addwf	MFRC522_ToCard@i,f
  2828  00AA  1803               	skipnc
  2829  00AB  0ABD               	incf	MFRC522_ToCard@i+1,f
  2830  00AC  3000               	movlw	0
  2831  00AD  07BD               	addwf	MFRC522_ToCard@i+1,f
  2832  00AE  288F               	goto	l1916
  2833  00AF                     l1918:	
  2834                           
  2835                           ;main.c: 336: }
  2836                           ;main.c: 338: MFRC522_Wr( 0x01, command );
  2837  00AF  083B               	movf	MFRC522_ToCard@command,w
  2838  00B0  00B1               	movwf	??_MFRC522_ToCard
  2839  00B1  0831               	movf	??_MFRC522_ToCard,w
  2840  00B2  00A6               	movwf	MFRC522_Wr@value
  2841  00B3  3001               	movlw	1
  2842  00B4  258C               	fcall	_MFRC522_Wr
  2843                           
  2844                           ;main.c: 339: if (command == 0x0C )
  2845  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  2846  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  2847  00B7  083B               	movf	MFRC522_ToCard@command,w
  2848  00B8  3A0C               	xorlw	12
  2849  00B9  1D03               	skipz
  2850  00BA  28C1               	goto	l1924
  2851                           
  2852                           ;main.c: 340: {
  2853                           ;main.c: 341: MFRC522_Set_Bit( 0x0D, 0x80 );
  2854  00BB  3080               	movlw	128
  2855  00BC  00B1               	movwf	??_MFRC522_ToCard
  2856  00BD  0831               	movf	??_MFRC522_ToCard,w
  2857  00BE  00A9               	movwf	MFRC522_Set_Bit@mask
  2858  00BF  300D               	movlw	13
  2859  00C0  25E3               	fcall	_MFRC522_Set_Bit
  2860  00C1                     l1924:	
  2861                           
  2862                           ;main.c: 342: }
  2863                           ;main.c: 345: i = 0xFFFF;
  2864  00C1  30FF               	movlw	255
  2865  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  2866  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  2867  00C4  00BC               	movwf	MFRC522_ToCard@i
  2868  00C5  30FF               	movlw	255
  2869  00C6  00BD               	movwf	MFRC522_ToCard@i+1
  2870  00C7                     l1926:	
  2871                           ;main.c: 346: do
  2872                           
  2873                           
  2874                           ;main.c: 347: {
  2875                           ;main.c: 350: n = MFRC522_Rd( 0x04 );
  2876  00C7  3004               	movlw	4
  2877  00C8  255F               	fcall	_MFRC522_Rd
  2878  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  2879  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  2880  00CB  00B1               	movwf	??_MFRC522_ToCard
  2881  00CC  0831               	movf	??_MFRC522_ToCard,w
  2882  00CD  00BE               	movwf	MFRC522_ToCard@n
  2883                           
  2884                           ;main.c: 351: i--;
  2885  00CE  3001               	movlw	1
  2886  00CF  02BC               	subwf	MFRC522_ToCard@i,f
  2887  00D0  3000               	movlw	0
  2888  00D1  1C03               	skipc
  2889  00D2  03BD               	decf	MFRC522_ToCard@i+1,f
  2890  00D3  02BD               	subwf	MFRC522_ToCard@i+1,f
  2891                           
  2892                           ;main.c: 352: }
  2893                           ;main.c: 353: while ( i && !(n & 0x01) && !( n & waitIRq ) );
  2894  00D4  083D               	movf	MFRC522_ToCard@i+1,w
  2895  00D5  043C               	iorwf	MFRC522_ToCard@i,w
  2896  00D6  1D03               	btfss	3,2
  2897  00D7  183E               	btfsc	MFRC522_ToCard@n,0
  2898  00D8  28DD               	goto	l1932
  2899  00D9  083E               	movf	MFRC522_ToCard@n,w
  2900  00DA  0537               	andwf	MFRC522_ToCard@waitIRq,w
  2901  00DB  1903               	btfsc	3,2
  2902  00DC  28C7               	goto	l1926
  2903  00DD                     l1932:	
  2904                           
  2905                           ;main.c: 354: MFRC522_Clear_Bit( 0x0D, 0x80 );
  2906  00DD  3080               	movlw	128
  2907  00DE  00B1               	movwf	??_MFRC522_ToCard
  2908  00DF  0831               	movf	??_MFRC522_ToCard,w
  2909  00E0  00A9               	movwf	MFRC522_Clear_Bit@mask
  2910  00E1  300D               	movlw	13
  2911  00E2  25D3               	fcall	_MFRC522_Clear_Bit
  2912                           
  2913                           ;main.c: 355: if (i != 0)
  2914  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  2915  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  2916  00E5  083D               	movf	MFRC522_ToCard@i+1,w
  2917  00E6  043C               	iorwf	MFRC522_ToCard@i,w
  2918  00E7  1903               	skipnz
  2919  00E8  2981               	goto	l127
  2920                           
  2921                           ;main.c: 356: {
  2922                           ;main.c: 357: if( !( MFRC522_Rd( 0x06 ) & 0x1B ) )
  2923  00E9  3006               	movlw	6
  2924  00EA  255F               	fcall	_MFRC522_Rd
  2925  00EB  391B               	andlw	27
  2926  00EC  1D03               	btfss	3,2
  2927  00ED  297B               	goto	l1972
  2928                           
  2929                           ;main.c: 358: {
  2930                           ;main.c: 359: _status = 0;
  2931  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  2932  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  2933  00F0  01B8               	clrf	MFRC522_ToCard@_status
  2934                           
  2935                           ;main.c: 360: if ( n & irqEn & 0x01 )
  2936  00F1  083A               	movf	MFRC522_ToCard@irqEn,w
  2937  00F2  053E               	andwf	MFRC522_ToCard@n,w
  2938  00F3  00B1               	movwf	??_MFRC522_ToCard
  2939  00F4  1C31               	btfss	??_MFRC522_ToCard,0
  2940  00F5  28F8               	goto	l1944
  2941                           
  2942                           ;main.c: 361: {
  2943                           ;main.c: 362: _status = 1;
  2944  00F6  01B8               	clrf	MFRC522_ToCard@_status
  2945  00F7  0AB8               	incf	MFRC522_ToCard@_status,f
  2946  00F8                     l1944:	
  2947                           
  2948                           ;main.c: 363: }
  2949                           ;main.c: 364: if ( command == 0x0C )
  2950  00F8  083B               	movf	MFRC522_ToCard@command,w
  2951  00F9  3A0C               	xorlw	12
  2952  00FA  1D03               	skipz
  2953  00FB  2981               	goto	l127
  2954                           
  2955                           ;main.c: 365: {
  2956                           ;main.c: 366: n = MFRC522_Rd( 0x0A );
  2957  00FC  300A               	movlw	10
  2958  00FD  255F               	fcall	_MFRC522_Rd
  2959  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  2960  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  2961  0100  00B1               	movwf	??_MFRC522_ToCard
  2962  0101  0831               	movf	??_MFRC522_ToCard,w
  2963  0102  00BE               	movwf	MFRC522_ToCard@n
  2964                           
  2965                           ;main.c: 367: lastBits = MFRC522_Rd( 0x0C ) & 0x07;
  2966  0103  300C               	movlw	12
  2967  0104  255F               	fcall	_MFRC522_Rd
  2968  0105  3907               	andlw	7
  2969  0106  1283               	bcf	3,5	;RP0=0, select bank0
  2970  0107  1303               	bcf	3,6	;RP1=0, select bank0
  2971  0108  00B1               	movwf	??_MFRC522_ToCard
  2972  0109  0831               	movf	??_MFRC522_ToCard,w
  2973  010A  00B9               	movwf	MFRC522_ToCard@lastBits
  2974                           
  2975                           ;main.c: 368: if (lastBits)
  2976  010B  0839               	movf	MFRC522_ToCard@lastBits,w
  2977  010C  1903               	btfsc	3,2
  2978  010D  2932               	goto	l1952
  2979                           
  2980                           ;main.c: 369: {
  2981                           ;main.c: 370: *backLen = (n-1) * 8 + lastBits;
  2982  010E  083E               	movf	MFRC522_ToCard@n,w
  2983  010F  00B1               	movwf	??_MFRC522_ToCard
  2984  0110  01B2               	clrf	??_MFRC522_ToCard+1
  2985  0111  1003               	clrc
  2986  0112  0DB1               	rlf	??_MFRC522_ToCard,f
  2987  0113  0DB2               	rlf	??_MFRC522_ToCard+1,f
  2988  0114  1003               	clrc
  2989  0115  0DB1               	rlf	??_MFRC522_ToCard,f
  2990  0116  0DB2               	rlf	??_MFRC522_ToCard+1,f
  2991  0117  1003               	clrc
  2992  0118  0DB1               	rlf	??_MFRC522_ToCard,f
  2993  0119  0DB2               	rlf	??_MFRC522_ToCard+1,f
  2994  011A  0839               	movf	MFRC522_ToCard@lastBits,w
  2995  011B  0731               	addwf	??_MFRC522_ToCard,w
  2996  011C  00B3               	movwf	??_MFRC522_ToCard+2
  2997  011D  3000               	movlw	0
  2998  011E  1803               	skipnc
  2999  011F  3001               	movlw	1
  3000  0120  0732               	addwf	??_MFRC522_ToCard+1,w
  3001  0121  00B4               	movwf	??_MFRC522_ToCard+3
  3002  0122  0833               	movf	??_MFRC522_ToCard+2,w
  3003  0123  3EF8               	addlw	248
  3004  0124  00B5               	movwf	??_MFRC522_ToCard+4
  3005  0125  0834               	movf	??_MFRC522_ToCard+3,w
  3006  0126  1803               	skipnc
  3007  0127  3E01               	addlw	1
  3008  0128  3EFF               	addlw	255
  3009  0129  00B6               	movwf	??_MFRC522_ToCard+5
  3010  012A  0830               	movf	MFRC522_ToCard@backLen,w
  3011  012B  0084               	movwf	4
  3012  012C  0835               	movf	??_MFRC522_ToCard+4,w
  3013  012D  1383               	bcf	3,7	;select IRP bank0
  3014  012E  0080               	movwf	0
  3015  012F  0A84               	incf	4,f
  3016  0130  0836               	movf	??_MFRC522_ToCard+5,w
  3017  0131  2945               	goto	L2
  3018  0132                     l1952:	
  3019                           ;main.c: 371: }
  3020                           
  3021                           
  3022                           ;main.c: 372: else
  3023                           ;main.c: 373: {
  3024                           ;main.c: 374: *backLen = n * 8;
  3025  0132  083E               	movf	MFRC522_ToCard@n,w
  3026  0133  00B1               	movwf	??_MFRC522_ToCard
  3027  0134  01B2               	clrf	??_MFRC522_ToCard+1
  3028  0135  1003               	clrc
  3029  0136  0DB1               	rlf	??_MFRC522_ToCard,f
  3030  0137  0DB2               	rlf	??_MFRC522_ToCard+1,f
  3031  0138  1003               	clrc
  3032  0139  0DB1               	rlf	??_MFRC522_ToCard,f
  3033  013A  0DB2               	rlf	??_MFRC522_ToCard+1,f
  3034  013B  1003               	clrc
  3035  013C  0DB1               	rlf	??_MFRC522_ToCard,f
  3036  013D  0DB2               	rlf	??_MFRC522_ToCard+1,f
  3037  013E  0830               	movf	MFRC522_ToCard@backLen,w
  3038  013F  0084               	movwf	4
  3039  0140  0831               	movf	??_MFRC522_ToCard,w
  3040  0141  1383               	bcf	3,7	;select IRP bank0
  3041  0142  0080               	movwf	0
  3042  0143  0A84               	incf	4,f
  3043  0144  0832               	movf	??_MFRC522_ToCard+1,w
  3044  0145                     L2:	
  3045  0145  0080               	movwf	0
  3046                           
  3047                           ;main.c: 375: }
  3048                           ;main.c: 376: if (n == 0)
  3049  0146  08BE               	movf	MFRC522_ToCard@n,f
  3050  0147  1D03               	skipz
  3051  0148  294B               	goto	l1958
  3052                           
  3053                           ;main.c: 377: {
  3054                           ;main.c: 378: n = 1;
  3055  0149  01BE               	clrf	MFRC522_ToCard@n
  3056  014A  0ABE               	incf	MFRC522_ToCard@n,f
  3057  014B                     l1958:	
  3058                           
  3059                           ;main.c: 379: }
  3060                           ;main.c: 380: if (n > 16)
  3061  014B  3011               	movlw	17
  3062  014C  023E               	subwf	MFRC522_ToCard@n,w
  3063  014D  1C03               	skipc
  3064  014E  2953               	goto	l1962
  3065                           
  3066                           ;main.c: 381: {
  3067                           ;main.c: 382: n = 16;
  3068  014F  3010               	movlw	16
  3069  0150  00B1               	movwf	??_MFRC522_ToCard
  3070  0151  0831               	movf	??_MFRC522_ToCard,w
  3071  0152  00BE               	movwf	MFRC522_ToCard@n
  3072  0153                     l1962:	
  3073                           
  3074                           ;main.c: 383: }
  3075                           ;main.c: 385: for (i=0; i < n; i++)
  3076  0153  01BC               	clrf	MFRC522_ToCard@i
  3077  0154  01BD               	clrf	MFRC522_ToCard@i+1
  3078  0155                     l1968:	
  3079  0155  083E               	movf	MFRC522_ToCard@n,w
  3080  0156  00B1               	movwf	??_MFRC522_ToCard
  3081  0157  01B2               	clrf	??_MFRC522_ToCard+1
  3082  0158  0832               	movf	??_MFRC522_ToCard+1,w
  3083  0159  023D               	subwf	MFRC522_ToCard@i+1,w
  3084  015A  1D03               	skipz
  3085  015B  295E               	goto	u1795
  3086  015C  0831               	movf	??_MFRC522_ToCard,w
  3087  015D  023C               	subwf	MFRC522_ToCard@i,w
  3088  015E                     u1795:	
  3089  015E  1803               	btfsc	3,0
  3090  015F  2974               	goto	l1970
  3091                           
  3092                           ;main.c: 386: {
  3093                           ;main.c: 387: backData[i] = MFRC522_Rd( 0x09 );
  3094  0160  3009               	movlw	9
  3095  0161  255F               	fcall	_MFRC522_Rd
  3096  0162  1283               	bcf	3,5	;RP0=0, select bank0
  3097  0163  1303               	bcf	3,6	;RP1=0, select bank0
  3098  0164  00B1               	movwf	??_MFRC522_ToCard
  3099  0165  083C               	movf	MFRC522_ToCard@i,w
  3100  0166  072F               	addwf	MFRC522_ToCard@backData,w
  3101  0167  00B2               	movwf	??_MFRC522_ToCard+1
  3102  0168  0832               	movf	??_MFRC522_ToCard+1,w
  3103  0169  0084               	movwf	4
  3104  016A  0831               	movf	??_MFRC522_ToCard,w
  3105  016B  1383               	bcf	3,7	;select IRP bank0
  3106  016C  0080               	movwf	0
  3107  016D  3001               	movlw	1
  3108  016E  07BC               	addwf	MFRC522_ToCard@i,f
  3109  016F  1803               	skipnc
  3110  0170  0ABD               	incf	MFRC522_ToCard@i+1,f
  3111  0171  3000               	movlw	0
  3112  0172  07BD               	addwf	MFRC522_ToCard@i+1,f
  3113  0173  2955               	goto	l1968
  3114  0174                     l1970:	
  3115                           
  3116                           ;main.c: 388: }
  3117                           ;main.c: 390: backData[i] = 0;
  3118  0174  083C               	movf	MFRC522_ToCard@i,w
  3119  0175  072F               	addwf	MFRC522_ToCard@backData,w
  3120  0176  00B1               	movwf	??_MFRC522_ToCard
  3121  0177  0831               	movf	??_MFRC522_ToCard,w
  3122  0178  0084               	movwf	4
  3123  0179  0180               	clrf	0
  3124                           
  3125                           ;main.c: 391: }
  3126                           ;main.c: 392: }
  3127  017A  2981               	goto	l127
  3128  017B                     l1972:	
  3129                           
  3130                           ;main.c: 393: else
  3131                           ;main.c: 394: {
  3132                           ;main.c: 395: _status = 2;
  3133  017B  3002               	movlw	2
  3134  017C  1283               	bcf	3,5	;RP0=0, select bank0
  3135  017D  1303               	bcf	3,6	;RP1=0, select bank0
  3136  017E  00B1               	movwf	??_MFRC522_ToCard
  3137  017F  0831               	movf	??_MFRC522_ToCard,w
  3138  0180  00B8               	movwf	MFRC522_ToCard@_status
  3139  0181                     l127:	
  3140                           
  3141                           ;main.c: 396: }
  3142                           ;main.c: 397: }
  3143                           ;main.c: 400: return _status;
  3144  0181  0838               	movf	MFRC522_ToCard@_status,w
  3145  0182  0008               	return
  3146  0183                     __end_of_MFRC522_ToCard:	
  3147                           
  3148                           	psect	text17
  3149  02F6                     __ptext17:	
  3150 ;; *************** function _MFRC522_CRC *****************
  3151 ;; Defined at:
  3152 ;;		line 415 in file "main.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  dataIn          1    wreg     PTR unsigned char 
  3155 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  3156 ;;  length          1   13[BANK0 ] unsigned char 
  3157 ;;  dataOut         1   14[BANK0 ] PTR unsigned char 
  3158 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  dataIn          1   17[BANK0 ] PTR unsigned char 
  3161 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  3162 ;;  i               1   18[BANK0 ] unsigned char 
  3163 ;;  n               1   16[BANK0 ] unsigned char 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;		None               void
  3166 ;; Registers used:
  3167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3173 ;;      Params:         0       2       0       0
  3174 ;;      Locals:         0       3       0       0
  3175 ;;      Temps:          0       1       0       0
  3176 ;;      Totals:         0       6       0       0
  3177 ;;Total ram usage:        6 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    4
  3180 ;; This function calls:
  3181 ;;		_MFRC522_Clear_Bit
  3182 ;;		_MFRC522_Rd
  3183 ;;		_MFRC522_Set_Bit
  3184 ;;		_MFRC522_Wr
  3185 ;; This function is called by:
  3186 ;;		_MFRC522_SelectTag
  3187 ;;		_MFRC522_Halt
  3188 ;;		_MFRC522_Write
  3189 ;;		_MFRC522_Read
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           
  3194                           ;psect for function _MFRC522_CRC
  3195  02F6                     _MFRC522_CRC:	
  3196                           
  3197                           ;incstack = 0
  3198                           ; Regs used in _MFRC522_CRC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3199                           ;MFRC522_CRC@dataIn stored from wreg
  3200  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  3201  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  3202  02F8  00B1               	movwf	MFRC522_CRC@dataIn
  3203                           
  3204                           ;main.c: 417: char i, n;
  3205                           ;main.c: 418: MFRC522_Clear_Bit( 0x05, 0x04 );
  3206  02F9  3004               	movlw	4
  3207  02FA  00AF               	movwf	??_MFRC522_CRC
  3208  02FB  082F               	movf	??_MFRC522_CRC,w
  3209  02FC  00A9               	movwf	MFRC522_Clear_Bit@mask
  3210  02FD  3005               	movlw	5
  3211  02FE  25D3               	fcall	_MFRC522_Clear_Bit
  3212                           
  3213                           ;main.c: 419: MFRC522_Set_Bit( 0x0A, 0x80 );
  3214  02FF  3080               	movlw	128
  3215  0300  1283               	bcf	3,5	;RP0=0, select bank0
  3216  0301  1303               	bcf	3,6	;RP1=0, select bank0
  3217  0302  00AF               	movwf	??_MFRC522_CRC
  3218  0303  082F               	movf	??_MFRC522_CRC,w
  3219  0304  00A9               	movwf	MFRC522_Set_Bit@mask
  3220  0305  300A               	movlw	10
  3221  0306  25E3               	fcall	_MFRC522_Set_Bit
  3222                           
  3223                           ;main.c: 422: for ( i = 0; i < length; i++ )
  3224  0307  1283               	bcf	3,5	;RP0=0, select bank0
  3225  0308  1303               	bcf	3,6	;RP1=0, select bank0
  3226  0309  01B2               	clrf	MFRC522_CRC@i
  3227  030A                     l2004:	
  3228  030A  082D               	movf	MFRC522_CRC@length,w
  3229  030B  0232               	subwf	MFRC522_CRC@i,w
  3230  030C  1803               	btfsc	3,0
  3231  030D  2B22               	goto	l2006
  3232                           
  3233                           ;main.c: 423: {
  3234                           ;main.c: 424: MFRC522_Wr( 0x09, *dataIn++ );
  3235  030E  0831               	movf	MFRC522_CRC@dataIn,w
  3236  030F  0084               	movwf	4
  3237  0310  1383               	bcf	3,7	;select IRP bank0
  3238  0311  0800               	movf	0,w
  3239  0312  00AF               	movwf	??_MFRC522_CRC
  3240  0313  082F               	movf	??_MFRC522_CRC,w
  3241  0314  00A6               	movwf	MFRC522_Wr@value
  3242  0315  3009               	movlw	9
  3243  0316  258C               	fcall	_MFRC522_Wr
  3244  0317  3001               	movlw	1
  3245  0318  1283               	bcf	3,5	;RP0=0, select bank0
  3246  0319  1303               	bcf	3,6	;RP1=0, select bank0
  3247  031A  00AF               	movwf	??_MFRC522_CRC
  3248  031B  082F               	movf	??_MFRC522_CRC,w
  3249  031C  07B1               	addwf	MFRC522_CRC@dataIn,f
  3250  031D  3001               	movlw	1
  3251  031E  00AF               	movwf	??_MFRC522_CRC
  3252  031F  082F               	movf	??_MFRC522_CRC,w
  3253  0320  07B2               	addwf	MFRC522_CRC@i,f
  3254  0321  2B0A               	goto	l2004
  3255  0322                     l2006:	
  3256                           
  3257                           ;main.c: 425: }
  3258                           ;main.c: 427: MFRC522_Wr( 0x01, 0x03 );
  3259  0322  3003               	movlw	3
  3260  0323  00AF               	movwf	??_MFRC522_CRC
  3261  0324  082F               	movf	??_MFRC522_CRC,w
  3262  0325  00A6               	movwf	MFRC522_Wr@value
  3263  0326  3001               	movlw	1
  3264  0327  258C               	fcall	_MFRC522_Wr
  3265                           
  3266                           ;main.c: 429: i = 0xFF;
  3267  0328  30FF               	movlw	255
  3268  0329  1283               	bcf	3,5	;RP0=0, select bank0
  3269  032A  1303               	bcf	3,6	;RP1=0, select bank0
  3270  032B  00AF               	movwf	??_MFRC522_CRC
  3271  032C  082F               	movf	??_MFRC522_CRC,w
  3272  032D  00B2               	movwf	MFRC522_CRC@i
  3273  032E                     l2010:	
  3274                           ;main.c: 431: do
  3275                           
  3276                           
  3277                           ;main.c: 432: {
  3278                           ;main.c: 433: n = MFRC522_Rd( 0x05 );
  3279  032E  3005               	movlw	5
  3280  032F  255F               	fcall	_MFRC522_Rd
  3281  0330  1283               	bcf	3,5	;RP0=0, select bank0
  3282  0331  1303               	bcf	3,6	;RP1=0, select bank0
  3283  0332  00AF               	movwf	??_MFRC522_CRC
  3284  0333  082F               	movf	??_MFRC522_CRC,w
  3285  0334  00B0               	movwf	MFRC522_CRC@n
  3286                           
  3287                           ;main.c: 434: i--;
  3288  0335  3001               	movlw	1
  3289  0336  02B2               	subwf	MFRC522_CRC@i,f
  3290                           
  3291                           ;main.c: 435: }
  3292                           ;main.c: 436: while( i && !(n & 0x04) );
  3293  0337  0832               	movf	MFRC522_CRC@i,w
  3294  0338  1D03               	skipz
  3295  0339  1930               	btfsc	MFRC522_CRC@n,2
  3296  033A  2B3C               	goto	l2018
  3297  033B  2B2E               	goto	l2010
  3298  033C                     l2018:	
  3299                           
  3300                           ;main.c: 438: dataOut[0] = MFRC522_Rd( 0x22 );
  3301  033C  3022               	movlw	34
  3302  033D  255F               	fcall	_MFRC522_Rd
  3303  033E  1283               	bcf	3,5	;RP0=0, select bank0
  3304  033F  1303               	bcf	3,6	;RP1=0, select bank0
  3305  0340  00AF               	movwf	??_MFRC522_CRC
  3306  0341  082E               	movf	MFRC522_CRC@dataOut,w
  3307  0342  0084               	movwf	4
  3308  0343  082F               	movf	??_MFRC522_CRC,w
  3309  0344  1383               	bcf	3,7	;select IRP bank0
  3310  0345  0080               	movwf	0
  3311                           
  3312                           ;main.c: 439: dataOut[1] = MFRC522_Rd( 0x21 );
  3313  0346  3021               	movlw	33
  3314  0347  255F               	fcall	_MFRC522_Rd
  3315  0348  1283               	bcf	3,5	;RP0=0, select bank0
  3316  0349  1303               	bcf	3,6	;RP1=0, select bank0
  3317  034A  00AF               	movwf	??_MFRC522_CRC
  3318  034B  0A2E               	incf	MFRC522_CRC@dataOut,w
  3319  034C  0084               	movwf	4
  3320  034D  082F               	movf	??_MFRC522_CRC,w
  3321  034E  1383               	bcf	3,7	;select IRP bank0
  3322  034F  0080               	movwf	0
  3323  0350  0008               	return
  3324  0351                     __end_of_MFRC522_CRC:	
  3325                           
  3326                           	psect	text18
  3327  05E3                     __ptext18:	
  3328 ;; *************** function _MFRC522_Set_Bit *****************
  3329 ;; Defined at:
  3330 ;;		line 261 in file "main.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  addr            1    wreg     unsigned char 
  3333 ;;  mask            1    9[BANK0 ] unsigned char 
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;  addr            1   11[BANK0 ] unsigned char 
  3336 ;; Return value:  Size  Location     Type
  3337 ;;		None               void
  3338 ;; Registers used:
  3339 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3345 ;;      Params:         0       1       0       0
  3346 ;;      Locals:         0       1       0       0
  3347 ;;      Temps:          0       1       0       0
  3348 ;;      Totals:         0       3       0       0
  3349 ;;Total ram usage:        3 bytes
  3350 ;; Hardware stack levels used:    1
  3351 ;; Hardware stack levels required when called:    3
  3352 ;; This function calls:
  3353 ;;		_MFRC522_Rd
  3354 ;;		_MFRC522_Wr
  3355 ;; This function is called by:
  3356 ;;		_MFRC522_AntennaOn
  3357 ;;		_MFRC522_ToCard
  3358 ;;		_MFRC522_CRC
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           
  3363                           ;psect for function _MFRC522_Set_Bit
  3364  05E3                     _MFRC522_Set_Bit:	
  3365                           
  3366                           ;incstack = 0
  3367                           ; Regs used in _MFRC522_Set_Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3368                           ;MFRC522_Set_Bit@addr stored from wreg
  3369  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  3370  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  3371  05E5  00AB               	movwf	MFRC522_Set_Bit@addr
  3372                           
  3373                           ;main.c: 263: MFRC522_Wr( addr, MFRC522_Rd( addr ) | mask );
  3374  05E6  082B               	movf	MFRC522_Set_Bit@addr,w
  3375  05E7  255F               	fcall	_MFRC522_Rd
  3376  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  3377  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  3378  05EA  0429               	iorwf	MFRC522_Set_Bit@mask,w
  3379  05EB  00AA               	movwf	??_MFRC522_Set_Bit
  3380  05EC  082A               	movf	??_MFRC522_Set_Bit,w
  3381  05ED  00A6               	movwf	MFRC522_Wr@value
  3382  05EE  082B               	movf	MFRC522_Set_Bit@addr,w
  3383  05EF  258C               	fcall	_MFRC522_Wr
  3384  05F0  0008               	return
  3385  05F1                     __end_of_MFRC522_Set_Bit:	
  3386                           
  3387                           	psect	text19
  3388  05D3                     __ptext19:	
  3389 ;; *************** function _MFRC522_Clear_Bit *****************
  3390 ;; Defined at:
  3391 ;;		line 257 in file "main.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  addr            1    wreg     unsigned char 
  3394 ;;  mask            1    9[BANK0 ] unsigned char 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  addr            1   12[BANK0 ] unsigned char 
  3397 ;; Return value:  Size  Location     Type
  3398 ;;		None               void
  3399 ;; Registers used:
  3400 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3406 ;;      Params:         0       1       0       0
  3407 ;;      Locals:         0       1       0       0
  3408 ;;      Temps:          0       2       0       0
  3409 ;;      Totals:         0       4       0       0
  3410 ;;Total ram usage:        4 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    3
  3413 ;; This function calls:
  3414 ;;		_MFRC522_Rd
  3415 ;;		_MFRC522_Wr
  3416 ;; This function is called by:
  3417 ;;		_MFRC522_ToCard
  3418 ;;		_MFRC522_CRC
  3419 ;;		_MFRC522_Halt
  3420 ;;		_MFRC522_AntiColl
  3421 ;;		_MFRC522_AntennaOff
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           
  3426                           ;psect for function _MFRC522_Clear_Bit
  3427  05D3                     _MFRC522_Clear_Bit:	
  3428                           
  3429                           ;incstack = 0
  3430                           ; Regs used in _MFRC522_Clear_Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3431                           ;MFRC522_Clear_Bit@addr stored from wreg
  3432  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  3433  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  3434  05D5  00AC               	movwf	MFRC522_Clear_Bit@addr
  3435                           
  3436                           ;main.c: 259: MFRC522_Wr( addr, MFRC522_Rd( addr ) & (~mask) );
  3437  05D6  0929               	comf	MFRC522_Clear_Bit@mask,w
  3438  05D7  00AA               	movwf	??_MFRC522_Clear_Bit
  3439  05D8  082C               	movf	MFRC522_Clear_Bit@addr,w
  3440  05D9  255F               	fcall	_MFRC522_Rd
  3441  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  3442  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  3443  05DC  052A               	andwf	??_MFRC522_Clear_Bit,w
  3444  05DD  00AB               	movwf	??_MFRC522_Clear_Bit+1
  3445  05DE  082B               	movf	??_MFRC522_Clear_Bit+1,w
  3446  05DF  00A6               	movwf	MFRC522_Wr@value
  3447  05E0  082C               	movf	MFRC522_Clear_Bit@addr,w
  3448  05E1  258C               	fcall	_MFRC522_Wr
  3449  05E2  0008               	return
  3450  05E3                     __end_of_MFRC522_Clear_Bit:	
  3451                           
  3452                           	psect	text20
  3453  058C                     __ptext20:	
  3454 ;; *************** function _MFRC522_Wr *****************
  3455 ;; Defined at:
  3456 ;;		line 241 in file "main.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  addr            1    wreg     unsigned char 
  3459 ;;  value           1    6[BANK0 ] unsigned char 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  addr            1    8[BANK0 ] unsigned char 
  3462 ;; Return value:  Size  Location     Type
  3463 ;;		None               void
  3464 ;; Registers used:
  3465 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3471 ;;      Params:         0       1       0       0
  3472 ;;      Locals:         0       1       0       0
  3473 ;;      Temps:          0       1       0       0
  3474 ;;      Totals:         0       3       0       0
  3475 ;;Total ram usage:        3 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; Hardware stack levels required when called:    2
  3478 ;; This function calls:
  3479 ;;		_SPI_transfer
  3480 ;; This function is called by:
  3481 ;;		_MFRC522_Clear_Bit
  3482 ;;		_MFRC522_Set_Bit
  3483 ;;		_MFRC522_Reset
  3484 ;;		_MFRC522_Init
  3485 ;;		_MFRC522_ToCard
  3486 ;;		_MFRC522_Request
  3487 ;;		_MFRC522_CRC
  3488 ;;		_MFRC522_AntiColl
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           
  3493                           ;psect for function _MFRC522_Wr
  3494  058C                     _MFRC522_Wr:	
  3495                           
  3496                           ;incstack = 0
  3497                           ; Regs used in _MFRC522_Wr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3498                           ;MFRC522_Wr@addr stored from wreg
  3499  058C  1283               	bcf	3,5	;RP0=0, select bank0
  3500  058D  1303               	bcf	3,6	;RP1=0, select bank0
  3501  058E  00A8               	movwf	MFRC522_Wr@addr
  3502                           
  3503                           ;main.c: 243: PORTB&=~(1<<4);
  3504  058F  30EF               	movlw	239
  3505  0590  00A7               	movwf	??_MFRC522_Wr
  3506  0591  0827               	movf	??_MFRC522_Wr,w
  3507  0592  0586               	andwf	6,f	;volatile
  3508                           
  3509                           ;main.c: 244: SPI_transfer( ( addr << 1 ) & 0x7E );
  3510  0593  0828               	movf	MFRC522_Wr@addr,w
  3511  0594  00A7               	movwf	??_MFRC522_Wr
  3512  0595  0727               	addwf	??_MFRC522_Wr,w
  3513  0596  397E               	andlw	126
  3514  0597  2351               	fcall	_SPI_transfer
  3515                           
  3516                           ;main.c: 245: SPI_transfer( value );
  3517  0598  1283               	bcf	3,5	;RP0=0, select bank0
  3518  0599  1303               	bcf	3,6	;RP1=0, select bank0
  3519  059A  0826               	movf	MFRC522_Wr@value,w
  3520  059B  2351               	fcall	_SPI_transfer
  3521                           
  3522                           ;main.c: 246: PORTB|=(1<<4);
  3523  059C  1283               	bcf	3,5	;RP0=0, select bank0
  3524  059D  1303               	bcf	3,6	;RP1=0, select bank0
  3525  059E  1606               	bsf	6,4	;volatile
  3526  059F  0008               	return
  3527  05A0                     __end_of_MFRC522_Wr:	
  3528                           
  3529                           	psect	text21
  3530  055F                     __ptext21:	
  3531 ;; *************** function _MFRC522_Rd *****************
  3532 ;; Defined at:
  3533 ;;		line 248 in file "main.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  addr            1    wreg     unsigned char 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  addr            1    4[BANK0 ] unsigned char 
  3538 ;;  value           1    5[BANK0 ] unsigned char 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  1    wreg      unsigned char 
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3548 ;;      Params:         0       0       0       0
  3549 ;;      Locals:         0       2       0       0
  3550 ;;      Temps:          1       0       0       0
  3551 ;;      Totals:         1       2       0       0
  3552 ;;Total ram usage:        3 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    2
  3555 ;; This function calls:
  3556 ;;		_SPI_transfer
  3557 ;; This function is called by:
  3558 ;;		_MFRC522_Clear_Bit
  3559 ;;		_MFRC522_Set_Bit
  3560 ;;		_MFRC522_ToCard
  3561 ;;		_MFRC522_CRC
  3562 ;;		_MFRC522_Auth
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           
  3567                           ;psect for function _MFRC522_Rd
  3568  055F                     _MFRC522_Rd:	
  3569                           
  3570                           ;incstack = 0
  3571                           ; Regs used in _MFRC522_Rd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3572                           ;MFRC522_Rd@addr stored from wreg
  3573  055F  1283               	bcf	3,5	;RP0=0, select bank0
  3574  0560  1303               	bcf	3,6	;RP1=0, select bank0
  3575  0561  00A4               	movwf	MFRC522_Rd@addr
  3576                           
  3577                           ;main.c: 250: char value;
  3578                           ;main.c: 251: PORTB&=~(1<<4);
  3579  0562  30EF               	movlw	239
  3580  0563  00F6               	movwf	??_MFRC522_Rd
  3581  0564  0876               	movf	??_MFRC522_Rd,w
  3582  0565  0586               	andwf	6,f	;volatile
  3583                           
  3584                           ;main.c: 252: SPI_transfer( (( addr << 1 ) & 0x7E) | 0x80 );
  3585  0566  0824               	movf	MFRC522_Rd@addr,w
  3586  0567  00F6               	movwf	??_MFRC522_Rd
  3587  0568  0776               	addwf	??_MFRC522_Rd,w
  3588  0569  397E               	andlw	126
  3589  056A  3880               	iorlw	128
  3590  056B  2351               	fcall	_SPI_transfer
  3591                           
  3592                           ;main.c: 253: value = SPI_transfer( 0x00 );
  3593  056C  3000               	movlw	0
  3594  056D  2351               	fcall	_SPI_transfer
  3595  056E  00F6               	movwf	??_MFRC522_Rd
  3596  056F  0876               	movf	??_MFRC522_Rd,w
  3597  0570  1283               	bcf	3,5	;RP0=0, select bank0
  3598  0571  1303               	bcf	3,6	;RP1=0, select bank0
  3599  0572  00A5               	movwf	MFRC522_Rd@value
  3600                           
  3601                           ;main.c: 254: PORTB|=(1<<4);
  3602  0573  1606               	bsf	6,4	;volatile
  3603                           
  3604                           ;main.c: 255: return value;
  3605  0574  0825               	movf	MFRC522_Rd@value,w
  3606  0575  0008               	return
  3607  0576                     __end_of_MFRC522_Rd:	
  3608                           
  3609                           	psect	text22
  3610  0351                     __ptext22:	
  3611 ;; *************** function _SPI_transfer *****************
  3612 ;; Defined at:
  3613 ;;		line 123 in file "main.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  data            1    wreg     unsigned char 
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  data            1    0[BANK0 ] unsigned char 
  3618 ;;  i               2    2[BANK0 ] int 
  3619 ;;  ret             1    1[BANK0 ] unsigned char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      unsigned char 
  3622 ;; Registers used:
  3623 ;;		wreg, status,2, status,0, btemp+1
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3629 ;;      Params:         0       0       0       0
  3630 ;;      Locals:         0       4       0       0
  3631 ;;      Temps:          1       0       0       0
  3632 ;;      Totals:         1       4       0       0
  3633 ;;Total ram usage:        5 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    1
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_MFRC522_Wr
  3640 ;;		_MFRC522_Rd
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           
  3645                           ;psect for function _SPI_transfer
  3646  0351                     _SPI_transfer:	
  3647                           
  3648                           ;incstack = 0
  3649                           ; Regs used in _SPI_transfer: [wreg+status,2+status,0+btemp+1]
  3650                           ;SPI_transfer@data stored from wreg
  3651  0351  1283               	bcf	3,5	;RP0=0, select bank0
  3652  0352  1303               	bcf	3,6	;RP1=0, select bank0
  3653  0353  00A0               	movwf	SPI_transfer@data
  3654                           
  3655                           ;main.c: 125: unsigned char ret;
  3656                           ;main.c: 126: for(int i=0;i<8;i++)
  3657  0354  01A2               	clrf	SPI_transfer@i
  3658  0355  01A3               	clrf	SPI_transfer@i+1
  3659  0356  0823               	movf	SPI_transfer@i+1,w
  3660  0357  3A80               	xorlw	128
  3661  0358  00FF               	movwf	127
  3662  0359  3080               	movlw	128
  3663  035A  027F               	subwf	127,w
  3664  035B  1D03               	skipz
  3665  035C  2B5F               	goto	u1635
  3666  035D  3008               	movlw	8
  3667  035E  0222               	subwf	SPI_transfer@i,w
  3668  035F                     u1635:	
  3669  035F  1803               	btfsc	3,0
  3670  0360  2B92               	goto	l1866
  3671  0361                     l82:	
  3672                           
  3673                           ;main.c: 127: {
  3674                           ;main.c: 129: if(PORTB & (1<<5))ret|=1;
  3675  0361  1283               	bcf	3,5	;RP0=0, select bank0
  3676  0362  1303               	bcf	3,6	;RP1=0, select bank0
  3677  0363  1A86               	btfsc	6,5	;volatile
  3678  0364  1421               	bsf	SPI_transfer@ret,0
  3679                           
  3680                           ;main.c: 130: PORTB &= ~(1<<7);
  3681  0365  307F               	movlw	127
  3682  0366  00F5               	movwf	??_SPI_transfer
  3683  0367  0875               	movf	??_SPI_transfer,w
  3684  0368  0586               	andwf	6,f	;volatile
  3685                           
  3686                           ;main.c: 132: if(data & 0x80)PORTB |= (1<<6);
  3687  0369  1FA0               	btfss	SPI_transfer@data,7
  3688  036A  2B6D               	goto	l1850
  3689  036B  1706               	bsf	6,6	;volatile
  3690  036C  2B71               	goto	l1852
  3691  036D                     l1850:	
  3692                           
  3693                           ;main.c: 133: else PORTB &= ~(1<<6);
  3694  036D  30BF               	movlw	191
  3695  036E  00F5               	movwf	??_SPI_transfer
  3696  036F  0875               	movf	??_SPI_transfer,w
  3697  0370  0586               	andwf	6,f	;volatile
  3698  0371                     l1852:	
  3699                           
  3700                           ;main.c: 134: _delay((unsigned long)((25)*(4000000/4000000.0)));
  3701  0371  3008               	movlw	8
  3702  0372  00F5               	movwf	??_SPI_transfer
  3703  0373                     u2377:	
  3704  0373  0BF5               	decfsz	??_SPI_transfer,f
  3705  0374  2B73               	goto	u2377
  3706                           
  3707                           ;main.c: 135: PORTB |= (1<<7);
  3708  0375  1283               	bcf	3,5	;RP0=0, select bank0
  3709  0376  1303               	bcf	3,6	;RP1=0, select bank0
  3710  0377  1786               	bsf	6,7	;volatile
  3711                           
  3712                           ;main.c: 137: ret<<=1;
  3713  0378  1003               	clrc
  3714  0379  0DA1               	rlf	SPI_transfer@ret,f
  3715                           
  3716                           ;main.c: 138: data<<=1;
  3717  037A  1003               	clrc
  3718  037B  0DA0               	rlf	SPI_transfer@data,f
  3719                           
  3720                           ;main.c: 139: _delay((unsigned long)((5)*(4000000/4000000.0)));
  3721  037C  2B7D               	nop2	;2 cycle nop
  3722  037D  2B7E               	nop2	;2 cycle nop
  3723  037E  0000               	nop
  3724  037F  3001               	movlw	1
  3725  0380  1283               	bcf	3,5	;RP0=0, select bank0
  3726  0381  1303               	bcf	3,6	;RP1=0, select bank0
  3727  0382  07A2               	addwf	SPI_transfer@i,f
  3728  0383  1803               	skipnc
  3729  0384  0AA3               	incf	SPI_transfer@i+1,f
  3730  0385  3000               	movlw	0
  3731  0386  07A3               	addwf	SPI_transfer@i+1,f
  3732  0387  0823               	movf	SPI_transfer@i+1,w
  3733  0388  3A80               	xorlw	128
  3734  0389  00FF               	movwf	127
  3735  038A  3080               	movlw	128
  3736  038B  027F               	subwf	127,w
  3737  038C  1D03               	skipz
  3738  038D  2B90               	goto	u1665
  3739  038E  3008               	movlw	8
  3740  038F  0222               	subwf	SPI_transfer@i,w
  3741  0390                     u1665:	
  3742  0390  1C03               	skipc
  3743  0391  2B61               	goto	l82
  3744  0392                     l1866:	
  3745                           
  3746                           ;main.c: 140: }
  3747                           ;main.c: 141: return ret;
  3748  0392  1283               	bcf	3,5	;RP0=0, select bank0
  3749  0393  1303               	bcf	3,6	;RP1=0, select bank0
  3750  0394  0821               	movf	SPI_transfer@ret,w
  3751  0395  0008               	return
  3752  0396                     __end_of_SPI_transfer:	
  3753                           
  3754                           	psect	text23
  3755  052D                     __ptext23:	
  3756 ;; *************** function __ISR *****************
  3757 ;; Defined at:
  3758 ;;		line 61 in file "main.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;		None
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;		None               void
  3765 ;; Registers used:
  3766 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3772 ;;      Params:         0       0       0       0
  3773 ;;      Locals:         0       0       0       0
  3774 ;;      Temps:          5       0       0       0
  3775 ;;      Totals:         5       0       0       0
  3776 ;;Total ram usage:        5 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; This function calls:
  3779 ;;		Nothing
  3780 ;; This function is called by:
  3781 ;;		Interrupt level 1
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           
  3786                           ;psect for function __ISR
  3787  052D                     __ISR:	
  3788                           
  3789                           ;main.c: 63: if(RCIF)
  3790  052D  1E8C               	btfss	12,5	;volatile
  3791  052E  2D3D               	goto	i1l57
  3792                           
  3793                           ;main.c: 64: {
  3794                           ;main.c: 65: buffer[count] = RCREG;
  3795  052F  081A               	movf	26,w	;volatile
  3796  0530  00F0               	movwf	??__ISR
  3797  0531  0877               	movf	_count,w
  3798  0532  3EB2               	addlw	_buffer& (0+255)
  3799  0533  0084               	movwf	4
  3800  0534  0870               	movf	??__ISR,w
  3801  0535  1383               	bcf	3,7	;select IRP bank1
  3802  0536  0080               	movwf	0
  3803                           
  3804                           ;main.c: 66: count++;
  3805  0537  3001               	movlw	1
  3806  0538  07F7               	addwf	_count,f
  3807  0539  1803               	skipnc
  3808  053A  0AF8               	incf	_count+1,f
  3809  053B  3000               	movlw	0
  3810  053C  07F8               	addwf	_count+1,f
  3811  053D                     i1l57:	
  3812  053D  0874               	movf	??__ISR+4,w
  3813  053E  00FF               	movwf	127
  3814  053F  0873               	movf	??__ISR+3,w
  3815  0540  008A               	movwf	10
  3816  0541  0872               	movf	??__ISR+2,w
  3817  0542  0084               	movwf	4
  3818  0543  0E71               	swapf	(??__ISR+1)^(0+-128),w
  3819  0544  0083               	movwf	3
  3820  0545  0EFE               	swapf	126,f
  3821  0546  0E7E               	swapf	126,w
  3822  0547  0009               	retfie
  3823  0548                     __end_of__ISR:	
  3824  007E                     btemp	set	126	;btemp
  3825  007E                     wtemp	set	126
  3826  007E                     wtemp0	set	126
  3827  0080                     wtemp1	set	128
  3828  0082                     wtemp2	set	130
  3829  0084                     wtemp3	set	132
  3830  0086                     wtemp4	set	134
  3831  0088                     wtemp5	set	136
  3832  007F                     wtemp6	set	127
  3833  007E                     ttemp	set	126
  3834  007E                     ttemp0	set	126
  3835  0081                     ttemp1	set	129
  3836  0084                     ttemp2	set	132
  3837  0087                     ttemp3	set	135
  3838  007F                     ttemp4	set	127
  3839  007E                     ltemp	set	126
  3840  007E                     ltemp0	set	126
  3841  0082                     ltemp1	set	130
  3842  0086                     ltemp2	set	134
  3843  0080                     ltemp3	set	128
  3844                           
  3845                           	psect	intentry
  3846  0004                     __pintentry:	
  3847                           ;incstack = 0
  3848                           ; Regs used in __ISR: [wreg-fsr0h+status,2+status,0]
  3849                           
  3850  0004                     interrupt_function:	
  3851  007E                     saved_w	set	btemp
  3852  0004  00FE               	movwf	btemp
  3853  0005  0E03               	swapf	3,w
  3854  0006  00F1               	movwf	??__ISR+1
  3855  0007  0804               	movf	4,w
  3856  0008  00F2               	movwf	??__ISR+2
  3857  0009  080A               	movf	10,w
  3858  000A  00F3               	movwf	??__ISR+3
  3859  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3860  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3861  000D  087F               	movf	btemp+1,w
  3862  000E  00F4               	movwf	??__ISR+4
  3863  000F  2D2D               	ljmp	__ISR


Data Sizes:
    Strings     29
    Constant    10
    Data        24
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     63      69
    BANK1            80      0      34
    BANK2            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_4(CODE[2]), STR_3(CODE[3]), STR_2(CODE[9]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S283$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    MFRC522_ReadCardSerial@str	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_isCard@TagType	PTR unsigned char  size(1) Largest target is 2
		 -> main@TagType(BANK0[2]), 

    MFRC522_AntiColl@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_SelectTag@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_CRC@dataOut	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_CRC@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_Request@TagType	PTR unsigned char  size(1) Largest target is 2
		 -> main@TagType(BANK0[2]), 

    MFRC522_ToCard@backData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[2]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_ToCard@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> MFRC522_AntiColl@unLen(BANK0[2]), MFRC522_Read@unLen(COMMON[2]), MFRC522_Write@recvBits(COMMON[2]), MFRC522_Auth@recvBits(COMMON[2]), 
		 -> MFRC522_Halt@unLen(BANK0[2]), MFRC522_SelectTag@recvBits(BANK0[2]), MFRC522_Request@backBits(BANK0[2]), 

    MFRC522_ToCard@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[2]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(BANK0[4]), MFRC522_SelectTag@buffer(BANK0[9]), 


Critical Paths under _main in COMMON

    _printf->___lwmod
    ___lwmod->___lwdiv
    _MFRC522_ToCard->_MFRC522_Rd
    _MFRC522_CRC->_MFRC522_Rd
    _MFRC522_Set_Bit->_MFRC522_Rd
    _MFRC522_Clear_Bit->_MFRC522_Rd
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_SPI_transfer

Critical Paths under __ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_MFRC522_SelectTag
    _printf->___lwmod
    ___lwmod->___lwdiv
    _MFRC522_isCard->_MFRC522_Request
    _MFRC522_Request->_MFRC522_ToCard
    _MFRC522_SelectTag->_MFRC522_ToCard
    _MFRC522_ReadCardSerial->_MFRC522_AntiColl
    _MFRC522_AntiColl->_MFRC522_ToCard
    _MFRC522_Init->_MFRC522_AntennaOn
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Halt->_MFRC522_ToCard
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_CRC->_MFRC522_Clear_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_SPI_transfer

Critical Paths under __ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under __ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   61914
                                             51 BANK0     12    12      0
                       _MFRC522_Halt
                       _MFRC522_Init
             _MFRC522_ReadCardSerial
                  _MFRC522_SelectTag
                     _MFRC522_isCard
                           _SPI_init
                          _UART_init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              14    12      2    1528
                                             12 BANK0     14    12      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                              6 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     371
                                              5 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MFRC522_isCard                                       2     2      0   10233
                                             40 BANK0      2     2      0
                    _MFRC522_Request
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Request                                      9     8      1   10172
                                             31 BANK0      9     8      1
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_SelectTag                                   20    20      0   15571
                                             31 BANK0     20    20      0
                        _MFRC522_CRC
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (1) _MFRC522_ReadCardSerial                               3     3      0   12488
                                             42 BANK0      3     3      0
                   _MFRC522_AntiColl
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntiColl                                    11    11      0   12362
                                             31 BANK0     11    11      0
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Init                                         1     1      0    4475
                                             13 BANK0      1     1      0
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
                           _SPI_init
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             1     1      0       0
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Reset                                        1     1      0    1306
                                              9 BANK0      1     1      0
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntennaOn                                    1     1      0    1863
                                             12 BANK0      1     1      0
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Halt                                        10    10      0   17296
                                             31 BANK0     10    10      0
                        _MFRC522_CRC
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (3) _MFRC522_ToCard                                      18    14      4    8535
                                             13 BANK0     18    14      4
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_CRC                                          6     4      2    6466
                                             13 BANK0      6     4      2
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      3     2      1    1863
                                              9 BANK0      3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    4     3      1    2058
                                              9 BANK0      4     3      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           3     2      1    1306
                                              6 BANK0      3     2      1
                         _MFRC522_Rd (ARG)
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           3     3      0     204
                                              6 COMMON     1     1      0
                                              4 BANK0      2     2      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _SPI_transfer                                         5     5      0     139
                                              5 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) __ISR                                                 5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MFRC522_Halt
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_Clear_Bit
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_Init
     _MFRC522_AntennaOn
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
     _MFRC522_Reset
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_Wr
       _MFRC522_Rd (ARG)
         _SPI_transfer
       _SPI_transfer (ARG)
     _SPI_init
   _MFRC522_ReadCardSerial
     _MFRC522_AntiColl
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_SelectTag
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_isCard
     _MFRC522_Request
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _SPI_init
   _UART_init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 __ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      22       7       42.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3F      45       3       86.3%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      70      10        0.0%
ABS                  0      0      70       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat Mar 28 11:45:48 2015

                              pc 0002                     MFRC522_CRC@i 0032                     MFRC522_CRC@n 0030  
                             l32 054D                               l35 0553                               l39 0558  
                             l82 0361                               fsr 0004                      main@TagType 005D  
                            l142 04F4                              l127 0181                              l219 03D6  
                            l255 023C                              l196 0298                              _key 005F  
                            fsr0 0004                              indf 0000                   ??_MFRC522_Halt 003F  
                 ??_MFRC522_Init 002D                             l2010 032E                             l2004 030A  
                           l2006 0322            __size_of_SPI_transfer 0045                             l2040 027A  
                           l2018 033C                             l2202 01AE                             l2046 028C  
                           l2070 0406                             l2062 03E2                             l2230 01FF  
                           l2222 01E6                             l2206 01B1                             l2144 02F3  
                           l2136 02C3                             l2128 02AD                             l2064 03F0  
                           l2240 020B                             l2208 01C7                             l2146 02F4  
                           l2170 05D1                             l2074 0411                             l2234 0205  
                           l2218 01E0                             l2242 018A                             l2330 0399  
                           l2092 0479                             l2086 045D                             l2342 03B6  
                           l2088 046B                             l2096 0484                             l2186 058A  
                           l1900 0058                             l2196 019F                             l2348 03CD  
                           l1902 005E                             l2198 01A3                             l1850 036D  
                           l1906 0067                             l1852 0371                             l1932 00DD  
                           l1924 00C1                             l1916 008F                             l1908 006F  
                           l1926 00C7                             l1918 00AF                             l1952 0132  
                           l1944 00F8                             l1866 0392                             l1970 0174  
                           l1962 0153                             l1972 017B                             l1958 014B  
                           l1990 04F0                             l1968 0155                             STR_1 0510  
                           STR_2 0521                             STR_3 052A                             STR_4 051F  
                           u2005 047A                             u2115 01F5                             u1635 035F  
                           u1665 0390                             u2377 0373                             u1905 03E5  
                           u1675 0098                             u1925 03F1                             u1935 03FD  
                           u1945 0407                             u1795 015E                             u1975 0460  
                           u1995 0471                             _RCIF 0065                             i1l57 053D  
                           _TXIF 0064                             __ISR 052D                             _main 0396  
          MFRC522_AntiColl@unLen 0045                             btemp 007E                             ltemp 007E  
                           start 0010                             ttemp 007E                             wtemp 007E  
               _MFRC522_AntiColl 023D                   MFRC522_Rd@addr 0024                  ??_MFRC522_Reset 0029  
                          ?__ISR 0070                   MFRC522_Wr@addr 0028                            ?_main 0070  
        ?_MFRC522_ReadCardSerial 0070                  __end_of___lwdiv 0418                  __end_of___lwmod 048B  
               SPI_transfer@data 0020                            _RCREG 001A                     _SPI_transfer 0351  
                          _SPBRG 0099                            _PORTB 0006                            _TRISB 0086  
                          _TXREG 0019              __size_of_MFRC522_Rd 0017              __size_of_MFRC522_Wr 0014  
             __size_of_UART_init 0011        MFRC522_SelectTag@recvBits 0050                  __end_of_dpowers 0510  
                          _count 0077           MFRC522_AntiColl@serNum 0049                            _putch 0548  
                          main@i 005C                            pclath 000A                            ltemp0 007E  
               __end_of_SPI_init 05FC                            ltemp1 0082                            ltemp2 0086  
                          ltemp3 0080                _MFRC522_Clear_Bit 05D3                            ttemp0 007E  
                          ttemp1 0081                            ttemp2 0084                            ttemp3 0087  
                          ttemp4 007F                            status 0003                            wtemp0 007E  
                          wtemp1 0080                            wtemp2 0082                            wtemp3 0084  
                          wtemp4 0086                            wtemp5 0088                            wtemp6 007F  
             ?_MFRC522_Clear_Bit 0029          MFRC522_SelectTag@buffer 0044          MFRC522_SelectTag@serNum 004E  
              _MFRC522_AntennaOn 0605                     __end_of__ISR 0548                  __initialization 0011  
                   __end_of_main 03D8               ?_MFRC522_AntennaOn 0070              ??_MFRC522_Clear_Bit 002A  
      MFRC522_ReadCardSerial@str 004C                  MFRC522_Rd@value 0025   __end_of_MFRC522_ReadCardSerial 058C  
               ??_MFRC522_ToCard 0031                           ??__ISR 0070         __size_of_MFRC522_Set_Bit 000E  
       __size_of_MFRC522_Request 0035                           ??_main 0053              ??_MFRC522_AntennaOn 002C  
                MFRC522_ToCard@i 003C                  MFRC522_ToCard@n 003E                 ??_MFRC522_isCard 0048  
          MFRC522_ToCard@backLen 0030                  MFRC522_Wr@value 0026        __end_of_MFRC522_Clear_Bit 05E3  
          MFRC522_ToCard@_status 0038            MFRC522_ToCard@command 003B                           ?_putch 0070  
              _MFRC522_SelectTag 029A            MFRC522_ToCard@sendLen 002E               ?_MFRC522_SelectTag 0070  
          MFRC522_ToCard@waitIRq 0037        __end_of_MFRC522_AntennaOn 060E             __size_of_MFRC522_CRC 005B  
            ??_MFRC522_SelectTag 003F             __end_of_MFRC522_Halt 04C1                __end_of_UART_init 05C3  
           __end_of_MFRC522_Init 0455          MFRC522_AntiColl@_status 0047                        ??___lwdiv 0075  
                      ??___lwmod 0076                           _buffer 00B2                           _printf 0183  
                         saved_w 007E        __end_of_MFRC522_SelectTag 02F6         MFRC522_SelectTag@_status 004D  
        __end_of__initialization 004C           MFRC522_Request@TagType 003F                     ??_MFRC522_Rd 0076  
                   ??_MFRC522_Wr 0027            MFRC522_isCard@TagType 0049                   __pcstackCOMMON 0070  
                   __pidataBANK0 0616                     __pidataBANK1 05A0                    __end_of_putch 055F  
               MFRC522_Halt@buff 0043           MFRC522_Request@_status 0045                        ?_SPI_init 0070  
         MFRC522_Request@reqMode 0044         __end_of_MFRC522_AntiColl 029A                ??_MFRC522_Set_Bit 002A  
             __end_of_MFRC522_Rd 0576               __end_of_MFRC522_Wr 05A0                ??_MFRC522_Request 0040  
     __size_of_MFRC522_Clear_Bit 0010                          ??_putch 0075                       __pbssBANK1 00B2  
         MFRC522_ToCard@backData 002F       __size_of_MFRC522_AntennaOn 0009                MFRC522_CRC@dataIn 0031  
                     __pmaintext 0396                MFRC522_CRC@length 002D                       __pintentry 0004  
             MFRC522_SelectTag@i 0052                          ?_printf 002C           MFRC522_ToCard@lastBits 0039  
                     ??_SPI_init 0075           MFRC522_ToCard@sendData 002D       __size_of_MFRC522_SelectTag 005C  
                     __stringtab 0500            __size_of_MFRC522_Halt 0036            __size_of_MFRC522_Init 003D  
                        ___lwdiv 03D8                          ___lwmod 0455            __end_of_MFRC522_Reset 0605  
                        __ptext1 0183                          __ptext2 0548                          __ptext3 0455  
                        __ptext4 03D8                          __ptext5 05B2                          __ptext6 05C3  
                        __ptext7 04C1                          __ptext8 029A                          __ptext9 0576  
                __size_of_printf 00BA                          _dpowers 0506                          main@UID 0056  
                        clrloop0 060F                     _MFRC522_Halt 048B                     _MFRC522_Init 0418  
           end_of_initialization 004C    MFRC522_ReadCardSerial@_status 004B                        _RCSTAbits 0018  
                        printf@c 0039                          printf@f 0034                        _UART_init 05B2  
                      _TRISBbits 0086                    ??_MFRC522_CRC 002F                        _TXSTAbits 0098  
                _MFRC522_Set_Bit 05E3          MFRC522_Request@backBits 0046              MFRC522_ToCard@irqEn 003A  
                SPI_transfer@ret 0021                  _MFRC522_Request 04C1                       ?_UART_init 0070  
                 __end_of_printf 023D              start_initialization 0011                __size_of_SPI_init 000B  
              MFRC522_Halt@unLen 0047                ?_MFRC522_AntiColl 0070                MFRC522_AntiColl@i 0048  
        __size_of_MFRC522_ToCard 0135               ??_MFRC522_AntiColl 003F          __size_of_MFRC522_isCard 0010  
       ??_MFRC522_ReadCardSerial 004A              __end_of_MFRC522_CRC 0351                      __pdataBANK0 005F  
                    __pdataBANK1 00A0                         ??_printf 002E                    ?_SPI_transfer 0070  
                    __pbssCOMMON 0077                        ___latbits 0000                    __pcstackBANK0 0020  
            __end_of__stringdata 052D                    SPI_transfer@i 0022          __end_of_MFRC522_Set_Bit 05F1  
             MFRC522_CRC@dataOut 002E          __end_of_MFRC522_Request 04F6                 ___lwdiv@dividend 0022  
            MFRC522_Set_Bit@addr 002B              MFRC522_Set_Bit@mask 0029                         ?___lwdiv 0020  
                       ?___lwmod 0027                        __pstrings 0500                      ??_UART_init 0075  
                 ??_SPI_transfer 0075                 ___lwdiv@quotient 0025                   __size_of_putch 0017  
              interrupt_function 0004                      _MFRC522_CRC 02F6                        clear_ram0 060E  
__size_of_MFRC522_ReadCardSerial 0016                      __stringbase 0505                      __stringdata 0510  
                       _SPI_init 05F1                       printf@_val 0035                       printf@flag 0031  
                     printf@prec 0032                   _MFRC522_ToCard 004E                        _writeData 00A0  
                 _MFRC522_isCard 05C3            MFRC522_SelectTag@size 004F           __size_of_MFRC522_Reset 0009  
               ?_MFRC522_Set_Bit 0029            MFRC522_Clear_Bit@addr 002C                 ?_MFRC522_Request 003F  
          MFRC522_Clear_Bit@mask 0029                 __size_of___lwdiv 0040                 __size_of___lwmod 0036  
             __end_of__stringtab 0506           __end_of_MFRC522_ToCard 0183           _MFRC522_ReadCardSerial 0576  
                ___lwdiv@divisor 0020                  ___lwdiv@counter 0024                         __ptext10 023D  
                       __ptext11 0418                         __ptext20 058C                         __ptext12 05F1  
                       __ptext21 055F                         __ptext13 05FC                         __ptext22 0351  
                       __ptext14 0605                         __ptext23 052D                         __ptext15 048B  
                       __ptext16 004E                         __ptext17 02F6                         __ptext18 05E3  
                       __ptext19 05D3           __end_of_MFRC522_isCard 05D3      MFRC522_AntiColl@serNumCheck 0044  
                  __size_of__ISR 001B                    __size_of_main 0042             __end_of_SPI_transfer 0396  
                     _MFRC522_Rd 055F                       _MFRC522_Wr 058C        __size_of_MFRC522_AntiColl 005D  
                       main@size 0055                    _MFRC522_Reset 05FC                        putch@data 0075  
                ?_MFRC522_ToCard 002D                  ?_MFRC522_isCard 0070                         intlevel1 0000  
               ___lwmod@dividend 0029                        stringcode 0500                         printf@ap 0033  
                 ?_MFRC522_Reset 0070                  ___lwmod@divisor 0027                  ___lwmod@counter 002B  
                       stringdir 0500                         stringtab 0500                    ?_MFRC522_Halt 0070  
                  ?_MFRC522_Init 0070                     ?_MFRC522_CRC 002D                      ?_MFRC522_Rd 0070  
                    ?_MFRC522_Wr 0026  
