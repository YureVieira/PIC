
# 1 "main.c"

# 21 "D:\Program Files (x86)\Microchip\xc8\v1.33\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 47 "D:\Program Files (x86)\Microchip\xc8\v1.33\include\pic16f628a.h"
extern volatile unsigned char INDF @ 0x000;

asm("INDF equ 00h");



extern volatile unsigned char TMR0 @ 0x001;

asm("TMR0 equ 01h");



extern volatile unsigned char PCL @ 0x002;

asm("PCL equ 02h");



extern volatile unsigned char STATUS @ 0x003;

asm("STATUS equ 03h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned RP :2;
unsigned IRP :1;
};
struct {
unsigned :5;
unsigned RP0 :1;
unsigned RP1 :1;
};
struct {
unsigned CARRY :1;
};
struct {
unsigned :2;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0x003;

# 152
extern volatile unsigned char FSR @ 0x004;

asm("FSR equ 04h");



extern volatile unsigned char PORTA @ 0x005;

asm("PORTA equ 05h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0x005;

# 219
extern volatile unsigned char PORTB @ 0x006;

asm("PORTB equ 06h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0x006;

# 280
extern volatile unsigned char PCLATH @ 0x00A;

asm("PCLATH equ 0Ah");


typedef union {
struct {
unsigned PCLATH :5;
};
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits @ 0x00A;

# 299
extern volatile unsigned char INTCON @ 0x00B;

asm("INTCON equ 0Bh");


typedef union {
struct {
unsigned RBIF :1;
unsigned INTF :1;
unsigned T0IF :1;
unsigned RBIE :1;
unsigned INTE :1;
unsigned T0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :2;
unsigned TMR0IF :1;
unsigned :2;
unsigned TMR0IE :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0x00B;

# 376
extern volatile unsigned char PIR1 @ 0x00C;

asm("PIR1 equ 0Ch");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned CMIF :1;
unsigned EEIF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0x00C;

# 432
extern volatile unsigned short TMR1 @ 0x00E;

asm("TMR1 equ 0Eh");



extern volatile unsigned char TMR1L @ 0x00E;

asm("TMR1L equ 0Eh");



extern volatile unsigned char TMR1H @ 0x00F;

asm("TMR1H equ 0Fh");



extern volatile unsigned char T1CON @ 0x010;

asm("T1CON equ 010h");


typedef union {
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
};
struct {
unsigned :4;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0x010;

# 508
extern volatile unsigned char TMR2 @ 0x011;

asm("TMR2 equ 011h");



extern volatile unsigned char T2CON @ 0x012;

asm("T2CON equ 012h");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned TOUTPS0 :1;
unsigned TOUTPS1 :1;
unsigned TOUTPS2 :1;
unsigned TOUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0x012;

# 584
extern volatile unsigned short CCPR1 @ 0x015;

asm("CCPR1 equ 015h");



extern volatile unsigned char CCPR1L @ 0x015;

asm("CCPR1L equ 015h");



extern volatile unsigned char CCPR1H @ 0x016;

asm("CCPR1H equ 016h");



extern volatile unsigned char CCP1CON @ 0x017;

asm("CCP1CON equ 017h");


typedef union {
struct {
unsigned CCP1M :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0x017;

# 659
extern volatile unsigned char RCSTA @ 0x018;

asm("RCSTA equ 018h");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned :3;
unsigned ADDEN :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0x018;

# 729
extern volatile unsigned char TXREG @ 0x019;

asm("TXREG equ 019h");



extern volatile unsigned char RCREG @ 0x01A;

asm("RCREG equ 01Ah");



extern volatile unsigned char CMCON @ 0x01F;

asm("CMCON equ 01Fh");


typedef union {
struct {
unsigned CM :3;
unsigned CIS :1;
unsigned C1INV :1;
unsigned C2INV :1;
unsigned C1OUT :1;
unsigned C2OUT :1;
};
struct {
unsigned CM0 :1;
unsigned CM1 :1;
unsigned CM2 :1;
};
} CMCONbits_t;
extern volatile CMCONbits_t CMCONbits @ 0x01F;

# 810
extern volatile unsigned char OPTION_REG @ 0x081;

asm("OPTION_REG equ 081h");


typedef union {
struct {
unsigned PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned INTEDG :1;
unsigned nRBPU :1;
};
struct {
unsigned PS0 :1;
unsigned PS1 :1;
unsigned PS2 :1;
};
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;

# 879
extern volatile unsigned char TRISA @ 0x085;

asm("TRISA equ 085h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
unsigned TRISA7 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0x085;

# 940
extern volatile unsigned char TRISB @ 0x086;

asm("TRISB equ 086h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0x086;

# 1001
extern volatile unsigned char PIE1 @ 0x08C;

asm("PIE1 equ 08Ch");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned CMIE :1;
unsigned EEIE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0x08C;

# 1057
extern volatile unsigned char PCON @ 0x08E;

asm("PCON equ 08Eh");


typedef union {
struct {
unsigned nBOR :1;
unsigned nPOR :1;
unsigned :1;
unsigned OSCF :1;
};
struct {
unsigned nBO :1;
};
struct {
unsigned nBOD :1;
};
} PCONbits_t;
extern volatile PCONbits_t PCONbits @ 0x08E;

# 1105
extern volatile unsigned char PR2 @ 0x092;

asm("PR2 equ 092h");



extern volatile unsigned char TXSTA @ 0x098;

asm("TXSTA equ 098h");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0x098;

# 1167
extern volatile unsigned char SPBRG @ 0x099;

asm("SPBRG equ 099h");



extern volatile unsigned char EEDATA @ 0x09A;

asm("EEDATA equ 09Ah");



extern volatile unsigned char EEADR @ 0x09B;

asm("EEADR equ 09Bh");



extern volatile unsigned char EECON1 @ 0x09C;

asm("EECON1 equ 09Ch");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0x09C;

# 1222
extern volatile unsigned char EECON2 @ 0x09D;

asm("EECON2 equ 09Dh");



extern volatile unsigned char VRCON @ 0x09F;

asm("VRCON equ 09Fh");


typedef union {
struct {
unsigned VR :4;
unsigned :1;
unsigned VRR :1;
unsigned VROE :1;
unsigned VREN :1;
};
struct {
unsigned VR0 :1;
unsigned VR1 :1;
unsigned VR2 :1;
unsigned VR3 :1;
};
} VRCONbits_t;
extern volatile VRCONbits_t VRCONbits @ 0x09F;

# 1298
extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit C1INV @ (((unsigned) &CMCON)*8) + 4;

extern volatile __bit C1OUT @ (((unsigned) &CMCON)*8) + 6;

extern volatile __bit C2INV @ (((unsigned) &CMCON)*8) + 5;

extern volatile __bit C2OUT @ (((unsigned) &CMCON)*8) + 7;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;

extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit CMIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;

extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit EEIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit EEIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;

extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;

extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;

extern volatile __bit OSCF @ (((unsigned) &PCON)*8) + 3;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;

extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;

extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;

extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;

extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit RA6 @ (((unsigned) &PORTA)*8) + 6;

extern volatile __bit RA7 @ (((unsigned) &PORTA)*8) + 7;

extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;

extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;

extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;

extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISA6 @ (((unsigned) &TRISA)*8) + 6;

extern volatile __bit TRISA7 @ (((unsigned) &TRISA)*8) + 7;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit VR0 @ (((unsigned) &VRCON)*8) + 0;

extern volatile __bit VR1 @ (((unsigned) &VRCON)*8) + 1;

extern volatile __bit VR2 @ (((unsigned) &VRCON)*8) + 2;

extern volatile __bit VR3 @ (((unsigned) &VRCON)*8) + 3;

extern volatile __bit VREN @ (((unsigned) &VRCON)*8) + 7;

extern volatile __bit VROE @ (((unsigned) &VRCON)*8) + 6;

extern volatile __bit VRR @ (((unsigned) &VRCON)*8) + 5;

extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nBO @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOD @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;


# 27 "D:\Program Files (x86)\Microchip\xc8\v1.33\include\pic.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 144
extern void flash_erase(unsigned short addr);

# 41 "D:\Program Files (x86)\Microchip\xc8\v1.33\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "D:\Program Files (x86)\Microchip\xc8\v1.33\include\pic.h"
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 8 "D:\Program Files (x86)\Microchip\xc8\v1.33\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 7 "D:\Program Files (x86)\Microchip\xc8\v1.33\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 23 "D:\Program Files (x86)\Microchip\xc8\v1.33\include\stdio.h"
extern int errno;

# 54
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "D:\Program Files (x86)\Microchip\xc8\v1.33\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 99 "D:\Program Files (x86)\Microchip\xc8\v1.33\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 191
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 4 "UART.h"
void putch(char data);
void UART_init();
int UART_available();
char UART_read_byte();
inline void _ISR_UART();

# 6 "UART.c"
char buffer[16];
int count=0;
void putch(char data)
{
if(data == 10)
{
while(!TXIF)
continue;
TXREG = 10;
while(!TXIF)
continue;
TXREG = 13;
return;
}
while(!TXIF)
continue;
TXREG = data;
}
void UART_init()
{

TRISBbits.TRISB1 = 1;
TRISBbits.TRISB2 = 1;

TXSTAbits.CSRC = 1;
TXSTAbits.TXEN = 1;
TXSTAbits.SYNC = 0;


RCSTAbits.SPEN = 1;
RCSTAbits.CREN = 1;



TXSTAbits.BRGH = 0;
SPBRG = 25;
}
int UART_available()
{
return count;
}
char UART_read_byte()
{
char data = buffer[0];
count--;


for(int i=0;i<count;i++)
{
buffer[i]=buffer[i+1];
}
return data;
}

inline void _ISR_UART()
{
if(RCIF)
{
buffer[count] = RCREG;
count++;
}
}

# 4 "SPI.h"
void SPI_init(unsigned char mode);
unsigned char SPI_transfer(unsigned char data);

# 31 "SPI.c"
unsigned char _mode;
void SPI_init(unsigned char mode)
{
_mode = mode;
TRISB &= ~(1<<7 | 1<<6);
TRISB |= (1<<5);
if(mode == 2 || mode == 3)
PORTB |= (1<<7);
else
PORTB &= ~(1<<7);
}
unsigned char SPI_transfer(unsigned char data)
{
unsigned char ret;
if(_mode==1 || _mode==3)
{
for(int i=0;i<8;i++)
{

if(data & 0x80)PORTB |= (1<<6);
else PORTB &= ~(1<<6);

PORTB ^= (1<<7);
if(PORTB & (1<<5))ret|=1;
_delay((unsigned long)((10)*(4000000/4000000.0)));
PORTB ^= (1<<7);

ret<<=1;
data<<=1;
_delay((unsigned long)((10)*(4000000/4000000.0)));
}
}
else
{
unsigned char ret;
for(int i=0;i<8;i++)
{

if(PORTB & (1<<5))ret|=1;
PORTB ^= (1<<7);


if(data & 0x80)PORTB |= (1<<6);
else PORTB &= ~(1<<6);
_delay((unsigned long)((10)*(4000000/4000000.0)));
PORTB ^= (1<<7);

ret<<=1;
data<<=1;
_delay((unsigned long)((10)*(4000000/4000000.0)));
}
}
return ret;
}

# 8 "RFID.h"
void MFRC522_init();
void MFRC522_setSPIConfig();




void MFRC522_PCD_WriteRegister(unsigned char reg, unsigned char value);
void MFRC522_PCD_WriteRegister(unsigned char reg, unsigned char count, unsigned char *values);
unsigned char MFRC522_PCD_ReadRegister(unsigned char reg);
void MFRC522_PCD_ReadRegister(unsigned char reg, unsigned char count, unsigned char *values, unsigned char rxAlign = 0);
void MFRC522_setBitMask(unsigned char reg, unsigned char mask);
void MFRC522_PCD_SetRegisterBitMask(unsigned char reg, unsigned char mask);
void MFRC522_PCD_ClearRegisterBitMask(unsigned char reg, unsigned char mask);
unsigned char MFRC522_PCD_CalculateCRC(unsigned char *data, unsigned char length, unsigned char *result);




void MFRC522_PCD_Init();
void MFRC522_PCD_Reset();
void MFRC522_PCD_AntennaOn();
void MFRC522_PCD_AntennaOff();
unsigned char MFRC522_PCD_GetAntennaGain();
void MFRC522_PCD_SetAntennaGain(unsigned char mask);
unsigned char MFRC522_PCD_PerformSelfTest();




unsigned char MFRC522_PCD_TransceiveData(unsigned char *sendData, unsigned char sendLen, unsigned char *backData, unsigned char *backLen, unsigned char *validBits = (0), unsigned char rxAlign = 0, unsigned char checkCRC = false);
unsigned char MFRC522_PCD_CommunicateWithPICC(unsigned char command, unsigned char waitIRq, unsigned char *sendData, unsigned char sendLen, unsigned char *backData = (0), unsigned char *backLen = (0), unsigned char *validBits = (0), unsigned char rxAlign = 0, unsigned char checkCRC = false);

unsigned char MFRC522_PICC_RequestA(unsigned char *bufferATQA, unsigned char *bufferSize);
unsigned char MFRC522_PICC_WakeupA(unsigned char *bufferATQA, unsigned char *bufferSize);
unsigned char MFRC522_PICC_REQA_or_WUPA(unsigned char command, unsigned char *bufferATQA, unsigned char *bufferSize);
unsigned char MFRC522_PICC_Select(Uid *uid, unsigned char validBits = 0);
unsigned char MFRC522_PICC_HaltA();




unsigned char MFRC522_PCD_Authenticate(unsigned char command, unsigned char blockAddr, MIFARE_Key *key, Uid *uid);
void MFRC522_PCD_StopCrypto1();
unsigned char MFRC522_MIFARE_Read(unsigned char blockAddr, unsigned char *buffer, unsigned char *bufferSize);
unsigned char MFRC522_MIFARE_Write(unsigned char blockAddr, unsigned char *buffer, unsigned char bufferSize);
unsigned char MFRC522_MIFARE_Decrement(unsigned char blockAddr, long delta);
unsigned char MFRC522_MIFARE_Increment(unsigned char blockAddr, long delta);
unsigned char MFRC522_MIFARE_Restore(unsigned char blockAddr);
unsigned char MFRC522_MIFARE_Transfer(unsigned char blockAddr);
unsigned char MFRC522_MIFARE_Ultralight_Write(unsigned char page, unsigned char *buffer, unsigned char bufferSize);
unsigned char MFRC522_MIFARE_GetValue(unsigned char blockAddr, long *value);
unsigned char MFRC522_MIFARE_SetValue(unsigned char blockAddr, long value);




unsigned char PCD_MIFARE_Transceive(unsigned char *sendData, unsigned char sendLen, unsigned char acceptTimeout = false);


const __FlashStringHelper *GetStatusCodeName(unsigned char code);
unsigned char PICC_GetType(unsigned char sak);


const __FlashStringHelper *PICC_GetTypeName(unsigned char type);
void PICC_DumpToSerial(Uid *uid);
void PICC_DumpMifareClassicToSerial(Uid *uid, unsigned char piccType, MIFARE_Key *key);
void PICC_DumpMifareClassicSectorToSerial(Uid *uid, MIFARE_Key *key, unsigned char sector);
void PICC_DumpMifareUltralightToSerial();
void MIFARE_SetAccessBits(unsigned char *accessBitBuffer, unsigned char g0, unsigned char g1, unsigned char g2, unsigned char g3);
unsigned char MIFARE_OpenUidBackdoor(unsigned char logErrors);
unsigned char MIFARE_SetUid(byte* newUid, unsigned char uidSize, unsigned char logErrors);
unsigned char MIFARE_UnbrickUidSector(unsigned char logErrors);




unsigned char PICC_IsNewCardPresent();
unsigned char PICC_ReadCardSerial();

unsigned char MIFARE_TwoStepHelper(unsigned char command, unsigned char blockAddr, long data);

# 28 "RFID.c"
enum PCD_Register {


CommandReg = 0x01 << 1,
ComIEnReg = 0x02 << 1,
DivIEnReg = 0x03 << 1,
ComIrqReg = 0x04 << 1,
DivIrqReg = 0x05 << 1,
ErrorReg = 0x06 << 1,
Status1Reg = 0x07 << 1,
Status2Reg = 0x08 << 1,
FIFODataReg = 0x09 << 1,
FIFOLevelReg = 0x0A << 1,
WaterLevelReg = 0x0B << 1,
ControlReg = 0x0C << 1,
BitFramingReg = 0x0D << 1,
CollReg = 0x0E << 1,




ModeReg = 0x11 << 1,
TxModeReg = 0x12 << 1,
RxModeReg = 0x13 << 1,
TxControlReg = 0x14 << 1,
TxASKReg = 0x15 << 1,
TxSelReg = 0x16 << 1,
RxSelReg = 0x17 << 1,
RxThresholdReg = 0x18 << 1,
DemodReg = 0x19 << 1,


MfTxReg = 0x1C << 1,
MfRxReg = 0x1D << 1,

SerialSpeedReg = 0x1F << 1,



CRCResultRegH = 0x21 << 1,
CRCResultRegL = 0x22 << 1,

ModWidthReg = 0x24 << 1,

RFCfgReg = 0x26 << 1,
GsNReg = 0x27 << 1,
CWGsPReg = 0x28 << 1,
ModGsPReg = 0x29 << 1,
TModeReg = 0x2A << 1,
TPrescalerReg = 0x2B << 1,
TReloadRegH = 0x2C << 1,
TReloadRegL = 0x2D << 1,
TCounterValueRegH = 0x2E << 1,
TCounterValueRegL = 0x2F << 1,



TestSel1Reg = 0x31 << 1,
TestSel2Reg = 0x32 << 1,
TestPinEnReg = 0x33 << 1,
TestPinValueReg = 0x34 << 1,
TestBusReg = 0x35 << 1,
AutoTestReg = 0x36 << 1,
VersionReg = 0x37 << 1,
AnalogTestReg = 0x38 << 1,
TestDAC1Reg = 0x39 << 1,
TestDAC2Reg = 0x3A << 1,
TestADCReg = 0x3B << 1




};


enum PCD_Command {
PCD_Idle = 0x00,
PCD_Mem = 0x01,
PCD_GenerateRandomID = 0x02,
PCD_CalcCRC = 0x03,
PCD_Transmit = 0x04,
PCD_NoCmdChange = 0x07,
PCD_Receive = 0x08,
PCD_Transceive = 0x0C,
PCD_MFAuthent = 0x0E,
PCD_SoftReset = 0x0F
};



enum PCD_RxGain {
RxGain_18dB = 0x00 << 4,
RxGain_23dB = 0x01 << 4,
RxGain_18dB_2 = 0x02 << 4,
RxGain_23dB_2 = 0x03 << 4,
RxGain_33dB = 0x04 << 4,
RxGain_38dB = 0x05 << 4,
RxGain_43dB = 0x06 << 4,
RxGain_48dB = 0x07 << 4,
RxGain_min = 0x00 << 4,
RxGain_avg = 0x04 << 4,
RxGain_max = 0x07 << 4
};


enum PICC_Command {

PICC_CMD_REQA = 0x26,
PICC_CMD_WUPA = 0x52,
PICC_CMD_CT = 0x88,
PICC_CMD_SEL_CL1 = 0x93,
PICC_CMD_SEL_CL2 = 0x95,
PICC_CMD_SEL_CL3 = 0x97,
PICC_CMD_HLTA = 0x50,



PICC_CMD_MF_AUTH_KEY_A = 0x60,
PICC_CMD_MF_AUTH_KEY_B = 0x61,
PICC_CMD_MF_READ = 0x30,
PICC_CMD_MF_WRITE = 0xA0,
PICC_CMD_MF_DECREMENT = 0xC0,
PICC_CMD_MF_INCREMENT = 0xC1,
PICC_CMD_MF_RESTORE = 0xC2,
PICC_CMD_MF_TRANSFER = 0xB0,


PICC_CMD_UL_WRITE = 0xA2
};


enum MIFARE_Misc {
MF_ACK = 0xA,
MF_KEY_SIZE = 6
};


enum PICC_Type {
PICC_TYPE_UNKNOWN = 0,
PICC_TYPE_ISO_14443_4 = 1,
PICC_TYPE_ISO_18092 = 2,
PICC_TYPE_MIFARE_MINI = 3,
PICC_TYPE_MIFARE_1K = 4,
PICC_TYPE_MIFARE_4K = 5,
PICC_TYPE_MIFARE_UL = 6,
PICC_TYPE_MIFARE_PLUS = 7,
PICC_TYPE_TNP3XXX = 8,
PICC_TYPE_NOT_COMPLETE = 255
};


enum StatusCode {
STATUS_OK = 1,
STATUS_ERROR = 2,
STATUS_COLLISION = 3,
STATUS_TIMEOUT = 4,
STATUS_NO_ROOM = 5,
STATUS_INTERNAL_ERROR = 6,
STATUS_INVALID = 7,
STATUS_CRC_WRONG = 8,
STATUS_MIFARE_NACK = 9
};


typedef struct {
unsigned char size;
unsigned char uidbyte[10];
unsigned char sak;
} Uid;


typedef struct {
unsigned char keybyte[MF_KEY_SIZE];
} MIFARE_Key;


Uid uid;


static const unsigned char FIFO_SIZE = 64;

# 216
void init() {

SPI_TRISA&=^(1<<4);
PORTB|=(1<<4) ;


SPI_TRISA&=^(1<<0);
PORTB&=~(1<<0) ;


setSPIConfig();
}

# 233
void setSPIConfig() {


}

# 246
void PCD_WriteRegister( unsigned char reg,
unsigned char value
) {
PORTB&=~(1<<4) ;
SPI_transfer(reg & 0x7E);
SPI_transfer(value);
PORTB|=(1<<4) ;
}

# 259
void PCD_WriteRegister( unsigned char reg,
unsigned char count,
unsigned char *values
) {
PORTB&=~(1<<4) ;
SPI_transfer(reg & 0x7E);
for (unsigned char index = 0; index < count; index++) {
SPI_transfer(values[index]);
}
PORTB|=(1<<4) ;
}

# 275
unsigned char PCD_ReadRegister( unsigned char reg
) {
unsigned char value;
PORTB&=~(1<<4) ;
SPI_transfer(0x80 | (reg & 0x7E));
value = SPI_transfer(0);
PORTB|=(1<<4) ;
return value;
}

# 289
void PCD_ReadRegister( unsigned char reg,
unsigned char count,
unsigned char *values,
unsigned char rxAlign
) {
if (count == 0) {
return;
}

unsigned char address = 0x80 | (reg & 0x7E);
unsigned char index = 0;
PORTB&=~(1<<4) ;
count--;
SPI_transfer(address);
while (index < count) {
if (index == 0 && rxAlign) {

unsigned char mask = 0;
for (unsigned char i = rxAlign; i <= 7; i++) {
mask |= (1 << i);
}

unsigned char value = SPI_transfer(address);

values[0] = (values[index] & ~mask) | (value & mask);
}
else {
values[index] = SPI_transfer(address);
}
index++;
}
values[index] = SPI_transfer(0);
PORTB|=(1<<4) ;
}

# 327
void PCD_SetRegisterBitMask( unsigned char reg,
unsigned char mask
) {
unsigned char tmp;
tmp = PCD_ReadRegister(reg);
PCD_WriteRegister(reg, tmp | mask);
}

# 338
void PCD_ClearRegisterBitMask( unsigned char reg,
unsigned char mask
) {
unsigned char tmp;
tmp = PCD_ReadRegister(reg);
PCD_WriteRegister(reg, tmp & (~mask));
}

# 352
unsigned char PCD_CalculateCRC( unsigned char *data,
unsigned char length,
unsigned char *result
) {
PCD_WriteRegister(CommandReg, PCD_Idle);
PCD_WriteRegister(DivIrqReg, 0x04);
PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);
PCD_WriteRegister(FIFODataReg, length, data);
PCD_WriteRegister(CommandReg, PCD_CalcCRC);


unsigned int i = 5000;
unsigned char n;
while (1) {
n = PCD_ReadRegister(DivIrqReg);
if (n & 0x04) {
break;
}
if (--i == 0) {
return STATUS_TIMEOUT;
}
}
PCD_WriteRegister(CommandReg, PCD_Idle);


result[0] = PCD_ReadRegister(CRCResultRegL);
result[1] = PCD_ReadRegister(CRCResultRegH);
return STATUS_OK;
}

# 390
void PCD_Init() {
if (PORTB & (1<<0) == 0) {
PORTB|=(1<<0) ;

_delay((unsigned long)((50)*(4000000/4000.0)));
}
else {
PCD_Reset();
}




PCD_WriteRegister(TModeReg, 0x80);
PCD_WriteRegister(TPrescalerReg, 0xA9);
PCD_WriteRegister(TReloadRegH, 0x03);
PCD_WriteRegister(TReloadRegL, 0xE8);

PCD_WriteRegister(TxASKReg, 0x40);
PCD_WriteRegister(ModeReg, 0x3D);
PCD_AntennaOn();
}

# 416
void PCD_Reset() {
PCD_WriteRegister(CommandReg, PCD_SoftReset);



_delay((unsigned long)((50)*(4000000/4000.0)));

while (PCD_ReadRegister(CommandReg) & (1<<4)) {

}
}

# 432
void PCD_AntennaOn() {
unsigned char value = PCD_ReadRegister(TxControlReg);
if ((value & 0x03) != 0x03) {
PCD_WriteRegister(TxControlReg, value | 0x03);
}
}

# 442
void PCD_AntennaOff() {
PCD_ClearRegisterBitMask(TxControlReg, 0x03);
}

# 453
unsigned char PCD_GetAntennaGain() {
return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
}

# 462
void PCD_SetAntennaGain(unsigned char mask) {
if (PCD_GetAntennaGain() != mask) {
PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));
PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));
}
}

# 475
unsigned char PCD_PerformSelfTest() {



PCD_Reset();


unsigned char ZEROES[25] = {0x00};
PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);
PCD_WriteRegister(FIFODataReg, 25, ZEROES);
PCD_WriteRegister(CommandReg, PCD_Mem);


PCD_WriteRegister(AutoTestReg, 0x09);


PCD_WriteRegister(FIFODataReg, 0x00);


PCD_WriteRegister(CommandReg, PCD_CalcCRC);


word i;
unsigned char n;
for (i = 0; i < 0xFF; i++) {
n = PCD_ReadRegister(DivIrqReg);
if (n & 0x04) {
break;
}
}
PCD_WriteRegister(CommandReg, PCD_Idle);


unsigned char result[64];
PCD_ReadRegister(FIFODataReg, 64, result, 0);




PCD_WriteRegister(AutoTestReg, 0x00);


unsigned char version = PCD_ReadRegister(VersionReg);


const unsigned char *reference;
switch (version) {
case 0x91:
reference = firmware_referenceV1_0;
break;
case 0x92:
reference = firmware_referenceV2_0;
break;
default:
return 0;
}


for (i = 0; i < 64; i++) {
if (result[i] != pgm_read_unsigned char(&(reference[i]))) {
return 0;
}
}


return 1;
}

# 553
unsigned char PCD_TransceiveData( unsigned char *sendData,
unsigned char sendLen,
unsigned char *backData,
unsigned char *backLen,
unsigned char *validBits,
unsigned char rxAlign,
unsigned char checkCRC
) {
unsigned char waitIRq = 0x30;
return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
}

# 571
unsigned char PCD_CommunicateWithPICC( unsigned char command,
unsigned char waitIRq,
unsigned char *sendData,
unsigned char sendLen,
unsigned char *backData,
unsigned char *backLen,
unsigned char *validBits,
unsigned char rxAlign,
unsigned char checkCRC
) {
unsigned char n, _validBits;
unsigned int i;


unsigned char txLastBits = validBits ? *validBits : 0;
unsigned char bitFraming = (rxAlign << 4) + txLastBits;

PCD_WriteRegister(CommandReg, PCD_Idle);
PCD_WriteRegister(ComIrqReg, 0x7F);
PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);
PCD_WriteRegister(FIFODataReg, sendLen, sendData);
PCD_WriteRegister(BitFramingReg, bitFraming);
PCD_WriteRegister(CommandReg, command);
if (command == PCD_Transceive) {
PCD_SetRegisterBitMask(BitFramingReg, 0x80);
}




i = 2000;
while (1) {
n = PCD_ReadRegister(ComIrqReg);
if (n & waitIRq) {
break;
}
if (n & 0x01) {
return STATUS_TIMEOUT;
}
if (--i == 0) {
return STATUS_TIMEOUT;
}
}


unsigned char errorRegValue = PCD_ReadRegister(ErrorReg);
if (errorRegValue & 0x13) {
return STATUS_ERROR;
}


if (backData && backLen) {
n = PCD_ReadRegister(FIFOLevelReg);
if (n > *backLen) {
return STATUS_NO_ROOM;
}
*backLen = n;
PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);
_validBits = PCD_ReadRegister(ControlReg) & 0x07;
if (validBits) {
*validBits = _validBits;
}
}


if (errorRegValue & 0x08) {
return STATUS_COLLISION;
}


if (backData && backLen && checkCRC) {

if (*backLen == 1 && _validBits == 4) {
return STATUS_MIFARE_NACK;
}

if (*backLen < 2 || _validBits != 0) {
return STATUS_CRC_WRONG;
}

unsigned char controlBuffer[2];
n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
if (n != STATUS_OK) {
return n;
}
if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
return STATUS_CRC_WRONG;
}
}

return STATUS_OK;
}

# 670
unsigned char PICC_RequestA(unsigned char *bufferATQA,
unsigned char *bufferSize
) {
return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
}

# 682
unsigned char PICC_WakeupA( unsigned char *bufferATQA,
unsigned char *bufferSize
) {
return PICC_REQA_or_WUPA(PICC_CMD_WUPA, bufferATQA, bufferSize);
}

# 694
unsigned char PICC_REQA_or_WUPA( unsigned char command,
unsigned char *bufferATQA,
unsigned char *bufferSize
) {
unsigned char validBits;
unsigned char status;

if (bufferATQA == (0) || *bufferSize < 2) {
return STATUS_NO_ROOM;
}
PCD_ClearRegisterBitMask(CollReg, 0x80);
validBits = 7;
status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
if (status != STATUS_OK) {
return status;
}
if (*bufferSize != 2 || validBits != 0) {
return STATUS_ERROR;
}
return STATUS_OK;
}

# 733
unsigned char PICC_Select( Uid *uid,
unsigned char validBits
) {
unsigned char uidComplete;
unsigned char selectDone;
unsigned char useCascadeTag;
unsigned char cascadeLevel = 1;
unsigned char result;
unsigned char count;
unsigned char index;
unsigned char uidIndex;
char currentLevelKnownBits;
unsigned char buffer[9];
unsigned char bufferUsed;
unsigned char rxAlign;
unsigned char txLastBits;
unsigned char *responseBuffer;
unsigned char responseLength;

# 775
if (validBits > 80) {
return STATUS_INVALID;
}


PCD_ClearRegisterBitMask(CollReg, 0x80);


uidComplete = 0;
while ( ! uidComplete) {

switch (cascadeLevel) {
case 1:
buffer[0] = PICC_CMD_SEL_CL1;
uidIndex = 0;
useCascadeTag = validBits && uid->size > 4;
break;

case 2:
buffer[0] = PICC_CMD_SEL_CL2;
uidIndex = 3;
useCascadeTag = validBits && uid->size > 7;
break;

case 3:
buffer[0] = PICC_CMD_SEL_CL3;
uidIndex = 6;
useCascadeTag = 0;
break;

default:
return STATUS_INTERNAL_ERROR;
break;
}


currentLevelKnownBits = validBits - (8 * uidIndex);
if (currentLevelKnownBits < 0) {
currentLevelKnownBits = 0;
}

index = 2;
if (useCascadeTag) {
buffer[index++] = PICC_CMD_CT;
}
unsigned char unsigned charsToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0);
if (unsigned charsToCopy) {
unsigned char maxunsigned chars = useCascadeTag ? 3 : 4;
if (unsigned charsToCopy > maxunsigned chars) {
unsigned charsToCopy = maxunsigned chars;
}
for (count = 0; count < unsigned charsToCopy; count++) {
buffer[index++] = uid->uidunsigned char[uidIndex + count];
}
}

if (useCascadeTag) {
currentLevelKnownBits += 8;
}


selectDone = 0;
while ( ! selectDone) {

if (currentLevelKnownBits >= 32) {

buffer[1] = 0x70;

buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];

result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
if (result != STATUS_OK) {
return result;
}
txLastBits = 0;
bufferUsed = 9;

responseBuffer = &buffer[6];
responseLength = 3;
}
else {

txLastBits = currentLevelKnownBits % 8;
count = currentLevelKnownBits / 8;
index = 2 + count;
buffer[1] = (index << 4) + txLastBits;
bufferUsed = index + (txLastBits ? 1 : 0);

responseBuffer = &buffer[index];
responseLength = sizeof(buffer) - index;
}


rxAlign = txLastBits;
PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);


result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);
if (result == STATUS_COLLISION) {
result = PCD_ReadRegister(CollReg);
if (result & 0x20) {
return STATUS_COLLISION;
}
unsigned char collisionPos = result & 0x1F;
if (collisionPos == 0) {
collisionPos = 32;
}
if (collisionPos <= currentLevelKnownBits) {
return STATUS_INTERNAL_ERROR;
}

currentLevelKnownBits = collisionPos;
count = (currentLevelKnownBits - 1) % 8;
index = 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0);
buffer[index] |= (1 << count);
}
else if (result != STATUS_OK) {
return result;
}
else {
if (currentLevelKnownBits >= 32) {
selectDone = 1;

}
else {

currentLevelKnownBits = 32;

}
}
}




index = (buffer[2] == PICC_CMD_CT) ? 3 : 2;
unsigned charsToCopy = (buffer[2] == PICC_CMD_CT) ? 3 : 4;
for (count = 0; count < unsigned charsToCopy; count++) {
uid->uidunsigned char[uidIndex + count] = buffer[index++];
}


if (responseLength != 3 || txLastBits != 0) {
return STATUS_ERROR;
}

result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
if (result != STATUS_OK) {
return result;
}
if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
return STATUS_CRC_WRONG;
}
if (responseBuffer[0] & 0x04) {
cascadeLevel++;
}
else {
uidComplete = 1;
uid->sak = responseBuffer[0];
}
}


uid->size = 3 * cascadeLevel + 1;

return STATUS_OK;
}

# 948
unsigned char PICC_HaltA() {
unsigned char result;
unsigned char buffer[4];


buffer[0] = PICC_CMD_HLTA;
buffer[1] = 0;

result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
if (result != STATUS_OK) {
return result;
}

# 966
result = PCD_TransceiveData(buffer, sizeof(buffer), (0), 0);
if (result == STATUS_TIMEOUT) {
return STATUS_OK;
}
if (result == STATUS_OK) {
return STATUS_ERROR;
}
return result;
}

# 993
unsigned char PCD_Authenticate(unsigned char command,
unsigned char blockAddr,
MIFARE_Key *key,
Uid *uid
) {
unsigned char waitIRq = 0x10;


unsigned char sendData[12];
sendData[0] = command;
sendData[1] = blockAddr;
for (unsigned char i = 0; i < MF_KEY_SIZE; i++) {
sendData[2+i] = key->keyunsigned char[i];
}
for (unsigned char i = 0; i < 4; i++) {
sendData[8+i] = uid->uidunsigned char[i];
}


return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
}

# 1019
void PCD_StopCrypto1() {

PCD_ClearRegisterBitMask(Status2Reg, 0x08);
}

# 1040
unsigned char MIFARE_Read( unsigned char blockAddr,
unsigned char *buffer,
unsigned char *bufferSize
) {
unsigned char result;


if (buffer == (0) || *bufferSize < 18) {
return STATUS_NO_ROOM;
}


buffer[0] = PICC_CMD_MF_READ;
buffer[1] = blockAddr;

result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
if (result != STATUS_OK) {
return result;
}


return PCD_TransceiveData(buffer, 4, buffer, bufferSize, (0), 0, 1);
}

# 1075
unsigned char MIFARE_Write( unsigned char blockAddr,
unsigned char *buffer,
unsigned char bufferSize
) {
unsigned char result;


if (buffer == (0) || bufferSize < 16) {
return STATUS_INVALID;
}



unsigned char cmdBuffer[2];
cmdBuffer[0] = PICC_CMD_MF_WRITE;
cmdBuffer[1] = blockAddr;
result = PCD_MIFARE_Transceive(cmdBuffer, 2);
if (result != STATUS_OK) {
return result;
}


result = PCD_MIFARE_Transceive( buffer, bufferSize);
if (result != STATUS_OK) {
return result;
}

return STATUS_OK;
}

# 1110
unsigned char MIFARE_Ultralight_Write( unsigned char page,
unsigned char *buffer,
unsigned char bufferSize
) {
unsigned char result;


if (buffer == (0) || bufferSize < 4) {
return STATUS_INVALID;
}


unsigned char cmdBuffer[6];
cmdBuffer[0] = PICC_CMD_UL_WRITE;
cmdBuffer[1] = page;
memcpy(&cmdBuffer[2], buffer, 4);


result = PCD_MIFARE_Transceive(cmdBuffer, 6);
if (result != STATUS_OK) {
return result;
}
return STATUS_OK;
}

# 1143
unsigned char MIFARE_Decrement( unsigned char blockAddr,
long delta
) {
return MIFARE_TwoStepHelper(PICC_CMD_MF_DECREMENT, blockAddr, delta);
}

# 1157
unsigned char MIFARE_Increment( unsigned char blockAddr,
long delta
) {
return MIFARE_TwoStepHelper(PICC_CMD_MF_INCREMENT, blockAddr, delta);
}

# 1171
unsigned char MIFARE_Restore( unsigned char blockAddr
) {


return MIFARE_TwoStepHelper(PICC_CMD_MF_RESTORE, blockAddr, 0L);
}

# 1183
unsigned char MIFARE_TwoStepHelper( unsigned char command,
unsigned char blockAddr,
long data
) {
unsigned char result;
unsigned char cmdBuffer[2];


cmdBuffer[0] = command;
cmdBuffer[1] = blockAddr;
result = PCD_MIFARE_Transceive( cmdBuffer, 2);
if (result != STATUS_OK) {
return result;
}


result = PCD_MIFARE_Transceive( (unsigned char *)&data, 4, 1);
if (result != STATUS_OK) {
return result;
}

return STATUS_OK;
}

# 1214
unsigned char MIFARE_Transfer( unsigned char blockAddr
) {
unsigned char result;
unsigned char cmdBuffer[2];


cmdBuffer[0] = PICC_CMD_MF_TRANSFER;
cmdBuffer[1] = blockAddr;
result = PCD_MIFARE_Transceive( cmdBuffer, 2);
if (result != STATUS_OK) {
return result;
}
return STATUS_OK;
}

# 1240
unsigned char MIFARE_GetValue(unsigned char blockAddr, long *value) {
unsigned char status;
unsigned char buffer[18];
unsigned char size = sizeof(buffer);


status = MIFARE_Read(blockAddr, buffer, &size);
if (status == STATUS_OK) {

*value = (long(buffer[3])<<24) | (long(buffer[2])<<16) | (long(buffer[1])<<8) | long(buffer[0]);
}
return status;
}

# 1265
unsigned char MIFARE_SetValue(unsigned char blockAddr, long value) {
unsigned char buffer[18];


buffer[0] = buffer[ 8] = (value & 0xFF);
buffer[1] = buffer[ 9] = (value & 0xFF00) >> 8;
buffer[2] = buffer[10] = (value & 0xFF0000) >> 16;
buffer[3] = buffer[11] = (value & 0xFF000000) >> 24;

buffer[4] = ~buffer[0];
buffer[5] = ~buffer[1];
buffer[6] = ~buffer[2];
buffer[7] = ~buffer[3];

buffer[12] = buffer[14] = blockAddr;
buffer[13] = buffer[15] = ~blockAddr;


return MIFARE_Write(blockAddr, buffer, 16);
}

# 1296
unsigned char PCD_MIFARE_Transceive( unsigned char *sendData,
unsigned char sendLen,
unsigned char acceptTimeout
) {
unsigned char result;
unsigned char cmdBuffer[18];


if (sendData == (0) || sendLen > 16) {
return STATUS_INVALID;
}


memcpy(cmdBuffer, sendData, sendLen);
result = PCD_CalculateCRC(cmdBuffer, sendLen, &cmdBuffer[sendLen]);
if (result != STATUS_OK) {
return result;
}
sendLen += 2;


unsigned char waitIRq = 0x30;
unsigned char cmdBufferSize = sizeof(cmdBuffer);
unsigned char validBits = 0;
result = PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, cmdBuffer, sendLen, cmdBuffer, &cmdBufferSize, &validBits);
if (acceptTimeout && result == STATUS_TIMEOUT) {
return STATUS_OK;
}
if (result != STATUS_OK) {
return result;
}

if (cmdBufferSize != 1 || validBits != 4) {
return STATUS_ERROR;
}
if (cmdBuffer[0] != MF_ACK) {
return STATUS_MIFARE_NACK;
}
return STATUS_OK;
}

# 1341
const __FlashStringHelper *GetStatusCodeName(unsigned char code
) {
switch (code) {
case STATUS_OK: return F("Success."); break;
case STATUS_ERROR: return F("Error in communication."); break;
case STATUS_COLLISION: return F("Collission detected."); break;
case STATUS_TIMEOUT: return F("Timeout in communication."); break;
case STATUS_NO_ROOM: return F("A buffer is not big enough."); break;
case STATUS_INTERNAL_ERROR: return F("Internal error in the code. Should not happen."); break;
case STATUS_INVALID: return F("Invalid argument."); break;
case STATUS_CRC_WRONG: return F("The CRC_A does not match."); break;
case STATUS_MIFARE_NACK: return F("A MIFARE PICC responded with NAK."); break;
default: return F("Unknown error"); break;
}
}

# 1362
unsigned char PICC_GetType(unsigned char sak
) {
if (sak & 0x04) {
return PICC_TYPE_NOT_COMPLETE;
}

switch (sak) {
case 0x09: return PICC_TYPE_MIFARE_MINI; break;
case 0x08: return PICC_TYPE_MIFARE_1K; break;
case 0x18: return PICC_TYPE_MIFARE_4K; break;
case 0x00: return PICC_TYPE_MIFARE_UL; break;
case 0x10:
case 0x11: return PICC_TYPE_MIFARE_PLUS; break;
case 0x01: return PICC_TYPE_TNP3XXX; break;
default: break;
}

if (sak & 0x20) {
return PICC_TYPE_ISO_14443_4;
}

if (sak & 0x40) {
return PICC_TYPE_ISO_18092;
}

return PICC_TYPE_UNKNOWN;
}

# 1394
const __FlashStringHelper *PICC_GetTypeName(unsigned char piccType
) {
switch (piccType) {
case PICC_TYPE_ISO_14443_4: return F("PICC compliant with ISO/IEC 14443-4"); break;
case PICC_TYPE_ISO_18092: return F("PICC compliant with ISO/IEC 18092 (NFC)");break;
case PICC_TYPE_MIFARE_MINI: return F("MIFARE Mini, 320 unsigned chars"); break;
case PICC_TYPE_MIFARE_1K: return F("MIFARE 1KB"); break;
case PICC_TYPE_MIFARE_4K: return F("MIFARE 4KB"); break;
case PICC_TYPE_MIFARE_UL: return F("MIFARE Ultralight or Ultralight C"); break;
case PICC_TYPE_MIFARE_PLUS: return F("MIFARE Plus"); break;
case PICC_TYPE_TNP3XXX: return F("MIFARE TNP3XXX"); break;
case PICC_TYPE_NOT_COMPLETE: return F("SAK indicates UID is not complete."); break;
case PICC_TYPE_UNKNOWN:
default: return F("Unknown type"); break;
}
}

# 1416
void PICC_DumpToSerial(Uid *uid
) {
MIFARE_Key key;


Serial.print(F("Card UID:"));
for (unsigned char i = 0; i < uid->size; i++) {
Serial.print(uid->uidunsigned char[i] < 0x10 ? " 0" : " ");
Serial.print(uid->uidunsigned char[i], HEX);
}
Serial.println();


unsigned char piccType = PICC_GetType(uid->sak);
Serial.print(F("PICC type: "));
Serial.println(PICC_GetTypeName(piccType));


switch (piccType) {
case PICC_TYPE_MIFARE_MINI:
case PICC_TYPE_MIFARE_1K:
case PICC_TYPE_MIFARE_4K:

for (unsigned char i = 0; i < 6; i++) {
key.keyunsigned char[i] = 0xFF;
}
PICC_DumpMifareClassicToSerial(uid, piccType, &key);
break;

case PICC_TYPE_MIFARE_UL:
PICC_DumpMifareUltralightToSerial();
break;

case PICC_TYPE_ISO_14443_4:
case PICC_TYPE_ISO_18092:
case PICC_TYPE_MIFARE_PLUS:
case PICC_TYPE_TNP3XXX:
Serial.println(F("Dumping memory contents not implemented for that PICC type."));
break;

case PICC_TYPE_UNKNOWN:
case PICC_TYPE_NOT_COMPLETE:
default:
break;
}

Serial.println();
PICC_HaltA();
}

# 1470
void PICC_DumpMifareClassicToSerial( Uid *uid,
unsigned char piccType,
MIFARE_Key *key
) {
unsigned char no_of_sectors = 0;
switch (piccType) {
case PICC_TYPE_MIFARE_MINI:

no_of_sectors = 5;
break;

case PICC_TYPE_MIFARE_1K:

no_of_sectors = 16;
break;

case PICC_TYPE_MIFARE_4K:

no_of_sectors = 40;
break;

default:
break;
}


if (no_of_sectors) {
Serial.println(F("Sector Block   0  1  2  3   4  5  6  7   8  9 10 11  12 13 14 15  AccessBits"));
for (char i = no_of_sectors - 1; i >= 0; i--) {
PICC_DumpMifareClassicSectorToSerial(uid, key, i);
}
}
PICC_HaltA();
PCD_StopCrypto1();
}

# 1511
void PICC_DumpMifareClassicSectorToSerial(Uid *uid,
MIFARE_Key *key,
unsigned char sector
) {
unsigned char status;
unsigned char firstBlock;
unsigned char no_of_blocks;
unsigned char isSectorTrailer;

# 1528
unsigned char c1, c2, c3;
unsigned char c1_, c2_, c3_;
unsigned char invertedError;
unsigned char g[4];
unsigned char group;
unsigned char firstInGroup;


if (sector < 32) {
no_of_blocks = 4;
firstBlock = sector * no_of_blocks;
}
else if (sector < 40) {
no_of_blocks = 16;
firstBlock = 128 + (sector - 32) * no_of_blocks;
}
else {
return;
}


unsigned char unsigned charCount;
unsigned char buffer[18];
unsigned char blockAddr;
isSectorTrailer = 1;
for (char blockOffset = no_of_blocks - 1; blockOffset >= 0; blockOffset--) {
blockAddr = firstBlock + blockOffset;

if (isSectorTrailer) {
Serial.print(sector < 10 ? "   " : "  ");
Serial.print(sector);
Serial.print(F("   "));
}
else {
Serial.print(F("       "));
}

Serial.print(blockAddr < 10 ? "   " : (blockAddr < 100 ? "  " : " "));
Serial.print(blockAddr);
Serial.print(F("  "));

if (isSectorTrailer) {
status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, firstBlock, key, uid);
if (status != STATUS_OK) {
Serial.print(F("PCD_Authenticate() failed: "));
Serial.println(GetStatusCodeName(status));
return;
}
}

unsigned charCount = sizeof(buffer);
status = MIFARE_Read(blockAddr, buffer, &unsigned charCount);
if (status != STATUS_OK) {
Serial.print(F("MIFARE_Read() failed: "));
Serial.println(GetStatusCodeName(status));
continue;
}

for (unsigned char index = 0; index < 16; index++) {
Serial.print(buffer[index] < 0x10 ? " 0" : " ");
Serial.print(buffer[index], HEX);
if ((index % 4) == 3) {
Serial.print(F(" "));
}
}

if (isSectorTrailer) {
c1 = buffer[7] >> 4;
c2 = buffer[8] & 0xF;
c3 = buffer[8] >> 4;
c1_ = buffer[6] & 0xF;
c2_ = buffer[6] >> 4;
c3_ = buffer[7] & 0xF;
invertedError = (c1 != (~c1_ & 0xF)) || (c2 != (~c2_ & 0xF)) || (c3 != (~c3_ & 0xF));
g[0] = ((c1 & 1) << 2) | ((c2 & 1) << 1) | ((c3 & 1) << 0);
g[1] = ((c1 & 2) << 1) | ((c2 & 2) << 0) | ((c3 & 2) >> 1);
g[2] = ((c1 & 4) << 0) | ((c2 & 4) >> 1) | ((c3 & 4) >> 2);
g[3] = ((c1 & 8) >> 1) | ((c2 & 8) >> 2) | ((c3 & 8) >> 3);
isSectorTrailer = 0;
}


if (no_of_blocks == 4) {
group = blockOffset;
firstInGroup = 1;
}
else {
group = blockOffset / 5;
firstInGroup = (group == 3) || (group != (blockOffset + 1) / 5);
}

if (firstInGroup) {

Serial.print(F(" [ "));
Serial.print((g[group] >> 2) & 1, DEC); Serial.print(" ");
Serial.print((g[group] >> 1) & 1, DEC); Serial.print(" ");
Serial.print((g[group] >> 0) & 1, DEC);
Serial.print(F(" ] "));
if (invertedError) {
Serial.print(F(" Inverted access bits did not match! "));
}
}

if (group != 3 && (g[group] == 1 || g[group] == 6)) {
long value = (long(buffer[3])<<24) | (long(buffer[2])<<16) | (long(buffer[1])<<8) | long(buffer[0]);
Serial.print(F(" Value=0x")); Serial.print(value, HEX);
Serial.print(F(" Adr=0x")); Serial.print(buffer[12], HEX);
}
Serial.println();
}

return;
}

# 1645
void PICC_DumpMifareUltralightToSerial() {
unsigned char status;
unsigned char unsigned charCount;
unsigned char buffer[18];
unsigned char i;

Serial.println(F("Page  0  1  2  3"));

for (unsigned char page = 0; page < 16; page +=4) {

unsigned charCount = sizeof(buffer);
status = MIFARE_Read(page, buffer, &unsigned charCount);
if (status != STATUS_OK) {
Serial.print(F("MIFARE_Read() failed: "));
Serial.println(GetStatusCodeName(status));
break;
}

for (unsigned char offset = 0; offset < 4; offset++) {
i = page + offset;
Serial.print(i < 10 ? "  " : " ");
Serial.print(i);
Serial.print(F("  "));
for (unsigned char index = 0; index < 4; index++) {
i = 4 * offset + index;
Serial.print(buffer[i] < 0x10 ? " 0" : " ");
Serial.print(buffer[i], HEX);
}
Serial.println();
}
}
}

# 1681
void MIFARE_SetAccessBits( unsigned char *accessBitBuffer,
unsigned char g0,
unsigned char g1,
unsigned char g2,
unsigned char g3
) {
unsigned char c1 = ((g3 & 4) << 1) | ((g2 & 4) << 0) | ((g1 & 4) >> 1) | ((g0 & 4) >> 2);
unsigned char c2 = ((g3 & 2) << 2) | ((g2 & 2) << 1) | ((g1 & 2) << 0) | ((g0 & 2) >> 1);
unsigned char c3 = ((g3 & 1) << 3) | ((g2 & 1) << 2) | ((g1 & 1) << 1) | ((g0 & 1) << 0);

accessBitBuffer[0] = (~c2 & 0xF) << 4 | (~c1 & 0xF);
accessBitBuffer[1] = c1 << 4 | (~c3 & 0xF);
accessBitBuffer[2] = c3 << 4 | c2;
}

# 1708
unsigned char MIFARE_OpenUidBackdoor(unsigned char logErrors) {

# 1717
PICC_HaltA();

unsigned char cmd = 0x40;
unsigned char validBits = 7;

# 1722
unsigned char response[32];
unsigned char received;
unsigned char status = PCD_TransceiveData(&cmd, (unsigned char)1, response, &received, &validBits, (unsigned char)0, 0);
if( status != STATUS_OK ) {
if( logErrors ) {
Serial.println(F("Card did not respond to 0x40 after HALT command. Are you sure it is a UID changeable one?"));
Serial.print(F("Error name: "));
Serial.println(GetStatusCodeName(status));
}
return 0;
}
if ( received != 1 || response[0] != 0x0A ) {
if ( logErrors ) {
Serial.print(F("Got bad response on backdoor 0x40 command: "));
Serial.print(response[0], HEX);
Serial.print(F(" ("));
Serial.print(validBits);
Serial.print(F(" valid bits)\r\n"));
}
return 0;
}

cmd = 0x43;
validBits = 8;
status = PCD_TransceiveData(&cmd, (unsigned char)1, response, &received, &validBits, (unsigned char)0, 0);
if( status != STATUS_OK ) {
if( logErrors ) {
Serial.println(F("Error in communication at command 0x43, after successfully executing 0x40"));
Serial.print(F("Error name: "));
Serial.println(GetStatusCodeName(status));
}
return 0;
}
if ( received != 1 || response[0] != 0x0A ) {
if ( logErrors ) {
Serial.print(F("Got bad response on backdoor 0x43 command: "));
Serial.print(response[0], HEX);
Serial.print(F(" ("));
Serial.print(validBits);
Serial.print(F(" valid bits)\r\n"));
}
return 0;
}


return 1;
}

# 1778
unsigned char MIFARE_SetUid(unsigned char* newUid, unsigned char uidSize, unsigned char logErrors) {


if ( !newUid || !uidSize || uidSize > 15) {
if ( logErrors ) {
Serial.println(F("New UID buffer empty, size 0, or size > 15 given"));
}
return 0;
}


MIFARE_Key key = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
unsigned char status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, (unsigned char)1, &key, &uid);
if ( status != STATUS_OK ) {

if ( status == STATUS_TIMEOUT ) {

# 1801
if ( !PICC_IsNewCardPresent() || !PICC_ReadCardSerial() ) {
Serial.println(F("No card was previously selected, and none are available. Failed to set UID."));
return 0;
}

status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, (unsigned char)1, &key, &uid);
if ( status != STATUS_OK ) {

if ( logErrors ) {
Serial.println(F("Failed to authenticate to card for reading, could not set UID: "));
Serial.println(GetStatusCodeName(status));
}
return 0;
}
}
else {
if ( logErrors ) {
Serial.print(F("PCD_Authenticate() failed: "));
Serial.println(GetStatusCodeName(status));
}
return 0;
}
}


unsigned char block0_buffer[18];
unsigned char unsigned charCount = sizeof(block0_buffer);
status = MIFARE_Read((unsigned char)0, block0_buffer, &unsigned charCount);
if ( status != STATUS_OK ) {
if ( logErrors ) {
Serial.print(F("MIFARE_Read() failed: "));
Serial.println(GetStatusCodeName(status));
Serial.println(F("Are you sure your KEY A for sector 0 is 0xFFFFFFFFFFFF?"));
}
return 0;
}


unsigned char bcc = 0;
for ( int i = 0; i < uidSize; i++ ) {
block0_buffer[i] = newUid[i];
bcc ^= newUid[i];
}


block0_buffer[uidSize] = bcc;


PCD_StopCrypto1();


if ( !MIFARE_OpenUidBackdoor(logErrors) ) {
if ( logErrors ) {
Serial.println(F("Activating the UID backdoor failed."));
}
return 0;
}


status = MIFARE_Write((unsigned char)0, block0_buffer, (unsigned char)16);
if (status != STATUS_OK) {
if ( logErrors ) {
Serial.print(F("MIFARE_Write() failed: "));
Serial.println(GetStatusCodeName(status));
}
return 0;
}


unsigned char atqa_answer[2];
unsigned char atqa_size = 2;
PICC_WakeupA(atqa_answer, &atqa_size);

return 1;
}

# 1880
unsigned char MIFARE_UnbrickUidSector(unsigned char logErrors) {
MIFARE_OpenUidBackdoor( logErrors );

unsigned char block0_buffer[] = {0x01, 0x02, 0x03, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


unsigned char status = MIFARE_Write((unsigned char)0, block0_buffer, (unsigned char)16);
if (status != STATUS_OK) {
if ( logErrors ) {
Serial.print(F("MIFARE_Write() failed: "));
Serial.println(GetStatusCodeName(status));
}
return 0;
}
}

# 1906
unsigned char PICC_IsNewCardPresent() {
unsigned char bufferATQA[2];
unsigned char bufferSize = sizeof(bufferATQA);
unsigned char result = PICC_RequestA(bufferATQA, &bufferSize);
return (result == STATUS_OK || result == STATUS_COLLISION);
}

# 1921
unsigned char PICC_ReadCardSerial() {
unsigned char result = PICC_Select(&uid);
return (result == STATUS_OK);
}


# 11 "main.c"
#pragma config FOSC = INTOSCIO
#pragma config WDTE = OFF
#pragma config PWRTE = OFF
#pragma config MCLRE = OFF
#pragma config BOREN = ON
#pragma config LVP = ON
#pragma config CPD = OFF
#pragma config CP = OFF

void main()
{
UART_init();
SPI_init(0);

while(1)
{

}
}

void interrupt _ISR()
{
_ISR_UART();
}
