

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Mar 18 18:37:54 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     	;# 
    24  0001                     	;# 
    25  0002                     	;# 
    26  0003                     	;# 
    27  0004                     	;# 
    28  0005                     	;# 
    29  0006                     	;# 
    30  000A                     	;# 
    31  000B                     	;# 
    32  000C                     	;# 
    33  000E                     	;# 
    34  000E                     	;# 
    35  000F                     	;# 
    36  0010                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0015                     	;# 
    40  0015                     	;# 
    41  0016                     	;# 
    42  0017                     	;# 
    43  0018                     	;# 
    44  0019                     	;# 
    45  001A                     	;# 
    46  001F                     	;# 
    47  0081                     	;# 
    48  0085                     	;# 
    49  0086                     	;# 
    50  008C                     	;# 
    51  008E                     	;# 
    52  0092                     	;# 
    53  0098                     	;# 
    54  0099                     	;# 
    55  009A                     	;# 
    56  009B                     	;# 
    57  009C                     	;# 
    58  009D                     	;# 
    59  009F                     	;# 
    60                           
    61                           	psect	strings
    62  0224                     __pstrings:	
    63  0224                     stringtab:	
    64  0224                     __stringtab:	
    65  0224                     stringcode:	
    66                           ;	String table - string pointers are 1 byte each
    67                           
    68  0224                     stringdir:	
    69  0224  3002               	movlw	high stringdir
    70  0225  008A               	movwf	10
    71  0226  0804               	movf	4,w
    72  0227  0A84               	incf	4,f
    73  0228  0782               	addwf	2,f
    74  0229                     __stringbase:	
    75  0229  3400               	retlw	0
    76  022A                     __end_of__stringtab:	
    77  022A                     _dpowers:	
    78  022A  3401               	retlw	1
    79  022B  3400               	retlw	0
    80  022C  340A               	retlw	10
    81  022D  3400               	retlw	0
    82  022E  3464               	retlw	100
    83  022F  3400               	retlw	0
    84  0230  34E8               	retlw	232
    85  0231  3403               	retlw	3
    86  0232  3410               	retlw	16
    87  0233  3427               	retlw	39
    88  0234                     __end_of_dpowers:	
    89  0006                     _PORTB	set	6
    90  001A                     _RCREG	set	26
    91  0018                     _RCSTAbits	set	24
    92  0019                     _TXREG	set	25
    93  0065                     _RCIF	set	101
    94  0064                     _TXIF	set	100
    95  0099                     _SPBRG	set	153
    96  0086                     _TRISB	set	134
    97  0086                     _TRISBbits	set	134
    98  0098                     _TXSTAbits	set	152
    99  0234                     __stringdata:	
   100  0234                     STR_1:	
   101  0234  3425               	retlw	37	;'%'
   102  0235  3464               	retlw	100	;'d'
   103  0236  340A               	retlw	10
   104  0237  3400               	retlw	0
   105  0238                     __end_of__stringdata:	
   106                           
   107                           	psect	cinit
   108  0011                     start_initialization:	
   109                           ; #config settings
   110                           
   111  0011                     __initialization:	
   112                           
   113                           ; Clear objects allocated to COMMON
   114  0011  01F7               	clrf	__pbssCOMMON& (0+127)
   115  0012  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   116                           
   117                           ; Clear objects allocated to BANK0
   118  0013  1383               	bcf	3,7	;select IRP bank0
   119  0014  303E               	movlw	low __pbssBANK0
   120  0015  0084               	movwf	4
   121  0016  304F               	movlw	low (__pbssBANK0+17)
   122  0017  2258               	fcall	clear_ram0
   123  0018                     end_of_initialization:	
   124                           ;End of C runtime variable initialization code
   125                           
   126  0018                     __end_of__initialization:	
   127  0018  0183               	clrf	3
   128  0019  291C               	ljmp	_main	;jump to C main() function
   129                           
   130                           	psect	bssCOMMON
   131  0077                     __pbssCOMMON:	
   132  0077                     _count:	
   133  0077                     	ds	2
   134                           
   135                           	psect	bssBANK0
   136  003E                     __pbssBANK0:	
   137  003E                     _buffer:	
   138  003E                     	ds	16
   139  004E                     __mode:	
   140  004E                     	ds	1
   141                           
   142                           	psect	clrtext
   143  0258                     clear_ram0:	
   144                           ;	Called with FSR containing the base address, and
   145                           ;	W with the last address+1
   146                           
   147  0258  0064               	clrwdt	;clear the watchdog before getting into this loop
   148  0259                     clrloop0:	
   149  0259  0180               	clrf	0	;clear RAM location pointed to by FSR
   150  025A  0A84               	incf	4,f	;increment pointer
   151  025B  0604               	xorwf	4,w	;XOR with final address
   152  025C  1903               	btfsc	3,2	;have we reached the end yet?
   153  025D  3400               	retlw	0	;all done for this memory range, return
   154  025E  0604               	xorwf	4,w	;XOR again to restore value
   155  025F  2A59               	goto	clrloop0	;do the next byte
   156                           
   157                           	psect	cstackCOMMON
   158  0070                     __pcstackCOMMON:	
   159  0070                     ?_putch:	
   160  0070                     ?_UART_init:	
   161                           ; 0 bytes @ 0x0
   162                           
   163  0070                     ?__ISR:	
   164                           ; 0 bytes @ 0x0
   165                           
   166  0070                     ??__ISR:	
   167                           ; 0 bytes @ 0x0
   168                           
   169  0070                     ?_SPI_init:	
   170                           ; 0 bytes @ 0x0
   171                           
   172  0070                     ?_SPI_setSS:	
   173                           ; 0 bytes @ 0x0
   174                           
   175  0070                     ?_main:	
   176                           ; 0 bytes @ 0x0
   177                           
   178  0070                     ?_SPI_transfer:	
   179                           ; 0 bytes @ 0x0
   180                           
   181                           
   182                           ; 1 bytes @ 0x0
   183  0070                     	ds	5
   184  0075                     ??_putch:	
   185  0075                     ??_UART_init:	
   186                           ; 0 bytes @ 0x5
   187                           
   188  0075                     ??_SPI_init:	
   189                           ; 0 bytes @ 0x5
   190                           
   191  0075                     ??_SPI_setSS:	
   192                           ; 0 bytes @ 0x5
   193                           
   194  0075                     ??_SPI_transfer:	
   195                           ; 0 bytes @ 0x5
   196                           
   197  0075                     ??___lwdiv:	
   198                           ; 0 bytes @ 0x5
   199                           
   200  0075                     putch@data:	
   201                           ; 0 bytes @ 0x5
   202                           
   203                           
   204                           ; 1 bytes @ 0x5
   205  0075                     	ds	1
   206  0076                     ??___lwmod:	
   207  0076                     SPI_init@mode:	
   208                           ; 0 bytes @ 0x6
   209                           
   210  0076                     SPI_setSS@d:	
   211                           ; 1 bytes @ 0x6
   212                           
   213                           
   214                           ; 1 bytes @ 0x6
   215  0076                     	ds	1
   216                           
   217                           	psect	cstackBANK0
   218  0020                     __pcstackBANK0:	
   219  0020                     ?___lwdiv:	
   220  0020                     SPI_transfer@data:	
   221                           ; 2 bytes @ 0x0
   222                           
   223  0020                     ___lwdiv@divisor:	
   224                           ; 1 bytes @ 0x0
   225                           
   226                           
   227                           ; 2 bytes @ 0x0
   228  0020                     	ds	1
   229  0021                     SPI_transfer@ret:	
   230                           
   231                           ; 1 bytes @ 0x1
   232  0021                     	ds	1
   233  0022                     SPI_transfer@i:	
   234  0022                     ___lwdiv@dividend:	
   235                           ; 1 bytes @ 0x2
   236                           
   237                           
   238                           ; 2 bytes @ 0x2
   239  0022                     	ds	1
   240  0023                     SPI_transfer@SPI_byte:	
   241                           
   242                           ; 1 bytes @ 0x3
   243  0023                     	ds	1
   244  0024                     ___lwdiv@counter:	
   245                           
   246                           ; 1 bytes @ 0x4
   247  0024                     	ds	1
   248  0025                     ___lwdiv@quotient:	
   249                           
   250                           ; 2 bytes @ 0x5
   251  0025                     	ds	2
   252  0027                     ?___lwmod:	
   253  0027                     ___lwmod@divisor:	
   254                           ; 2 bytes @ 0x7
   255                           
   256                           
   257                           ; 2 bytes @ 0x7
   258  0027                     	ds	2
   259  0029                     ___lwmod@dividend:	
   260                           
   261                           ; 2 bytes @ 0x9
   262  0029                     	ds	2
   263  002B                     ___lwmod@counter:	
   264                           
   265                           ; 1 bytes @ 0xB
   266  002B                     	ds	1
   267  002C                     ?_printf:	
   268                           
   269                           ; 2 bytes @ 0xC
   270  002C                     	ds	2
   271  002E                     ??_printf:	
   272                           
   273                           ; 0 bytes @ 0xE
   274  002E                     	ds	3
   275  0031                     printf@ap:	
   276                           
   277                           ; 1 bytes @ 0x11
   278  0031                     	ds	1
   279  0032                     printf@flag:	
   280                           
   281                           ; 1 bytes @ 0x12
   282  0032                     	ds	1
   283  0033                     printf@f:	
   284                           
   285                           ; 1 bytes @ 0x13
   286  0033                     	ds	1
   287  0034                     printf@prec:	
   288                           
   289                           ; 1 bytes @ 0x14
   290  0034                     	ds	1
   291  0035                     printf@_val:	
   292                           
   293                           ; 4 bytes @ 0x15
   294  0035                     	ds	4
   295  0039                     printf@c:	
   296                           
   297                           ; 1 bytes @ 0x19
   298  0039                     	ds	1
   299  003A                     ??_main:	
   300                           
   301                           ; 0 bytes @ 0x1A
   302  003A                     	ds	2
   303  003C                     main@temp:	
   304                           
   305                           ; 1 bytes @ 0x1C
   306  003C                     	ds	1
   307  003D                     main@i:	
   308                           
   309                           ; 1 bytes @ 0x1D
   310  003D                     	ds	1
   311                           
   312                           	psect	maintext
   313  011C                     __pmaintext:	
   314 ;;
   315 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   316 ;;
   317 ;; *************** function _main *****************
   318 ;; Defined at:
   319 ;;		line 140 in file "main.c"
   320 ;; Parameters:    Size  Location     Type
   321 ;;		None
   322 ;; Auto vars:     Size  Location     Type
   323 ;;  i               1   29[BANK0 ] unsigned char 
   324 ;;  temp            1   28[BANK0 ] unsigned char 
   325 ;; Return value:  Size  Location     Type
   326 ;;		None               void
   327 ;; Registers used:
   328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 17F/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   334 ;;      Params:         0       0       0       0
   335 ;;      Locals:         0       2       0       0
   336 ;;      Temps:          0       2       0       0
   337 ;;      Totals:         0       4       0       0
   338 ;;Total ram usage:        4 bytes
   339 ;; Hardware stack levels required when called:    3
   340 ;; This function calls:
   341 ;;		_SPI_init
   342 ;;		_SPI_setSS
   343 ;;		_SPI_transfer
   344 ;;		_UART_init
   345 ;;		_printf
   346 ;; This function is called by:
   347 ;;		Startup code after reset
   348 ;; This function uses a non-reentrant model
   349 ;;
   350                           
   351                           
   352                           ;psect for function _main
   353  011C                     _main:	
   354                           
   355                           ;main.c: 142: UART_init();
   356                           
   357                           ;incstack = 0
   358                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   359  011C  2238               	fcall	_UART_init
   360                           
   361                           ;main.c: 143: SPI_init(3);
   362  011D  3003               	movlw	3
   363  011E  21F5               	fcall	_SPI_init
   364                           
   365                           ;main.c: 144: unsigned char temp=0;
   366  011F  1283               	bcf	3,5	;RP0=0, select bank0
   367  0120  1303               	bcf	3,6	;RP1=0, select bank0
   368  0121  01BC               	clrf	main@temp
   369                           
   370                           ;main.c: 146: SPI_setSS(1);
   371  0122  3001               	movlw	1
   372  0123  2249               	fcall	_SPI_setSS
   373                           
   374                           ;main.c: 147: SPI_transfer(0x80);
   375  0124  3080               	movlw	128
   376  0125  20BE               	fcall	_SPI_transfer
   377                           
   378                           ;main.c: 148: SPI_transfer(0x04);
   379  0126  3004               	movlw	4
   380  0127  20BE               	fcall	_SPI_transfer
   381                           
   382                           ;main.c: 149: _delay((unsigned long)((100)*(4000000/4000.0)));
   383  0128  3082               	movlw	130
   384  0129  1283               	bcf	3,5	;RP0=0, select bank0
   385  012A  1303               	bcf	3,6	;RP1=0, select bank0
   386  012B  00BB               	movwf	??_main+1
   387  012C  30DD               	movlw	221
   388  012D  00BA               	movwf	??_main
   389  012E                     u987:	
   390  012E  0BBA               	decfsz	??_main,f
   391  012F  292E               	goto	u987
   392  0130  0BBB               	decfsz	??_main+1,f
   393  0131  292E               	goto	u987
   394  0132  2933               	nop2
   395                           
   396                           ;main.c: 150: SPI_setSS(0);
   397  0133  3000               	movlw	0
   398  0134  2249               	fcall	_SPI_setSS
   399  0135                     l1145:	
   400                           ;main.c: 152: while(1)
   401                           
   402                           
   403                           ;main.c: 153: {
   404                           ;main.c: 155: SPI_setSS(0);
   405  0135  3000               	movlw	0
   406  0136  2249               	fcall	_SPI_setSS
   407                           
   408                           ;main.c: 156: SPI_transfer(0x02);
   409  0137  3002               	movlw	2
   410  0138  20BE               	fcall	_SPI_transfer
   411                           
   412                           ;main.c: 157: temp = SPI_transfer(0x00);
   413  0139  3000               	movlw	0
   414  013A  20BE               	fcall	_SPI_transfer
   415  013B  1283               	bcf	3,5	;RP0=0, select bank0
   416  013C  1303               	bcf	3,6	;RP1=0, select bank0
   417  013D  00BA               	movwf	??_main
   418  013E  083A               	movf	??_main,w
   419  013F  00BC               	movwf	main@temp
   420                           
   421                           ;main.c: 158: SPI_setSS(1);
   422  0140  3001               	movlw	1
   423  0141  2249               	fcall	_SPI_setSS
   424                           
   425                           ;main.c: 159: printf("%d\n", temp);
   426  0142  1283               	bcf	3,5	;RP0=0, select bank0
   427  0143  1303               	bcf	3,6	;RP1=0, select bank0
   428  0144  083C               	movf	main@temp,w
   429  0145  00BA               	movwf	??_main
   430  0146  01BB               	clrf	??_main+1
   431  0147  083A               	movf	??_main,w
   432  0148  00AC               	movwf	?_printf
   433  0149  083B               	movf	??_main+1,w
   434  014A  00AD               	movwf	?_printf+1
   435  014B  300B               	movlw	(STR_1-__stringbase)& (0+255)
   436  014C  201A               	fcall	_printf
   437                           
   438                           ;main.c: 160: for(char i=0;i<10;i++)_delay((unsigned long)((100)*(4000000/4000.0)));
   439  014D  1283               	bcf	3,5	;RP0=0, select bank0
   440  014E  1303               	bcf	3,6	;RP1=0, select bank0
   441  014F  01BD               	clrf	main@i
   442  0150                     L1:	
   443  0150  300A               	movlw	10
   444  0151  023D               	subwf	main@i,w
   445  0152  1803               	btfsc	3,0
   446  0153  2935               	goto	l1145
   447  0154  3082               	movlw	130
   448  0155  00BB               	movwf	??_main+1
   449  0156  30DD               	movlw	221
   450  0157  00BA               	movwf	??_main
   451  0158                     u997:	
   452  0158  0BBA               	decfsz	??_main,f
   453  0159  2958               	goto	u997
   454  015A  0BBB               	decfsz	??_main+1,f
   455  015B  2958               	goto	u997
   456  015C  295D               	nop2
   457  015D  3001               	movlw	1
   458  015E  1283               	bcf	3,5	;RP0=0, select bank0
   459  015F  1303               	bcf	3,6	;RP1=0, select bank0
   460  0160  00BA               	movwf	??_main
   461  0161  083A               	movf	??_main,w
   462  0162  07BD               	addwf	main@i,f
   463  0163  2950               	goto	L1
   464  0164                     __end_of_main:	
   465                           
   466                           	psect	text1
   467  001A                     __ptext1:	
   468 ;; *************** function _printf *****************
   469 ;; Defined at:
   470 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;  f               1    wreg     PTR const unsigned char 
   473 ;;		 -> STR_1(4), 
   474 ;; Auto vars:     Size  Location     Type
   475 ;;  f               1   19[BANK0 ] PTR const unsigned char 
   476 ;;		 -> STR_1(4), 
   477 ;;  _val            4   21[BANK0 ] struct .
   478 ;;  c               1   25[BANK0 ] char 
   479 ;;  prec            1   20[BANK0 ] char 
   480 ;;  flag            1   18[BANK0 ] unsigned char 
   481 ;;  ap              1   17[BANK0 ] PTR void [1]
   482 ;;		 -> ?_printf(2), 
   483 ;; Return value:  Size  Location     Type
   484 ;;                  2   12[BANK0 ] int 
   485 ;; Registers used:
   486 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   492 ;;      Params:         0       2       0       0
   493 ;;      Locals:         0       9       0       0
   494 ;;      Temps:          0       3       0       0
   495 ;;      Totals:         0      14       0       0
   496 ;;Total ram usage:       14 bytes
   497 ;; Hardware stack levels used:    1
   498 ;; Hardware stack levels required when called:    2
   499 ;; This function calls:
   500 ;;		___lwdiv
   501 ;;		___lwmod
   502 ;;		_putch
   503 ;; This function is called by:
   504 ;;		_main
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           
   509                           ;psect for function _printf
   510  001A                     _printf:	
   511                           
   512                           ;incstack = 0
   513                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   514                           ;printf@f stored from wreg
   515  001A  1283               	bcf	3,5	;RP0=0, select bank0
   516  001B  1303               	bcf	3,6	;RP1=0, select bank0
   517  001C  00B3               	movwf	printf@f
   518                           
   519                           ;doprnt.c: 466: va_list ap;
   520                           ;doprnt.c: 499: signed char c;
   521                           ;doprnt.c: 506: signed char prec;
   522                           ;doprnt.c: 508: unsigned char flag;
   523                           ;doprnt.c: 527: union {
   524                           ;doprnt.c: 528: unsigned int _val;
   525                           ;doprnt.c: 529: struct {
   526                           ;doprnt.c: 530: const char * _cp;
   527                           ;doprnt.c: 531: unsigned _len;
   528                           ;doprnt.c: 532: } _str;
   529                           ;doprnt.c: 533: } _val;
   530                           ;doprnt.c: 542: *ap = __va_start();
   531  001D  302C               	movlw	?_printf& (0+255)
   532  001E  00AE               	movwf	??_printf
   533  001F  082E               	movf	??_printf,w
   534  0020  00B1               	movwf	printf@ap
   535  0021                     l1129:	
   536                           ;doprnt.c: 545: while(c = *f++) {
   537                           
   538  0021  3001               	movlw	1
   539  0022  1283               	bcf	3,5	;RP0=0, select bank0
   540  0023  1303               	bcf	3,6	;RP1=0, select bank0
   541  0024  07B3               	addwf	printf@f,f
   542  0025  30FF               	movlw	-1
   543  0026  0733               	addwf	printf@f,w
   544  0027  0084               	movwf	4
   545  0028  2224               	fcall	stringdir
   546  0029  00AE               	movwf	??_printf
   547  002A  082E               	movf	??_printf,w
   548  002B  00B9               	movwf	printf@c
   549  002C  08B9               	movf	printf@c,f
   550  002D  1903               	btfsc	3,2
   551  002E  0008               	return
   552                           
   553                           ;doprnt.c: 547: if(c != '%')
   554  002F  0839               	movf	printf@c,w
   555  0030  3A25               	xorlw	37
   556  0031  1903               	skipnz
   557  0032  2836               	goto	l1089
   558                           
   559                           ;doprnt.c: 549: {
   560                           ;doprnt.c: 550: (putch(c) );
   561  0033  0839               	movf	printf@c,w
   562  0034  220D               	fcall	_putch
   563                           
   564                           ;doprnt.c: 551: continue;
   565  0035  2821               	goto	l1129
   566  0036                     l1089:	
   567                           
   568                           ;doprnt.c: 552: }
   569                           ;doprnt.c: 557: flag = 0;
   570  0036  1283               	bcf	3,5	;RP0=0, select bank0
   571  0037  1303               	bcf	3,6	;RP1=0, select bank0
   572  0038  01B2               	clrf	printf@flag
   573                           
   574                           ;doprnt.c: 831: }
   575                           
   576                           ;doprnt.c: 822: continue;
   577                           
   578                           ;doprnt.c: 811: default:
   579                           
   580                           ;doprnt.c: 707: case 'i':
   581                           ;doprnt.c: 708: break;
   582                           
   583                           ;doprnt.c: 706: case 'd':
   584                           
   585                           ;doprnt.c: 647: goto alldone;
   586                           
   587                           ;doprnt.c: 646: case 0:
   588                           
   589                           ;doprnt.c: 644: switch(c = *f++) {
   590  0039  3001               	movlw	1
   591  003A  07B3               	addwf	printf@f,f
   592  003B  30FF               	movlw	-1
   593  003C  0733               	addwf	printf@f,w
   594  003D  0084               	movwf	4
   595  003E  2224               	fcall	stringdir
   596  003F  00B9               	movwf	printf@c
   597                           
   598                           ; Switch size 1, requested type "space"
   599                           ; Number of cases is 3, Range of values is 0 to 105
   600                           ; switch strategies available:
   601                           ; Name         Instructions Cycles
   602                           ; simple_byte           10     6 (average)
   603                           ; direct_byte          112     6 (fixed)
   604                           ; jumptable            260     6 (fixed)
   605                           ;	Chosen strategy is simple_byte
   606  0040  3A00               	xorlw	0	; case 0
   607  0041  1903               	skipnz
   608  0042  28BD               	goto	l120
   609  0043  3A64               	xorlw	100	; case 100
   610  0044  1903               	skipnz
   611  0045  284A               	goto	l1095
   612  0046  3A0D               	xorlw	13	; case 105
   613  0047  1903               	skipnz
   614  0048  284A               	goto	l1095
   615  0049  2821               	goto	l1129
   616  004A                     l1095:	
   617                           
   618                           ;doprnt.c: 1262: {
   619                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   620  004A  0831               	movf	printf@ap,w
   621  004B  0084               	movwf	4
   622  004C  1383               	bcf	3,7	;select IRP bank0
   623  004D  0800               	movf	0,w
   624  004E  00B5               	movwf	printf@_val
   625  004F  0A84               	incf	4,f
   626  0050  0800               	movf	0,w
   627  0051  00B6               	movwf	printf@_val+1
   628  0052  3002               	movlw	2
   629  0053  00AE               	movwf	??_printf
   630  0054  082E               	movf	??_printf,w
   631  0055  07B1               	addwf	printf@ap,f
   632                           
   633                           ;doprnt.c: 1270: if((int)_val._val < 0) {
   634  0056  1FB6               	btfss	printf@_val+1,7
   635  0057  2861               	goto	l1105
   636                           
   637                           ;doprnt.c: 1271: flag |= 0x03;
   638  0058  3003               	movlw	3
   639  0059  00AE               	movwf	??_printf
   640  005A  082E               	movf	??_printf,w
   641  005B  04B2               	iorwf	printf@flag,f
   642                           
   643                           ;doprnt.c: 1272: _val._val = -_val._val;
   644  005C  09B5               	comf	printf@_val,f
   645  005D  09B6               	comf	printf@_val+1,f
   646  005E  0AB5               	incf	printf@_val,f
   647  005F  1903               	skipnz
   648  0060  0AB6               	incf	printf@_val+1,f
   649  0061                     l1105:	
   650                           
   651                           ;doprnt.c: 1273: }
   652                           ;doprnt.c: 1275: }
   653                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   654  0061  01B9               	clrf	printf@c
   655  0062  0AB9               	incf	printf@c,f
   656  0063  0839               	movf	printf@c,w
   657  0064  3A05               	xorlw	5
   658  0065  1903               	btfsc	3,2
   659  0066  2880               	goto	l1117
   660  0067                     l1109:	
   661                           
   662                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
   663  0067  0839               	movf	printf@c,w
   664  0068  00AE               	movwf	??_printf
   665  0069  072E               	addwf	??_printf,w
   666  006A  3E01               	addlw	low (_dpowers-__stringbase)
   667  006B  0084               	movwf	4
   668  006C  2224               	fcall	stringdir
   669  006D  00AF               	movwf	??_printf+1
   670  006E  2224               	fcall	stringdir
   671  006F  00B0               	movwf	??_printf+2
   672  0070  0830               	movf	??_printf+2,w
   673  0071  0236               	subwf	printf@_val+1,w
   674  0072  1D03               	skipz
   675  0073  2876               	goto	u915
   676  0074  082F               	movf	??_printf+1,w
   677  0075  0235               	subwf	printf@_val,w
   678  0076                     u915:	
   679  0076  1C03               	btfss	3,0
   680  0077  2880               	goto	l1117
   681                           
   682                           ;doprnt.c: 1316: break;
   683  0078  3001               	movlw	1
   684  0079  00AE               	movwf	??_printf
   685  007A  082E               	movf	??_printf,w
   686  007B  07B9               	addwf	printf@c,f
   687  007C  0839               	movf	printf@c,w
   688  007D  3A05               	xorlw	5
   689  007E  1D03               	skipz
   690  007F  2867               	goto	l1109
   691  0080                     l1117:	
   692                           
   693                           ;doprnt.c: 1431: {
   694                           ;doprnt.c: 1447: if(flag & 0x03)
   695  0080  0832               	movf	printf@flag,w
   696  0081  3903               	andlw	3
   697  0082  1903               	btfsc	3,2
   698  0083  2886               	goto	l1121
   699                           
   700                           ;doprnt.c: 1448: (putch('-') );
   701  0084  302D               	movlw	45
   702  0085  220D               	fcall	_putch
   703  0086                     l1121:	
   704                           
   705                           ;doprnt.c: 1478: }
   706                           ;doprnt.c: 1481: prec = c;
   707  0086  1283               	bcf	3,5	;RP0=0, select bank0
   708  0087  1303               	bcf	3,6	;RP1=0, select bank0
   709  0088  0839               	movf	printf@c,w
   710  0089  00AE               	movwf	??_printf
   711  008A  082E               	movf	??_printf,w
   712  008B  00B4               	movwf	printf@prec
   713  008C                     l1127:	
   714                           ;doprnt.c: 1483: while(prec--) {
   715                           
   716  008C  30FF               	movlw	-1
   717  008D  1283               	bcf	3,5	;RP0=0, select bank0
   718  008E  1303               	bcf	3,6	;RP1=0, select bank0
   719  008F  00AE               	movwf	??_printf
   720  0090  082E               	movf	??_printf,w
   721  0091  07B4               	addwf	printf@prec,f
   722  0092  0834               	movf	printf@prec,w
   723  0093  3AFF               	xorlw	-1
   724  0094  1903               	btfsc	3,2
   725  0095  2821               	goto	l1129
   726                           
   727                           ;doprnt.c: 1487: {
   728                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
   729  0096  300A               	movlw	10
   730  0097  00A7               	movwf	___lwmod@divisor
   731  0098  3000               	movlw	0
   732  0099  00A8               	movwf	___lwmod@divisor+1
   733  009A  0834               	movf	printf@prec,w
   734  009B  00AE               	movwf	??_printf
   735  009C  072E               	addwf	??_printf,w
   736  009D  3E01               	addlw	low (_dpowers-__stringbase)
   737  009E  0084               	movwf	4
   738  009F  2224               	fcall	stringdir
   739  00A0  00A0               	movwf	___lwdiv@divisor
   740  00A1  2224               	fcall	stringdir
   741  00A2  00A1               	movwf	___lwdiv@divisor+1
   742  00A3  0836               	movf	printf@_val+1,w
   743  00A4  01A3               	clrf	___lwdiv@dividend+1
   744  00A5  07A3               	addwf	___lwdiv@dividend+1,f
   745  00A6  0835               	movf	printf@_val,w
   746  00A7  01A2               	clrf	___lwdiv@dividend
   747  00A8  07A2               	addwf	___lwdiv@dividend,f
   748  00A9  2164               	fcall	___lwdiv
   749  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   750  00AB  1303               	bcf	3,6	;RP1=0, select bank0
   751  00AC  0821               	movf	?___lwdiv+1,w
   752  00AD  01AA               	clrf	___lwmod@dividend+1
   753  00AE  07AA               	addwf	___lwmod@dividend+1,f
   754  00AF  0820               	movf	?___lwdiv,w
   755  00B0  01A9               	clrf	___lwmod@dividend
   756  00B1  07A9               	addwf	___lwmod@dividend,f
   757  00B2  21A4               	fcall	___lwmod
   758  00B3  1283               	bcf	3,5	;RP0=0, select bank0
   759  00B4  1303               	bcf	3,6	;RP1=0, select bank0
   760  00B5  0827               	movf	?___lwmod,w
   761  00B6  3E30               	addlw	48
   762  00B7  00AF               	movwf	??_printf+1
   763  00B8  082F               	movf	??_printf+1,w
   764  00B9  00B9               	movwf	printf@c
   765                           
   766                           ;doprnt.c: 1532: }
   767                           ;doprnt.c: 1533: (putch(c) );
   768  00BA  0839               	movf	printf@c,w
   769  00BB  220D               	fcall	_putch
   770  00BC  288C               	goto	l1127
   771  00BD                     l120:	
   772                           ;doprnt.c: 1549: return 0;
   773                           ;	Return value of _printf is never used
   774                           
   775                           ;doprnt.c: 1534: }
   776                           ;doprnt.c: 1542: }
   777                           ;doprnt.c: 1544: alldone:
   778                           
   779  00BD  0008               	return
   780  00BE                     __end_of_printf:	
   781                           
   782                           	psect	text2
   783  020D                     __ptext2:	
   784 ;; *************** function _putch *****************
   785 ;; Defined at:
   786 ;;		line 18 in file "main.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  data            1    wreg     unsigned char 
   789 ;; Auto vars:     Size  Location     Type
   790 ;;  data            1    5[COMMON] unsigned char 
   791 ;; Return value:  Size  Location     Type
   792 ;;		None               void
   793 ;; Registers used:
   794 ;;		wreg
   795 ;; Tracked objects:
   796 ;;		On entry : 0/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   800 ;;      Params:         0       0       0       0
   801 ;;      Locals:         1       0       0       0
   802 ;;      Temps:          0       0       0       0
   803 ;;      Totals:         1       0       0       0
   804 ;;Total ram usage:        1 bytes
   805 ;; Hardware stack levels used:    1
   806 ;; Hardware stack levels required when called:    1
   807 ;; This function calls:
   808 ;;		Nothing
   809 ;; This function is called by:
   810 ;;		_printf
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           
   815                           ;psect for function _putch
   816  020D                     _putch:	
   817                           
   818                           ;incstack = 0
   819                           ; Regs used in _putch: [wreg]
   820                           ;putch@data stored from wreg
   821  020D  00F5               	movwf	putch@data
   822                           
   823                           ;main.c: 20: if(data == 10)
   824  020E  0875               	movf	putch@data,w
   825  020F  3A0A               	xorlw	10
   826  0210  1D03               	skipz
   827  0211  2A1D               	goto	l39
   828  0212                     l32:	
   829                           ;main.c: 23: continue;
   830                           
   831                           ;main.c: 21: {
   832                           ;main.c: 22: while(!TXIF)
   833                           
   834  0212  1283               	bcf	3,5	;RP0=0, select bank0
   835  0213  1303               	bcf	3,6	;RP1=0, select bank0
   836  0214  1E0C               	btfss	12,4	;volatile
   837  0215  2A12               	goto	l32
   838                           
   839                           ;main.c: 24: TXREG = 10;
   840  0216  300A               	movlw	10
   841  0217  0099               	movwf	25	;volatile
   842  0218                     l35:	
   843                           ;main.c: 26: continue;
   844                           
   845                           ;main.c: 25: while(!TXIF)
   846                           
   847  0218  1E0C               	btfss	12,4	;volatile
   848  0219  2A18               	goto	l35
   849                           
   850                           ;main.c: 27: TXREG = 13;
   851  021A  300D               	movlw	13
   852  021B  0099               	movwf	25	;volatile
   853                           
   854                           ;main.c: 28: return;
   855  021C  0008               	return
   856  021D                     l39:	
   857                           ;main.c: 31: continue;
   858                           
   859                           ;main.c: 29: }
   860                           ;main.c: 30: while(!TXIF)
   861                           
   862  021D  1283               	bcf	3,5	;RP0=0, select bank0
   863  021E  1303               	bcf	3,6	;RP1=0, select bank0
   864  021F  1E0C               	btfss	12,4	;volatile
   865  0220  2A1D               	goto	l39
   866                           
   867                           ;main.c: 32: TXREG = data;
   868  0221  0875               	movf	putch@data,w
   869  0222  0099               	movwf	25	;volatile
   870  0223  0008               	return
   871  0224                     __end_of_putch:	
   872                           
   873                           	psect	text3
   874  01A4                     __ptext3:	
   875 ;; *************** function ___lwmod *****************
   876 ;; Defined at:
   877 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;  divisor         2    7[BANK0 ] unsigned int 
   880 ;;  dividend        2    9[BANK0 ] unsigned int 
   881 ;; Auto vars:     Size  Location     Type
   882 ;;  counter         1   11[BANK0 ] unsigned char 
   883 ;; Return value:  Size  Location     Type
   884 ;;                  2    7[BANK0 ] unsigned int 
   885 ;; Registers used:
   886 ;;		wreg, status,2, status,0
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   892 ;;      Params:         0       4       0       0
   893 ;;      Locals:         0       1       0       0
   894 ;;      Temps:          1       0       0       0
   895 ;;      Totals:         1       5       0       0
   896 ;;Total ram usage:        6 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; Hardware stack levels required when called:    1
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_printf
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           
   907                           ;psect for function ___lwmod
   908  01A4                     ___lwmod:	
   909                           
   910                           ;incstack = 0
   911                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   912  01A4  1283               	bcf	3,5	;RP0=0, select bank0
   913  01A5  1303               	bcf	3,6	;RP1=0, select bank0
   914  01A6  0828               	movf	___lwmod@divisor+1,w
   915  01A7  0427               	iorwf	___lwmod@divisor,w
   916  01A8  1903               	skipnz
   917  01A9  29D3               	goto	l1079
   918  01AA  01AB               	clrf	___lwmod@counter
   919  01AB  0AAB               	incf	___lwmod@counter,f
   920  01AC                     l1069:	
   921  01AC  1BA8               	btfsc	___lwmod@divisor+1,7
   922  01AD  29BA               	goto	l1071
   923  01AE  3001               	movlw	1
   924  01AF                     u835:	
   925  01AF  1003               	clrc
   926  01B0  0DA7               	rlf	___lwmod@divisor,f
   927  01B1  0DA8               	rlf	___lwmod@divisor+1,f
   928  01B2  3EFF               	addlw	-1
   929  01B3  1D03               	skipz
   930  01B4  29AF               	goto	u835
   931  01B5  3001               	movlw	1
   932  01B6  00F6               	movwf	??___lwmod
   933  01B7  0876               	movf	??___lwmod,w
   934  01B8  07AB               	addwf	___lwmod@counter,f
   935  01B9  29AC               	goto	l1069
   936  01BA                     l1071:	
   937  01BA  0828               	movf	___lwmod@divisor+1,w
   938  01BB  022A               	subwf	___lwmod@dividend+1,w
   939  01BC  1D03               	skipz
   940  01BD  29C0               	goto	u855
   941  01BE  0827               	movf	___lwmod@divisor,w
   942  01BF  0229               	subwf	___lwmod@dividend,w
   943  01C0                     u855:	
   944  01C0  1C03               	skipc
   945  01C1  29C8               	goto	l1075
   946  01C2  0827               	movf	___lwmod@divisor,w
   947  01C3  02A9               	subwf	___lwmod@dividend,f
   948  01C4  0828               	movf	___lwmod@divisor+1,w
   949  01C5  1C03               	skipc
   950  01C6  03AA               	decf	___lwmod@dividend+1,f
   951  01C7  02AA               	subwf	___lwmod@dividend+1,f
   952  01C8                     l1075:	
   953  01C8  3001               	movlw	1
   954  01C9                     u865:	
   955  01C9  1003               	clrc
   956  01CA  0CA8               	rrf	___lwmod@divisor+1,f
   957  01CB  0CA7               	rrf	___lwmod@divisor,f
   958  01CC  3EFF               	addlw	-1
   959  01CD  1D03               	skipz
   960  01CE  29C9               	goto	u865
   961  01CF  3001               	movlw	1
   962  01D0  02AB               	subwf	___lwmod@counter,f
   963  01D1  1D03               	btfss	3,2
   964  01D2  29BA               	goto	l1071
   965  01D3                     l1079:	
   966  01D3  082A               	movf	___lwmod@dividend+1,w
   967  01D4  01A8               	clrf	?___lwmod+1
   968  01D5  07A8               	addwf	?___lwmod+1,f
   969  01D6  0829               	movf	___lwmod@dividend,w
   970  01D7  01A7               	clrf	?___lwmod
   971  01D8  07A7               	addwf	?___lwmod,f
   972  01D9  0008               	return
   973  01DA                     __end_of___lwmod:	
   974                           
   975                           	psect	text4
   976  0164                     __ptext4:	
   977 ;; *************** function ___lwdiv *****************
   978 ;; Defined at:
   979 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;  divisor         2    0[BANK0 ] unsigned int 
   982 ;;  dividend        2    2[BANK0 ] unsigned int 
   983 ;; Auto vars:     Size  Location     Type
   984 ;;  quotient        2    5[BANK0 ] unsigned int 
   985 ;;  counter         1    4[BANK0 ] unsigned char 
   986 ;; Return value:  Size  Location     Type
   987 ;;                  2    0[BANK0 ] unsigned int 
   988 ;; Registers used:
   989 ;;		wreg, status,2, status,0
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   995 ;;      Params:         0       4       0       0
   996 ;;      Locals:         0       3       0       0
   997 ;;      Temps:          1       0       0       0
   998 ;;      Totals:         1       7       0       0
   999 ;;Total ram usage:        8 bytes
  1000 ;; Hardware stack levels used:    1
  1001 ;; Hardware stack levels required when called:    1
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_printf
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           
  1010                           ;psect for function ___lwdiv
  1011  0164                     ___lwdiv:	
  1012                           
  1013                           ;incstack = 0
  1014                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1015  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1017  0166  01A5               	clrf	___lwdiv@quotient
  1018  0167  01A6               	clrf	___lwdiv@quotient+1
  1019  0168  0821               	movf	___lwdiv@divisor+1,w
  1020  0169  0420               	iorwf	___lwdiv@divisor,w
  1021  016A  1903               	skipnz
  1022  016B  299D               	goto	l1057
  1023  016C  01A4               	clrf	___lwdiv@counter
  1024  016D  0AA4               	incf	___lwdiv@counter,f
  1025  016E                     l1045:	
  1026  016E  1BA1               	btfsc	___lwdiv@divisor+1,7
  1027  016F  297C               	goto	l1047
  1028  0170  3001               	movlw	1
  1029  0171                     u765:	
  1030  0171  1003               	clrc
  1031  0172  0DA0               	rlf	___lwdiv@divisor,f
  1032  0173  0DA1               	rlf	___lwdiv@divisor+1,f
  1033  0174  3EFF               	addlw	-1
  1034  0175  1D03               	skipz
  1035  0176  2971               	goto	u765
  1036  0177  3001               	movlw	1
  1037  0178  00F5               	movwf	??___lwdiv
  1038  0179  0875               	movf	??___lwdiv,w
  1039  017A  07A4               	addwf	___lwdiv@counter,f
  1040  017B  296E               	goto	l1045
  1041  017C                     l1047:	
  1042  017C  3001               	movlw	1
  1043  017D                     u785:	
  1044  017D  1003               	clrc
  1045  017E  0DA5               	rlf	___lwdiv@quotient,f
  1046  017F  0DA6               	rlf	___lwdiv@quotient+1,f
  1047  0180  3EFF               	addlw	-1
  1048  0181  1D03               	skipz
  1049  0182  297D               	goto	u785
  1050  0183  0821               	movf	___lwdiv@divisor+1,w
  1051  0184  0223               	subwf	___lwdiv@dividend+1,w
  1052  0185  1D03               	skipz
  1053  0186  2989               	goto	u795
  1054  0187  0820               	movf	___lwdiv@divisor,w
  1055  0188  0222               	subwf	___lwdiv@dividend,w
  1056  0189                     u795:	
  1057  0189  1C03               	skipc
  1058  018A  2992               	goto	l1053
  1059  018B  0820               	movf	___lwdiv@divisor,w
  1060  018C  02A2               	subwf	___lwdiv@dividend,f
  1061  018D  0821               	movf	___lwdiv@divisor+1,w
  1062  018E  1C03               	skipc
  1063  018F  03A3               	decf	___lwdiv@dividend+1,f
  1064  0190  02A3               	subwf	___lwdiv@dividend+1,f
  1065  0191  1425               	bsf	___lwdiv@quotient,0
  1066  0192                     l1053:	
  1067  0192  3001               	movlw	1
  1068  0193                     u805:	
  1069  0193  1003               	clrc
  1070  0194  0CA1               	rrf	___lwdiv@divisor+1,f
  1071  0195  0CA0               	rrf	___lwdiv@divisor,f
  1072  0196  3EFF               	addlw	-1
  1073  0197  1D03               	skipz
  1074  0198  2993               	goto	u805
  1075  0199  3001               	movlw	1
  1076  019A  02A4               	subwf	___lwdiv@counter,f
  1077  019B  1D03               	btfss	3,2
  1078  019C  297C               	goto	l1047
  1079  019D                     l1057:	
  1080  019D  0826               	movf	___lwdiv@quotient+1,w
  1081  019E  01A1               	clrf	?___lwdiv+1
  1082  019F  07A1               	addwf	?___lwdiv+1,f
  1083  01A0  0825               	movf	___lwdiv@quotient,w
  1084  01A1  01A0               	clrf	?___lwdiv
  1085  01A2  07A0               	addwf	?___lwdiv,f
  1086  01A3  0008               	return
  1087  01A4                     __end_of___lwdiv:	
  1088                           
  1089                           	psect	text5
  1090  0238                     __ptext5:	
  1091 ;; *************** function _UART_init *****************
  1092 ;; Defined at:
  1093 ;;		line 34 in file "main.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;		None
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;		None
  1098 ;; Return value:  Size  Location     Type
  1099 ;;		None               void
  1100 ;; Registers used:
  1101 ;;		wreg
  1102 ;; Tracked objects:
  1103 ;;		On entry : 0/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1107 ;;      Params:         0       0       0       0
  1108 ;;      Locals:         0       0       0       0
  1109 ;;      Temps:          0       0       0       0
  1110 ;;      Totals:         0       0       0       0
  1111 ;;Total ram usage:        0 bytes
  1112 ;; Hardware stack levels used:    1
  1113 ;; Hardware stack levels required when called:    1
  1114 ;; This function calls:
  1115 ;;		Nothing
  1116 ;; This function is called by:
  1117 ;;		_main
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           
  1122                           ;psect for function _UART_init
  1123  0238                     _UART_init:	
  1124                           
  1125                           ;main.c: 37: TRISBbits.TRISB1 = 1;
  1126                           
  1127                           ;incstack = 0
  1128                           ; Regs used in _UART_init: [wreg]
  1129  0238  1683               	bsf	3,5	;RP0=1, select bank1
  1130  0239  1303               	bcf	3,6	;RP1=0, select bank1
  1131  023A  1486               	bsf	6,1	;volatile
  1132                           
  1133                           ;main.c: 38: TRISBbits.TRISB2 = 1;
  1134  023B  1506               	bsf	6,2	;volatile
  1135                           
  1136                           ;main.c: 40: TXSTAbits.CSRC = 1;
  1137  023C  1798               	bsf	24,7	;volatile
  1138                           
  1139                           ;main.c: 41: TXSTAbits.TXEN = 1;
  1140  023D  1698               	bsf	24,5	;volatile
  1141                           
  1142                           ;main.c: 42: TXSTAbits.SYNC = 0;
  1143  023E  1218               	bcf	24,4	;volatile
  1144                           
  1145                           ;main.c: 45: RCSTAbits.SPEN = 1;
  1146  023F  1283               	bcf	3,5	;RP0=0, select bank0
  1147  0240  1303               	bcf	3,6	;RP1=0, select bank0
  1148  0241  1798               	bsf	24,7	;volatile
  1149                           
  1150                           ;main.c: 46: RCSTAbits.CREN = 1;
  1151  0242  1618               	bsf	24,4	;volatile
  1152                           
  1153                           ;main.c: 50: TXSTAbits.BRGH = 0;
  1154  0243  1683               	bsf	3,5	;RP0=1, select bank1
  1155  0244  1303               	bcf	3,6	;RP1=0, select bank1
  1156  0245  1118               	bcf	24,2	;volatile
  1157                           
  1158                           ;main.c: 51: SPBRG = 25;
  1159  0246  3019               	movlw	25
  1160  0247  0099               	movwf	25	;volatile
  1161  0248  0008               	return
  1162  0249                     __end_of_UART_init:	
  1163                           
  1164                           	psect	text6
  1165  00BE                     __ptext6:	
  1166 ;; *************** function _SPI_transfer *****************
  1167 ;; Defined at:
  1168 ;;		line 99 in file "main.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;  data            1    wreg     unsigned char 
  1171 ;; Auto vars:     Size  Location     Type
  1172 ;;  data            1    0[BANK0 ] unsigned char 
  1173 ;;  i               1    2[BANK0 ] unsigned char 
  1174 ;;  SPI_byte        1    3[BANK0 ] unsigned char 
  1175 ;;  ret             1    1[BANK0 ] unsigned char 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      unsigned char 
  1178 ;; Registers used:
  1179 ;;		wreg, status,2, status,0
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1185 ;;      Params:         0       0       0       0
  1186 ;;      Locals:         0       4       0       0
  1187 ;;      Temps:          1       0       0       0
  1188 ;;      Totals:         1       4       0       0
  1189 ;;Total ram usage:        5 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; Hardware stack levels required when called:    1
  1192 ;; This function calls:
  1193 ;;		Nothing
  1194 ;; This function is called by:
  1195 ;;		_main
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199                           
  1200                           ;psect for function _SPI_transfer
  1201  00BE                     _SPI_transfer:	
  1202                           
  1203                           ;incstack = 0
  1204                           ; Regs used in _SPI_transfer: [wreg+status,2+status,0]
  1205                           ;SPI_transfer@data stored from wreg
  1206  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1207  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1208  00C0  00A0               	movwf	SPI_transfer@data
  1209                           
  1210                           ;main.c: 101: unsigned char ret = 0x00 ;
  1211  00C1  01A1               	clrf	SPI_transfer@ret
  1212                           
  1213                           ;main.c: 102: unsigned char SPI_byte;
  1214                           ;main.c: 103: SPI_byte = data;
  1215  00C2  0820               	movf	SPI_transfer@data,w
  1216  00C3  00F5               	movwf	??_SPI_transfer
  1217  00C4  0875               	movf	??_SPI_transfer,w
  1218  00C5  00A3               	movwf	SPI_transfer@SPI_byte
  1219                           
  1220                           ;main.c: 104: for( unsigned char i=0;i<8;i++ )
  1221  00C6  01A2               	clrf	SPI_transfer@i
  1222  00C7  3008               	movlw	8
  1223  00C8  0222               	subwf	SPI_transfer@i,w
  1224  00C9  1803               	btfsc	3,0
  1225  00CA  291A               	goto	l947
  1226  00CB                     l72:	
  1227                           
  1228                           ;main.c: 105: {
  1229                           ;main.c: 106: if(_mode & 0x02)
  1230  00CB  1CCE               	btfss	__mode,1
  1231  00CC  28EE               	goto	l925
  1232                           
  1233                           ;main.c: 107: {
  1234                           ;main.c: 109: if(SPI_byte & 0x80)PORTB |= (1<<5);
  1235  00CD  1FA3               	btfss	SPI_transfer@SPI_byte,7
  1236  00CE  28D1               	goto	l909
  1237  00CF  1686               	bsf	6,5	;volatile
  1238  00D0  28D5               	goto	l911
  1239  00D1                     l909:	
  1240                           
  1241                           ;main.c: 110: else PORTB &= ~(1<<5);
  1242  00D1  30DF               	movlw	223
  1243  00D2  00F5               	movwf	??_SPI_transfer
  1244  00D3  0875               	movf	??_SPI_transfer,w
  1245  00D4  0586               	andwf	6,f	;volatile
  1246  00D5                     l911:	
  1247                           
  1248                           ;main.c: 112: SPI_byte <<= 1 ;
  1249  00D5  1003               	clrc
  1250  00D6  0DA3               	rlf	SPI_transfer@SPI_byte,f
  1251                           
  1252                           ;main.c: 113: ret <<= 1 ;
  1253  00D7  1003               	clrc
  1254  00D8  0DA1               	rlf	SPI_transfer@ret,f
  1255                           
  1256                           ;main.c: 115: PORTB ^= (1<<4);
  1257  00D9  3010               	movlw	16
  1258  00DA  00F5               	movwf	??_SPI_transfer
  1259  00DB  0875               	movf	??_SPI_transfer,w
  1260  00DC  0686               	xorwf	6,f	;volatile
  1261                           
  1262                           ;main.c: 116: _delay((unsigned long)((100)*(4000000/4000000.0)));
  1263  00DD  3021               	movlw	33
  1264  00DE  00F5               	movwf	??_SPI_transfer
  1265  00DF                     u1007:	
  1266  00DF  0BF5               	decfsz	??_SPI_transfer,f
  1267  00E0  28DF               	goto	u1007
  1268                           
  1269                           ;main.c: 117: if(PORTB & (1<<6))ret |= 1;
  1270  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  1271  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  1272  00E3  1B06               	btfsc	6,6	;volatile
  1273  00E4  1421               	bsf	SPI_transfer@ret,0
  1274                           
  1275                           ;main.c: 118: PORTB ^= (1<<4);
  1276  00E5  3010               	movlw	16
  1277  00E6  00F5               	movwf	??_SPI_transfer
  1278  00E7  0875               	movf	??_SPI_transfer,w
  1279  00E8  0686               	xorwf	6,f	;volatile
  1280                           
  1281                           ;main.c: 119: _delay((unsigned long)((100)*(4000000/4000000.0)));
  1282  00E9  3021               	movlw	33
  1283  00EA  00F5               	movwf	??_SPI_transfer
  1284  00EB                     u1017:	
  1285  00EB  0BF5               	decfsz	??_SPI_transfer,f
  1286  00EC  28EB               	goto	u1017
  1287                           
  1288                           ;main.c: 120: }
  1289  00ED  2910               	goto	l945
  1290  00EE                     l925:	
  1291                           
  1292                           ;main.c: 121: else
  1293                           ;main.c: 122: {
  1294                           ;main.c: 123: PORTB ^= (1<<4);
  1295  00EE  3010               	movlw	16
  1296  00EF  00F5               	movwf	??_SPI_transfer
  1297  00F0  0875               	movf	??_SPI_transfer,w
  1298  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1299  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  1300  00F3  0686               	xorwf	6,f	;volatile
  1301                           
  1302                           ;main.c: 124: if(PORTB & (1<<6))ret |= 1;
  1303  00F4  1B06               	btfsc	6,6	;volatile
  1304  00F5  1421               	bsf	SPI_transfer@ret,0
  1305                           
  1306                           ;main.c: 125: _delay((unsigned long)((100)*(4000000/4000000.0)));
  1307  00F6  3021               	movlw	33
  1308  00F7  00F5               	movwf	??_SPI_transfer
  1309  00F8                     u1027:	
  1310  00F8  0BF5               	decfsz	??_SPI_transfer,f
  1311  00F9  28F8               	goto	u1027
  1312                           
  1313                           ;main.c: 127: if(SPI_byte & 0x80)PORTB |= (1<<5);
  1314  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1315  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1316  00FC  1FA3               	btfss	SPI_transfer@SPI_byte,7
  1317  00FD  2900               	goto	l937
  1318  00FE  1686               	bsf	6,5	;volatile
  1319  00FF  2904               	goto	l939
  1320  0100                     l937:	
  1321                           
  1322                           ;main.c: 128: else PORTB &= ~(1<<5);
  1323  0100  30DF               	movlw	223
  1324  0101  00F5               	movwf	??_SPI_transfer
  1325  0102  0875               	movf	??_SPI_transfer,w
  1326  0103  0586               	andwf	6,f	;volatile
  1327  0104                     l939:	
  1328                           
  1329                           ;main.c: 130: SPI_byte <<= 1 ;
  1330  0104  1003               	clrc
  1331  0105  0DA3               	rlf	SPI_transfer@SPI_byte,f
  1332                           
  1333                           ;main.c: 131: ret <<= 1 ;
  1334  0106  1003               	clrc
  1335  0107  0DA1               	rlf	SPI_transfer@ret,f
  1336                           
  1337                           ;main.c: 133: PORTB ^= (1<<4);
  1338  0108  3010               	movlw	16
  1339  0109  00F5               	movwf	??_SPI_transfer
  1340  010A  0875               	movf	??_SPI_transfer,w
  1341  010B  0686               	xorwf	6,f	;volatile
  1342                           
  1343                           ;main.c: 134: _delay((unsigned long)((100)*(4000000/4000000.0)));
  1344  010C  3021               	movlw	33
  1345  010D  00F5               	movwf	??_SPI_transfer
  1346  010E                     u1037:	
  1347  010E  0BF5               	decfsz	??_SPI_transfer,f
  1348  010F  290E               	goto	u1037
  1349  0110                     l945:	
  1350  0110  3001               	movlw	1
  1351  0111  00F5               	movwf	??_SPI_transfer
  1352  0112  0875               	movf	??_SPI_transfer,w
  1353  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0115  07A2               	addwf	SPI_transfer@i,f
  1356  0116  3008               	movlw	8
  1357  0117  0222               	subwf	SPI_transfer@i,w
  1358  0118  1C03               	skipc
  1359  0119  28CB               	goto	l72
  1360  011A                     l947:	
  1361                           
  1362                           ;main.c: 135: }
  1363                           ;main.c: 136: }
  1364                           ;main.c: 137: return( ret ) ;
  1365  011A  0821               	movf	SPI_transfer@ret,w
  1366  011B  0008               	return
  1367  011C                     __end_of_SPI_transfer:	
  1368                           
  1369                           	psect	text7
  1370  0249                     __ptext7:	
  1371 ;; *************** function _SPI_setSS *****************
  1372 ;; Defined at:
  1373 ;;		line 93 in file "main.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;  d               1    wreg     unsigned char 
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  d               1    6[COMMON] unsigned char 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;		None               void
  1380 ;; Registers used:
  1381 ;;		wreg, status,2, status,0
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1387 ;;      Params:         0       0       0       0
  1388 ;;      Locals:         1       0       0       0
  1389 ;;      Temps:          1       0       0       0
  1390 ;;      Totals:         2       0       0       0
  1391 ;;Total ram usage:        2 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    1
  1394 ;; This function calls:
  1395 ;;		Nothing
  1396 ;; This function is called by:
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           
  1402                           ;psect for function _SPI_setSS
  1403  0249                     _SPI_setSS:	
  1404                           
  1405                           ;incstack = 0
  1406                           ; Regs used in _SPI_setSS: [wreg+status,2+status,0]
  1407                           ;SPI_setSS@d stored from wreg
  1408  0249  00F6               	movwf	SPI_setSS@d
  1409                           
  1410                           ;main.c: 95: if(d)PORTB |= (1<<7);
  1411  024A  0876               	movf	SPI_setSS@d,w
  1412  024B  1903               	btfsc	3,2
  1413  024C  2A51               	goto	l895
  1414  024D  1283               	bcf	3,5	;RP0=0, select bank0
  1415  024E  1303               	bcf	3,6	;RP1=0, select bank0
  1416  024F  1786               	bsf	6,7	;volatile
  1417  0250  0008               	return
  1418  0251                     l895:	
  1419                           
  1420                           ;main.c: 96: else PORTB &= ~(1<<7);
  1421  0251  307F               	movlw	127
  1422  0252  00F5               	movwf	??_SPI_setSS
  1423  0253  0875               	movf	??_SPI_setSS,w
  1424  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1425  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1426  0256  0586               	andwf	6,f	;volatile
  1427  0257  0008               	return
  1428  0258                     __end_of_SPI_setSS:	
  1429                           
  1430                           	psect	text8
  1431  01F5                     __ptext8:	
  1432 ;; *************** function _SPI_init *****************
  1433 ;; Defined at:
  1434 ;;		line 81 in file "main.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  mode            1    wreg     unsigned char 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  mode            1    6[COMMON] unsigned char 
  1439 ;; Return value:  Size  Location     Type
  1440 ;;		None               void
  1441 ;; Registers used:
  1442 ;;		wreg, status,2, status,0
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1448 ;;      Params:         0       0       0       0
  1449 ;;      Locals:         1       0       0       0
  1450 ;;      Temps:          1       0       0       0
  1451 ;;      Totals:         2       0       0       0
  1452 ;;Total ram usage:        2 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:    1
  1455 ;; This function calls:
  1456 ;;		Nothing
  1457 ;; This function is called by:
  1458 ;;		_main
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           
  1463                           ;psect for function _SPI_init
  1464  01F5                     _SPI_init:	
  1465                           
  1466                           ;incstack = 0
  1467                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  1468                           ;SPI_init@mode stored from wreg
  1469  01F5  00F6               	movwf	SPI_init@mode
  1470                           
  1471                           ;main.c: 83: TRISB &= ~(1<<4 | 1<<5 | 1<<7);
  1472  01F6  304F               	movlw	79
  1473  01F7  00F5               	movwf	??_SPI_init
  1474  01F8  0875               	movf	??_SPI_init,w
  1475  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  1476  01FA  1303               	bcf	3,6	;RP1=0, select bank1
  1477  01FB  0586               	andwf	6,f	;volatile
  1478                           
  1479                           ;main.c: 84: TRISB |= 1<<6;
  1480  01FC  1706               	bsf	6,6	;volatile
  1481                           
  1482                           ;main.c: 88: if(mode & 0x01)PORTB |= (1<<4);
  1483  01FD  1C76               	btfss	SPI_init@mode,0
  1484  01FE  2A03               	goto	l887
  1485  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1487  0201  1606               	bsf	6,4	;volatile
  1488  0202  2A08               	goto	l889
  1489  0203                     l887:	
  1490                           
  1491                           ;main.c: 89: else PORTB &= ~(1<<4);
  1492  0203  30EF               	movlw	239
  1493  0204  00F5               	movwf	??_SPI_init
  1494  0205  0875               	movf	??_SPI_init,w
  1495  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1496  0207  0586               	andwf	6,f	;volatile
  1497  0208                     l889:	
  1498                           
  1499                           ;main.c: 90: _mode = mode;
  1500  0208  0876               	movf	SPI_init@mode,w
  1501  0209  00F5               	movwf	??_SPI_init
  1502  020A  0875               	movf	??_SPI_init,w
  1503  020B  00CE               	movwf	__mode
  1504  020C  0008               	return
  1505  020D                     __end_of_SPI_init:	
  1506                           
  1507                           	psect	text9
  1508  01DA                     __ptext9:	
  1509 ;; *************** function __ISR *****************
  1510 ;; Defined at:
  1511 ;;		line 70 in file "main.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;		None
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;		None
  1516 ;; Return value:  Size  Location     Type
  1517 ;;		None               void
  1518 ;; Registers used:
  1519 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1525 ;;      Params:         0       0       0       0
  1526 ;;      Locals:         0       0       0       0
  1527 ;;      Temps:          5       0       0       0
  1528 ;;      Totals:         5       0       0       0
  1529 ;;Total ram usage:        5 bytes
  1530 ;; Hardware stack levels used:    1
  1531 ;; This function calls:
  1532 ;;		Nothing
  1533 ;; This function is called by:
  1534 ;;		Interrupt level 1
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           
  1539                           ;psect for function __ISR
  1540  01DA                     __ISR:	
  1541                           
  1542                           ;main.c: 72: if(RCIF)
  1543  01DA  1E8C               	btfss	12,5	;volatile
  1544  01DB  29EA               	goto	i1l57
  1545                           
  1546                           ;main.c: 73: {
  1547                           ;main.c: 74: buffer[count] = RCREG;
  1548  01DC  081A               	movf	26,w	;volatile
  1549  01DD  00F0               	movwf	??__ISR
  1550  01DE  0877               	movf	_count,w
  1551  01DF  3E3E               	addlw	_buffer& (0+255)
  1552  01E0  0084               	movwf	4
  1553  01E1  0870               	movf	??__ISR,w
  1554  01E2  1383               	bcf	3,7	;select IRP bank0
  1555  01E3  0080               	movwf	0
  1556                           
  1557                           ;main.c: 75: count++;
  1558  01E4  3001               	movlw	1
  1559  01E5  07F7               	addwf	_count,f
  1560  01E6  1803               	skipnc
  1561  01E7  0AF8               	incf	_count+1,f
  1562  01E8  3000               	movlw	0
  1563  01E9  07F8               	addwf	_count+1,f
  1564  01EA                     i1l57:	
  1565  01EA  0874               	movf	??__ISR+4,w
  1566  01EB  00FF               	movwf	127
  1567  01EC  0873               	movf	??__ISR+3,w
  1568  01ED  008A               	movwf	10
  1569  01EE  0872               	movf	??__ISR+2,w
  1570  01EF  0084               	movwf	4
  1571  01F0  0E71               	swapf	(??__ISR+1)^(0+-128),w
  1572  01F1  0083               	movwf	3
  1573  01F2  0EFE               	swapf	126,f
  1574  01F3  0E7E               	swapf	126,w
  1575  01F4  0009               	retfie
  1576  01F5                     __end_of__ISR:	
  1577  007E                     btemp	set	126	;btemp
  1578  007E                     wtemp	set	126
  1579  007E                     wtemp0	set	126
  1580  0080                     wtemp1	set	128
  1581  0082                     wtemp2	set	130
  1582  0084                     wtemp3	set	132
  1583  0086                     wtemp4	set	134
  1584  0088                     wtemp5	set	136
  1585  007F                     wtemp6	set	127
  1586  007E                     ttemp	set	126
  1587  007E                     ttemp0	set	126
  1588  0081                     ttemp1	set	129
  1589  0084                     ttemp2	set	132
  1590  0087                     ttemp3	set	135
  1591  007F                     ttemp4	set	127
  1592  007E                     ltemp	set	126
  1593  007E                     ltemp0	set	126
  1594  0082                     ltemp1	set	130
  1595  0086                     ltemp2	set	134
  1596  0080                     ltemp3	set	128
  1597                           
  1598                           	psect	intentry
  1599  0004                     __pintentry:	
  1600                           ;incstack = 0
  1601                           ; Regs used in __ISR: [wreg-fsr0h+status,2+status,0]
  1602                           
  1603  0004                     interrupt_function:	
  1604  007E                     saved_w	set	btemp
  1605  0004  00FE               	movwf	btemp
  1606  0005  0E03               	swapf	3,w
  1607  0006  00F1               	movwf	??__ISR+1
  1608  0007  0804               	movf	4,w
  1609  0008  00F2               	movwf	??__ISR+2
  1610  0009  080A               	movf	10,w
  1611  000A  00F3               	movwf	??__ISR+3
  1612  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1613  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1614  000D  087F               	movf	btemp+1,w
  1615  000E  00F4               	movwf	??__ISR+4
  1616  000F  29DA               	ljmp	__ISR


Data Sizes:
    Strings     4
    Constant    10
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     30      47
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S177$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    _main->_SPI_init
    _main->_SPI_setSS
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under __ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under __ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under __ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1683
                                             26 BANK0      4     4      0
                           _SPI_init
                          _SPI_setSS
                       _SPI_transfer
                          _UART_init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              14    12      2    1370
                                             12 BANK0     14    12      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                              6 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     371
                                              5 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_transfer                                         5     5      0     142
                                              5 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SPI_setSS                                            2     2      0      22
                                              5 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             2     2      0      44
                                              5 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) __ISR                                                 5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
   _SPI_setSS
   _SPI_transfer
   _UART_init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 __ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     1E      2F       3       58.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      38       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      38      10        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Mar 18 18:37:54 2015

                      pc 0002                       l32 0212                       l35 0218  
                     l39 021D                       l72 00CB                       fsr 0004  
                    l120 00BD                      l911 00D5                      l909 00D1  
                    l925 00EE                      l937 0100                      l945 0110  
                    l939 0104                      l947 011A                      l887 0203  
                    l895 0251                      l889 0208                      u805 0193  
                    u835 01AF                      u915 0076                      u765 0171  
                    u855 01C0                      u785 017D                      u865 01C9  
                    u795 0189                      u987 012E                      u997 0158  
                    fsr0 0004                      indf 0000                     l1121 0086  
                   l1105 0061                     l1053 0192                     l1045 016E  
                   l1117 0080                     l1109 0067    __size_of_SPI_transfer 005E  
                   l1047 017C                     l1071 01BA                     l1127 008C  
                   l1057 019D                     l1129 0021                     l1145 0135  
                   l1075 01C8                     l1069 01AC                     l1079 01D3  
                   l1095 004A                     l1089 0036                     STR_1 0234  
                   u1007 00DF                     u1017 00EB                     u1027 00F8  
                   u1037 010E                     _RCIF 0065                     i1l57 01EA  
                   _TXIF 0064                     __ISR 01DA                     _main 011C  
                   btemp 007E                     ltemp 007E                     start 0010  
                   ttemp 007E                     wtemp 007E                    ?__ISR 0070  
                  ?_main 0070          __end_of___lwdiv 01A4          __end_of___lwmod 01DA  
       SPI_transfer@data 0020                    _RCREG 001A             _SPI_transfer 00BE  
                  _SPBRG 0099                    _PORTB 0006                    _TRISB 0086  
                  _TXREG 0019                    __mode 004E       __size_of_UART_init 0011  
        __end_of_dpowers 0234                    _count 0077                    _putch 020D  
                  main@i 003D                    pclath 000A                    ltemp0 007E  
       __end_of_SPI_init 020D                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F       __size_of_SPI_setSS 000F  
           __end_of__ISR 01F5          __initialization 0011             __end_of_main 0164  
                 ??__ISR 0070                   ??_main 003A                   ?_putch 0070  
      __end_of_UART_init 0249                ??___lwdiv 0075                ??___lwmod 0076  
                 _buffer 003E                   _printf 001A        __end_of_SPI_setSS 0258  
                 saved_w 007E  __end_of__initialization 0018             SPI_init@mode 0076  
         __pcstackCOMMON 0070            __end_of_putch 0224                ?_SPI_init 0070  
                ??_putch 0075               __pbssBANK0 003E               __pmaintext 011C  
             __pintentry 0004                  ?_printf 002C               ??_SPI_init 0075  
   SPI_transfer@SPI_byte 0023               __stringtab 0224                  ___lwdiv 0164  
                ___lwmod 01A4                  __ptext1 001A                  __ptext2 020D  
                __ptext3 01A4                  __ptext4 0164                  __ptext5 0238  
                __ptext6 00BE                  __ptext7 0249                  __ptext8 01F5  
                __ptext9 01DA          __size_of_printf 00A4                  _dpowers 022A  
                clrloop0 0259     end_of_initialization 0018                _RCSTAbits 0018  
                printf@c 0039                  printf@f 0033                _UART_init 0238  
              _TRISBbits 0086                _SPI_setSS 0249                _TXSTAbits 0098  
        SPI_transfer@ret 0021               ?_UART_init 0070           __end_of_printf 00BE  
    start_initialization 0011        __size_of_SPI_init 0018               ?_SPI_setSS 0070  
               ??_printf 002E            ?_SPI_transfer 0070              __pbssCOMMON 0077  
              ___latbits 0000            __pcstackBANK0 0020      __end_of__stringdata 0238  
          SPI_transfer@i 0022         ___lwdiv@dividend 0022                 ?___lwdiv 0020  
               ?___lwmod 0027                __pstrings 0224              ??_UART_init 0075  
         ??_SPI_transfer 0075         ___lwdiv@quotient 0025              ??_SPI_setSS 0075  
         __size_of_putch 0017        interrupt_function 0004                clear_ram0 0258  
            __stringbase 0229              __stringdata 0234                 _SPI_init 01F5  
             printf@_val 0035               printf@flag 0032               printf@prec 0034  
       __size_of___lwdiv 0040         __size_of___lwmod 0036       __end_of__stringtab 022A  
             SPI_setSS@d 0076          ___lwdiv@divisor 0020          ___lwdiv@counter 0024  
          __size_of__ISR 001B            __size_of_main 0048     __end_of_SPI_transfer 011C  
               main@temp 003C                putch@data 0075                 intlevel1 0000  
       ___lwmod@dividend 0029                stringcode 0224                 printf@ap 0031  
        ___lwmod@divisor 0027          ___lwmod@counter 002B                 stringdir 0224  
               stringtab 0224  
