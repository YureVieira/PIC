

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Mar 27 08:19:06 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     	;# 
    24  0001                     	;# 
    25  0002                     	;# 
    26  0003                     	;# 
    27  0004                     	;# 
    28  0005                     	;# 
    29  0006                     	;# 
    30  000A                     	;# 
    31  000B                     	;# 
    32  000C                     	;# 
    33  000E                     	;# 
    34  000E                     	;# 
    35  000F                     	;# 
    36  0010                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0015                     	;# 
    40  0015                     	;# 
    41  0016                     	;# 
    42  0017                     	;# 
    43  0018                     	;# 
    44  0019                     	;# 
    45  001A                     	;# 
    46  001F                     	;# 
    47  0081                     	;# 
    48  0085                     	;# 
    49  0086                     	;# 
    50  008C                     	;# 
    51  008E                     	;# 
    52  0092                     	;# 
    53  0098                     	;# 
    54  0099                     	;# 
    55  009A                     	;# 
    56  009B                     	;# 
    57  009C                     	;# 
    58  009D                     	;# 
    59  009F                     	;# 
    60                           
    61                           	psect	strings
    62  01B0                     __pstrings:	
    63  01B0                     stringtab:	
    64  01B0                     __stringtab:	
    65  01B0                     stringcode:	
    66                           ;	String table - string pointers are 1 byte each
    67                           
    68  01B0                     stringdir:	
    69  01B0  3001               	movlw	high stringdir
    70  01B1  008A               	movwf	10
    71  01B2  0804               	movf	4,w
    72  01B3  0A84               	incf	4,f
    73  01B4  0782               	addwf	2,f
    74  01B5                     __stringbase:	
    75  01B5  3400               	retlw	0
    76  01B6                     __end_of__stringtab:	
    77  01B6                     _dpowers:	
    78  01B6  3401               	retlw	1
    79  01B7  3400               	retlw	0
    80  01B8  340A               	retlw	10
    81  01B9  3400               	retlw	0
    82  01BA  3464               	retlw	100
    83  01BB  3400               	retlw	0
    84  01BC  34E8               	retlw	232
    85  01BD  3403               	retlw	3
    86  01BE  3410               	retlw	16
    87  01BF  3427               	retlw	39
    88  01C0                     __end_of_dpowers:	
    89  0006                     _PORTB	set	6
    90  001A                     _RCREG	set	26
    91  0018                     _RCSTAbits	set	24
    92  0019                     _TXREG	set	25
    93  0065                     _RCIF	set	101
    94  0064                     _TXIF	set	100
    95  0099                     _SPBRG	set	153
    96  0086                     _TRISB	set	134
    97  0086                     _TRISBbits	set	134
    98  0098                     _TXSTAbits	set	152
    99  01C0                     __stringdata:	
   100  01C0                     STR_1:	
   101  01C0  3454               	retlw	84	;'T'
   102  01C1  3465               	retlw	101	;'e'
   103  01C2  346D               	retlw	109	;'m'
   104  01C3  3470               	retlw	112	;'p'
   105  01C4  3465               	retlw	101	;'e'
   106  01C5  3472               	retlw	114	;'r'
   107  01C6  3461               	retlw	97	;'a'
   108  01C7  3474               	retlw	116	;'t'
   109  01C8  3475               	retlw	117	;'u'
   110  01C9  3472               	retlw	114	;'r'
   111  01CA  3461               	retlw	97	;'a'
   112  01CB  3420               	retlw	32	;' '
   113  01CC  3425               	retlw	37	;'%'
   114  01CD  3464               	retlw	100	;'d'
   115  01CE  340A               	retlw	10
   116  01CF  3400               	retlw	0
   117  01D0                     __end_of__stringdata:	
   118                           
   119                           	psect	cinit
   120  0011                     start_initialization:	
   121                           ; #config settings
   122                           
   123  0011                     __initialization:	
   124                           
   125                           ; Clear objects allocated to COMMON
   126  0011  01F7               	clrf	__pbssCOMMON& (0+127)
   127  0012  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   128                           
   129                           ; Clear objects allocated to BANK0
   130  0013  1383               	bcf	3,7	;select IRP bank0
   131  0014  303D               	movlw	low __pbssBANK0
   132  0015  0084               	movwf	4
   133  0016  304D               	movlw	low (__pbssBANK0+16)
   134  0017  222E               	fcall	clear_ram0
   135  0018                     end_of_initialization:	
   136                           ;End of C runtime variable initialization code
   137                           
   138  0018                     __end_of__initialization:	
   139  0018  0183               	clrf	3
   140  0019  2943               	ljmp	_main	;jump to C main() function
   141                           
   142                           	psect	bssCOMMON
   143  0077                     __pbssCOMMON:	
   144  0077                     _count:	
   145  0077                     	ds	2
   146                           
   147                           	psect	bssBANK0
   148  003D                     __pbssBANK0:	
   149  003D                     _buffer:	
   150  003D                     	ds	16
   151                           
   152                           	psect	clrtext
   153  022E                     clear_ram0:	
   154                           ;	Called with FSR containing the base address, and
   155                           ;	W with the last address+1
   156                           
   157  022E  0064               	clrwdt	;clear the watchdog before getting into this loop
   158  022F                     clrloop0:	
   159  022F  0180               	clrf	0	;clear RAM location pointed to by FSR
   160  0230  0A84               	incf	4,f	;increment pointer
   161  0231  0604               	xorwf	4,w	;XOR with final address
   162  0232  1903               	btfsc	3,2	;have we reached the end yet?
   163  0233  3400               	retlw	0	;all done for this memory range, return
   164  0234  0604               	xorwf	4,w	;XOR again to restore value
   165  0235  2A2F               	goto	clrloop0	;do the next byte
   166                           
   167                           	psect	cstackCOMMON
   168  0070                     __pcstackCOMMON:	
   169  0070                     ?_putch:	
   170  0070                     ?_UART_init:	
   171                           ; 0 bytes @ 0x0
   172                           
   173  0070                     ?__ISR:	
   174                           ; 0 bytes @ 0x0
   175                           
   176  0070                     ??__ISR:	
   177                           ; 0 bytes @ 0x0
   178                           
   179  0070                     ?_set_CS:	
   180                           ; 0 bytes @ 0x0
   181                           
   182  0070                     ?_SPI_init:	
   183                           ; 0 bytes @ 0x0
   184                           
   185  0070                     ?_main:	
   186                           ; 0 bytes @ 0x0
   187                           
   188  0070                     ?_SPI_transfer:	
   189                           ; 0 bytes @ 0x0
   190                           
   191                           
   192                           ; 1 bytes @ 0x0
   193  0070                     	ds	5
   194  0075                     ??_putch:	
   195  0075                     ??_UART_init:	
   196                           ; 0 bytes @ 0x5
   197                           
   198  0075                     ??_set_CS:	
   199                           ; 0 bytes @ 0x5
   200                           
   201  0075                     ??_SPI_init:	
   202                           ; 0 bytes @ 0x5
   203                           
   204  0075                     ??_SPI_transfer:	
   205                           ; 0 bytes @ 0x5
   206                           
   207  0075                     ??___lwdiv:	
   208                           ; 0 bytes @ 0x5
   209                           
   210  0075                     putch@data:	
   211                           ; 0 bytes @ 0x5
   212                           
   213                           
   214                           ; 1 bytes @ 0x5
   215  0075                     	ds	1
   216  0076                     ??___lwmod:	
   217  0076                     set_CS@a:	
   218                           ; 0 bytes @ 0x6
   219                           
   220                           
   221                           ; 1 bytes @ 0x6
   222  0076                     	ds	1
   223                           
   224                           	psect	cstackBANK0
   225  0020                     __pcstackBANK0:	
   226  0020                     ?___lwdiv:	
   227  0020                     SPI_transfer@data:	
   228                           ; 2 bytes @ 0x0
   229                           
   230  0020                     ___lwdiv@divisor:	
   231                           ; 1 bytes @ 0x0
   232                           
   233                           
   234                           ; 2 bytes @ 0x0
   235  0020                     	ds	1
   236  0021                     SPI_transfer@ret:	
   237                           
   238                           ; 1 bytes @ 0x1
   239  0021                     	ds	1
   240  0022                     SPI_transfer@i:	
   241  0022                     ___lwdiv@dividend:	
   242                           ; 2 bytes @ 0x2
   243                           
   244                           
   245                           ; 2 bytes @ 0x2
   246  0022                     	ds	2
   247  0024                     ___lwdiv@counter:	
   248                           
   249                           ; 1 bytes @ 0x4
   250  0024                     	ds	1
   251  0025                     ___lwdiv@quotient:	
   252                           
   253                           ; 2 bytes @ 0x5
   254  0025                     	ds	2
   255  0027                     ?___lwmod:	
   256  0027                     ___lwmod@divisor:	
   257                           ; 2 bytes @ 0x7
   258                           
   259                           
   260                           ; 2 bytes @ 0x7
   261  0027                     	ds	2
   262  0029                     ___lwmod@dividend:	
   263                           
   264                           ; 2 bytes @ 0x9
   265  0029                     	ds	2
   266  002B                     ___lwmod@counter:	
   267                           
   268                           ; 1 bytes @ 0xB
   269  002B                     	ds	1
   270  002C                     ?_printf:	
   271                           
   272                           ; 2 bytes @ 0xC
   273  002C                     	ds	2
   274  002E                     ??_printf:	
   275                           
   276                           ; 0 bytes @ 0xE
   277  002E                     	ds	3
   278  0031                     printf@ap:	
   279                           
   280                           ; 1 bytes @ 0x11
   281  0031                     	ds	1
   282  0032                     printf@flag:	
   283                           
   284                           ; 1 bytes @ 0x12
   285  0032                     	ds	1
   286  0033                     printf@f:	
   287                           
   288                           ; 1 bytes @ 0x13
   289  0033                     	ds	1
   290  0034                     printf@prec:	
   291                           
   292                           ; 1 bytes @ 0x14
   293  0034                     	ds	1
   294  0035                     printf@_val:	
   295                           
   296                           ; 4 bytes @ 0x15
   297  0035                     	ds	4
   298  0039                     printf@c:	
   299                           
   300                           ; 1 bytes @ 0x19
   301  0039                     	ds	1
   302  003A                     ??_main:	
   303                           
   304                           ; 0 bytes @ 0x1A
   305  003A                     	ds	2
   306  003C                     main@data:	
   307                           
   308                           ; 1 bytes @ 0x1C
   309  003C                     	ds	1
   310                           
   311                           	psect	maintext
   312  0143                     __pmaintext:	
   313 ;;
   314 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   315 ;;
   316 ;; *************** function _main *****************
   317 ;; Defined at:
   318 ;;		line 164 in file "main.c"
   319 ;; Parameters:    Size  Location     Type
   320 ;;		None
   321 ;; Auto vars:     Size  Location     Type
   322 ;;  data            1   28[BANK0 ] unsigned char 
   323 ;; Return value:  Size  Location     Type
   324 ;;		None               void
   325 ;; Registers used:
   326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   327 ;; Tracked objects:
   328 ;;		On entry : 17F/0
   329 ;;		On exit  : 0/0
   330 ;;		Unchanged: 0/0
   331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   332 ;;      Params:         0       0       0       0
   333 ;;      Locals:         0       1       0       0
   334 ;;      Temps:          0       2       0       0
   335 ;;      Totals:         0       3       0       0
   336 ;;Total ram usage:        3 bytes
   337 ;; Hardware stack levels required when called:    3
   338 ;; This function calls:
   339 ;;		_SPI_init
   340 ;;		_SPI_transfer
   341 ;;		_UART_init
   342 ;;		_printf
   343 ;;		_set_CS
   344 ;; This function is called by:
   345 ;;		Startup code after reset
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349                           
   350                           ;psect for function _main
   351  0143                     _main:	
   352                           
   353                           ;main.c: 166: UART_init();
   354                           
   355                           ;incstack = 0
   356                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   357  0143  2202               	fcall	_UART_init
   358                           
   359                           ;main.c: 167: SPI_init();
   360  0144  2223               	fcall	_SPI_init
   361                           
   362                           ;main.c: 168: set_CS(1);
   363  0145  3001               	movlw	1
   364  0146  2213               	fcall	_set_CS
   365                           
   366                           ;main.c: 169: SPI_transfer(0x80);
   367  0147  3080               	movlw	128
   368  0148  20BE               	fcall	_SPI_transfer
   369                           
   370                           ;main.c: 170: SPI_transfer(0x04);
   371  0149  3004               	movlw	4
   372  014A  20BE               	fcall	_SPI_transfer
   373                           
   374                           ;main.c: 171: set_CS(1);
   375  014B  3001               	movlw	1
   376  014C  2213               	fcall	_set_CS
   377                           
   378                           ;main.c: 172: _delay((unsigned long)((100)*(4000000/4000.0)));
   379  014D  3082               	movlw	130
   380  014E  1283               	bcf	3,5	;RP0=0, select bank0
   381  014F  1303               	bcf	3,6	;RP1=0, select bank0
   382  0150  00BB               	movwf	??_main+1
   383  0151  30DD               	movlw	221
   384  0152  00BA               	movwf	??_main
   385  0153                     u867:	
   386  0153  0BBA               	decfsz	??_main,f
   387  0154  2953               	goto	u867
   388  0155  0BBB               	decfsz	??_main+1,f
   389  0156  2953               	goto	u867
   390  0157  2958               	nop2
   391  0158                     l1083:	
   392                           ;main.c: 174: while(1)
   393                           
   394                           
   395                           ;main.c: 175: {
   396                           ;main.c: 176: set_CS(1);
   397  0158  3001               	movlw	1
   398  0159  2213               	fcall	_set_CS
   399                           
   400                           ;main.c: 177: SPI_transfer(0x02);
   401  015A  3002               	movlw	2
   402  015B  20BE               	fcall	_SPI_transfer
   403                           
   404                           ;main.c: 178: unsigned char data = SPI_transfer(0x00);
   405  015C  3000               	movlw	0
   406  015D  20BE               	fcall	_SPI_transfer
   407  015E  1283               	bcf	3,5	;RP0=0, select bank0
   408  015F  1303               	bcf	3,6	;RP1=0, select bank0
   409  0160  00BA               	movwf	??_main
   410  0161  083A               	movf	??_main,w
   411  0162  00BC               	movwf	main@data
   412                           
   413                           ;main.c: 179: printf("Temperatura %d\n",data);
   414  0163  083C               	movf	main@data,w
   415  0164  00BA               	movwf	??_main
   416  0165  01BB               	clrf	??_main+1
   417  0166  083A               	movf	??_main,w
   418  0167  00AC               	movwf	?_printf
   419  0168  083B               	movf	??_main+1,w
   420  0169  00AD               	movwf	?_printf+1
   421  016A  300B               	movlw	(STR_1-__stringbase)& (0+255)
   422  016B  201A               	fcall	_printf
   423                           
   424                           ;main.c: 180: set_CS(0);
   425  016C  3000               	movlw	0
   426  016D  2213               	fcall	_set_CS
   427                           
   428                           ;main.c: 182: _delay((unsigned long)((100)*(4000000/4000.0)));
   429  016E  3082               	movlw	130
   430  016F  1283               	bcf	3,5	;RP0=0, select bank0
   431  0170  1303               	bcf	3,6	;RP1=0, select bank0
   432  0171  00BB               	movwf	??_main+1
   433  0172  30DD               	movlw	221
   434  0173  00BA               	movwf	??_main
   435  0174                     u877:	
   436  0174  0BBA               	decfsz	??_main,f
   437  0175  2974               	goto	u877
   438  0176  0BBB               	decfsz	??_main+1,f
   439  0177  2974               	goto	u877
   440  0178  2979               	nop2
   441  0179  2958               	goto	l1083
   442  017A                     __end_of_main:	
   443                           
   444                           	psect	text1
   445  0213                     __ptext1:	
   446 ;; *************** function _set_CS *****************
   447 ;; Defined at:
   448 ;;		line 83 in file "main.c"
   449 ;; Parameters:    Size  Location     Type
   450 ;;  a               1    wreg     unsigned char 
   451 ;; Auto vars:     Size  Location     Type
   452 ;;  a               1    6[COMMON] unsigned char 
   453 ;; Return value:  Size  Location     Type
   454 ;;		None               void
   455 ;; Registers used:
   456 ;;		wreg, status,2, status,0
   457 ;; Tracked objects:
   458 ;;		On entry : 0/0
   459 ;;		On exit  : 0/0
   460 ;;		Unchanged: 0/0
   461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   462 ;;      Params:         0       0       0       0
   463 ;;      Locals:         1       0       0       0
   464 ;;      Temps:          1       0       0       0
   465 ;;      Totals:         2       0       0       0
   466 ;;Total ram usage:        2 bytes
   467 ;; Hardware stack levels used:    1
   468 ;; Hardware stack levels required when called:    1
   469 ;; This function calls:
   470 ;;		Nothing
   471 ;; This function is called by:
   472 ;;		_main
   473 ;; This function uses a non-reentrant model
   474 ;;
   475                           
   476                           
   477                           ;psect for function _set_CS
   478  0213                     _set_CS:	
   479                           
   480                           ;incstack = 0
   481                           ; Regs used in _set_CS: [wreg+status,2+status,0]
   482                           ;set_CS@a stored from wreg
   483  0213  00F6               	movwf	set_CS@a
   484                           
   485                           ;main.c: 85: a==1 ? PORTB|=1<<4 : PORTB&=~(1<<4);
   486  0214  0876               	movf	set_CS@a,w
   487  0215  3A01               	xorlw	1
   488  0216  1D03               	skipz
   489  0217  2A1C               	goto	l869
   490  0218  1283               	bcf	3,5	;RP0=0, select bank0
   491  0219  1303               	bcf	3,6	;RP1=0, select bank0
   492  021A  1606               	bsf	6,4	;volatile
   493  021B  0008               	return
   494  021C                     l869:	
   495  021C  30EF               	movlw	239
   496  021D  00F5               	movwf	??_set_CS
   497  021E  0875               	movf	??_set_CS,w
   498  021F  1283               	bcf	3,5	;RP0=0, select bank0
   499  0220  1303               	bcf	3,6	;RP1=0, select bank0
   500  0221  0586               	andwf	6,f	;volatile
   501  0222  0008               	return
   502  0223                     __end_of_set_CS:	
   503                           
   504                           	psect	text2
   505  001A                     __ptext2:	
   506 ;; *************** function _printf *****************
   507 ;; Defined at:
   508 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\doprnt.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;  f               1    wreg     PTR const unsigned char 
   511 ;;		 -> STR_1(16), 
   512 ;; Auto vars:     Size  Location     Type
   513 ;;  f               1   19[BANK0 ] PTR const unsigned char 
   514 ;;		 -> STR_1(16), 
   515 ;;  _val            4   21[BANK0 ] struct .
   516 ;;  c               1   25[BANK0 ] char 
   517 ;;  prec            1   20[BANK0 ] char 
   518 ;;  flag            1   18[BANK0 ] unsigned char 
   519 ;;  ap              1   17[BANK0 ] PTR void [1]
   520 ;;		 -> ?_printf(2), 
   521 ;; Return value:  Size  Location     Type
   522 ;;                  2   12[BANK0 ] int 
   523 ;; Registers used:
   524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   530 ;;      Params:         0       2       0       0
   531 ;;      Locals:         0       9       0       0
   532 ;;      Temps:          0       3       0       0
   533 ;;      Totals:         0      14       0       0
   534 ;;Total ram usage:       14 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    2
   537 ;; This function calls:
   538 ;;		___lwdiv
   539 ;;		___lwmod
   540 ;;		_putch
   541 ;; This function is called by:
   542 ;;		_main
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           
   547                           ;psect for function _printf
   548  001A                     _printf:	
   549                           
   550                           ;incstack = 0
   551                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   552                           ;printf@f stored from wreg
   553  001A  1283               	bcf	3,5	;RP0=0, select bank0
   554  001B  1303               	bcf	3,6	;RP1=0, select bank0
   555  001C  00B3               	movwf	printf@f
   556                           
   557                           ;doprnt.c: 466: va_list ap;
   558                           ;doprnt.c: 499: signed char c;
   559                           ;doprnt.c: 506: signed char prec;
   560                           ;doprnt.c: 508: unsigned char flag;
   561                           ;doprnt.c: 527: union {
   562                           ;doprnt.c: 528: unsigned int _val;
   563                           ;doprnt.c: 529: struct {
   564                           ;doprnt.c: 530: const char * _cp;
   565                           ;doprnt.c: 531: unsigned _len;
   566                           ;doprnt.c: 532: } _str;
   567                           ;doprnt.c: 533: } _val;
   568                           ;doprnt.c: 542: *ap = __va_start();
   569  001D  302C               	movlw	?_printf& (0+255)
   570  001E  00AE               	movwf	??_printf
   571  001F  082E               	movf	??_printf,w
   572  0020  00B1               	movwf	printf@ap
   573  0021                     l1073:	
   574                           ;doprnt.c: 545: while(c = *f++) {
   575                           
   576  0021  3001               	movlw	1
   577  0022  1283               	bcf	3,5	;RP0=0, select bank0
   578  0023  1303               	bcf	3,6	;RP1=0, select bank0
   579  0024  07B3               	addwf	printf@f,f
   580  0025  30FF               	movlw	-1
   581  0026  0733               	addwf	printf@f,w
   582  0027  0084               	movwf	4
   583  0028  21B0               	fcall	stringdir
   584  0029  00AE               	movwf	??_printf
   585  002A  082E               	movf	??_printf,w
   586  002B  00B9               	movwf	printf@c
   587  002C  08B9               	movf	printf@c,f
   588  002D  1903               	btfsc	3,2
   589  002E  0008               	return
   590                           
   591                           ;doprnt.c: 547: if(c != '%')
   592  002F  0839               	movf	printf@c,w
   593  0030  3A25               	xorlw	37
   594  0031  1903               	skipnz
   595  0032  2836               	goto	l1033
   596                           
   597                           ;doprnt.c: 549: {
   598                           ;doprnt.c: 550: (putch(c) );
   599  0033  0839               	movf	printf@c,w
   600  0034  21EB               	fcall	_putch
   601                           
   602                           ;doprnt.c: 551: continue;
   603  0035  2821               	goto	l1073
   604  0036                     l1033:	
   605                           
   606                           ;doprnt.c: 552: }
   607                           ;doprnt.c: 557: flag = 0;
   608  0036  1283               	bcf	3,5	;RP0=0, select bank0
   609  0037  1303               	bcf	3,6	;RP1=0, select bank0
   610  0038  01B2               	clrf	printf@flag
   611                           
   612                           ;doprnt.c: 831: }
   613                           
   614                           ;doprnt.c: 822: continue;
   615                           
   616                           ;doprnt.c: 811: default:
   617                           
   618                           ;doprnt.c: 707: case 'i':
   619                           ;doprnt.c: 708: break;
   620                           
   621                           ;doprnt.c: 706: case 'd':
   622                           
   623                           ;doprnt.c: 647: goto alldone;
   624                           
   625                           ;doprnt.c: 646: case 0:
   626                           
   627                           ;doprnt.c: 644: switch(c = *f++) {
   628  0039  3001               	movlw	1
   629  003A  07B3               	addwf	printf@f,f
   630  003B  30FF               	movlw	-1
   631  003C  0733               	addwf	printf@f,w
   632  003D  0084               	movwf	4
   633  003E  21B0               	fcall	stringdir
   634  003F  00B9               	movwf	printf@c
   635                           
   636                           ; Switch size 1, requested type "space"
   637                           ; Number of cases is 3, Range of values is 0 to 105
   638                           ; switch strategies available:
   639                           ; Name         Instructions Cycles
   640                           ; simple_byte           10     6 (average)
   641                           ; direct_byte          112     6 (fixed)
   642                           ; jumptable            260     6 (fixed)
   643                           ;	Chosen strategy is simple_byte
   644  0040  3A00               	xorlw	0	; case 0
   645  0041  1903               	skipnz
   646  0042  28BD               	goto	l130
   647  0043  3A64               	xorlw	100	; case 100
   648  0044  1903               	skipnz
   649  0045  284A               	goto	l1039
   650  0046  3A0D               	xorlw	13	; case 105
   651  0047  1903               	skipnz
   652  0048  284A               	goto	l1039
   653  0049  2821               	goto	l1073
   654  004A                     l1039:	
   655                           
   656                           ;doprnt.c: 1262: {
   657                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   658  004A  0831               	movf	printf@ap,w
   659  004B  0084               	movwf	4
   660  004C  1383               	bcf	3,7	;select IRP bank0
   661  004D  0800               	movf	0,w
   662  004E  00B5               	movwf	printf@_val
   663  004F  0A84               	incf	4,f
   664  0050  0800               	movf	0,w
   665  0051  00B6               	movwf	printf@_val+1
   666  0052  3002               	movlw	2
   667  0053  00AE               	movwf	??_printf
   668  0054  082E               	movf	??_printf,w
   669  0055  07B1               	addwf	printf@ap,f
   670                           
   671                           ;doprnt.c: 1270: if((int)_val._val < 0) {
   672  0056  1FB6               	btfss	printf@_val+1,7
   673  0057  2861               	goto	l1049
   674                           
   675                           ;doprnt.c: 1271: flag |= 0x03;
   676  0058  3003               	movlw	3
   677  0059  00AE               	movwf	??_printf
   678  005A  082E               	movf	??_printf,w
   679  005B  04B2               	iorwf	printf@flag,f
   680                           
   681                           ;doprnt.c: 1272: _val._val = -_val._val;
   682  005C  09B5               	comf	printf@_val,f
   683  005D  09B6               	comf	printf@_val+1,f
   684  005E  0AB5               	incf	printf@_val,f
   685  005F  1903               	skipnz
   686  0060  0AB6               	incf	printf@_val+1,f
   687  0061                     l1049:	
   688                           
   689                           ;doprnt.c: 1273: }
   690                           ;doprnt.c: 1275: }
   691                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   692  0061  01B9               	clrf	printf@c
   693  0062  0AB9               	incf	printf@c,f
   694  0063  0839               	movf	printf@c,w
   695  0064  3A05               	xorlw	5
   696  0065  1903               	btfsc	3,2
   697  0066  2880               	goto	l1061
   698  0067                     l1053:	
   699                           
   700                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
   701  0067  0839               	movf	printf@c,w
   702  0068  00AE               	movwf	??_printf
   703  0069  072E               	addwf	??_printf,w
   704  006A  3E01               	addlw	low (_dpowers-__stringbase)
   705  006B  0084               	movwf	4
   706  006C  21B0               	fcall	stringdir
   707  006D  00AF               	movwf	??_printf+1
   708  006E  21B0               	fcall	stringdir
   709  006F  00B0               	movwf	??_printf+2
   710  0070  0830               	movf	??_printf+2,w
   711  0071  0236               	subwf	printf@_val+1,w
   712  0072  1D03               	skipz
   713  0073  2876               	goto	u815
   714  0074  082F               	movf	??_printf+1,w
   715  0075  0235               	subwf	printf@_val,w
   716  0076                     u815:	
   717  0076  1C03               	btfss	3,0
   718  0077  2880               	goto	l1061
   719                           
   720                           ;doprnt.c: 1316: break;
   721  0078  3001               	movlw	1
   722  0079  00AE               	movwf	??_printf
   723  007A  082E               	movf	??_printf,w
   724  007B  07B9               	addwf	printf@c,f
   725  007C  0839               	movf	printf@c,w
   726  007D  3A05               	xorlw	5
   727  007E  1D03               	skipz
   728  007F  2867               	goto	l1053
   729  0080                     l1061:	
   730                           
   731                           ;doprnt.c: 1431: {
   732                           ;doprnt.c: 1447: if(flag & 0x03)
   733  0080  0832               	movf	printf@flag,w
   734  0081  3903               	andlw	3
   735  0082  1903               	btfsc	3,2
   736  0083  2886               	goto	l1065
   737                           
   738                           ;doprnt.c: 1448: (putch('-') );
   739  0084  302D               	movlw	45
   740  0085  21EB               	fcall	_putch
   741  0086                     l1065:	
   742                           
   743                           ;doprnt.c: 1478: }
   744                           ;doprnt.c: 1481: prec = c;
   745  0086  1283               	bcf	3,5	;RP0=0, select bank0
   746  0087  1303               	bcf	3,6	;RP1=0, select bank0
   747  0088  0839               	movf	printf@c,w
   748  0089  00AE               	movwf	??_printf
   749  008A  082E               	movf	??_printf,w
   750  008B  00B4               	movwf	printf@prec
   751  008C                     l1071:	
   752                           ;doprnt.c: 1483: while(prec--) {
   753                           
   754  008C  30FF               	movlw	-1
   755  008D  1283               	bcf	3,5	;RP0=0, select bank0
   756  008E  1303               	bcf	3,6	;RP1=0, select bank0
   757  008F  00AE               	movwf	??_printf
   758  0090  082E               	movf	??_printf,w
   759  0091  07B4               	addwf	printf@prec,f
   760  0092  0834               	movf	printf@prec,w
   761  0093  3AFF               	xorlw	-1
   762  0094  1903               	btfsc	3,2
   763  0095  2821               	goto	l1073
   764                           
   765                           ;doprnt.c: 1487: {
   766                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
   767  0096  300A               	movlw	10
   768  0097  00A7               	movwf	___lwmod@divisor
   769  0098  3000               	movlw	0
   770  0099  00A8               	movwf	___lwmod@divisor+1
   771  009A  0834               	movf	printf@prec,w
   772  009B  00AE               	movwf	??_printf
   773  009C  072E               	addwf	??_printf,w
   774  009D  3E01               	addlw	low (_dpowers-__stringbase)
   775  009E  0084               	movwf	4
   776  009F  21B0               	fcall	stringdir
   777  00A0  00A0               	movwf	___lwdiv@divisor
   778  00A1  21B0               	fcall	stringdir
   779  00A2  00A1               	movwf	___lwdiv@divisor+1
   780  00A3  0836               	movf	printf@_val+1,w
   781  00A4  01A3               	clrf	___lwdiv@dividend+1
   782  00A5  07A3               	addwf	___lwdiv@dividend+1,f
   783  00A6  0835               	movf	printf@_val,w
   784  00A7  01A2               	clrf	___lwdiv@dividend
   785  00A8  07A2               	addwf	___lwdiv@dividend,f
   786  00A9  2103               	fcall	___lwdiv
   787  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   788  00AB  1303               	bcf	3,6	;RP1=0, select bank0
   789  00AC  0821               	movf	?___lwdiv+1,w
   790  00AD  01AA               	clrf	___lwmod@dividend+1
   791  00AE  07AA               	addwf	___lwmod@dividend+1,f
   792  00AF  0820               	movf	?___lwdiv,w
   793  00B0  01A9               	clrf	___lwmod@dividend
   794  00B1  07A9               	addwf	___lwmod@dividend,f
   795  00B2  217A               	fcall	___lwmod
   796  00B3  1283               	bcf	3,5	;RP0=0, select bank0
   797  00B4  1303               	bcf	3,6	;RP1=0, select bank0
   798  00B5  0827               	movf	?___lwmod,w
   799  00B6  3E30               	addlw	48
   800  00B7  00AF               	movwf	??_printf+1
   801  00B8  082F               	movf	??_printf+1,w
   802  00B9  00B9               	movwf	printf@c
   803                           
   804                           ;doprnt.c: 1532: }
   805                           ;doprnt.c: 1533: (putch(c) );
   806  00BA  0839               	movf	printf@c,w
   807  00BB  21EB               	fcall	_putch
   808  00BC  288C               	goto	l1071
   809  00BD                     l130:	
   810                           ;doprnt.c: 1549: return 0;
   811                           ;	Return value of _printf is never used
   812                           
   813                           ;doprnt.c: 1534: }
   814                           ;doprnt.c: 1542: }
   815                           ;doprnt.c: 1544: alldone:
   816                           
   817  00BD  0008               	return
   818  00BE                     __end_of_printf:	
   819                           
   820                           	psect	text3
   821  01EB                     __ptext3:	
   822 ;; *************** function _putch *****************
   823 ;; Defined at:
   824 ;;		line 9 in file "main.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;  data            1    wreg     unsigned char 
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  data            1    5[COMMON] unsigned char 
   829 ;; Return value:  Size  Location     Type
   830 ;;		None               void
   831 ;; Registers used:
   832 ;;		wreg
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   838 ;;      Params:         0       0       0       0
   839 ;;      Locals:         1       0       0       0
   840 ;;      Temps:          0       0       0       0
   841 ;;      Totals:         1       0       0       0
   842 ;;Total ram usage:        1 bytes
   843 ;; Hardware stack levels used:    1
   844 ;; Hardware stack levels required when called:    1
   845 ;; This function calls:
   846 ;;		Nothing
   847 ;; This function is called by:
   848 ;;		_printf
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           
   853                           ;psect for function _putch
   854  01EB                     _putch:	
   855                           
   856                           ;incstack = 0
   857                           ; Regs used in _putch: [wreg]
   858                           ;putch@data stored from wreg
   859  01EB  00F5               	movwf	putch@data
   860                           
   861                           ;main.c: 11: if(data == 10)
   862  01EC  0875               	movf	putch@data,w
   863  01ED  3A0A               	xorlw	10
   864  01EE  1D03               	skipz
   865  01EF  29FB               	goto	l39
   866  01F0                     l32:	
   867                           ;main.c: 14: continue;
   868                           
   869                           ;main.c: 12: {
   870                           ;main.c: 13: while(!TXIF)
   871                           
   872  01F0  1283               	bcf	3,5	;RP0=0, select bank0
   873  01F1  1303               	bcf	3,6	;RP1=0, select bank0
   874  01F2  1E0C               	btfss	12,4	;volatile
   875  01F3  29F0               	goto	l32
   876                           
   877                           ;main.c: 15: TXREG = 10;
   878  01F4  300A               	movlw	10
   879  01F5  0099               	movwf	25	;volatile
   880  01F6                     l35:	
   881                           ;main.c: 17: continue;
   882                           
   883                           ;main.c: 16: while(!TXIF)
   884                           
   885  01F6  1E0C               	btfss	12,4	;volatile
   886  01F7  29F6               	goto	l35
   887                           
   888                           ;main.c: 18: TXREG = 13;
   889  01F8  300D               	movlw	13
   890  01F9  0099               	movwf	25	;volatile
   891                           
   892                           ;main.c: 19: return;
   893  01FA  0008               	return
   894  01FB                     l39:	
   895                           ;main.c: 22: continue;
   896                           
   897                           ;main.c: 20: }
   898                           ;main.c: 21: while(!TXIF)
   899                           
   900  01FB  1283               	bcf	3,5	;RP0=0, select bank0
   901  01FC  1303               	bcf	3,6	;RP1=0, select bank0
   902  01FD  1E0C               	btfss	12,4	;volatile
   903  01FE  29FB               	goto	l39
   904                           
   905                           ;main.c: 23: TXREG = data;
   906  01FF  0875               	movf	putch@data,w
   907  0200  0099               	movwf	25	;volatile
   908  0201  0008               	return
   909  0202                     __end_of_putch:	
   910                           
   911                           	psect	text4
   912  017A                     __ptext4:	
   913 ;; *************** function ___lwmod *****************
   914 ;; Defined at:
   915 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwmod.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;  divisor         2    7[BANK0 ] unsigned int 
   918 ;;  dividend        2    9[BANK0 ] unsigned int 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  counter         1   11[BANK0 ] unsigned char 
   921 ;; Return value:  Size  Location     Type
   922 ;;                  2    7[BANK0 ] unsigned int 
   923 ;; Registers used:
   924 ;;		wreg, status,2, status,0
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   930 ;;      Params:         0       4       0       0
   931 ;;      Locals:         0       1       0       0
   932 ;;      Temps:          1       0       0       0
   933 ;;      Totals:         1       5       0       0
   934 ;;Total ram usage:        6 bytes
   935 ;; Hardware stack levels used:    1
   936 ;; Hardware stack levels required when called:    1
   937 ;; This function calls:
   938 ;;		Nothing
   939 ;; This function is called by:
   940 ;;		_printf
   941 ;; This function uses a non-reentrant model
   942 ;;
   943                           
   944                           
   945                           ;psect for function ___lwmod
   946  017A                     ___lwmod:	
   947                           
   948                           ;incstack = 0
   949                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   950  017A  1283               	bcf	3,5	;RP0=0, select bank0
   951  017B  1303               	bcf	3,6	;RP1=0, select bank0
   952  017C  0828               	movf	___lwmod@divisor+1,w
   953  017D  0427               	iorwf	___lwmod@divisor,w
   954  017E  1903               	skipnz
   955  017F  29A9               	goto	l1023
   956  0180  01AB               	clrf	___lwmod@counter
   957  0181  0AAB               	incf	___lwmod@counter,f
   958  0182                     l1013:	
   959  0182  1BA8               	btfsc	___lwmod@divisor+1,7
   960  0183  2990               	goto	l1015
   961  0184  3001               	movlw	1
   962  0185                     u735:	
   963  0185  1003               	clrc
   964  0186  0DA7               	rlf	___lwmod@divisor,f
   965  0187  0DA8               	rlf	___lwmod@divisor+1,f
   966  0188  3EFF               	addlw	-1
   967  0189  1D03               	skipz
   968  018A  2985               	goto	u735
   969  018B  3001               	movlw	1
   970  018C  00F6               	movwf	??___lwmod
   971  018D  0876               	movf	??___lwmod,w
   972  018E  07AB               	addwf	___lwmod@counter,f
   973  018F  2982               	goto	l1013
   974  0190                     l1015:	
   975  0190  0828               	movf	___lwmod@divisor+1,w
   976  0191  022A               	subwf	___lwmod@dividend+1,w
   977  0192  1D03               	skipz
   978  0193  2996               	goto	u755
   979  0194  0827               	movf	___lwmod@divisor,w
   980  0195  0229               	subwf	___lwmod@dividend,w
   981  0196                     u755:	
   982  0196  1C03               	skipc
   983  0197  299E               	goto	l1019
   984  0198  0827               	movf	___lwmod@divisor,w
   985  0199  02A9               	subwf	___lwmod@dividend,f
   986  019A  0828               	movf	___lwmod@divisor+1,w
   987  019B  1C03               	skipc
   988  019C  03AA               	decf	___lwmod@dividend+1,f
   989  019D  02AA               	subwf	___lwmod@dividend+1,f
   990  019E                     l1019:	
   991  019E  3001               	movlw	1
   992  019F                     u765:	
   993  019F  1003               	clrc
   994  01A0  0CA8               	rrf	___lwmod@divisor+1,f
   995  01A1  0CA7               	rrf	___lwmod@divisor,f
   996  01A2  3EFF               	addlw	-1
   997  01A3  1D03               	skipz
   998  01A4  299F               	goto	u765
   999  01A5  3001               	movlw	1
  1000  01A6  02AB               	subwf	___lwmod@counter,f
  1001  01A7  1D03               	btfss	3,2
  1002  01A8  2990               	goto	l1015
  1003  01A9                     l1023:	
  1004  01A9  082A               	movf	___lwmod@dividend+1,w
  1005  01AA  01A8               	clrf	?___lwmod+1
  1006  01AB  07A8               	addwf	?___lwmod+1,f
  1007  01AC  0829               	movf	___lwmod@dividend,w
  1008  01AD  01A7               	clrf	?___lwmod
  1009  01AE  07A7               	addwf	?___lwmod,f
  1010  01AF  0008               	return
  1011  01B0                     __end_of___lwmod:	
  1012                           
  1013                           	psect	text5
  1014  0103                     __ptext5:	
  1015 ;; *************** function ___lwdiv *****************
  1016 ;; Defined at:
  1017 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;  divisor         2    0[BANK0 ] unsigned int 
  1020 ;;  dividend        2    2[BANK0 ] unsigned int 
  1021 ;; Auto vars:     Size  Location     Type
  1022 ;;  quotient        2    5[BANK0 ] unsigned int 
  1023 ;;  counter         1    4[BANK0 ] unsigned char 
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  2    0[BANK0 ] unsigned int 
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, status,0
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1033 ;;      Params:         0       4       0       0
  1034 ;;      Locals:         0       3       0       0
  1035 ;;      Temps:          1       0       0       0
  1036 ;;      Totals:         1       7       0       0
  1037 ;;Total ram usage:        8 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; Hardware stack levels required when called:    1
  1040 ;; This function calls:
  1041 ;;		Nothing
  1042 ;; This function is called by:
  1043 ;;		_printf
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           
  1048                           ;psect for function ___lwdiv
  1049  0103                     ___lwdiv:	
  1050                           
  1051                           ;incstack = 0
  1052                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1053  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1055  0105  01A5               	clrf	___lwdiv@quotient
  1056  0106  01A6               	clrf	___lwdiv@quotient+1
  1057  0107  0821               	movf	___lwdiv@divisor+1,w
  1058  0108  0420               	iorwf	___lwdiv@divisor,w
  1059  0109  1903               	skipnz
  1060  010A  293C               	goto	l1001
  1061  010B  01A4               	clrf	___lwdiv@counter
  1062  010C  0AA4               	incf	___lwdiv@counter,f
  1063  010D                     l989:	
  1064  010D  1BA1               	btfsc	___lwdiv@divisor+1,7
  1065  010E  291B               	goto	l991
  1066  010F  3001               	movlw	1
  1067  0110                     u665:	
  1068  0110  1003               	clrc
  1069  0111  0DA0               	rlf	___lwdiv@divisor,f
  1070  0112  0DA1               	rlf	___lwdiv@divisor+1,f
  1071  0113  3EFF               	addlw	-1
  1072  0114  1D03               	skipz
  1073  0115  2910               	goto	u665
  1074  0116  3001               	movlw	1
  1075  0117  00F5               	movwf	??___lwdiv
  1076  0118  0875               	movf	??___lwdiv,w
  1077  0119  07A4               	addwf	___lwdiv@counter,f
  1078  011A  290D               	goto	l989
  1079  011B                     l991:	
  1080  011B  3001               	movlw	1
  1081  011C                     u685:	
  1082  011C  1003               	clrc
  1083  011D  0DA5               	rlf	___lwdiv@quotient,f
  1084  011E  0DA6               	rlf	___lwdiv@quotient+1,f
  1085  011F  3EFF               	addlw	-1
  1086  0120  1D03               	skipz
  1087  0121  291C               	goto	u685
  1088  0122  0821               	movf	___lwdiv@divisor+1,w
  1089  0123  0223               	subwf	___lwdiv@dividend+1,w
  1090  0124  1D03               	skipz
  1091  0125  2928               	goto	u695
  1092  0126  0820               	movf	___lwdiv@divisor,w
  1093  0127  0222               	subwf	___lwdiv@dividend,w
  1094  0128                     u695:	
  1095  0128  1C03               	skipc
  1096  0129  2931               	goto	l997
  1097  012A  0820               	movf	___lwdiv@divisor,w
  1098  012B  02A2               	subwf	___lwdiv@dividend,f
  1099  012C  0821               	movf	___lwdiv@divisor+1,w
  1100  012D  1C03               	skipc
  1101  012E  03A3               	decf	___lwdiv@dividend+1,f
  1102  012F  02A3               	subwf	___lwdiv@dividend+1,f
  1103  0130  1425               	bsf	___lwdiv@quotient,0
  1104  0131                     l997:	
  1105  0131  3001               	movlw	1
  1106  0132                     u705:	
  1107  0132  1003               	clrc
  1108  0133  0CA1               	rrf	___lwdiv@divisor+1,f
  1109  0134  0CA0               	rrf	___lwdiv@divisor,f
  1110  0135  3EFF               	addlw	-1
  1111  0136  1D03               	skipz
  1112  0137  2932               	goto	u705
  1113  0138  3001               	movlw	1
  1114  0139  02A4               	subwf	___lwdiv@counter,f
  1115  013A  1D03               	btfss	3,2
  1116  013B  291B               	goto	l991
  1117  013C                     l1001:	
  1118  013C  0826               	movf	___lwdiv@quotient+1,w
  1119  013D  01A1               	clrf	?___lwdiv+1
  1120  013E  07A1               	addwf	?___lwdiv+1,f
  1121  013F  0825               	movf	___lwdiv@quotient,w
  1122  0140  01A0               	clrf	?___lwdiv
  1123  0141  07A0               	addwf	?___lwdiv,f
  1124  0142  0008               	return
  1125  0143                     __end_of___lwdiv:	
  1126                           
  1127                           	psect	text6
  1128  0202                     __ptext6:	
  1129 ;; *************** function _UART_init *****************
  1130 ;; Defined at:
  1131 ;;		line 25 in file "main.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;		None
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;		None
  1136 ;; Return value:  Size  Location     Type
  1137 ;;		None               void
  1138 ;; Registers used:
  1139 ;;		wreg
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1145 ;;      Params:         0       0       0       0
  1146 ;;      Locals:         0       0       0       0
  1147 ;;      Temps:          0       0       0       0
  1148 ;;      Totals:         0       0       0       0
  1149 ;;Total ram usage:        0 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; Hardware stack levels required when called:    1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_main
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           
  1160                           ;psect for function _UART_init
  1161  0202                     _UART_init:	
  1162                           
  1163                           ;main.c: 28: TRISBbits.TRISB1 = 1;
  1164                           
  1165                           ;incstack = 0
  1166                           ; Regs used in _UART_init: [wreg]
  1167  0202  1683               	bsf	3,5	;RP0=1, select bank1
  1168  0203  1303               	bcf	3,6	;RP1=0, select bank1
  1169  0204  1486               	bsf	6,1	;volatile
  1170                           
  1171                           ;main.c: 29: TRISBbits.TRISB2 = 1;
  1172  0205  1506               	bsf	6,2	;volatile
  1173                           
  1174                           ;main.c: 31: TXSTAbits.CSRC = 1;
  1175  0206  1798               	bsf	24,7	;volatile
  1176                           
  1177                           ;main.c: 32: TXSTAbits.TXEN = 1;
  1178  0207  1698               	bsf	24,5	;volatile
  1179                           
  1180                           ;main.c: 33: TXSTAbits.SYNC = 0;
  1181  0208  1218               	bcf	24,4	;volatile
  1182                           
  1183                           ;main.c: 36: RCSTAbits.SPEN = 1;
  1184  0209  1283               	bcf	3,5	;RP0=0, select bank0
  1185  020A  1303               	bcf	3,6	;RP1=0, select bank0
  1186  020B  1798               	bsf	24,7	;volatile
  1187                           
  1188                           ;main.c: 37: RCSTAbits.CREN = 1;
  1189  020C  1618               	bsf	24,4	;volatile
  1190                           
  1191                           ;main.c: 41: TXSTAbits.BRGH = 0;
  1192  020D  1683               	bsf	3,5	;RP0=1, select bank1
  1193  020E  1303               	bcf	3,6	;RP1=0, select bank1
  1194  020F  1118               	bcf	24,2	;volatile
  1195                           
  1196                           ;main.c: 42: SPBRG = 25;
  1197  0210  3019               	movlw	25
  1198  0211  0099               	movwf	25	;volatile
  1199  0212  0008               	return
  1200  0213                     __end_of_UART_init:	
  1201                           
  1202                           	psect	text7
  1203  00BE                     __ptext7:	
  1204 ;; *************** function _SPI_transfer *****************
  1205 ;; Defined at:
  1206 ;;		line 123 in file "main.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  data            1    wreg     unsigned char 
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;  data            1    0[BANK0 ] unsigned char 
  1211 ;;  i               2    2[BANK0 ] int 
  1212 ;;  ret             1    1[BANK0 ] unsigned char 
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  1    wreg      unsigned char 
  1215 ;; Registers used:
  1216 ;;		wreg, status,2, status,0, btemp+1
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1222 ;;      Params:         0       0       0       0
  1223 ;;      Locals:         0       4       0       0
  1224 ;;      Temps:          1       0       0       0
  1225 ;;      Totals:         1       4       0       0
  1226 ;;Total ram usage:        5 bytes
  1227 ;; Hardware stack levels used:    1
  1228 ;; Hardware stack levels required when called:    1
  1229 ;; This function calls:
  1230 ;;		Nothing
  1231 ;; This function is called by:
  1232 ;;		_main
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           
  1237                           ;psect for function _SPI_transfer
  1238  00BE                     _SPI_transfer:	
  1239                           
  1240                           ;incstack = 0
  1241                           ; Regs used in _SPI_transfer: [wreg+status,2+status,0+btemp+1]
  1242                           ;SPI_transfer@data stored from wreg
  1243  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1244  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1245  00C0  00A0               	movwf	SPI_transfer@data
  1246                           
  1247                           ;main.c: 125: unsigned char ret;
  1248                           ;main.c: 126: for(int i=0;i<8;i++)
  1249  00C1  01A2               	clrf	SPI_transfer@i
  1250  00C2  01A3               	clrf	SPI_transfer@i+1
  1251  00C3  0823               	movf	SPI_transfer@i+1,w
  1252  00C4  3A80               	xorlw	128
  1253  00C5  00FF               	movwf	127
  1254  00C6  3080               	movlw	128
  1255  00C7  027F               	subwf	127,w
  1256  00C8  1D03               	skipz
  1257  00C9  28CC               	goto	u535
  1258  00CA  3008               	movlw	8
  1259  00CB  0222               	subwf	SPI_transfer@i,w
  1260  00CC                     u535:	
  1261  00CC  1803               	btfsc	3,0
  1262  00CD  28FF               	goto	l907
  1263  00CE                     l89:	
  1264                           
  1265                           ;main.c: 127: {
  1266                           ;main.c: 129: if(PORTB & (1<<5))ret|=1;
  1267  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  1268  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  1269  00D0  1A86               	btfsc	6,5	;volatile
  1270  00D1  1421               	bsf	SPI_transfer@ret,0
  1271                           
  1272                           ;main.c: 130: PORTB &= ~(1<<7);
  1273  00D2  307F               	movlw	127
  1274  00D3  00F5               	movwf	??_SPI_transfer
  1275  00D4  0875               	movf	??_SPI_transfer,w
  1276  00D5  0586               	andwf	6,f	;volatile
  1277                           
  1278                           ;main.c: 132: if(data & 0x80)PORTB |= (1<<6);
  1279  00D6  1FA0               	btfss	SPI_transfer@data,7
  1280  00D7  28DA               	goto	l891
  1281  00D8  1706               	bsf	6,6	;volatile
  1282  00D9  28DE               	goto	l893
  1283  00DA                     l891:	
  1284                           
  1285                           ;main.c: 133: else PORTB &= ~(1<<6);
  1286  00DA  30BF               	movlw	191
  1287  00DB  00F5               	movwf	??_SPI_transfer
  1288  00DC  0875               	movf	??_SPI_transfer,w
  1289  00DD  0586               	andwf	6,f	;volatile
  1290  00DE                     l893:	
  1291                           
  1292                           ;main.c: 134: _delay((unsigned long)((25)*(4000000/4000000.0)));
  1293  00DE  3008               	movlw	8
  1294  00DF  00F5               	movwf	??_SPI_transfer
  1295  00E0                     u887:	
  1296  00E0  0BF5               	decfsz	??_SPI_transfer,f
  1297  00E1  28E0               	goto	u887
  1298                           
  1299                           ;main.c: 135: PORTB |= (1<<7);
  1300  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1301  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1302  00E4  1786               	bsf	6,7	;volatile
  1303                           
  1304                           ;main.c: 137: ret<<=1;
  1305  00E5  1003               	clrc
  1306  00E6  0DA1               	rlf	SPI_transfer@ret,f
  1307                           
  1308                           ;main.c: 138: data<<=1;
  1309  00E7  1003               	clrc
  1310  00E8  0DA0               	rlf	SPI_transfer@data,f
  1311                           
  1312                           ;main.c: 139: _delay((unsigned long)((5)*(4000000/4000000.0)));
  1313  00E9  28EA               	nop2	;2 cycle nop
  1314  00EA  28EB               	nop2	;2 cycle nop
  1315  00EB  0000               	nop
  1316  00EC  3001               	movlw	1
  1317  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1318  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  1319  00EF  07A2               	addwf	SPI_transfer@i,f
  1320  00F0  1803               	skipnc
  1321  00F1  0AA3               	incf	SPI_transfer@i+1,f
  1322  00F2  3000               	movlw	0
  1323  00F3  07A3               	addwf	SPI_transfer@i+1,f
  1324  00F4  0823               	movf	SPI_transfer@i+1,w
  1325  00F5  3A80               	xorlw	128
  1326  00F6  00FF               	movwf	127
  1327  00F7  3080               	movlw	128
  1328  00F8  027F               	subwf	127,w
  1329  00F9  1D03               	skipz
  1330  00FA  28FD               	goto	u565
  1331  00FB  3008               	movlw	8
  1332  00FC  0222               	subwf	SPI_transfer@i,w
  1333  00FD                     u565:	
  1334  00FD  1C03               	skipc
  1335  00FE  28CE               	goto	l89
  1336  00FF                     l907:	
  1337                           
  1338                           ;main.c: 140: }
  1339                           ;main.c: 141: return ret;
  1340  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1342  0101  0821               	movf	SPI_transfer@ret,w
  1343  0102  0008               	return
  1344  0103                     __end_of_SPI_transfer:	
  1345                           
  1346                           	psect	text8
  1347  0223                     __ptext8:	
  1348 ;; *************** function _SPI_init *****************
  1349 ;; Defined at:
  1350 ;;		line 97 in file "main.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;		None
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;		None
  1355 ;; Return value:  Size  Location     Type
  1356 ;;		None               void
  1357 ;; Registers used:
  1358 ;;		wreg, status,2, status,0
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1364 ;;      Params:         0       0       0       0
  1365 ;;      Locals:         0       0       0       0
  1366 ;;      Temps:          1       0       0       0
  1367 ;;      Totals:         1       0       0       0
  1368 ;;Total ram usage:        1 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    1
  1371 ;; This function calls:
  1372 ;;		Nothing
  1373 ;; This function is called by:
  1374 ;;		_main
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           
  1379                           ;psect for function _SPI_init
  1380  0223                     _SPI_init:	
  1381                           
  1382                           ;main.c: 99: TRISB &= ~(1<<7 | 1<<6 | 1<<4);
  1383                           
  1384                           ;incstack = 0
  1385                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  1386  0223  302F               	movlw	47
  1387  0224  00F5               	movwf	??_SPI_init
  1388  0225  0875               	movf	??_SPI_init,w
  1389  0226  1683               	bsf	3,5	;RP0=1, select bank1
  1390  0227  1303               	bcf	3,6	;RP1=0, select bank1
  1391  0228  0586               	andwf	6,f	;volatile
  1392                           
  1393                           ;main.c: 100: TRISB |= (1<<5);
  1394  0229  1686               	bsf	6,5	;volatile
  1395                           
  1396                           ;main.c: 101: PORTB |= (1<<7);
  1397  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1398  022B  1303               	bcf	3,6	;RP1=0, select bank0
  1399  022C  1786               	bsf	6,7	;volatile
  1400  022D  0008               	return
  1401  022E                     __end_of_SPI_init:	
  1402                           
  1403                           	psect	text9
  1404  01D0                     __ptext9:	
  1405 ;; *************** function __ISR *****************
  1406 ;; Defined at:
  1407 ;;		line 61 in file "main.c"
  1408 ;; Parameters:    Size  Location     Type
  1409 ;;		None
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;		None
  1412 ;; Return value:  Size  Location     Type
  1413 ;;		None               void
  1414 ;; Registers used:
  1415 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1421 ;;      Params:         0       0       0       0
  1422 ;;      Locals:         0       0       0       0
  1423 ;;      Temps:          5       0       0       0
  1424 ;;      Totals:         5       0       0       0
  1425 ;;Total ram usage:        5 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; This function calls:
  1428 ;;		Nothing
  1429 ;; This function is called by:
  1430 ;;		Interrupt level 1
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           
  1435                           ;psect for function __ISR
  1436  01D0                     __ISR:	
  1437                           
  1438                           ;main.c: 63: if(RCIF)
  1439  01D0  1E8C               	btfss	12,5	;volatile
  1440  01D1  29E0               	goto	i1l57
  1441                           
  1442                           ;main.c: 64: {
  1443                           ;main.c: 65: buffer[count] = RCREG;
  1444  01D2  081A               	movf	26,w	;volatile
  1445  01D3  00F0               	movwf	??__ISR
  1446  01D4  0877               	movf	_count,w
  1447  01D5  3E3D               	addlw	_buffer& (0+255)
  1448  01D6  0084               	movwf	4
  1449  01D7  0870               	movf	??__ISR,w
  1450  01D8  1383               	bcf	3,7	;select IRP bank0
  1451  01D9  0080               	movwf	0
  1452                           
  1453                           ;main.c: 66: count++;
  1454  01DA  3001               	movlw	1
  1455  01DB  07F7               	addwf	_count,f
  1456  01DC  1803               	skipnc
  1457  01DD  0AF8               	incf	_count+1,f
  1458  01DE  3000               	movlw	0
  1459  01DF  07F8               	addwf	_count+1,f
  1460  01E0                     i1l57:	
  1461  01E0  0874               	movf	??__ISR+4,w
  1462  01E1  00FF               	movwf	127
  1463  01E2  0873               	movf	??__ISR+3,w
  1464  01E3  008A               	movwf	10
  1465  01E4  0872               	movf	??__ISR+2,w
  1466  01E5  0084               	movwf	4
  1467  01E6  0E71               	swapf	(??__ISR+1)^(0+-128),w
  1468  01E7  0083               	movwf	3
  1469  01E8  0EFE               	swapf	126,f
  1470  01E9  0E7E               	swapf	126,w
  1471  01EA  0009               	retfie
  1472  01EB                     __end_of__ISR:	
  1473  007E                     btemp	set	126	;btemp
  1474  007E                     wtemp	set	126
  1475  007E                     wtemp0	set	126
  1476  0080                     wtemp1	set	128
  1477  0082                     wtemp2	set	130
  1478  0084                     wtemp3	set	132
  1479  0086                     wtemp4	set	134
  1480  0088                     wtemp5	set	136
  1481  007F                     wtemp6	set	127
  1482  007E                     ttemp	set	126
  1483  007E                     ttemp0	set	126
  1484  0081                     ttemp1	set	129
  1485  0084                     ttemp2	set	132
  1486  0087                     ttemp3	set	135
  1487  007F                     ttemp4	set	127
  1488  007E                     ltemp	set	126
  1489  007E                     ltemp0	set	126
  1490  0082                     ltemp1	set	130
  1491  0086                     ltemp2	set	134
  1492  0080                     ltemp3	set	128
  1493                           
  1494                           	psect	intentry
  1495  0004                     __pintentry:	
  1496                           ;incstack = 0
  1497                           ; Regs used in __ISR: [wreg-fsr0h+status,2+status,0]
  1498                           
  1499  0004                     interrupt_function:	
  1500  007E                     saved_w	set	btemp
  1501  0004  00FE               	movwf	btemp
  1502  0005  0E03               	swapf	3,w
  1503  0006  00F1               	movwf	??__ISR+1
  1504  0007  0804               	movf	4,w
  1505  0008  00F2               	movwf	??__ISR+2
  1506  0009  080A               	movf	10,w
  1507  000A  00F3               	movwf	??__ISR+3
  1508  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1509  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1510  000D  087F               	movf	btemp+1,w
  1511  000E  00F4               	movwf	??__ISR+4
  1512  000F  29D0               	ljmp	__ISR


Data Sizes:
    Strings     16
    Constant    10
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     29      45
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S182$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    _main->_set_CS
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under __ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under __ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under __ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under __ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1519
                                             26 BANK0      3     3      0
                           _SPI_init
                       _SPI_transfer
                          _UART_init
                             _printf
                             _set_CS
 ---------------------------------------------------------------------------------
 (1) _set_CS                                               2     2      0      22
                                              5 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              14    12      2    1370
                                             12 BANK0     14    12      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                              6 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     371
                                              5 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_transfer                                         5     5      0      93
                                              5 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             1     1      0       0
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) __ISR                                                 5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
   _SPI_transfer
   _UART_init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
   _set_CS

 __ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     1D      2D       3       56.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      36       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      36      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Mar 27 08:19:06 2015

                      pc 0002                       l32 01F0                       l35 01F6  
                     l39 01FB                       l89 00CE                       fsr 0004  
                    l130 00BD                      l907 00FF                      l891 00DA  
                    l893 00DE                      l869 021C                      l991 011B  
                    l997 0131                      l989 010D                      u535 00CC  
                    u705 0132                      u565 00FD                      u735 0185  
                    u815 0076                      u665 0110                      u755 0196  
                    u685 011C                      u765 019F                      u695 0128  
                    u867 0153                      u877 0174                      u887 00E0  
                    fsr0 0004                      indf 0000                     l1001 013C  
                   l1013 0182                     l1015 0190                     l1023 01A9  
                   l1033 0036                     l1019 019E                     l1061 0080  
                   l1053 0067    __size_of_SPI_transfer 0045                     l1071 008C  
                   l1039 004A                     l1065 0086                     l1049 0061  
                   l1073 0021                     l1083 0158                     STR_1 01C0  
                   _RCIF 0065                     i1l57 01E0                     _TXIF 0064  
                   __ISR 01D0                     _main 0143                     btemp 007E  
                   ltemp 007E                     start 0010                     ttemp 007E  
                   wtemp 007E                    ?__ISR 0070                    ?_main 0070  
        __end_of___lwdiv 0143          __end_of___lwmod 01B0         SPI_transfer@data 0020  
                  _RCREG 001A             _SPI_transfer 00BE                    _SPBRG 0099  
                  _PORTB 0006                    _TRISB 0086                    _TXREG 0019  
     __size_of_UART_init 0011          __end_of_dpowers 01C0                    _count 0077  
                  _putch 01EB                    pclath 000A                    ltemp0 007E  
       __end_of_SPI_init 022E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F             __end_of__ISR 01EB  
        __initialization 0011             __end_of_main 017A                   ??__ISR 0070  
                 ??_main 003A                   ?_putch 0070        __end_of_UART_init 0213  
              ??___lwdiv 0075                ??___lwmod 0076                   _buffer 003D  
                 _set_CS 0213                   _printf 001A                   saved_w 007E  
__end_of__initialization 0018           __pcstackCOMMON 0070            __end_of_putch 0202  
              ?_SPI_init 0070                  ??_putch 0075               __pbssBANK0 003D  
             __pmaintext 0143               __pintentry 0004                  ?_set_CS 0070  
                ?_printf 002C               ??_SPI_init 0075               __stringtab 01B0  
                ___lwdiv 0103                  ___lwmod 017A          __size_of_set_CS 0010  
                __ptext1 0213                  __ptext2 001A                  __ptext3 01EB  
                __ptext4 017A                  __ptext5 0103                  __ptext6 0202  
                __ptext7 00BE                  __ptext8 0223                  __ptext9 01D0  
        __size_of_printf 00A4                  _dpowers 01B6                  clrloop0 022F  
   end_of_initialization 0018                  set_CS@a 0076                _RCSTAbits 0018  
                printf@c 0039                  printf@f 0033                _UART_init 0202  
              _TRISBbits 0086                _TXSTAbits 0098          SPI_transfer@ret 0021  
             ?_UART_init 0070           __end_of_set_CS 0223           __end_of_printf 00BE  
    start_initialization 0011        __size_of_SPI_init 000B                 ??_set_CS 0075  
               ??_printf 002E            ?_SPI_transfer 0070              __pbssCOMMON 0077  
              ___latbits 0000            __pcstackBANK0 0020      __end_of__stringdata 01D0  
          SPI_transfer@i 0022         ___lwdiv@dividend 0022                 ?___lwdiv 0020  
               ?___lwmod 0027                __pstrings 01B0              ??_UART_init 0075  
         ??_SPI_transfer 0075         ___lwdiv@quotient 0025           __size_of_putch 0017  
      interrupt_function 0004                clear_ram0 022E              __stringbase 01B5  
            __stringdata 01C0                 _SPI_init 0223               printf@_val 0035  
             printf@flag 0032               printf@prec 0034         __size_of___lwdiv 0040  
       __size_of___lwmod 0036       __end_of__stringtab 01B6          ___lwdiv@divisor 0020  
        ___lwdiv@counter 0024            __size_of__ISR 001B            __size_of_main 0037  
   __end_of_SPI_transfer 0103                 main@data 003C                putch@data 0075  
               intlevel1 0000         ___lwmod@dividend 0029                stringcode 01B0  
               printf@ap 0031          ___lwmod@divisor 0027          ___lwmod@counter 002B  
               stringdir 01B0                 stringtab 01B0  
