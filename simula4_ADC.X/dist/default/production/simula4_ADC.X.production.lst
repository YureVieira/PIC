

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Mar 13 16:32:07 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           	psect	idataCOMRAM
    27  00794D                     __pidataCOMRAM:
    28                           	opt stack 0
    29                           
    30                           ;initializer for corrige_motor@output
    31  00794D  09                 	db	9
    32  0000                     _ADCON0	set	4034
    33  0000                     _ADCON0bits	set	4034
    34  0000                     _ADCON1	set	4033
    35  0000                     _ADCON2bits	set	4032
    36  0000                     _ADRESH	set	4036
    37  0000                     _ADRESL	set	4035
    38  0000                     _TRISD	set	3989
    39  0000                     _PORTD	set	3971
    40                           
    41                           ; #config settings
    42                           
    43                           	psect	cinit
    44  007966                     __pcinit:
    45                           	opt stack 0
    46  007966                     start_initialization:
    47                           	opt stack 0
    48  007966                     __initialization:
    49                           	opt stack 0
    50                           
    51                           ; Clear objects allocated to COMRAM (1 bytes)
    52  007966  6A34               	clrf	__pbssCOMRAM& (0+255),c
    53                           
    54                           ; Initialize objects allocated to COMRAM (1 bytes)
    55                           ; load TBLPTR registers with __pidataCOMRAM
    56  007968  0E4D               	movlw	low __pidataCOMRAM
    57  00796A  6EF6               	movwf	tblptrl,c
    58  00796C  0E79               	movlw	high __pidataCOMRAM
    59  00796E  6EF7               	movwf	tblptrh,c
    60  007970  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    61  007972  6EF8               	movwf	tblptru,c
    62  007974  0009               	tblrd		*+	;fetch initializer
    63  007976  CFF5 F035          	movff	tablat,__pdataCOMRAM
    64  00797A                     end_of_initialization:
    65                           	opt stack 0
    66  00797A                     __end_of__initialization:
    67                           	opt stack 0
    68  00797A  0100               	movlb	0
    69  00797C  EF5F  F03F         	goto	_main	;jump to C main() function
    70                           tblptru	equ	0xFF8
    71                           tblptrh	equ	0xFF7
    72                           tblptrl	equ	0xFF6
    73                           tablat	equ	0xFF5
    74                           
    75                           	psect	bssCOMRAM
    76  000034                     __pbssCOMRAM:
    77                           	opt stack 0
    78  000034                     corrige_motor@aux:
    79                           	opt stack 0
    80  000034                     	ds	1
    81                           tblptru	equ	0xFF8
    82                           tblptrh	equ	0xFF7
    83                           tblptrl	equ	0xFF6
    84                           tablat	equ	0xFF5
    85                           
    86                           	psect	dataCOMRAM
    87  000035                     __pdataCOMRAM:
    88                           	opt stack 0
    89  000035                     corrige_motor@output:
    90                           	opt stack 0
    91  000035                     	ds	1
    92                           tblptru	equ	0xFF8
    93                           tblptrh	equ	0xFF7
    94                           tblptrl	equ	0xFF6
    95                           tablat	equ	0xFF5
    96                           
    97                           	psect	cstackCOMRAM
    98  000001                     __pcstackCOMRAM:
    99                           	opt stack 0
   100  000001                     ?_read_ADC:
   101                           	opt stack 0
   102  000001                     ?___ftpack:
   103                           	opt stack 0
   104  000001                     ?___fttol:
   105                           	opt stack 0
   106  000001                     MOTOR_step_left@val:
   107                           	opt stack 0
   108  000001                     MOTOR_step_right@val:
   109                           	opt stack 0
   110  000001                     ___ftpack@arg:
   111                           	opt stack 0
   112  000001                     ___fttol@f1:
   113                           	opt stack 0
   114                           
   115                           ; 3 bytes @ 0x0
   116  000001                     	ds	2
   117  000003                     ??_read_ADC:
   118                           
   119                           ; 0 bytes @ 0x2
   120  000003                     	ds	1
   121  000004                     ___ftpack@exp:
   122                           	opt stack 0
   123                           
   124                           ; 1 bytes @ 0x3
   125  000004                     	ds	1
   126  000005                     ??___fttol:
   127  000005                     ___ftpack@sign:
   128                           	opt stack 0
   129  000005                     read_ADC@adc_result:
   130                           	opt stack 0
   131                           
   132                           ; 2 bytes @ 0x4
   133  000005                     	ds	1
   134  000006                     ??___ftpack:
   135                           
   136                           ; 0 bytes @ 0x5
   137  000006                     	ds	1
   138  000007                     read_ADC@channel:
   139                           	opt stack 0
   140                           
   141                           ; 1 bytes @ 0x6
   142  000007                     	ds	2
   143  000009                     ?___awtoft:
   144                           	opt stack 0
   145  000009                     ___awtoft@c:
   146                           	opt stack 0
   147                           
   148                           ; 2 bytes @ 0x8
   149  000009                     	ds	1
   150  00000A                     ___fttol@sign1:
   151                           	opt stack 0
   152                           
   153                           ; 1 bytes @ 0x9
   154  00000A                     	ds	1
   155  00000B                     ___fttol@lval:
   156                           	opt stack 0
   157                           
   158                           ; 4 bytes @ 0xA
   159  00000B                     	ds	1
   160  00000C                     ___awtoft@sign:
   161                           	opt stack 0
   162                           
   163                           ; 1 bytes @ 0xB
   164  00000C                     	ds	1
   165  00000D                     ?___ftmul:
   166                           	opt stack 0
   167  00000D                     ___ftmul@f1:
   168                           	opt stack 0
   169                           
   170                           ; 3 bytes @ 0xC
   171  00000D                     	ds	2
   172  00000F                     ___fttol@exp1:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0xE
   176  00000F                     	ds	1
   177  000010                     ?___awdiv:
   178                           	opt stack 0
   179  000010                     ___awdiv@dividend:
   180                           	opt stack 0
   181  000010                     ___ftmul@f2:
   182                           	opt stack 0
   183                           
   184                           ; 3 bytes @ 0xF
   185  000010                     	ds	2
   186  000012                     ___awdiv@divisor:
   187                           	opt stack 0
   188                           
   189                           ; 2 bytes @ 0x11
   190  000012                     	ds	1
   191  000013                     ??___ftmul:
   192                           
   193                           ; 0 bytes @ 0x12
   194  000013                     	ds	1
   195  000014                     ___awdiv@counter:
   196                           	opt stack 0
   197                           
   198                           ; 1 bytes @ 0x13
   199  000014                     	ds	1
   200  000015                     ___awdiv@sign:
   201                           	opt stack 0
   202                           
   203                           ; 1 bytes @ 0x14
   204  000015                     	ds	1
   205  000016                     ___awdiv@quotient:
   206                           	opt stack 0
   207  000016                     ___ftmul@f3_as_product:
   208                           	opt stack 0
   209                           
   210                           ; 3 bytes @ 0x15
   211  000016                     	ds	2
   212  000018                     ?___wmul:
   213                           	opt stack 0
   214  000018                     ___wmul@multiplier:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x17
   218  000018                     	ds	1
   219  000019                     ___ftmul@exp:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0x18
   223  000019                     	ds	1
   224  00001A                     ___ftmul@cntr:
   225                           	opt stack 0
   226  00001A                     ___wmul@multiplicand:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x19
   230  00001A                     	ds	1
   231  00001B                     ___ftmul@sign:
   232                           	opt stack 0
   233                           
   234                           ; 1 bytes @ 0x1A
   235  00001B                     	ds	1
   236  00001C                     ?_cvt_toVoltage:
   237                           	opt stack 0
   238  00001C                     cvt_toVoltage@val:
   239                           	opt stack 0
   240  00001C                     ___wmul@product:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x1B
   244  00001C                     	ds	2
   245  00001E                     corrige_motor@port:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x1D
   249  00001E                     	ds	1
   250  00001F                     cvt_toVoltage@ret:
   251                           	opt stack 0
   252                           
   253                           ; 3 bytes @ 0x1E
   254  00001F                     	ds	1
   255  000020                     corrige_motor@step:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x1F
   259  000020                     	ds	2
   260  000022                     ??_corrige_motor:
   261                           
   262                           ; 0 bytes @ 0x21
   263  000022                     	ds	5
   264  000027                     corrige_motor@i:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x26
   268  000027                     	ds	2
   269  000029                     corrige_motor@i_165:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x28
   273  000029                     	ds	2
   274  00002B                     ??_main:
   275                           
   276                           ; 0 bytes @ 0x2A
   277  00002B                     	ds	4
   278  00002F                     main@i:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x2E
   282  00002F                     	ds	2
   283  000031                     main@temperature:
   284                           	opt stack 0
   285                           
   286                           ; 3 bytes @ 0x30
   287  000031                     	ds	3
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           
   293 ;;
   294 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   295 ;;
   296 ;; *************** function _main *****************
   297 ;; Defined at:
   298 ;;		line 77 in file "main.c"
   299 ;; Parameters:    Size  Location     Type
   300 ;;		None
   301 ;; Auto vars:     Size  Location     Type
   302 ;;  i               2   46[COMRAM] int 
   303 ;;  temperature     3   48[COMRAM] float 
   304 ;; Return value:  Size  Location     Type
   305 ;;		None               void
   306 ;; Registers used:
   307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   308 ;; Tracked objects:
   309 ;;		On entry : 0/0
   310 ;;		On exit  : 0/0
   311 ;;		Unchanged: 0/0
   312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   313 ;;      Params:         0       0       0       0       0       0       0
   314 ;;      Locals:         5       0       0       0       0       0       0
   315 ;;      Temps:          4       0       0       0       0       0       0
   316 ;;      Totals:         9       0       0       0       0       0       0
   317 ;;Total ram usage:        9 bytes
   318 ;; Hardware stack levels required when called:    3
   319 ;; This function calls:
   320 ;;		_ADC_init
   321 ;;		___awdiv
   322 ;;		___fttol
   323 ;;		___wmul
   324 ;;		_corrige_motor
   325 ;;		_cvt_toVoltage
   326 ;;		_read_ADC
   327 ;; This function is called by:
   328 ;;		Startup code after reset
   329 ;; This function uses a non-reentrant model
   330 ;;
   331                           
   332                           	psect	text0
   333  007EBE                     __ptext0:
   334                           	opt stack 0
   335  007EBE                     _main:
   336                           	opt stack 28
   337                           
   338                           ;main.c: 79: ADC_init();
   339                           
   340                           ;incstack = 0
   341  007EBE  ECA7  F03C         	call	_ADC_init	;wreg free
   342                           
   343                           ;main.c: 80: TRISD = 0xf0;
   344  007EC2  0EF0               	movlw	240
   345  007EC4  6E95               	movwf	3989,c	;volatile
   346  007EC6                     l921:
   347                           
   348                           ;main.c: 83: {
   349                           ;main.c: 85: float temperature = cvt_toVoltage(read_ADC(0));
   350  007EC6  0E00               	movlw	0
   351  007EC8  EC3B  F03D         	call	_read_ADC
   352  007ECC  C001  F01C         	movff	?_read_ADC,cvt_toVoltage@val
   353  007ED0  C002  F01D         	movff	?_read_ADC+1,cvt_toVoltage@val+1
   354  007ED4  ECF6  F03C         	call	_cvt_toVoltage	;wreg free
   355  007ED8  C01C  F031         	movff	?_cvt_toVoltage,main@temperature
   356  007EDC  C01D  F032         	movff	?_cvt_toVoltage+1,main@temperature+1
   357  007EE0  C01E  F033         	movff	?_cvt_toVoltage+2,main@temperature+2
   358                           
   359                           ;main.c: 86: if((int)temperature > 80)
   360  007EE4  C031  F001         	movff	main@temperature,___fttol@f1
   361  007EE8  C032  F002         	movff	main@temperature+1,___fttol@f1+1
   362  007EEC  C033  F003         	movff	main@temperature+2,___fttol@f1+2
   363  007EF0  EC05  F03E         	call	___fttol	;wreg free
   364  007EF4  C001  F02B         	movff	?___fttol,??_main
   365  007EF8  C002  F02C         	movff	?___fttol+1,??_main+1
   366  007EFC  C003  F02D         	movff	?___fttol+2,??_main+2
   367  007F00  C004  F02E         	movff	?___fttol+3,??_main+3
   368  007F04  502C               	movf	??_main+1,w,c
   369  007F06  0A80               	xorlw	128
   370  007F08  0F80               	addlw	-128
   371  007F0A  0E51               	movlw	81
   372  007F0C  B4D8               	btfsc	status,2,c
   373  007F0E  5C2B               	subwf	??_main,w,c
   374  007F10  A0D8               	btfss	status,0,c
   375  007F12  D00B               	goto	l927
   376                           
   377                           ;main.c: 87: {
   378                           ;main.c: 89: corrige_motor(&PORTD,175);
   379  007F14  0E0F               	movlw	15	;volatile
   380  007F16  6E1F               	movwf	corrige_motor@port+1,c
   381  007F18  0E83               	movlw	131	;volatile
   382  007F1A  6E1E               	movwf	corrige_motor@port,c
   383  007F1C  0E00               	movlw	0
   384  007F1E  6E21               	movwf	corrige_motor@step+1,c
   385  007F20  0EAF               	movlw	175
   386  007F22  6E20               	movwf	corrige_motor@step,c
   387  007F24  ECE1  F03E         	call	_corrige_motor	;wreg free
   388                           
   389                           ;main.c: 90: }
   390  007F28  D055               	goto	l933
   391  007F2A                     l927:
   392                           
   393                           ;main.c: 91: else if((int)temperature < 20)
   394  007F2A  C031  F001         	movff	main@temperature,___fttol@f1
   395  007F2E  C032  F002         	movff	main@temperature+1,___fttol@f1+1
   396  007F32  C033  F003         	movff	main@temperature+2,___fttol@f1+2
   397  007F36  EC05  F03E         	call	___fttol	;wreg free
   398  007F3A  C001  F02B         	movff	?___fttol,??_main
   399  007F3E  C002  F02C         	movff	?___fttol+1,??_main+1
   400  007F42  C003  F02D         	movff	?___fttol+2,??_main+2
   401  007F46  C004  F02E         	movff	?___fttol+3,??_main+3
   402  007F4A  502C               	movf	??_main+1,w,c
   403  007F4C  0A80               	xorlw	128
   404  007F4E  6EF3               	movwf	prodl,c
   405  007F50  0E80               	movlw	128
   406  007F52  5CF3               	subwf	prodl,w,c
   407  007F54  0E14               	movlw	20
   408  007F56  B4D8               	btfsc	status,2,c
   409  007F58  5C2B               	subwf	??_main,w,c
   410  007F5A  B0D8               	btfsc	status,0,c
   411  007F5C  D00B               	goto	l931
   412                           
   413                           ;main.c: 92: {
   414                           ;main.c: 94: corrige_motor(&PORTD,0);
   415  007F5E  0E0F               	movlw	15	;volatile
   416  007F60  6E1F               	movwf	corrige_motor@port+1,c
   417  007F62  0E83               	movlw	131	;volatile
   418  007F64  6E1E               	movwf	corrige_motor@port,c
   419  007F66  0E00               	movlw	0
   420  007F68  6E21               	movwf	corrige_motor@step+1,c
   421  007F6A  0E00               	movlw	0
   422  007F6C  6E20               	movwf	corrige_motor@step,c
   423  007F6E  ECE1  F03E         	call	_corrige_motor	;wreg free
   424                           
   425                           ;main.c: 95: }
   426  007F72  D030               	goto	l933
   427  007F74                     l931:
   428                           
   429                           ;main.c: 96: else
   430                           ;main.c: 97: {
   431                           ;main.c: 99: corrige_motor(&PORTD,25*(-1+((int)temperature)/10));
   432  007F74  0E0F               	movlw	15	;volatile
   433  007F76  6E1F               	movwf	corrige_motor@port+1,c
   434  007F78  0E83               	movlw	131	;volatile
   435  007F7A  6E1E               	movwf	corrige_motor@port,c
   436  007F7C  0E00               	movlw	0
   437  007F7E  6E13               	movwf	___awdiv@divisor+1,c
   438  007F80  0E0A               	movlw	10
   439  007F82  6E12               	movwf	___awdiv@divisor,c
   440  007F84  C031  F001         	movff	main@temperature,___fttol@f1
   441  007F88  C032  F002         	movff	main@temperature+1,___fttol@f1+1
   442  007F8C  C033  F003         	movff	main@temperature+2,___fttol@f1+2
   443  007F90  EC05  F03E         	call	___fttol	;wreg free
   444  007F94  C001  F02B         	movff	?___fttol,??_main
   445  007F98  C002  F02C         	movff	?___fttol+1,??_main+1
   446  007F9C  C003  F02D         	movff	?___fttol+2,??_main+2
   447  007FA0  C004  F02E         	movff	?___fttol+3,??_main+3
   448  007FA4  C02B  F010         	movff	??_main,___awdiv@dividend
   449  007FA8  C02C  F011         	movff	??_main+1,___awdiv@dividend+1
   450  007FAC  EC5F  F03D         	call	___awdiv	;wreg free
   451  007FB0  0EFF               	movlw	255
   452  007FB2  2410               	addwf	?___awdiv,w,c
   453  007FB4  6E18               	movwf	___wmul@multiplier,c
   454  007FB6  0EFF               	movlw	255
   455  007FB8  2011               	addwfc	?___awdiv+1,w,c
   456  007FBA  6E19               	movwf	___wmul@multiplier+1,c
   457  007FBC  0E00               	movlw	0
   458  007FBE  6E1B               	movwf	___wmul@multiplicand+1,c
   459  007FC0  0E19               	movlw	25
   460  007FC2  6E1A               	movwf	___wmul@multiplicand,c
   461  007FC4  ECE3  F03C         	call	___wmul	;wreg free
   462  007FC8  C018  F020         	movff	?___wmul,corrige_motor@step
   463  007FCC  C019  F021         	movff	?___wmul+1,corrige_motor@step+1
   464  007FD0  ECE1  F03E         	call	_corrige_motor	;wreg free
   465  007FD4                     l933:
   466                           
   467                           ;main.c: 100: }
   468                           ;main.c: 101: for(int i=0;i<5;i++)_delay((unsigned long)((100)*(4000000/4000.0)));
   469  007FD4  0E00               	movlw	0
   470  007FD6  6E30               	movwf	main@i+1,c
   471  007FD8  0E00               	movlw	0
   472  007FDA  6E2F               	movwf	main@i,c
   473  007FDC  5030               	movf	main@i+1,w,c
   474  007FDE  0A80               	xorlw	128
   475  007FE0  0F80               	addlw	-128
   476  007FE2  0E05               	movlw	5
   477  007FE4  B4D8               	btfsc	status,2,c
   478  007FE6  5C2F               	subwf	main@i,w,c
   479  007FE8  B0D8               	btfsc	status,0,c
   480  007FEA  D76D               	goto	l921
   481  007FEC  0E82               	movlw	130
   482  007FEE  6E2B               	movwf	??_main& (0+255),c
   483  007FF0  0EDE               	movlw	222
   484  007FF2                     u427:
   485  007FF2  2EE8               	decfsz	wreg,f,c
   486  007FF4  D7FE               	goto	u427
   487  007FF6  2E2B               	decfsz	??_main& (0+255),f,c
   488  007FF8  D7FC               	goto	u427
   489  007FFA  4A2F               	infsnz	main@i,f,c
   490  007FFC  2A30               	incf	main@i+1,f,c
   491  007FFE  D7EE               	goto	L1
   492  008000                     __end_of_main:
   493                           	opt stack 0
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           prodl	equ	0xFF3
   499                           wreg	equ	0xFE8
   500                           status	equ	0xFD8
   501                           
   502 ;; *************** function _read_ADC *****************
   503 ;; Defined at:
   504 ;;		line 12 in file "main.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;  channel         1    wreg     unsigned char 
   507 ;; Auto vars:     Size  Location     Type
   508 ;;  channel         1    6[COMRAM] unsigned char 
   509 ;;  adc_result      2    4[COMRAM] int 
   510 ;; Return value:  Size  Location     Type
   511 ;;                  2    0[COMRAM] int 
   512 ;; Registers used:
   513 ;;		wreg, status,2, status,0, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   519 ;;      Params:         2       0       0       0       0       0       0
   520 ;;      Locals:         3       0       0       0       0       0       0
   521 ;;      Temps:          2       0       0       0       0       0       0
   522 ;;      Totals:         7       0       0       0       0       0       0
   523 ;;Total ram usage:        7 bytes
   524 ;; Hardware stack levels used:    1
   525 ;; This function calls:
   526 ;;		Nothing
   527 ;; This function is called by:
   528 ;;		_main
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           	psect	text1
   533  007A76                     __ptext1:
   534                           	opt stack 0
   535  007A76                     _read_ADC:
   536                           	opt stack 30
   537                           
   538                           ;incstack = 0
   539                           ;read_ADC@channel stored from wreg
   540  007A76  6E07               	movwf	read_ADC@channel,c
   541                           
   542                           ;main.c: 14: ADCON0 = 0;
   543  007A78  0E00               	movlw	0
   544  007A7A  6EC2               	movwf	4034,c	;volatile
   545                           
   546                           ;main.c: 15: ADCON0 |= channel;
   547  007A7C  5007               	movf	read_ADC@channel,w,c
   548  007A7E  12C2               	iorwf	4034,f,c	;volatile
   549                           
   550                           ;main.c: 17: _delay((unsigned long)((20)*(4000000/4000000.0)));
   551  007A80  0E06               	movlw	6
   552  007A82                     u437:
   553  007A82  2EE8               	decfsz	wreg,f,c
   554  007A84  D7FE               	goto	u437
   555  007A86  D000               	nop2		;nop
   556                           
   557                           ;main.c: 19: ADCON0bits.ADON = 1;
   558  007A88  80C2               	bsf	4034,0,c	;volatile
   559                           
   560                           ;main.c: 20: ADCON0bits.GODONE = 1;
   561  007A8A  82C2               	bsf	4034,1,c	;volatile
   562  007A8C                     l24:
   563  007A8C  B2C2               	btfsc	4034,1,c	;volatile
   564  007A8E  D7FE               	goto	l24
   565                           
   566                           ;main.c: 22: ADCON0bits.ADON = 1;
   567  007A90  80C2               	bsf	4034,0,c	;volatile
   568                           
   569                           ;main.c: 24: _delay((unsigned long)((20)*(4000000/4000.0)));
   570  007A92  0E1A               	movlw	26
   571  007A94  6E03               	movwf	??_read_ADC& (0+255),c
   572  007A96  0EF8               	movlw	248
   573  007A98                     u447:
   574  007A98  2EE8               	decfsz	wreg,f,c
   575  007A9A  D7FE               	goto	u447
   576  007A9C  2E03               	decfsz	??_read_ADC& (0+255),f,c
   577  007A9E  D7FC               	goto	u447
   578  007AA0  D000               	nop2	
   579                           
   580                           ;main.c: 26: int adc_result = (ADRESH<<8)+ADRESL;
   581  007AA2  50C4               	movf	4036,w,c	;volatile
   582  007AA4  6E04               	movwf	(??_read_ADC+1)& (0+255),c
   583  007AA6  6A03               	clrf	??_read_ADC& (0+255),c
   584  007AA8  50C3               	movf	4035,w,c	;volatile
   585  007AAA  2403               	addwf	??_read_ADC,w,c
   586  007AAC  6E05               	movwf	read_ADC@adc_result,c
   587  007AAE  0E00               	movlw	0
   588  007AB0  2004               	addwfc	??_read_ADC+1,w,c
   589  007AB2  6E06               	movwf	read_ADC@adc_result+1,c
   590                           
   591                           ;main.c: 27: return adc_result;
   592  007AB4  C005  F001         	movff	read_ADC@adc_result,?_read_ADC
   593  007AB8  C006  F002         	movff	read_ADC@adc_result+1,?_read_ADC+1
   594  007ABC  0012               	return	
   595  007ABE                     __end_of_read_ADC:
   596                           	opt stack 0
   597                           tblptru	equ	0xFF8
   598                           tblptrh	equ	0xFF7
   599                           tblptrl	equ	0xFF6
   600                           tablat	equ	0xFF5
   601                           prodl	equ	0xFF3
   602                           wreg	equ	0xFE8
   603                           status	equ	0xFD8
   604                           
   605 ;; *************** function _cvt_toVoltage *****************
   606 ;; Defined at:
   607 ;;		line 29 in file "main.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;  val             2   27[COMRAM] int 
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  ret             3   30[COMRAM] float 
   612 ;; Return value:  Size  Location     Type
   613 ;;                  3   27[COMRAM] float 
   614 ;; Registers used:
   615 ;;		wreg, status,2, status,0, prodl, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   621 ;;      Params:         3       0       0       0       0       0       0
   622 ;;      Locals:         3       0       0       0       0       0       0
   623 ;;      Temps:          0       0       0       0       0       0       0
   624 ;;      Totals:         6       0       0       0       0       0       0
   625 ;;Total ram usage:        6 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:    2
   628 ;; This function calls:
   629 ;;		___awtoft
   630 ;;		___ftmul
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text2
   637  0079EC                     __ptext2:
   638                           	opt stack 0
   639  0079EC                     _cvt_toVoltage:
   640                           	opt stack 28
   641                           
   642                           ;main.c: 31: float ret = (float)val*(5.0/1023.0)*100.0;
   643                           
   644                           ;incstack = 0
   645  0079EC  C01C  F009         	movff	cvt_toVoltage@val,___awtoft@c
   646  0079F0  C01D  F00A         	movff	cvt_toVoltage@val+1,___awtoft@c+1
   647  0079F4  EC17  F03D         	call	___awtoft	;wreg free
   648  0079F8  C009  F00D         	movff	?___awtoft,___ftmul@f1
   649  0079FC  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
   650  007A00  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
   651  007A04  0E3F               	movlw	63
   652  007A06  6E10               	movwf	___ftmul@f2,c
   653  007A08  0EFA               	movlw	250
   654  007A0A  6E11               	movwf	___ftmul@f2+1,c
   655  007A0C  0E3E               	movlw	62
   656  007A0E  6E12               	movwf	___ftmul@f2+2,c
   657  007A10  EC6F  F03E         	call	___ftmul	;wreg free
   658  007A14  C00D  F01F         	movff	?___ftmul,cvt_toVoltage@ret
   659  007A18  C00E  F020         	movff	?___ftmul+1,cvt_toVoltage@ret+1
   660  007A1C  C00F  F021         	movff	?___ftmul+2,cvt_toVoltage@ret+2
   661                           
   662                           ;main.c: 32: return ret;
   663  007A20  C01F  F01C         	movff	cvt_toVoltage@ret,?_cvt_toVoltage
   664  007A24  C020  F01D         	movff	cvt_toVoltage@ret+1,?_cvt_toVoltage+1
   665  007A28  C021  F01E         	movff	cvt_toVoltage@ret+2,?_cvt_toVoltage+2
   666  007A2C  0012               	return	
   667  007A2E                     __end_of_cvt_toVoltage:
   668                           	opt stack 0
   669                           tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           prodl	equ	0xFF3
   674                           wreg	equ	0xFE8
   675                           status	equ	0xFD8
   676                           
   677 ;; *************** function ___ftmul *****************
   678 ;; Defined at:
   679 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  f1              3   12[COMRAM] float 
   682 ;;  f2              3   15[COMRAM] float 
   683 ;; Auto vars:     Size  Location     Type
   684 ;;  f3_as_produc    3   21[COMRAM] unsigned um
   685 ;;  sign            1   26[COMRAM] unsigned char 
   686 ;;  cntr            1   25[COMRAM] unsigned char 
   687 ;;  exp             1   24[COMRAM] unsigned char 
   688 ;; Return value:  Size  Location     Type
   689 ;;                  3   12[COMRAM] float 
   690 ;; Registers used:
   691 ;;		wreg, status,2, status,0, cstack
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   697 ;;      Params:         6       0       0       0       0       0       0
   698 ;;      Locals:         6       0       0       0       0       0       0
   699 ;;      Temps:          3       0       0       0       0       0       0
   700 ;;      Totals:        15       0       0       0       0       0       0
   701 ;;Total ram usage:       15 bytes
   702 ;; Hardware stack levels used:    1
   703 ;; Hardware stack levels required when called:    1
   704 ;; This function calls:
   705 ;;		___ftpack
   706 ;; This function is called by:
   707 ;;		_cvt_toVoltage
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text3
   712  007CDE                     __ptext3:
   713                           	opt stack 0
   714  007CDE                     ___ftmul:
   715                           	opt stack 28
   716                           
   717                           ;incstack = 0
   718  007CDE  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
   719  007CE2  6A14               	clrf	(??___ftmul+1)& (0+255),c
   720  007CE4  6A15               	clrf	(??___ftmul+2)& (0+255),c
   721  007CE6  340E               	rlcf	___ftmul@f1+1,w,c
   722  007CE8  3613               	rlcf	??___ftmul& (0+255),f,c
   723  007CEA  E301               	bnc	u121
   724  007CEC  8014               	bsf	(??___ftmul+1)& (0+255),0,c
   725  007CEE                     u121:
   726  007CEE  5013               	movf	??___ftmul,w,c
   727  007CF0  6E19               	movwf	___ftmul@exp,c
   728  007CF2  6619               	tstfsz	___ftmul@exp& (0+255),c
   729  007CF4  D001               	goto	l711
   730  007CF6  D00C               	goto	u150
   731  007CF8                     l711:
   732  007CF8  C012  F013         	movff	___ftmul@f2+2,??___ftmul
   733  007CFC  6A14               	clrf	(??___ftmul+1)& (0+255),c
   734  007CFE  6A15               	clrf	(??___ftmul+2)& (0+255),c
   735  007D00  3411               	rlcf	___ftmul@f2+1,w,c
   736  007D02  3613               	rlcf	??___ftmul& (0+255),f,c
   737  007D04  E301               	bnc	u141
   738  007D06  8014               	bsf	(??___ftmul+1)& (0+255),0,c
   739  007D08                     u141:
   740  007D08  5013               	movf	??___ftmul,w,c
   741  007D0A  6E1B               	movwf	___ftmul@sign,c
   742  007D0C  661B               	tstfsz	___ftmul@sign& (0+255),c
   743  007D0E  D007               	goto	l717
   744  007D10                     u150:
   745  007D10  0E00               	movlw	0
   746  007D12  6E0D               	movwf	?___ftmul,c
   747  007D14  0E00               	movlw	0
   748  007D16  6E0E               	movwf	?___ftmul+1,c
   749  007D18  0E00               	movlw	0
   750  007D1A  6E0F               	movwf	?___ftmul+2,c
   751  007D1C  D051               	goto	l460
   752  007D1E                     l717:
   753  007D1E  501B               	movf	___ftmul@sign,w,c
   754  007D20  0F7B               	addlw	123
   755  007D22  2619               	addwf	___ftmul@exp,f,c
   756  007D24  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
   757  007D28  5012               	movf	___ftmul@f2+2,w,c
   758  007D2A  1A1B               	xorwf	___ftmul@sign,f,c
   759  007D2C  0E80               	movlw	128
   760  007D2E  161B               	andwf	___ftmul@sign,f,c
   761  007D30  8E0E               	bsf	___ftmul@f1+1,7,c
   762  007D32  8E11               	bsf	___ftmul@f2+1,7,c
   763  007D34  0EFF               	movlw	255
   764  007D36  1610               	andwf	___ftmul@f2,f,c
   765  007D38  0EFF               	movlw	255
   766  007D3A  1611               	andwf	___ftmul@f2+1,f,c
   767  007D3C  0E00               	movlw	0
   768  007D3E  1612               	andwf	___ftmul@f2+2,f,c
   769  007D40  0E00               	movlw	0
   770  007D42  6E16               	movwf	___ftmul@f3_as_product,c
   771  007D44  0E00               	movlw	0
   772  007D46  6E17               	movwf	___ftmul@f3_as_product+1,c
   773  007D48  0E00               	movlw	0
   774  007D4A  6E18               	movwf	___ftmul@f3_as_product+2,c
   775  007D4C  0E07               	movlw	7
   776  007D4E  6E1A               	movwf	___ftmul@cntr,c
   777  007D50                     l731:
   778  007D50  A00D               	btfss	___ftmul@f1,0,c
   779  007D52  D006               	goto	l735
   780  007D54  5010               	movf	___ftmul@f2,w,c
   781  007D56  2616               	addwf	___ftmul@f3_as_product,f,c
   782  007D58  5011               	movf	___ftmul@f2+1,w,c
   783  007D5A  2217               	addwfc	___ftmul@f3_as_product+1,f,c
   784  007D5C  5012               	movf	___ftmul@f2+2,w,c
   785  007D5E  2218               	addwfc	___ftmul@f3_as_product+2,f,c
   786  007D60                     l735:
   787  007D60  90D8               	bcf	status,0,c
   788  007D62  320F               	rrcf	___ftmul@f1+2,f,c
   789  007D64  320E               	rrcf	___ftmul@f1+1,f,c
   790  007D66  320D               	rrcf	___ftmul@f1,f,c
   791  007D68  90D8               	bcf	status,0,c
   792  007D6A  3610               	rlcf	___ftmul@f2,f,c
   793  007D6C  3611               	rlcf	___ftmul@f2+1,f,c
   794  007D6E  3612               	rlcf	___ftmul@f2+2,f,c
   795  007D70  2E1A               	decfsz	___ftmul@cntr,f,c
   796  007D72  D7EE               	goto	l731
   797  007D74  0E09               	movlw	9
   798  007D76  6E1A               	movwf	___ftmul@cntr,c
   799  007D78                     l741:
   800  007D78  A00D               	btfss	___ftmul@f1,0,c
   801  007D7A  D006               	goto	l745
   802  007D7C  5010               	movf	___ftmul@f2,w,c
   803  007D7E  2616               	addwf	___ftmul@f3_as_product,f,c
   804  007D80  5011               	movf	___ftmul@f2+1,w,c
   805  007D82  2217               	addwfc	___ftmul@f3_as_product+1,f,c
   806  007D84  5012               	movf	___ftmul@f2+2,w,c
   807  007D86  2218               	addwfc	___ftmul@f3_as_product+2,f,c
   808  007D88                     l745:
   809  007D88  90D8               	bcf	status,0,c
   810  007D8A  320F               	rrcf	___ftmul@f1+2,f,c
   811  007D8C  320E               	rrcf	___ftmul@f1+1,f,c
   812  007D8E  320D               	rrcf	___ftmul@f1,f,c
   813  007D90  90D8               	bcf	status,0,c
   814  007D92  3218               	rrcf	___ftmul@f3_as_product+2,f,c
   815  007D94  3217               	rrcf	___ftmul@f3_as_product+1,f,c
   816  007D96  3216               	rrcf	___ftmul@f3_as_product,f,c
   817  007D98  2E1A               	decfsz	___ftmul@cntr,f,c
   818  007D9A  D7EE               	goto	l741
   819  007D9C  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
   820  007DA0  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
   821  007DA4  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
   822  007DA8  C019  F004         	movff	___ftmul@exp,___ftpack@exp
   823  007DAC  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
   824  007DB0  ECB1  F03D         	call	___ftpack	;wreg free
   825  007DB4  C001  F00D         	movff	?___ftpack,?___ftmul
   826  007DB8  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
   827  007DBC  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
   828  007DC0                     l460:
   829  007DC0  0012               	return	
   830  007DC2                     __end_of___ftmul:
   831                           	opt stack 0
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           prodl	equ	0xFF3
   837                           wreg	equ	0xFE8
   838                           status	equ	0xFD8
   839                           
   840 ;; *************** function ___awtoft *****************
   841 ;; Defined at:
   842 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;  c               2    8[COMRAM] int 
   845 ;; Auto vars:     Size  Location     Type
   846 ;;  sign            1   11[COMRAM] unsigned char 
   847 ;; Return value:  Size  Location     Type
   848 ;;                  3    8[COMRAM] float 
   849 ;; Registers used:
   850 ;;		wreg, status,2, status,0, prodl, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   856 ;;      Params:         3       0       0       0       0       0       0
   857 ;;      Locals:         1       0       0       0       0       0       0
   858 ;;      Temps:          0       0       0       0       0       0       0
   859 ;;      Totals:         4       0       0       0       0       0       0
   860 ;;Total ram usage:        4 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:    1
   863 ;; This function calls:
   864 ;;		___ftpack
   865 ;; This function is called by:
   866 ;;		_cvt_toVoltage
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           	psect	text4
   871  007A2E                     __ptext4:
   872                           	opt stack 0
   873  007A2E                     ___awtoft:
   874                           	opt stack 28
   875                           
   876                           ;incstack = 0
   877  007A2E  0E00               	movlw	0
   878  007A30  6E0C               	movwf	___awtoft@sign,c
   879  007A32  500A               	movf	___awtoft@c+1,w,c
   880  007A34  0A80               	xorlw	128
   881  007A36  6EF3               	movwf	prodl,c
   882  007A38  0E80               	movlw	128
   883  007A3A  5CF3               	subwf	prodl,w,c
   884  007A3C  0E00               	movlw	0
   885  007A3E  B4D8               	btfsc	status,2,c
   886  007A40  5C09               	subwf	___awtoft@c,w,c
   887  007A42  B0D8               	btfsc	status,0,c
   888  007A44  D006               	goto	l761
   889  007A46  6C09               	negf	___awtoft@c,c
   890  007A48  1E0A               	comf	___awtoft@c+1,f,c
   891  007A4A  B0D8               	btfsc	status,0,c
   892  007A4C  2A0A               	incf	___awtoft@c+1,f,c
   893  007A4E  0E01               	movlw	1
   894  007A50  6E0C               	movwf	___awtoft@sign,c
   895  007A52                     l761:
   896  007A52  C009  F001         	movff	___awtoft@c,___ftpack@arg
   897  007A56  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
   898  007A5A  6A03               	clrf	___ftpack@arg+2,c
   899  007A5C  0E8E               	movlw	142
   900  007A5E  6E04               	movwf	___ftpack@exp,c
   901  007A60  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
   902  007A64  ECB1  F03D         	call	___ftpack	;wreg free
   903  007A68  C001  F009         	movff	?___ftpack,?___awtoft
   904  007A6C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
   905  007A70  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
   906  007A74  0012               	return	
   907  007A76                     __end_of___awtoft:
   908                           	opt stack 0
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           prodl	equ	0xFF3
   914                           wreg	equ	0xFE8
   915                           status	equ	0xFD8
   916                           
   917 ;; *************** function ___ftpack *****************
   918 ;; Defined at:
   919 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  arg             3    0[COMRAM] unsigned um
   922 ;;  exp             1    3[COMRAM] unsigned char 
   923 ;;  sign            1    4[COMRAM] unsigned char 
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  3    0[COMRAM] float 
   928 ;; Registers used:
   929 ;;		wreg, status,2, status,0
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   935 ;;      Params:         5       0       0       0       0       0       0
   936 ;;      Locals:         0       0       0       0       0       0       0
   937 ;;      Temps:          3       0       0       0       0       0       0
   938 ;;      Totals:         8       0       0       0       0       0       0
   939 ;;Total ram usage:        8 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; This function calls:
   942 ;;		Nothing
   943 ;; This function is called by:
   944 ;;		___awtoft
   945 ;;		___ftmul
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           	psect	text5
   950  007B62                     __ptext5:
   951                           	opt stack 0
   952  007B62                     ___ftpack:
   953                           	opt stack 28
   954                           
   955                           ;incstack = 0
   956  007B62  5004               	movf	___ftpack@exp,w,c
   957  007B64  B4D8               	btfsc	status,2,c
   958  007B66  D005               	goto	l655
   959  007B68  5001               	movf	___ftpack@arg,w,c
   960  007B6A  1002               	iorwf	___ftpack@arg+1,w,c
   961  007B6C  1003               	iorwf	___ftpack@arg+2,w,c
   962  007B6E  A4D8               	btfss	status,2,c
   963  007B70  D00C               	goto	l661
   964  007B72                     l655:
   965  007B72  0E00               	movlw	0
   966  007B74  6E01               	movwf	?___ftpack,c
   967  007B76  0E00               	movlw	0
   968  007B78  6E02               	movwf	?___ftpack+1,c
   969  007B7A  0E00               	movlw	0
   970  007B7C  6E03               	movwf	?___ftpack+2,c
   971  007B7E  D044               	goto	l376
   972  007B80                     l659:
   973  007B80  2A04               	incf	___ftpack@exp,f,c
   974  007B82  90D8               	bcf	status,0,c
   975  007B84  3203               	rrcf	___ftpack@arg+2,f,c
   976  007B86  3202               	rrcf	___ftpack@arg+1,f,c
   977  007B88  3201               	rrcf	___ftpack@arg,f,c
   978  007B8A                     l661:
   979  007B8A  0E00               	movlw	0
   980  007B8C  1401               	andwf	___ftpack@arg,w,c
   981  007B8E  6E06               	movwf	??___ftpack& (0+255),c
   982  007B90  0E00               	movlw	0
   983  007B92  1402               	andwf	___ftpack@arg+1,w,c
   984  007B94  6E07               	movwf	(??___ftpack+1)& (0+255),c
   985  007B96  0EFE               	movlw	254
   986  007B98  1403               	andwf	___ftpack@arg+2,w,c
   987  007B9A  6E08               	movwf	(??___ftpack+2)& (0+255),c
   988  007B9C  5006               	movf	??___ftpack,w,c
   989  007B9E  1007               	iorwf	??___ftpack+1,w,c
   990  007BA0  1008               	iorwf	??___ftpack+2,w,c
   991  007BA2  B4D8               	btfsc	status,2,c
   992  007BA4  D00C               	goto	l667
   993  007BA6  D7EC               	goto	l659
   994  007BA8                     l663:
   995  007BA8  2A04               	incf	___ftpack@exp,f,c
   996  007BAA  0E01               	movlw	1
   997  007BAC  2601               	addwf	___ftpack@arg,f,c
   998  007BAE  0E00               	movlw	0
   999  007BB0  2202               	addwfc	___ftpack@arg+1,f,c
  1000  007BB2  0E00               	movlw	0
  1001  007BB4  2203               	addwfc	___ftpack@arg+2,f,c
  1002  007BB6  90D8               	bcf	status,0,c
  1003  007BB8  3203               	rrcf	___ftpack@arg+2,f,c
  1004  007BBA  3202               	rrcf	___ftpack@arg+1,f,c
  1005  007BBC  3201               	rrcf	___ftpack@arg,f,c
  1006  007BBE                     l667:
  1007  007BBE  0E00               	movlw	0
  1008  007BC0  1401               	andwf	___ftpack@arg,w,c
  1009  007BC2  6E06               	movwf	??___ftpack& (0+255),c
  1010  007BC4  0E00               	movlw	0
  1011  007BC6  1402               	andwf	___ftpack@arg+1,w,c
  1012  007BC8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  1013  007BCA  0EFF               	movlw	255
  1014  007BCC  1403               	andwf	___ftpack@arg+2,w,c
  1015  007BCE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  1016  007BD0  5006               	movf	??___ftpack,w,c
  1017  007BD2  1007               	iorwf	??___ftpack+1,w,c
  1018  007BD4  1008               	iorwf	??___ftpack+2,w,c
  1019  007BD6  B4D8               	btfsc	status,2,c
  1020  007BD8  D006               	goto	l671
  1021  007BDA  D7E6               	goto	l663
  1022  007BDC                     l669:
  1023  007BDC  0604               	decf	___ftpack@exp,f,c
  1024  007BDE  90D8               	bcf	status,0,c
  1025  007BE0  3601               	rlcf	___ftpack@arg,f,c
  1026  007BE2  3602               	rlcf	___ftpack@arg+1,f,c
  1027  007BE4  3603               	rlcf	___ftpack@arg+2,f,c
  1028  007BE6                     l671:
  1029  007BE6  AE02               	btfss	___ftpack@arg+1,7,c
  1030  007BE8  D7F9               	goto	l669
  1031  007BEA  A004               	btfss	___ftpack@exp,0,c
  1032  007BEC  9E02               	bcf	___ftpack@arg+1,7,c
  1033  007BEE  90D8               	bcf	status,0,c
  1034  007BF0  3204               	rrcf	___ftpack@exp,f,c
  1035  007BF2  5004               	movf	___ftpack@exp,w,c
  1036  007BF4  1203               	iorwf	___ftpack@arg+2,f,c
  1037  007BF6  5005               	movf	___ftpack@sign,w,c
  1038  007BF8  A4D8               	btfss	status,2,c
  1039  007BFA  8E03               	bsf	___ftpack@arg+2,7,c
  1040  007BFC  C001  F001         	movff	___ftpack@arg,?___ftpack
  1041  007C00  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  1042  007C04  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  1043  007C08                     l376:
  1044  007C08  0012               	return	
  1045  007C0A                     __end_of___ftpack:
  1046                           	opt stack 0
  1047                           tblptru	equ	0xFF8
  1048                           tblptrh	equ	0xFF7
  1049                           tblptrl	equ	0xFF6
  1050                           tablat	equ	0xFF5
  1051                           prodl	equ	0xFF3
  1052                           wreg	equ	0xFE8
  1053                           status	equ	0xFD8
  1054                           
  1055 ;; *************** function _corrige_motor *****************
  1056 ;; Defined at:
  1057 ;;		line 49 in file "main.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  port            2   29[COMRAM] PTR unsigned char 
  1060 ;;		 -> PORTD(1), 
  1061 ;;  step            2   31[COMRAM] int 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  i               2   40[COMRAM] int 
  1064 ;;  i               2   38[COMRAM] int 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;		None               void
  1067 ;; Registers used:
  1068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1074 ;;      Params:         4       0       0       0       0       0       0
  1075 ;;      Locals:         4       0       0       0       0       0       0
  1076 ;;      Temps:          5       0       0       0       0       0       0
  1077 ;;      Totals:        13       0       0       0       0       0       0
  1078 ;;Total ram usage:       13 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; Hardware stack levels required when called:    1
  1081 ;; This function calls:
  1082 ;;		_MOTOR_step_left
  1083 ;;		_MOTOR_step_right
  1084 ;; This function is called by:
  1085 ;;		_main
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text6
  1090  007DC2                     __ptext6:
  1091                           	opt stack 0
  1092  007DC2                     _corrige_motor:
  1093                           	opt stack 29
  1094                           
  1095                           ;main.c: 53: static char aux = 0,output = 9;
  1096                           ;main.c: 54: if(step > aux)
  1097                           
  1098                           ;incstack = 0
  1099  007DC2  5034               	movf	corrige_motor@aux,w,c
  1100  007DC4  6E22               	movwf	??_corrige_motor& (0+255),c
  1101  007DC6  6A23               	clrf	(??_corrige_motor+1)& (0+255),c
  1102  007DC8  5023               	movf	??_corrige_motor+1,w,c
  1103  007DCA  0A80               	xorlw	128
  1104  007DCC  6E24               	movwf	(??_corrige_motor+2)& (0+255),c
  1105  007DCE  5020               	movf	corrige_motor@step,w,c
  1106  007DD0  5C22               	subwf	??_corrige_motor,w,c
  1107  007DD2  5021               	movf	corrige_motor@step+1,w,c
  1108  007DD4  0A80               	xorlw	128
  1109  007DD6  5824               	subwfb	(??_corrige_motor+2)& (0+255),w,c
  1110  007DD8  B0D8               	btfsc	status,0,c
  1111  007DDA  D02F               	goto	l807
  1112                           
  1113                           ;main.c: 55: {
  1114                           ;main.c: 56: for(int i=1;i<=step-aux;i++)
  1115  007DDC  0E00               	movlw	0
  1116  007DDE  6E28               	movwf	corrige_motor@i+1,c
  1117  007DE0  0E01               	movlw	1
  1118  007DE2  6E27               	movwf	corrige_motor@i,c
  1119  007DE4  D014               	goto	l805
  1120  007DE6                     l797:
  1121                           
  1122                           ;main.c: 57: {
  1123                           ;main.c: 58: output = MOTOR_step_right(output);
  1124  007DE6  5035               	movf	corrige_motor@output,w,c
  1125  007DE8  ECC0  F03C         	call	_MOTOR_step_right
  1126  007DEC  6E35               	movwf	corrige_motor@output,c
  1127                           
  1128                           ;main.c: 59: *port = output;
  1129  007DEE  C01E  FFD9         	movff	corrige_motor@port,fsr2l
  1130  007DF2  C01F  FFDA         	movff	corrige_motor@port+1,fsr2h
  1131  007DF6  C035  FFDF         	movff	corrige_motor@output,indf2
  1132                           
  1133                           ;main.c: 60: _delay((unsigned long)((5)*(4000000/4000.0)));
  1134  007DFA  0E07               	movlw	7
  1135  007DFC  6E22               	movwf	??_corrige_motor& (0+255),c
  1136  007DFE  0E7D               	movlw	125
  1137  007E00                     u457:
  1138  007E00  2EE8               	decfsz	wreg,f,c
  1139  007E02  D7FE               	goto	u457
  1140  007E04  2E22               	decfsz	??_corrige_motor& (0+255),f,c
  1141  007E06  D7FC               	goto	u457
  1142  007E08  F000               	nop	
  1143  007E0A  4A27               	infsnz	corrige_motor@i,f,c
  1144  007E0C  2A28               	incf	corrige_motor@i+1,f,c
  1145  007E0E                     l805:
  1146  007E0E  5034               	movf	corrige_motor@aux,w,c
  1147  007E10  6E22               	movwf	??_corrige_motor& (0+255),c
  1148  007E12  6A23               	clrf	(??_corrige_motor+1)& (0+255),c
  1149  007E14  1E22               	comf	??_corrige_motor,f,c
  1150  007E16  1E23               	comf	??_corrige_motor+1,f,c
  1151  007E18  4A22               	infsnz	??_corrige_motor,f,c
  1152  007E1A  2A23               	incf	??_corrige_motor+1,f,c
  1153  007E1C  5020               	movf	corrige_motor@step,w,c
  1154  007E1E  2622               	addwf	??_corrige_motor,f,c
  1155  007E20  5021               	movf	corrige_motor@step+1,w,c
  1156  007E22  2223               	addwfc	??_corrige_motor+1,f,c
  1157  007E24  5023               	movf	??_corrige_motor+1,w,c
  1158  007E26  0A80               	xorlw	128
  1159  007E28  6E24               	movwf	(??_corrige_motor+2)& (0+255),c
  1160  007E2A  5027               	movf	corrige_motor@i,w,c
  1161  007E2C  5C22               	subwf	??_corrige_motor,w,c
  1162  007E2E  5028               	movf	corrige_motor@i+1,w,c
  1163  007E30  0A80               	xorlw	128
  1164  007E32  5824               	subwfb	(??_corrige_motor+2)& (0+255),w,c
  1165  007E34  B0D8               	btfsc	status,0,c
  1166  007E36  D7D7               	goto	l797
  1167  007E38  D03F               	goto	u230
  1168  007E3A                     l807:
  1169                           
  1170                           ;main.c: 64: }
  1171                           ;main.c: 65: if(step < aux)
  1172  007E3A  5034               	movf	corrige_motor@aux,w,c
  1173  007E3C  6E22               	movwf	??_corrige_motor& (0+255),c
  1174  007E3E  6A23               	clrf	(??_corrige_motor+1)& (0+255),c
  1175  007E40  5021               	movf	corrige_motor@step+1,w,c
  1176  007E42  0A80               	xorlw	128
  1177  007E44  6E24               	movwf	(??_corrige_motor+2)& (0+255),c
  1178  007E46  5022               	movf	??_corrige_motor,w,c
  1179  007E48  5C20               	subwf	corrige_motor@step,w,c
  1180  007E4A  5023               	movf	??_corrige_motor+1,w,c
  1181  007E4C  0A80               	xorlw	128
  1182  007E4E  5824               	subwfb	(??_corrige_motor+2)& (0+255),w,c
  1183  007E50  B0D8               	btfsc	status,0,c
  1184  007E52  D034               	goto	l51
  1185                           
  1186                           ;main.c: 66: {
  1187                           ;main.c: 67: for(int i=1;i<=aux-step;i++)
  1188  007E54  0E00               	movlw	0
  1189  007E56  6E2A               	movwf	corrige_motor@i_165+1,c
  1190  007E58  0E01               	movlw	1
  1191  007E5A  6E29               	movwf	corrige_motor@i_165,c
  1192  007E5C  D014               	goto	l819
  1193  007E5E                     l811:
  1194                           
  1195                           ;main.c: 68: {
  1196                           ;main.c: 69: output = MOTOR_step_left(output);
  1197  007E5E  5035               	movf	corrige_motor@output,w,c
  1198  007E60  ECD1  F03C         	call	_MOTOR_step_left
  1199  007E64  6E35               	movwf	corrige_motor@output,c
  1200                           
  1201                           ;main.c: 70: *port = output;
  1202  007E66  C01E  FFD9         	movff	corrige_motor@port,fsr2l
  1203  007E6A  C01F  FFDA         	movff	corrige_motor@port+1,fsr2h
  1204  007E6E  C035  FFDF         	movff	corrige_motor@output,indf2
  1205                           
  1206                           ;main.c: 71: _delay((unsigned long)((5)*(4000000/4000.0)));
  1207  007E72  0E07               	movlw	7
  1208  007E74  6E22               	movwf	??_corrige_motor& (0+255),c
  1209  007E76  0E7D               	movlw	125
  1210  007E78                     u467:
  1211  007E78  2EE8               	decfsz	wreg,f,c
  1212  007E7A  D7FE               	goto	u467
  1213  007E7C  2E22               	decfsz	??_corrige_motor& (0+255),f,c
  1214  007E7E  D7FC               	goto	u467
  1215  007E80  F000               	nop	
  1216  007E82  4A29               	infsnz	corrige_motor@i_165,f,c
  1217  007E84  2A2A               	incf	corrige_motor@i_165+1,f,c
  1218  007E86                     l819:
  1219  007E86  C020  F022         	movff	corrige_motor@step,??_corrige_motor
  1220  007E8A  C021  F023         	movff	corrige_motor@step+1,??_corrige_motor+1
  1221  007E8E  1E22               	comf	??_corrige_motor,f,c
  1222  007E90  1E23               	comf	??_corrige_motor+1,f,c
  1223  007E92  4A22               	infsnz	??_corrige_motor,f,c
  1224  007E94  2A23               	incf	??_corrige_motor+1,f,c
  1225  007E96  5034               	movf	corrige_motor@aux,w,c
  1226  007E98  6E24               	movwf	(??_corrige_motor+2)& (0+255),c
  1227  007E9A  6A25               	clrf	(??_corrige_motor+3)& (0+255),c
  1228  007E9C  5022               	movf	??_corrige_motor,w,c
  1229  007E9E  2624               	addwf	??_corrige_motor+2,f,c
  1230  007EA0  5023               	movf	??_corrige_motor+1,w,c
  1231  007EA2  2225               	addwfc	??_corrige_motor+3,f,c
  1232  007EA4  5025               	movf	??_corrige_motor+3,w,c
  1233  007EA6  0A80               	xorlw	128
  1234  007EA8  6E26               	movwf	(??_corrige_motor+4)& (0+255),c
  1235  007EAA  5029               	movf	corrige_motor@i_165,w,c
  1236  007EAC  5C24               	subwf	??_corrige_motor+2,w,c
  1237  007EAE  502A               	movf	corrige_motor@i_165+1,w,c
  1238  007EB0  0A80               	xorlw	128
  1239  007EB2  5826               	subwfb	(??_corrige_motor+4)& (0+255),w,c
  1240  007EB4  B0D8               	btfsc	status,0,c
  1241  007EB6  D7D3               	goto	l811
  1242  007EB8                     u230:
  1243                           
  1244                           ;main.c: 72: }
  1245                           ;main.c: 73: aux = step;
  1246  007EB8  C020  F034         	movff	corrige_motor@step,corrige_motor@aux
  1247  007EBC                     l51:
  1248  007EBC  0012               	return	
  1249  007EBE                     __end_of_corrige_motor:
  1250                           	opt stack 0
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           tblptrl	equ	0xFF6
  1254                           tablat	equ	0xFF5
  1255                           prodl	equ	0xFF3
  1256                           wreg	equ	0xFE8
  1257                           indf2	equ	0xFDF
  1258                           fsr2h	equ	0xFDA
  1259                           fsr2l	equ	0xFD9
  1260                           status	equ	0xFD8
  1261                           
  1262 ;; *************** function _MOTOR_step_right *****************
  1263 ;; Defined at:
  1264 ;;		line 42 in file "main.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;  val             1    wreg     unsigned char 
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;  val             1    0[COMRAM] unsigned char 
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      unsigned char 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1278 ;;      Params:         0       0       0       0       0       0       0
  1279 ;;      Locals:         1       0       0       0       0       0       0
  1280 ;;      Temps:          0       0       0       0       0       0       0
  1281 ;;      Totals:         1       0       0       0       0       0       0
  1282 ;;Total ram usage:        1 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; This function calls:
  1285 ;;		Nothing
  1286 ;; This function is called by:
  1287 ;;		_corrige_motor
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           	psect	text7
  1292  007980                     __ptext7:
  1293                           	opt stack 0
  1294  007980                     _MOTOR_step_right:
  1295                           	opt stack 29
  1296                           
  1297                           ;incstack = 0
  1298                           ;MOTOR_step_right@val stored from wreg
  1299  007980  6E01               	movwf	MOTOR_step_right@val,c
  1300                           
  1301                           ;main.c: 44: val = val >> 1;
  1302  007982  90D8               	bcf	status,0,c
  1303  007984  3001               	rrcf	MOTOR_step_right@val,w,c
  1304  007986  6E01               	movwf	MOTOR_step_right@val,c
  1305                           
  1306                           ;main.c: 45: if(val == 1) val = 9;
  1307  007988  0401               	decf	MOTOR_step_right@val,w,c
  1308  00798A  A4D8               	btfss	status,2,c
  1309  00798C  D002               	goto	l699
  1310  00798E  0E09               	movlw	9
  1311  007990  6E01               	movwf	MOTOR_step_right@val,c
  1312  007992                     l699:
  1313                           
  1314                           ;main.c: 46: if(val == 4) val = 12;
  1315  007992  5001               	movf	MOTOR_step_right@val,w,c
  1316  007994  0A04               	xorlw	4
  1317  007996  A4D8               	btfss	status,2,c
  1318  007998  D002               	goto	l39
  1319  00799A  0E0C               	movlw	12
  1320  00799C  6E01               	movwf	MOTOR_step_right@val,c
  1321  00799E                     l39:
  1322                           
  1323                           ;main.c: 47: return val;
  1324  00799E  5001               	movf	MOTOR_step_right@val,w,c
  1325  0079A0  0012               	return	
  1326  0079A2                     __end_of_MOTOR_step_right:
  1327                           	opt stack 0
  1328                           tblptru	equ	0xFF8
  1329                           tblptrh	equ	0xFF7
  1330                           tblptrl	equ	0xFF6
  1331                           tablat	equ	0xFF5
  1332                           prodl	equ	0xFF3
  1333                           wreg	equ	0xFE8
  1334                           indf2	equ	0xFDF
  1335                           fsr2h	equ	0xFDA
  1336                           fsr2l	equ	0xFD9
  1337                           status	equ	0xFD8
  1338                           
  1339 ;; *************** function _MOTOR_step_left *****************
  1340 ;; Defined at:
  1341 ;;		line 35 in file "main.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;  val             1    wreg     unsigned char 
  1344 ;; Auto vars:     Size  Location     Type
  1345 ;;  val             1    0[COMRAM] unsigned char 
  1346 ;; Return value:  Size  Location     Type
  1347 ;;                  1    wreg      unsigned char 
  1348 ;; Registers used:
  1349 ;;		wreg, status,2, status,0
  1350 ;; Tracked objects:
  1351 ;;		On entry : 0/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1355 ;;      Params:         0       0       0       0       0       0       0
  1356 ;;      Locals:         1       0       0       0       0       0       0
  1357 ;;      Temps:          0       0       0       0       0       0       0
  1358 ;;      Totals:         1       0       0       0       0       0       0
  1359 ;;Total ram usage:        1 bytes
  1360 ;; Hardware stack levels used:    1
  1361 ;; This function calls:
  1362 ;;		Nothing
  1363 ;; This function is called by:
  1364 ;;		_corrige_motor
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text8
  1369  0079A2                     __ptext8:
  1370                           	opt stack 0
  1371  0079A2                     _MOTOR_step_left:
  1372                           	opt stack 29
  1373                           
  1374                           ;incstack = 0
  1375                           ;MOTOR_step_left@val stored from wreg
  1376  0079A2  6E01               	movwf	MOTOR_step_left@val,c
  1377                           
  1378                           ;main.c: 37: val = val << 1;
  1379  0079A4  5001               	movf	MOTOR_step_left@val,w,c
  1380  0079A6  2401               	addwf	MOTOR_step_left@val,w,c
  1381  0079A8  6E01               	movwf	MOTOR_step_left@val,c
  1382                           
  1383                           ;main.c: 38: if(val == 24) val = 9;
  1384  0079AA  5001               	movf	MOTOR_step_left@val,w,c
  1385  0079AC  0A18               	xorlw	24
  1386  0079AE  A4D8               	btfss	status,2,c
  1387  0079B0  D002               	goto	l689
  1388  0079B2  0E09               	movlw	9
  1389  0079B4  6E01               	movwf	MOTOR_step_left@val,c
  1390  0079B6                     l689:
  1391                           
  1392                           ;main.c: 39: if(val == 18) val = 3;
  1393  0079B6  5001               	movf	MOTOR_step_left@val,w,c
  1394  0079B8  0A12               	xorlw	18
  1395  0079BA  A4D8               	btfss	status,2,c
  1396  0079BC  D002               	goto	l34
  1397  0079BE  0E03               	movlw	3
  1398  0079C0  6E01               	movwf	MOTOR_step_left@val,c
  1399  0079C2                     l34:
  1400                           
  1401                           ;main.c: 40: return val;
  1402  0079C2  5001               	movf	MOTOR_step_left@val,w,c
  1403  0079C4  0012               	return	
  1404  0079C6                     __end_of_MOTOR_step_left:
  1405                           	opt stack 0
  1406                           tblptru	equ	0xFF8
  1407                           tblptrh	equ	0xFF7
  1408                           tblptrl	equ	0xFF6
  1409                           tablat	equ	0xFF5
  1410                           prodl	equ	0xFF3
  1411                           wreg	equ	0xFE8
  1412                           indf2	equ	0xFDF
  1413                           fsr2h	equ	0xFDA
  1414                           fsr2l	equ	0xFD9
  1415                           status	equ	0xFD8
  1416                           
  1417 ;; *************** function ___wmul *****************
  1418 ;; Defined at:
  1419 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  multiplier      2   23[COMRAM] unsigned int 
  1422 ;;  multiplicand    2   25[COMRAM] unsigned int 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  product         2   27[COMRAM] unsigned int 
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  2   23[COMRAM] unsigned int 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2, status,0, prodl, prodh
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1434 ;;      Params:         4       0       0       0       0       0       0
  1435 ;;      Locals:         2       0       0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0
  1437 ;;      Totals:         6       0       0       0       0       0       0
  1438 ;;Total ram usage:        6 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; This function calls:
  1441 ;;		Nothing
  1442 ;; This function is called by:
  1443 ;;		_main
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text9
  1448  0079C6                     __ptext9:
  1449                           	opt stack 0
  1450  0079C6                     ___wmul:
  1451                           	opt stack 30
  1452                           
  1453                           ;incstack = 0
  1454  0079C6  5018               	movf	___wmul@multiplier,w,c
  1455  0079C8  021A               	mulwf	___wmul@multiplicand,c
  1456  0079CA  CFF3 F01C          	movff	prodl,___wmul@product
  1457  0079CE  CFF4 F01D          	movff	prodh,___wmul@product+1
  1458  0079D2  5018               	movf	___wmul@multiplier,w,c
  1459  0079D4  021B               	mulwf	___wmul@multiplicand+1,c
  1460  0079D6  50F3               	movf	prodl,w,c
  1461  0079D8  261D               	addwf	___wmul@product+1,f,c
  1462  0079DA  5019               	movf	___wmul@multiplier+1,w,c
  1463  0079DC  021A               	mulwf	___wmul@multiplicand,c
  1464  0079DE  50F3               	movf	prodl,w,c
  1465  0079E0  261D               	addwf	___wmul@product+1,f,c
  1466  0079E2  C01C  F018         	movff	___wmul@product,?___wmul
  1467  0079E6  C01D  F019         	movff	___wmul@product+1,?___wmul+1
  1468  0079EA  0012               	return	
  1469  0079EC                     __end_of___wmul:
  1470                           	opt stack 0
  1471                           tblptru	equ	0xFF8
  1472                           tblptrh	equ	0xFF7
  1473                           tblptrl	equ	0xFF6
  1474                           tablat	equ	0xFF5
  1475                           prodh	equ	0xFF4
  1476                           prodl	equ	0xFF3
  1477                           wreg	equ	0xFE8
  1478                           indf2	equ	0xFDF
  1479                           fsr2h	equ	0xFDA
  1480                           fsr2l	equ	0xFD9
  1481                           status	equ	0xFD8
  1482                           
  1483 ;; *************** function ___fttol *****************
  1484 ;; Defined at:
  1485 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  f1              3    0[COMRAM] float 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  lval            4   10[COMRAM] unsigned long 
  1490 ;;  exp1            1   14[COMRAM] unsigned char 
  1491 ;;  sign1           1    9[COMRAM] unsigned char 
  1492 ;; Return value:  Size  Location     Type
  1493 ;;                  4    0[COMRAM] long 
  1494 ;; Registers used:
  1495 ;;		wreg, status,2, status,0
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1501 ;;      Params:         4       0       0       0       0       0       0
  1502 ;;      Locals:         6       0       0       0       0       0       0
  1503 ;;      Temps:          5       0       0       0       0       0       0
  1504 ;;      Totals:        15       0       0       0       0       0       0
  1505 ;;Total ram usage:       15 bytes
  1506 ;; Hardware stack levels used:    1
  1507 ;; This function calls:
  1508 ;;		Nothing
  1509 ;; This function is called by:
  1510 ;;		_main
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text10
  1515  007C0A                     __ptext10:
  1516                           	opt stack 0
  1517  007C0A                     ___fttol:
  1518                           	opt stack 30
  1519                           
  1520                           ;incstack = 0
  1521  007C0A  C003  F005         	movff	___fttol@f1+2,??___fttol
  1522  007C0E  6A06               	clrf	(??___fttol+1)& (0+255),c
  1523  007C10  6A07               	clrf	(??___fttol+2)& (0+255),c
  1524  007C12  3402               	rlcf	___fttol@f1+1,w,c
  1525  007C14  3605               	rlcf	??___fttol& (0+255),f,c
  1526  007C16  E301               	bnc	u301
  1527  007C18  8006               	bsf	(??___fttol+1)& (0+255),0,c
  1528  007C1A                     u301:
  1529  007C1A  5005               	movf	??___fttol,w,c
  1530  007C1C  6E0F               	movwf	___fttol@exp1,c
  1531  007C1E  660F               	tstfsz	___fttol@exp1& (0+255),c
  1532  007C20  D001               	goto	l877
  1533  007C22  D038               	goto	u350
  1534  007C24                     l877:
  1535  007C24  0E17               	movlw	23
  1536  007C26  6E05               	movwf	??___fttol& (0+255),c
  1537  007C28  C001  F006         	movff	___fttol@f1,??___fttol+1
  1538  007C2C  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  1539  007C30  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  1540  007C34  2805               	incf	??___fttol,w,c
  1541  007C36  6E09               	movwf	(??___fttol+4)& (0+255),c
  1542  007C38  D004               	goto	u320
  1543  007C3A                     u325:
  1544  007C3A  90D8               	bcf	status,0,c
  1545  007C3C  3208               	rrcf	??___fttol+3,f,c
  1546  007C3E  3207               	rrcf	??___fttol+2,f,c
  1547  007C40  3206               	rrcf	??___fttol+1,f,c
  1548  007C42                     u320:
  1549  007C42  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  1550  007C44  D7FA               	goto	u325
  1551  007C46  5006               	movf	??___fttol+1,w,c
  1552  007C48  6E0A               	movwf	___fttol@sign1,c
  1553  007C4A  8E02               	bsf	___fttol@f1+1,7,c
  1554  007C4C  0EFF               	movlw	255
  1555  007C4E  1601               	andwf	___fttol@f1,f,c
  1556  007C50  0EFF               	movlw	255
  1557  007C52  1602               	andwf	___fttol@f1+1,f,c
  1558  007C54  0E00               	movlw	0
  1559  007C56  1603               	andwf	___fttol@f1+2,f,c
  1560  007C58  5001               	movf	___fttol@f1,w,c
  1561  007C5A  6E0B               	movwf	___fttol@lval,c
  1562  007C5C  5002               	movf	___fttol@f1+1,w,c
  1563  007C5E  6E0C               	movwf	___fttol@lval+1,c
  1564  007C60  5003               	movf	___fttol@f1+2,w,c
  1565  007C62  6E0D               	movwf	___fttol@lval+2,c
  1566  007C64  6A0E               	clrf	___fttol@lval+3,c
  1567  007C66  0E8E               	movlw	142
  1568  007C68  5E0F               	subwf	___fttol@exp1,f,c
  1569  007C6A  AE0F               	btfss	___fttol@exp1,7,c
  1570  007C6C  D010               	goto	l899
  1571  007C6E  500F               	movf	___fttol@exp1,w,c
  1572  007C70  0A80               	xorlw	128
  1573  007C72  6E05               	movwf	??___fttol& (0+255),c
  1574  007C74  0EF1               	movlw	241
  1575  007C76  0A80               	xorlw	128
  1576  007C78  5C05               	subwf	??___fttol,w,c
  1577  007C7A  A0D8               	btfss	status,0,c
  1578  007C7C  D00B               	goto	u350
  1579  007C7E                     l895:
  1580  007C7E  90D8               	bcf	status,0,c
  1581  007C80  320E               	rrcf	___fttol@lval+3,f,c
  1582  007C82  320D               	rrcf	___fttol@lval+2,f,c
  1583  007C84  320C               	rrcf	___fttol@lval+1,f,c
  1584  007C86  320B               	rrcf	___fttol@lval,f,c
  1585  007C88  3E0F               	incfsz	___fttol@exp1,f,c
  1586  007C8A  D7F9               	goto	l895
  1587  007C8C  D014               	goto	l909
  1588  007C8E                     l899:
  1589  007C8E  0E17               	movlw	23
  1590  007C90  640F               	cpfsgt	___fttol@exp1,c
  1591  007C92  D00F               	goto	l907
  1592  007C94                     u350:
  1593  007C94  0E00               	movlw	0
  1594  007C96  6E01               	movwf	?___fttol,c
  1595  007C98  0E00               	movlw	0
  1596  007C9A  6E02               	movwf	?___fttol+1,c
  1597  007C9C  0E00               	movlw	0
  1598  007C9E  6E03               	movwf	?___fttol+2,c
  1599  007CA0  0E00               	movlw	0
  1600  007CA2  6E04               	movwf	?___fttol+3,c
  1601  007CA4  D01B               	goto	l480
  1602  007CA6                     l905:
  1603  007CA6  90D8               	bcf	status,0,c
  1604  007CA8  360B               	rlcf	___fttol@lval,f,c
  1605  007CAA  360C               	rlcf	___fttol@lval+1,f,c
  1606  007CAC  360D               	rlcf	___fttol@lval+2,f,c
  1607  007CAE  360E               	rlcf	___fttol@lval+3,f,c
  1608  007CB0  060F               	decf	___fttol@exp1,f,c
  1609  007CB2                     l907:
  1610  007CB2  660F               	tstfsz	___fttol@exp1,c
  1611  007CB4  D7F8               	goto	l905
  1612  007CB6                     l909:
  1613  007CB6  500A               	movf	___fttol@sign1,w,c
  1614  007CB8  B4D8               	btfsc	status,2,c
  1615  007CBA  D008               	goto	l913
  1616  007CBC  1E0E               	comf	___fttol@lval+3,f,c
  1617  007CBE  1E0D               	comf	___fttol@lval+2,f,c
  1618  007CC0  1E0C               	comf	___fttol@lval+1,f,c
  1619  007CC2  6C0B               	negf	___fttol@lval,c
  1620  007CC4  0E00               	movlw	0
  1621  007CC6  220C               	addwfc	___fttol@lval+1,f,c
  1622  007CC8  220D               	addwfc	___fttol@lval+2,f,c
  1623  007CCA  220E               	addwfc	___fttol@lval+3,f,c
  1624  007CCC                     l913:
  1625  007CCC  C00B  F001         	movff	___fttol@lval,?___fttol
  1626  007CD0  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  1627  007CD4  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  1628  007CD8  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  1629  007CDC                     l480:
  1630  007CDC  0012               	return	
  1631  007CDE                     __end_of___fttol:
  1632                           	opt stack 0
  1633                           tblptru	equ	0xFF8
  1634                           tblptrh	equ	0xFF7
  1635                           tblptrl	equ	0xFF6
  1636                           tablat	equ	0xFF5
  1637                           prodh	equ	0xFF4
  1638                           prodl	equ	0xFF3
  1639                           wreg	equ	0xFE8
  1640                           indf2	equ	0xFDF
  1641                           fsr2h	equ	0xFDA
  1642                           fsr2l	equ	0xFD9
  1643                           status	equ	0xFD8
  1644                           
  1645 ;; *************** function ___awdiv *****************
  1646 ;; Defined at:
  1647 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  dividend        2   15[COMRAM] int 
  1650 ;;  divisor         2   17[COMRAM] int 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  quotient        2   21[COMRAM] int 
  1653 ;;  sign            1   20[COMRAM] unsigned char 
  1654 ;;  counter         1   19[COMRAM] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  2   15[COMRAM] int 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0, prodl
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1664 ;;      Params:         4       0       0       0       0       0       0
  1665 ;;      Locals:         4       0       0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0
  1667 ;;      Totals:         8       0       0       0       0       0       0
  1668 ;;Total ram usage:        8 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_main
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text11
  1678  007ABE                     __ptext11:
  1679                           	opt stack 0
  1680  007ABE                     ___awdiv:
  1681                           	opt stack 30
  1682                           
  1683                           ;incstack = 0
  1684  007ABE  0E00               	movlw	0
  1685  007AC0  6E15               	movwf	___awdiv@sign,c
  1686  007AC2  5013               	movf	___awdiv@divisor+1,w,c
  1687  007AC4  0A80               	xorlw	128
  1688  007AC6  6EF3               	movwf	prodl,c
  1689  007AC8  0E80               	movlw	128
  1690  007ACA  5CF3               	subwf	prodl,w,c
  1691  007ACC  0E00               	movlw	0
  1692  007ACE  B4D8               	btfsc	status,2,c
  1693  007AD0  5C12               	subwf	___awdiv@divisor,w,c
  1694  007AD2  B0D8               	btfsc	status,0,c
  1695  007AD4  D006               	goto	l835
  1696  007AD6  6C12               	negf	___awdiv@divisor,c
  1697  007AD8  1E13               	comf	___awdiv@divisor+1,f,c
  1698  007ADA  B0D8               	btfsc	status,0,c
  1699  007ADC  2A13               	incf	___awdiv@divisor+1,f,c
  1700  007ADE  0E01               	movlw	1
  1701  007AE0  6E15               	movwf	___awdiv@sign,c
  1702  007AE2                     l835:
  1703  007AE2  5011               	movf	___awdiv@dividend+1,w,c
  1704  007AE4  0A80               	xorlw	128
  1705  007AE6  6EF3               	movwf	prodl,c
  1706  007AE8  0E80               	movlw	128
  1707  007AEA  5CF3               	subwf	prodl,w,c
  1708  007AEC  0E00               	movlw	0
  1709  007AEE  B4D8               	btfsc	status,2,c
  1710  007AF0  5C10               	subwf	___awdiv@dividend,w,c
  1711  007AF2  B0D8               	btfsc	status,0,c
  1712  007AF4  D006               	goto	l841
  1713  007AF6  6C10               	negf	___awdiv@dividend,c
  1714  007AF8  1E11               	comf	___awdiv@dividend+1,f,c
  1715  007AFA  B0D8               	btfsc	status,0,c
  1716  007AFC  2A11               	incf	___awdiv@dividend+1,f,c
  1717  007AFE  0E01               	movlw	1
  1718  007B00  1A15               	xorwf	___awdiv@sign,f,c
  1719  007B02                     l841:
  1720  007B02  0E00               	movlw	0
  1721  007B04  6E17               	movwf	___awdiv@quotient+1,c
  1722  007B06  0E00               	movlw	0
  1723  007B08  6E16               	movwf	___awdiv@quotient,c
  1724  007B0A  5013               	movf	___awdiv@divisor+1,w,c
  1725  007B0C  1012               	iorwf	___awdiv@divisor,w,c
  1726  007B0E  B4D8               	btfsc	status,2,c
  1727  007B10  D01C               	goto	l863
  1728  007B12  0E01               	movlw	1
  1729  007B14  6E14               	movwf	___awdiv@counter,c
  1730  007B16  D004               	goto	l849
  1731  007B18                     l847:
  1732  007B18  90D8               	bcf	status,0,c
  1733  007B1A  3612               	rlcf	___awdiv@divisor,f,c
  1734  007B1C  3613               	rlcf	___awdiv@divisor+1,f,c
  1735  007B1E  2A14               	incf	___awdiv@counter,f,c
  1736  007B20                     l849:
  1737  007B20  AE13               	btfss	___awdiv@divisor+1,7,c
  1738  007B22  D7FA               	goto	l847
  1739  007B24                     l851:
  1740  007B24  90D8               	bcf	status,0,c
  1741  007B26  3616               	rlcf	___awdiv@quotient,f,c
  1742  007B28  3617               	rlcf	___awdiv@quotient+1,f,c
  1743  007B2A  5012               	movf	___awdiv@divisor,w,c
  1744  007B2C  5C10               	subwf	___awdiv@dividend,w,c
  1745  007B2E  5013               	movf	___awdiv@divisor+1,w,c
  1746  007B30  5811               	subwfb	___awdiv@dividend+1,w,c
  1747  007B32  A0D8               	btfss	status,0,c
  1748  007B34  D005               	goto	l859
  1749  007B36  5012               	movf	___awdiv@divisor,w,c
  1750  007B38  5E10               	subwf	___awdiv@dividend,f,c
  1751  007B3A  5013               	movf	___awdiv@divisor+1,w,c
  1752  007B3C  5A11               	subwfb	___awdiv@dividend+1,f,c
  1753  007B3E  8016               	bsf	___awdiv@quotient,0,c
  1754  007B40                     l859:
  1755  007B40  90D8               	bcf	status,0,c
  1756  007B42  3213               	rrcf	___awdiv@divisor+1,f,c
  1757  007B44  3212               	rrcf	___awdiv@divisor,f,c
  1758  007B46  2E14               	decfsz	___awdiv@counter,f,c
  1759  007B48  D7ED               	goto	l851
  1760  007B4A                     l863:
  1761  007B4A  5015               	movf	___awdiv@sign,w,c
  1762  007B4C  B4D8               	btfsc	status,2,c
  1763  007B4E  D004               	goto	l867
  1764  007B50  6C16               	negf	___awdiv@quotient,c
  1765  007B52  1E17               	comf	___awdiv@quotient+1,f,c
  1766  007B54  B0D8               	btfsc	status,0,c
  1767  007B56  2A17               	incf	___awdiv@quotient+1,f,c
  1768  007B58                     l867:
  1769  007B58  C016  F010         	movff	___awdiv@quotient,?___awdiv
  1770  007B5C  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  1771  007B60  0012               	return	
  1772  007B62                     __end_of___awdiv:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           prodh	equ	0xFF4
  1779                           prodl	equ	0xFF3
  1780                           wreg	equ	0xFE8
  1781                           indf2	equ	0xFDF
  1782                           fsr2h	equ	0xFDA
  1783                           fsr2l	equ	0xFD9
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _ADC_init *****************
  1787 ;; Defined at:
  1788 ;;		line 5 in file "main.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;		None               void
  1795 ;; Registers used:
  1796 ;;		wreg, status,2
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1802 ;;      Params:         0       0       0       0       0       0       0
  1803 ;;      Locals:         0       0       0       0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0       0       0
  1805 ;;      Totals:         0       0       0       0       0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_main
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text12
  1816  00794E                     __ptext12:
  1817                           	opt stack 0
  1818  00794E                     _ADC_init:
  1819                           	opt stack 30
  1820                           
  1821                           ;main.c: 7: ADCON2bits.ADFM = 1;
  1822                           
  1823                           ;incstack = 0
  1824  00794E  8EC0               	bsf	4032,7,c	;volatile
  1825                           
  1826                           ;main.c: 8: ADCON1 = 0;
  1827  007950  0E00               	movlw	0
  1828  007952  6EC1               	movwf	4033,c	;volatile
  1829                           
  1830                           ;main.c: 9: ADCON2bits.ACQT = 0b101;
  1831  007954  50C0               	movf	4032,w,c	;volatile
  1832  007956  0BC7               	andlw	-57
  1833  007958  0928               	iorlw	40
  1834  00795A  6EC0               	movwf	4032,c	;volatile
  1835                           
  1836                           ;main.c: 10: ADCON2bits.ADCS = 0b010;
  1837  00795C  50C0               	movf	4032,w,c	;volatile
  1838  00795E  0BF8               	andlw	-8
  1839  007960  0902               	iorlw	2
  1840  007962  6EC0               	movwf	4032,c	;volatile
  1841  007964  0012               	return	
  1842  007966                     __end_of_ADC_init:
  1843                           	opt stack 0
  1844  0000                     tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           prodh	equ	0xFF4
  1849                           prodl	equ	0xFF3
  1850                           wreg	equ	0xFE8
  1851                           indf2	equ	0xFDF
  1852                           fsr2h	equ	0xFDA
  1853                           fsr2l	equ	0xFD9
  1854                           status	equ	0xFD8
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           wreg	equ	0xFE8
  1862                           indf2	equ	0xFDF
  1863                           fsr2h	equ	0xFDA
  1864                           fsr2l	equ	0xFD9
  1865                           status	equ	0xFD8
  1866                           
  1867                           	psect	rparam
  1868  0000                     tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           prodh	equ	0xFF4
  1873                           prodl	equ	0xFF3
  1874                           wreg	equ	0xFE8
  1875                           indf2	equ	0xFDF
  1876                           fsr2h	equ	0xFDA
  1877                           fsr2l	equ	0xFD9
  1878                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     51      53
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    corrige_motor@port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(ABS[1]), 


Critical Paths under _main in COMRAM

    _main->_corrige_motor
    _cvt_toVoltage->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _corrige_motor->___wmul
    ___wmul->___awdiv
    ___awdiv->___fttol

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    4617
                                             42 COMRAM     9     9      0
                           _ADC_init
                            ___awdiv
                            ___fttol
                             ___wmul
                      _corrige_motor
                      _cvt_toVoltage
                           _read_ADC
 ---------------------------------------------------------------------------------
 (1) _read_ADC                                             7     5      2      30
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _cvt_toVoltage                                        6     3      3    3218
                                             27 COMRAM     6     3      3
                           ___awtoft
                            ___ftmul
                           _read_ADC (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    1704
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    1441
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1338
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _corrige_motor                                       13     9      4     528
                                             29 COMRAM    13     9      4
                    _MOTOR_step_left
                   _MOTOR_step_right
                            ___awdiv (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _MOTOR_step_right                                     1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MOTOR_step_left                                      1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     191
                                             23 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     294
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     281
                                             15 COMRAM     8     4      4
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___awdiv
     ___fttol (ARG)
   ___fttol
   ___wmul
     ___awdiv (ARG)
       ___fttol (ARG)
     ___fttol (ARG)
   _corrige_motor
     _MOTOR_step_left
     _MOTOR_step_right
     ___awdiv (ARG)
       ___fttol (ARG)
     ___fttol (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___fttol (ARG)
       ___fttol (ARG)
   _cvt_toVoltage
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     _read_ADC (ARG)
   _read_ADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     33      35       1       41.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      35      15        0.0%
DATA                 0      0      35       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Mar 13 16:32:07 2015

                       l24 7A8C                         l34 79C2                         l51 7EBC  
                       l39 799E               ___awdiv@sign 0015        ___wmul@multiplicand 001A  
                      l460 7DC0                        l711 7CF8                        l480 7CDC  
                      l376 7C08                        l811 7E5E                        l731 7D50  
                      l805 7E0E                        l661 7B8A                        l741 7D78  
                      l717 7D1E                        l807 7E3A                        l671 7BE6  
                      l663 7BA8                        l655 7B72                        l735 7D60  
                      l841 7B02                        l913 7CCC                        l905 7CA6  
                      l761 7A52                        l745 7D88                        l921 7EC6  
                      l851 7B24                        l835 7AE2                        l907 7CB2  
                      l819 7E86                        l667 7BBE                        l659 7B80  
                      l931 7F74                        l909 7CB6                        l669 7BDC  
                      l933 7FD4                        l847 7B18                        l863 7B4A  
                      l927 7F2A                        l849 7B20                        l689 79B6  
                      l867 7B58                        l859 7B40                        l699 7992  
                      l877 7C24                        l797 7DE6                        l895 7C7E  
                      l899 7C8E                        u121 7CEE                        u301 7C1A  
                      u141 7D08                        u230 7EB8                        u150 7D10  
                      u320 7C42                        u325 7C3A                        u350 7C94  
                      u427 7FF2                        u437 7A82                        u447 7A98  
                      u457 7E00                        u467 7E78                        wreg 000FE8  
         _MOTOR_step_right 7980                       _main 7EBE               ___ftpack@arg 0001  
             ___ftpack@exp 0004                       fsr2h 000FDA                       indf2 000FDF  
                     fsr2l 000FD9                       prodh 000FF4                       prodl 000FF3  
                     start 0000           __end_of_ADC_init 7966               ___ftmul@cntr 001A  
             ___ftmul@sign 001B               ___fttol@exp1 000F               ___fttol@lval 000B  
                    ?_main 0001            __end_of___awdiv 7B62            __end_of___ftmul 7DC2  
          ___awdiv@divisor 0012            __end_of___fttol 7CDE            ___awdiv@counter 0014  
                    _PORTD 000F83                      _TRISD 000F95              _corrige_motor 7DC2  
            ___awtoft@sign 000C              ___ftpack@sign 0005                      main@i 002F  
                    tablat 000FF5                      status 000FD8   __size_of_MOTOR_step_left 0024  
          __initialization 7966               __end_of_main 8000                     ??_main 002B  
            ___fttol@sign1 000A              __activetblptr 000000             ?_corrige_motor 001E  
   __size_of_cvt_toVoltage 0042                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _ADRESH 000FC4                     _ADRESL 000FC3           ___awdiv@dividend 0010  
         __end_of___awtoft 7A76           __end_of___ftpack 7C0A                     ___wmul 79C6  
                ??___awdiv 0014                  ??___ftmul 0013                  ??___fttol 0005  
         __end_of_read_ADC 7ABE           ___awdiv@quotient 0016      ___ftmul@f3_as_product 0016  
             __pdataCOMRAM 0035                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ?_ADC_init 0001                 __accesstop 0080  
  __end_of__initialization 797A                 ___awtoft@c 0009              _cvt_toVoltage 79EC  
               ___ftmul@f1 000D                 ___ftmul@f2 0010                 ___fttol@f1 0001  
       read_ADC@adc_result 0005             __pcstackCOMRAM 0001   __end_of_MOTOR_step_right 79A2  
        ??_MOTOR_step_left 0001            ??_corrige_motor 0022                 ??_ADC_init 0001  
           ?_cvt_toVoltage 001C                    ?___wmul 0018                  ?___awtoft 0009  
                ?___ftpack 0001           cvt_toVoltage@ret 001F           cvt_toVoltage@val 001C  
                ?_read_ADC 0001                    __Hparam 0000                    __Lparam 0000  
                  ___awdiv 7ABE            __size_of___wmul 0026                    ___ftmul 7CDE  
                  ___fttol 7C0A                    __pcinit 7966                 ??___awtoft 000C  
               ??___ftpack 0006                    __ramtop 0600                    __ptext0 7EBE  
                  __ptext1 7A76                    __ptext2 79EC                    __ptext3 7CDE  
                  __ptext4 7A2E                    __ptext5 7B62                    __ptext6 7DC2  
                  __ptext7 7980                    __ptext8 79A2                    __ptext9 79C6  
     end_of_initialization 797A                 ??_read_ADC 0003            ??_cvt_toVoltage 001F  
        corrige_motor@port 001E          corrige_motor@step 0020          __size_of_ADC_init 0018  
          _MOTOR_step_left 79A2                ___ftmul@exp 0019            read_ADC@channel 0007  
        ?_MOTOR_step_right 0001             __end_of___wmul 79EC              __pidataCOMRAM 794D  
       ??_MOTOR_step_right 0001        start_initialization 7966                   ??___wmul 001C  
        __size_of___awtoft 0048          __size_of___ftpack 00A8      __end_of_corrige_motor 7EBE  
              __pbssCOMRAM 0034    __end_of_MOTOR_step_left 79C6          __size_of_read_ADC 0048  
                 ?___awdiv 0010                   ?___ftmul 000D                   ?___fttol 0001  
                 _ADC_init 794E             ___wmul@product 001C           corrige_motor@aux 0034  
               _ADCON0bits 000FC2                 _ADCON2bits 000FC0          ___wmul@multiplier 0018  
         ?_MOTOR_step_left 0001      __end_of_cvt_toVoltage 7A2E                   __Hrparam 0000  
                 __Lrparam 0000           __size_of___awdiv 00A4           __size_of___ftmul 00E4  
         __size_of___fttol 00D4                   ___awtoft 7A2E                   ___ftpack 7B62  
                 __ptext10 7C0A                   __ptext11 7ABE                   __ptext12 794E  
__size_of_MOTOR_step_right 0022                   _read_ADC 7A76              __size_of_main 0142  
      corrige_motor@output 0035            main@temperature 0031        MOTOR_step_right@val 0001  
       corrige_motor@i_165 0029             corrige_motor@i 0027         MOTOR_step_left@val 0001  
   __size_of_corrige_motor 00FC  
