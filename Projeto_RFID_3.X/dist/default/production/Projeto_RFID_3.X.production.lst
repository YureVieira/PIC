

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat Apr 11 21:29:47 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     	;# 
    35  0001                     	;# 
    36  0002                     	;# 
    37  0003                     	;# 
    38  0004                     	;# 
    39  0005                     	;# 
    40  0006                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000E                     	;# 
    45  000E                     	;# 
    46  000F                     	;# 
    47  0010                     	;# 
    48  0011                     	;# 
    49  0012                     	;# 
    50  0015                     	;# 
    51  0015                     	;# 
    52  0016                     	;# 
    53  0017                     	;# 
    54  0018                     	;# 
    55  0019                     	;# 
    56  001A                     	;# 
    57  001F                     	;# 
    58  0081                     	;# 
    59  0085                     	;# 
    60  0086                     	;# 
    61  008C                     	;# 
    62  008E                     	;# 
    63  0092                     	;# 
    64  0098                     	;# 
    65  0099                     	;# 
    66  009A                     	;# 
    67  009B                     	;# 
    68  009C                     	;# 
    69  009D                     	;# 
    70  009F                     	;# 
    71                           
    72                           	psect	strings
    73  0001                     __pstrings:	
    74  0001                     stringtab:	
    75  0001                     __stringtab:	
    76  0001                     stringcode:	
    77                           ;	String table - string pointers are 1 byte each
    78                           
    79  0001                     stringdir:	
    80  0001  3000               	movlw	high stringdir
    81  0002  008A               	movwf	10
    82  0003  0804               	movf	4,w
    83  0004  0A84               	incf	4,f
    84  0005  0782               	addwf	2,f
    85  0006                     __stringbase:	
    86  0006  3400               	retlw	0
    87  0007                     __end_of__stringtab:	
    88  0007                     _dpowers:	
    89  0007  3401               	retlw	1
    90  0008  3400               	retlw	0
    91  0009  340A               	retlw	10
    92  000A  3400               	retlw	0
    93  000B  3464               	retlw	100
    94  000C  3400               	retlw	0
    95  000D  34E8               	retlw	232
    96  000E  3403               	retlw	3
    97  000F  3410               	retlw	16
    98  0010  3427               	retlw	39
    99  0011                     __end_of_dpowers:	
   100  0011                     __stringdata:	
   101  0011                     STR_4:	
   102  0011  3454               	retlw	84	;'T'
   103  0012  3469               	retlw	105	;'i'
   104  0013  3470               	retlw	112	;'p'
   105  0014  346F               	retlw	111	;'o'
   106  0015  3420               	retlw	32	;' '
   107  0016  3464               	retlw	100	;'d'
   108  0017  3465               	retlw	101	;'e'
   109  0018  3420               	retlw	32	;' '
   110  0019  3454               	retlw	84	;'T'
   111  001A  3461               	retlw	97	;'a'
   112  001B  3467               	retlw	103	;'g'
   113  001C  343A               	retlw	58	;':'
   114  001D  3420               	retlw	32	;' '
   115  001E  3425               	retlw	37	;'%'
   116  001F  3475               	retlw	117	;'u'
   117  0020  3400               	retlw	0
   118  0021                     STR_2:	
   119  0021  344F               	retlw	79	;'O'
   120  0022  346C               	retlw	108	;'l'
   121  0023  3461               	retlw	97	;'a'
   122  0024  3420               	retlw	32	;' '
   123  0025  346D               	retlw	109	;'m'
   124  0026  3475               	retlw	117	;'u'
   125  0027  346E               	retlw	110	;'n'
   126  0028  3464               	retlw	100	;'d'
   127  0029  346F               	retlw	111	;'o'
   128  002A  3421               	retlw	33	;'!'
   129  002B  3400               	retlw	0
   130  002C                     STR_5:	
   131  002C  3443               	retlw	67	;'C'
   132  002D  346F               	retlw	111	;'o'
   133  002E  3464               	retlw	100	;'d'
   134  002F  3469               	retlw	105	;'i'
   135  0030  3467               	retlw	103	;'g'
   136  0031  346F               	retlw	111	;'o'
   137  0032  343A               	retlw	58	;':'
   138  0033  3420               	retlw	32	;' '
   139  0034  3400               	retlw	0
   140  0035                     STR_1:	
   141  0035  344F               	retlw	79	;'O'
   142  0036  346B               	retlw	107	;'k'
   143  0037  340A               	retlw	10
   144  0038  3400               	retlw	0
   145  0039                     STR_6:	
   146  0039  3425               	retlw	37	;'%'
   147  003A  3464               	retlw	100	;'d'
   148  003B  3400               	retlw	0
   149  003C                     STR_3:	
   150  003C  342E               	retlw	46	;'.'
   151  003D  3400               	retlw	0
   152  003E                     __end_of__stringdata:	
   153                           
   154                           ; #config settings
   155  0000                     
   156                           	psect	nvBANK0
   157  006B                     __pnvBANK0:	
   158  006B                     __mode:	
   159  006B                     	ds	1
   160  0005                     _PORTAbits	set	5
   161  0006                     _PORTB	set	6
   162  0006                     _PORTBbits	set	6
   163  001A                     _RCREG	set	26
   164  0018                     _RCSTAbits	set	24
   165  0019                     _TXREG	set	25
   166  0065                     _RCIF	set	101
   167  0064                     _TXIF	set	100
   168  0099                     _SPBRG	set	153
   169  0085                     _TRISAbits	set	133
   170  0086                     _TRISB	set	134
   171  0086                     _TRISBbits	set	134
   172  0098                     _TXSTAbits	set	152
   173                           
   174                           	psect	cinit
   175  07F9                     start_initialization:	
   176  07F9                     __initialization:	
   177                           
   178                           ; Clear objects allocated to BANK0
   179  07F9  1383               	bcf	3,7	;select IRP bank0
   180  07FA  3059               	movlw	low __pbssBANK0
   181  07FB  0084               	movwf	4
   182  07FC  306B               	movlw	low (__pbssBANK0+18)
   183  07FD  221A               	fcall	clear_ram0
   184  07FE                     end_of_initialization:	
   185                           ;End of C runtime variable initialization code
   186                           
   187  07FE                     __end_of__initialization:	
   188  07FE  0183               	clrf	3
   189  07FF  2D5D               	ljmp	_main	;jump to C main() function
   190                           
   191                           	psect	bssBANK0
   192  0059                     __pbssBANK0:	
   193  0059                     _buffer:	
   194  0059                     	ds	16
   195  0069                     _count:	
   196  0069                     	ds	2
   197                           
   198                           	psect	clrtext
   199  021A                     clear_ram0:	
   200                           ;	Called with FSR containing the base address, and
   201                           ;	W with the last address+1
   202                           
   203  021A  0064               	clrwdt	;clear the watchdog before getting into this loop
   204  021B                     clrloop0:	
   205  021B  0180               	clrf	0	;clear RAM location pointed to by FSR
   206  021C  0A84               	incf	4,f	;increment pointer
   207  021D  0604               	xorwf	4,w	;XOR with final address
   208  021E  1903               	btfsc	3,2	;have we reached the end yet?
   209  021F  3400               	retlw	0	;all done for this memory range, return
   210  0220  0604               	xorwf	4,w	;XOR again to restore value
   211  0221  2A1B               	goto	clrloop0	;do the next byte
   212                           
   213                           	psect	cstackCOMMON
   214  0070                     __pcstackCOMMON:	
   215  0070                     ?_putch:	
   216  0070                     ??_putch:	
   217                           ; 0 bytes @ 0x0
   218                           
   219  0070                     ?_UART_init:	
   220                           ; 0 bytes @ 0x0
   221                           
   222  0070                     ??_UART_init:	
   223                           ; 0 bytes @ 0x0
   224                           
   225  0070                     ?_SPI_init:	
   226                           ; 0 bytes @ 0x0
   227                           
   228  0070                     ??_SPI_init:	
   229                           ; 0 bytes @ 0x0
   230                           
   231  0070                     ??_SPI_transfer:	
   232                           ; 0 bytes @ 0x0
   233                           
   234  0070                     ?_MFRC522_Reset:	
   235                           ; 0 bytes @ 0x0
   236                           
   237  0070                     ?_MFRC522_AntennaOn:	
   238                           ; 0 bytes @ 0x0
   239                           
   240  0070                     ?_MFRC522_Init:	
   241                           ; 0 bytes @ 0x0
   242                           
   243  0070                     ?_main:	
   244                           ; 0 bytes @ 0x0
   245                           
   246  0070                     ?_SPI_transfer:	
   247                           ; 0 bytes @ 0x0
   248                           
   249  0070                     ?_MFRC522_Rd:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_MFRC522_SelectTag:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_MFRC522_AntiColl:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_MFRC522_isCard:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_MFRC522_ReadCardSerial:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?___lwdiv:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     putch@data:	
   268                           ; 2 bytes @ 0x0
   269                           
   270  0070                     ___lwdiv@divisor:	
   271                           ; 1 bytes @ 0x0
   272                           
   273                           
   274                           ; 2 bytes @ 0x0
   275  0070                     	ds	1
   276  0071                     SPI_init@mode:	
   277  0071                     SPI_transfer@ret_213:	
   278                           ; 1 bytes @ 0x1
   279                           
   280                           
   281                           ; 1 bytes @ 0x1
   282  0071                     	ds	1
   283  0072                     SPI_transfer@ret:	
   284  0072                     ___lwdiv@dividend:	
   285                           ; 1 bytes @ 0x2
   286                           
   287                           
   288                           ; 2 bytes @ 0x2
   289  0072                     	ds	1
   290  0073                     SPI_transfer@i:	
   291                           
   292                           ; 2 bytes @ 0x3
   293  0073                     	ds	1
   294  0074                     ??___lwdiv:	
   295                           
   296                           ; 0 bytes @ 0x4
   297  0074                     	ds	1
   298  0075                     SPI_transfer@i_214:	
   299  0075                     ___lwdiv@quotient:	
   300                           ; 2 bytes @ 0x5
   301                           
   302                           
   303                           ; 2 bytes @ 0x5
   304  0075                     	ds	2
   305  0077                     SPI_transfer@data:	
   306  0077                     ___lwdiv@counter:	
   307                           ; 1 bytes @ 0x7
   308                           
   309                           
   310                           ; 1 bytes @ 0x7
   311  0077                     	ds	1
   312  0078                     ??_MFRC522_Rd:	
   313  0078                     ?___lwmod:	
   314                           ; 0 bytes @ 0x8
   315                           
   316  0078                     ___lwmod@divisor:	
   317                           ; 2 bytes @ 0x8
   318                           
   319                           
   320                           ; 2 bytes @ 0x8
   321  0078                     	ds	1
   322  0079                     MFRC522_Rd@addr:	
   323                           
   324                           ; 1 bytes @ 0x9
   325  0079                     	ds	1
   326  007A                     MFRC522_Rd@value:	
   327  007A                     ___lwmod@dividend:	
   328                           ; 1 bytes @ 0xA
   329                           
   330                           
   331                           ; 2 bytes @ 0xA
   332  007A                     	ds	1
   333  007B                     ?_MFRC522_Wr:	
   334  007B                     MFRC522_Wr@value:	
   335                           ; 0 bytes @ 0xB
   336                           
   337                           
   338                           ; 1 bytes @ 0xB
   339  007B                     	ds	1
   340  007C                     ??_MFRC522_Wr:	
   341  007C                     ??___lwmod:	
   342                           ; 0 bytes @ 0xC
   343                           
   344                           
   345                           ; 0 bytes @ 0xC
   346  007C                     	ds	1
   347  007D                     MFRC522_Wr@addr:	
   348  007D                     ___lwmod@counter:	
   349                           ; 1 bytes @ 0xD
   350                           
   351                           
   352                           ; 1 bytes @ 0xD
   353  007D                     	ds	1
   354                           
   355                           	psect	cstackBANK0
   356  0020                     __pcstackBANK0:	
   357  0020                     ?_MFRC522_Clear_Bit:	
   358  0020                     ?_MFRC522_Set_Bit:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0020                     ??_MFRC522_Reset:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  0020                     ?_printf:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  0020                     MFRC522_Clear_Bit@mask:	
   368                           ; 2 bytes @ 0x0
   369                           
   370  0020                     MFRC522_Set_Bit@mask:	
   371                           ; 1 bytes @ 0x0
   372                           
   373                           
   374                           ; 1 bytes @ 0x0
   375  0020                     	ds	1
   376  0021                     ??_MFRC522_Clear_Bit:	
   377  0021                     ??_MFRC522_Set_Bit:	
   378                           ; 0 bytes @ 0x1
   379                           
   380                           
   381                           ; 0 bytes @ 0x1
   382  0021                     	ds	1
   383  0022                     ??_printf:	
   384  0022                     MFRC522_Set_Bit@addr:	
   385                           ; 0 bytes @ 0x2
   386                           
   387                           
   388                           ; 1 bytes @ 0x2
   389  0022                     	ds	1
   390  0023                     ??_MFRC522_AntennaOn:	
   391  0023                     MFRC522_Clear_Bit@addr:	
   392                           ; 0 bytes @ 0x3
   393                           
   394                           
   395                           ; 1 bytes @ 0x3
   396  0023                     	ds	1
   397  0024                     ??_MFRC522_Init:	
   398  0024                     ?_MFRC522_CRC:	
   399                           ; 0 bytes @ 0x4
   400                           
   401  0024                     ?_MFRC522_ToCard:	
   402                           ; 0 bytes @ 0x4
   403                           
   404  0024                     MFRC522_ToCard@sendData:	
   405                           ; 1 bytes @ 0x4
   406                           
   407  0024                     MFRC522_CRC@length:	
   408                           ; 1 bytes @ 0x4
   409                           
   410                           
   411                           ; 1 bytes @ 0x4
   412  0024                     	ds	1
   413  0025                     MFRC522_ToCard@sendLen:	
   414  0025                     MFRC522_CRC@dataOut:	
   415                           ; 1 bytes @ 0x5
   416                           
   417  0025                     printf@prec:	
   418                           ; 1 bytes @ 0x5
   419                           
   420                           
   421                           ; 1 bytes @ 0x5
   422  0025                     	ds	1
   423  0026                     ??_MFRC522_CRC:	
   424  0026                     MFRC522_ToCard@backData:	
   425                           ; 0 bytes @ 0x6
   426                           
   427  0026                     printf@ap:	
   428                           ; 1 bytes @ 0x6
   429                           
   430                           
   431                           ; 1 bytes @ 0x6
   432  0026                     	ds	1
   433  0027                     MFRC522_ToCard@backLen:	
   434  0027                     MFRC522_CRC@n:	
   435                           ; 1 bytes @ 0x7
   436                           
   437  0027                     printf@flag:	
   438                           ; 1 bytes @ 0x7
   439                           
   440                           
   441                           ; 1 bytes @ 0x7
   442  0027                     	ds	1
   443  0028                     ??_MFRC522_ToCard:	
   444  0028                     MFRC522_CRC@i:	
   445                           ; 0 bytes @ 0x8
   446                           
   447  0028                     printf@_val:	
   448                           ; 1 bytes @ 0x8
   449                           
   450                           
   451                           ; 4 bytes @ 0x8
   452  0028                     	ds	1
   453  0029                     MFRC522_CRC@dataIn:	
   454                           
   455                           ; 1 bytes @ 0x9
   456  0029                     	ds	3
   457  002C                     printf@f:	
   458                           
   459                           ; 1 bytes @ 0xC
   460  002C                     	ds	1
   461  002D                     printf@c:	
   462                           
   463                           ; 1 bytes @ 0xD
   464  002D                     	ds	1
   465  002E                     MFRC522_ToCard@waitIRq:	
   466                           
   467                           ; 1 bytes @ 0xE
   468  002E                     	ds	1
   469  002F                     MFRC522_ToCard@_status:	
   470                           
   471                           ; 1 bytes @ 0xF
   472  002F                     	ds	1
   473  0030                     MFRC522_ToCard@lastBits:	
   474                           
   475                           ; 1 bytes @ 0x10
   476  0030                     	ds	1
   477  0031                     MFRC522_ToCard@irqEn:	
   478                           
   479                           ; 1 bytes @ 0x11
   480  0031                     	ds	1
   481  0032                     MFRC522_ToCard@command:	
   482                           
   483                           ; 1 bytes @ 0x12
   484  0032                     	ds	1
   485  0033                     MFRC522_ToCard@i:	
   486                           
   487                           ; 2 bytes @ 0x13
   488  0033                     	ds	2
   489  0035                     MFRC522_ToCard@n:	
   490                           
   491                           ; 1 bytes @ 0x15
   492  0035                     	ds	1
   493  0036                     ??_MFRC522_SelectTag:	
   494  0036                     ??_MFRC522_AntiColl:	
   495                           ; 0 bytes @ 0x16
   496                           
   497  0036                     ?_MFRC522_Request:	
   498                           ; 0 bytes @ 0x16
   499                           
   500  0036                     MFRC522_Request@TagType:	
   501                           ; 1 bytes @ 0x16
   502                           
   503                           
   504                           ; 1 bytes @ 0x16
   505  0036                     	ds	1
   506  0037                     ??_MFRC522_Request:	
   507                           
   508                           ; 0 bytes @ 0x17
   509  0037                     	ds	4
   510  003B                     MFRC522_Request@reqMode:	
   511  003B                     MFRC522_AntiColl@serNumCheck:	
   512                           ; 1 bytes @ 0x1B
   513                           
   514  003B                     MFRC522_SelectTag@buffer:	
   515                           ; 1 bytes @ 0x1B
   516                           
   517                           
   518                           ; 9 bytes @ 0x1B
   519  003B                     	ds	1
   520  003C                     MFRC522_Request@_status:	
   521  003C                     MFRC522_AntiColl@unLen:	
   522                           ; 1 bytes @ 0x1C
   523                           
   524                           
   525                           ; 2 bytes @ 0x1C
   526  003C                     	ds	1
   527  003D                     MFRC522_Request@backBits:	
   528                           
   529                           ; 2 bytes @ 0x1D
   530  003D                     	ds	1
   531  003E                     MFRC522_AntiColl@_status:	
   532                           
   533                           ; 1 bytes @ 0x1E
   534  003E                     	ds	1
   535  003F                     ??_MFRC522_isCard:	
   536  003F                     MFRC522_AntiColl@i:	
   537                           ; 0 bytes @ 0x1F
   538                           
   539                           
   540                           ; 1 bytes @ 0x1F
   541  003F                     	ds	1
   542  0040                     MFRC522_AntiColl@serNum:	
   543  0040                     MFRC522_isCard@TagType:	
   544                           ; 1 bytes @ 0x20
   545                           
   546                           
   547                           ; 1 bytes @ 0x20
   548  0040                     	ds	1
   549  0041                     ??_MFRC522_ReadCardSerial:	
   550                           
   551                           ; 0 bytes @ 0x21
   552  0041                     	ds	1
   553  0042                     MFRC522_ReadCardSerial@_status:	
   554                           
   555                           ; 1 bytes @ 0x22
   556  0042                     	ds	1
   557  0043                     MFRC522_ReadCardSerial@str:	
   558                           
   559                           ; 1 bytes @ 0x23
   560  0043                     	ds	1
   561  0044                     MFRC522_SelectTag@_status:	
   562                           
   563                           ; 1 bytes @ 0x24
   564  0044                     	ds	1
   565  0045                     MFRC522_SelectTag@size:	
   566                           
   567                           ; 1 bytes @ 0x25
   568  0045                     	ds	1
   569  0046                     MFRC522_SelectTag@serNum:	
   570                           
   571                           ; 1 bytes @ 0x26
   572  0046                     	ds	1
   573  0047                     MFRC522_SelectTag@recvBits:	
   574                           
   575                           ; 2 bytes @ 0x27
   576  0047                     	ds	2
   577  0049                     MFRC522_SelectTag@i:	
   578                           
   579                           ; 1 bytes @ 0x29
   580  0049                     	ds	1
   581  004A                     ??_main:	
   582                           
   583                           ; 0 bytes @ 0x2A
   584  004A                     	ds	3
   585  004D                     main@size:	
   586                           
   587                           ; 1 bytes @ 0x2D
   588  004D                     	ds	1
   589  004E                     main@UID:	
   590                           
   591                           ; 6 bytes @ 0x2E
   592  004E                     	ds	6
   593  0054                     main@i:	
   594                           
   595                           ; 2 bytes @ 0x34
   596  0054                     	ds	2
   597  0056                     main@i_346:	
   598                           
   599                           ; 2 bytes @ 0x36
   600  0056                     	ds	2
   601  0058                     main@TagType:	
   602                           
   603                           ; 1 bytes @ 0x38
   604  0058                     	ds	1
   605                           
   606                           	psect	maintext
   607  055D                     __pmaintext:	
   608 ;;
   609 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   610 ;;
   611 ;; *************** function _main *****************
   612 ;; Defined at:
   613 ;;		line 497 in file "main.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;		None
   616 ;; Auto vars:     Size  Location     Type
   617 ;;  i               2   54[BANK0 ] int 
   618 ;;  i               2   52[BANK0 ] int 
   619 ;;  UID             6   46[BANK0 ] unsigned char [6]
   620 ;;  TagType         1   56[BANK0 ] unsigned char 
   621 ;;  size            1   45[BANK0 ] unsigned char 
   622 ;; Return value:  Size  Location     Type
   623 ;;		None               void
   624 ;; Registers used:
   625 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   626 ;; Tracked objects:
   627 ;;		On entry : 17F/0
   628 ;;		On exit  : 0/0
   629 ;;		Unchanged: 0/0
   630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   631 ;;      Params:         0       0       0       0
   632 ;;      Locals:         0      12       0       0
   633 ;;      Temps:          0       3       0       0
   634 ;;      Totals:         0      15       0       0
   635 ;;Total ram usage:       15 bytes
   636 ;; Hardware stack levels required when called:    6
   637 ;; This function calls:
   638 ;;		_MFRC522_Init
   639 ;;		_MFRC522_ReadCardSerial
   640 ;;		_MFRC522_SelectTag
   641 ;;		_MFRC522_isCard
   642 ;;		_SPI_init
   643 ;;		_UART_init
   644 ;;		_printf
   645 ;; This function is called by:
   646 ;;		Startup code after reset
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           
   651                           ;psect for function _main
   652  055D                     _main:	
   653                           
   654                           ;main.c: 499: char UID[6];
   655                           ;main.c: 500: unsigned char TagType;
   656                           ;main.c: 501: char size;
   657                           ;main.c: 504: SPI_init(1);
   658                           
   659                           ;incstack = 0
   660                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   661  055D  3001               	movlw	1
   662  055E  22C3               	fcall	_SPI_init
   663                           
   664                           ;main.c: 507: MFRC522_Init();
   665  055F  2317               	fcall	_MFRC522_Init
   666                           
   667                           ;main.c: 509: UART_init();
   668  0560  2271               	fcall	_UART_init
   669                           
   670                           ;main.c: 510: TRISBbits.TRISB3 = 0;
   671  0561  1683               	bsf	3,5	;RP0=1, select bank1
   672  0562  1303               	bcf	3,6	;RP1=0, select bank1
   673  0563  1186               	bcf	6,3	;volatile
   674                           
   675                           ;main.c: 511: for(int i=0;i<10;i++)
   676  0564  1283               	bcf	3,5	;RP0=0, select bank0
   677  0565  1303               	bcf	3,6	;RP1=0, select bank0
   678  0566  01D4               	clrf	main@i
   679  0567  01D5               	clrf	main@i+1
   680  0568  0855               	movf	main@i+1,w
   681  0569  3A80               	xorlw	128
   682  056A  00FF               	movwf	127
   683  056B  3080               	movlw	128
   684  056C  027F               	subwf	127,w
   685  056D  1D03               	skipz
   686  056E  2D71               	goto	u1775
   687  056F  300A               	movlw	10
   688  0570  0254               	subwf	main@i,w
   689  0571                     u1775:	
   690  0571  1803               	btfsc	3,0
   691  0572  2DA6               	goto	l1870
   692  0573                     l1856:	
   693                           
   694                           ;main.c: 512: {
   695                           ;main.c: 513: printf("Ola mundo!");
   696  0573  301B               	movlw	(STR_2-__stringbase)& (0+255)
   697  0574  260F               	fcall	_printf
   698                           
   699                           ;main.c: 514: PORTBbits.RB3 = 1;
   700  0575  1283               	bcf	3,5	;RP0=0, select bank0
   701  0576  1303               	bcf	3,6	;RP1=0, select bank0
   702  0577  1586               	bsf	6,3	;volatile
   703                           
   704                           ;main.c: 515: _delay((unsigned long)((100)*(16000000/4000.0)));
   705  0578  3003               	movlw	3
   706  0579  00CC               	movwf	??_main+2
   707  057A  3008               	movlw	8
   708  057B  00CB               	movwf	??_main+1
   709  057C  3078               	movlw	120
   710  057D  00CA               	movwf	??_main
   711  057E                     u1837:	
   712  057E  0BCA               	decfsz	??_main,f
   713  057F  2D7E               	goto	u1837
   714  0580  0BCB               	decfsz	??_main+1,f
   715  0581  2D7E               	goto	u1837
   716  0582  0BCC               	decfsz	??_main+2,f
   717  0583  2D7E               	goto	u1837
   718                           
   719                           ;main.c: 516: PORTBbits.RB3 = 0;
   720  0584  1283               	bcf	3,5	;RP0=0, select bank0
   721  0585  1303               	bcf	3,6	;RP1=0, select bank0
   722  0586  1186               	bcf	6,3	;volatile
   723                           
   724                           ;main.c: 517: _delay((unsigned long)((100)*(16000000/4000.0)));
   725  0587  3003               	movlw	3
   726  0588  00CC               	movwf	??_main+2
   727  0589  3008               	movlw	8
   728  058A  00CB               	movwf	??_main+1
   729  058B  3078               	movlw	120
   730  058C  00CA               	movwf	??_main
   731  058D                     u1847:	
   732  058D  0BCA               	decfsz	??_main,f
   733  058E  2D8D               	goto	u1847
   734  058F  0BCB               	decfsz	??_main+1,f
   735  0590  2D8D               	goto	u1847
   736  0591  0BCC               	decfsz	??_main+2,f
   737  0592  2D8D               	goto	u1847
   738  0593  3001               	movlw	1
   739  0594  1283               	bcf	3,5	;RP0=0, select bank0
   740  0595  1303               	bcf	3,6	;RP1=0, select bank0
   741  0596  07D4               	addwf	main@i,f
   742  0597  1803               	skipnc
   743  0598  0AD5               	incf	main@i+1,f
   744  0599  3000               	movlw	0
   745  059A  07D5               	addwf	main@i+1,f
   746  059B  0855               	movf	main@i+1,w
   747  059C  3A80               	xorlw	128
   748  059D  00FF               	movwf	127
   749  059E  3080               	movlw	128
   750  059F  027F               	subwf	127,w
   751  05A0  1D03               	skipz
   752  05A1  2DA4               	goto	u1785
   753  05A2  300A               	movlw	10
   754  05A3  0254               	subwf	main@i,w
   755  05A4                     u1785:	
   756  05A4  1C03               	skipc
   757  05A5  2D73               	goto	l1856
   758  05A6                     l1870:	
   759                           ;main.c: 518: }
   760                           ;main.c: 519: while(1)
   761                           
   762                           
   763                           ;main.c: 520: {
   764                           ;main.c: 521: printf(".");
   765  05A6  3036               	movlw	(STR_3-__stringbase)& (0+255)
   766  05A7  260F               	fcall	_printf
   767                           
   768                           ;main.c: 524: if( MFRC522_isCard( &TagType ) )
   769  05A8  3058               	movlw	main@TagType& (0+255)
   770  05A9  2261               	fcall	_MFRC522_isCard
   771  05AA  3A00               	xorlw	0
   772  05AB  1903               	skipnz
   773  05AC  2DFE               	goto	l1892
   774                           
   775                           ;main.c: 525: {
   776                           ;main.c: 527: printf("Tipo de Tag: %u",TagType);
   777  05AD  1283               	bcf	3,5	;RP0=0, select bank0
   778  05AE  1303               	bcf	3,6	;RP1=0, select bank0
   779  05AF  0858               	movf	main@TagType,w
   780  05B0  00CA               	movwf	??_main
   781  05B1  01CB               	clrf	??_main+1
   782  05B2  084A               	movf	??_main,w
   783  05B3  00A0               	movwf	?_printf
   784  05B4  084B               	movf	??_main+1,w
   785  05B5  00A1               	movwf	?_printf+1
   786  05B6  300B               	movlw	(STR_4-__stringbase)& (0+255)
   787  05B7  260F               	fcall	_printf
   788                           
   789                           ;main.c: 529: if( MFRC522_ReadCardSerial( UID ) )
   790  05B8  304E               	movlw	main@UID& (0+255)
   791  05B9  2296               	fcall	_MFRC522_ReadCardSerial
   792  05BA  3A00               	xorlw	0
   793  05BB  1903               	skipnz
   794  05BC  2DFE               	goto	l1892
   795                           
   796                           ;main.c: 530: {
   797                           ;main.c: 531: PORTBbits.RB3 = 0;
   798  05BD  1283               	bcf	3,5	;RP0=0, select bank0
   799  05BE  1303               	bcf	3,6	;RP1=0, select bank0
   800  05BF  1186               	bcf	6,3	;volatile
   801                           
   802                           ;main.c: 532: printf("Codigo: ");
   803  05C0  3026               	movlw	(STR_5-__stringbase)& (0+255)
   804  05C1  260F               	fcall	_printf
   805                           
   806                           ;main.c: 533: for(int i=0; i < 5; i++)
   807  05C2  1283               	bcf	3,5	;RP0=0, select bank0
   808  05C3  1303               	bcf	3,6	;RP1=0, select bank0
   809  05C4  01D6               	clrf	main@i_346
   810  05C5  01D7               	clrf	main@i_346+1
   811  05C6  0857               	movf	main@i_346+1,w
   812  05C7  3A80               	xorlw	128
   813  05C8  00FF               	movwf	127
   814  05C9  3080               	movlw	128
   815  05CA  027F               	subwf	127,w
   816  05CB  1D03               	skipz
   817  05CC  2DCF               	goto	u1815
   818  05CD  3005               	movlw	5
   819  05CE  0256               	subwf	main@i_346,w
   820  05CF                     u1815:	
   821  05CF  1803               	btfsc	3,0
   822  05D0  2DF5               	goto	l1890
   823  05D1                     l1884:	
   824                           
   825                           ;main.c: 534: {
   826                           ;main.c: 535: printf("%d",(int)UID[i]);
   827  05D1  1283               	bcf	3,5	;RP0=0, select bank0
   828  05D2  1303               	bcf	3,6	;RP1=0, select bank0
   829  05D3  0856               	movf	main@i_346,w
   830  05D4  3E4E               	addlw	main@UID& (0+255)
   831  05D5  0084               	movwf	4
   832  05D6  1383               	bcf	3,7	;select IRP bank0
   833  05D7  0800               	movf	0,w
   834  05D8  00CA               	movwf	??_main
   835  05D9  01CB               	clrf	??_main+1
   836  05DA  084A               	movf	??_main,w
   837  05DB  00A0               	movwf	?_printf
   838  05DC  084B               	movf	??_main+1,w
   839  05DD  00A1               	movwf	?_printf+1
   840  05DE  3033               	movlw	(STR_6-__stringbase)& (0+255)
   841  05DF  260F               	fcall	_printf
   842                           
   843                           ;main.c: 536: printf(" ");
   844  05E0  302D               	movlw	((STR_5+7)-__stringbase)& (0+255)
   845  05E1  260F               	fcall	_printf
   846  05E2  3001               	movlw	1
   847  05E3  1283               	bcf	3,5	;RP0=0, select bank0
   848  05E4  1303               	bcf	3,6	;RP1=0, select bank0
   849  05E5  07D6               	addwf	main@i_346,f
   850  05E6  1803               	skipnc
   851  05E7  0AD7               	incf	main@i_346+1,f
   852  05E8  3000               	movlw	0
   853  05E9  07D7               	addwf	main@i_346+1,f
   854  05EA  0857               	movf	main@i_346+1,w
   855  05EB  3A80               	xorlw	128
   856  05EC  00FF               	movwf	127
   857  05ED  3080               	movlw	128
   858  05EE  027F               	subwf	127,w
   859  05EF  1D03               	skipz
   860  05F0  2DF3               	goto	u1825
   861  05F1  3005               	movlw	5
   862  05F2  0256               	subwf	main@i_346,w
   863  05F3                     u1825:	
   864  05F3  1C03               	skipc
   865  05F4  2DD1               	goto	l1884
   866  05F5                     l1890:	
   867                           
   868                           ;main.c: 537: }
   869                           ;main.c: 538: printf("\n");
   870  05F5  3031               	movlw	((STR_1+2)-__stringbase)& (0+255)
   871  05F6  260F               	fcall	_printf
   872                           
   873                           ;main.c: 539: size = MFRC522_SelectTag( UID );
   874  05F7  304E               	movlw	main@UID& (0+255)
   875  05F8  241F               	fcall	_MFRC522_SelectTag
   876  05F9  1283               	bcf	3,5	;RP0=0, select bank0
   877  05FA  1303               	bcf	3,6	;RP1=0, select bank0
   878  05FB  00CA               	movwf	??_main
   879  05FC  084A               	movf	??_main,w
   880  05FD  00CD               	movwf	main@size
   881  05FE                     l1892:	
   882                           
   883                           ;main.c: 540: }
   884                           ;main.c: 543: }
   885                           ;main.c: 544: PORTBbits.RB3 = 1;
   886  05FE  1283               	bcf	3,5	;RP0=0, select bank0
   887  05FF  1303               	bcf	3,6	;RP1=0, select bank0
   888  0600  1586               	bsf	6,3	;volatile
   889                           
   890                           ;main.c: 545: _delay((unsigned long)((250)*(16000000/4000.0)));
   891  0601  3006               	movlw	6
   892  0602  00CC               	movwf	??_main+2
   893  0603  3013               	movlw	19
   894  0604  00CB               	movwf	??_main+1
   895  0605  30B1               	movlw	177
   896  0606  00CA               	movwf	??_main
   897  0607                     u1857:	
   898  0607  0BCA               	decfsz	??_main,f
   899  0608  2E07               	goto	u1857
   900  0609  0BCB               	decfsz	??_main+1,f
   901  060A  2E07               	goto	u1857
   902  060B  0BCC               	decfsz	??_main+2,f
   903  060C  2E07               	goto	u1857
   904  060D  2E0E               	nop2
   905  060E  2DA6               	goto	l1870
   906  060F                     __end_of_main:	
   907                           
   908                           	psect	text1
   909  0271                     __ptext1:	
   910 ;; *************** function _UART_init *****************
   911 ;; Defined at:
   912 ;;		line 24 in file "UART.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;		None               void
   919 ;; Registers used:
   920 ;;		wreg
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   926 ;;      Params:         0       0       0       0
   927 ;;      Locals:         0       0       0       0
   928 ;;      Temps:          0       0       0       0
   929 ;;      Totals:         0       0       0       0
   930 ;;Total ram usage:        0 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; This function calls:
   933 ;;		Nothing
   934 ;; This function is called by:
   935 ;;		_main
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           
   940                           ;psect for function _UART_init
   941  0271                     _UART_init:	
   942                           
   943                           ;UART.c: 27: TRISBbits.TRISB1 = 1;
   944                           
   945                           ;incstack = 0
   946                           ; Regs used in _UART_init: [wreg]
   947  0271  1683               	bsf	3,5	;RP0=1, select bank1
   948  0272  1303               	bcf	3,6	;RP1=0, select bank1
   949  0273  1486               	bsf	6,1	;volatile
   950                           
   951                           ;UART.c: 28: TRISBbits.TRISB2 = 1;
   952  0274  1506               	bsf	6,2	;volatile
   953                           
   954                           ;UART.c: 32: TXSTAbits.CSRC = 1;
   955  0275  1798               	bsf	24,7	;volatile
   956                           
   957                           ;UART.c: 33: TXSTAbits.TXEN = 1;
   958  0276  1698               	bsf	24,5	;volatile
   959                           
   960                           ;UART.c: 34: TXSTAbits.SYNC = 0;
   961  0277  1218               	bcf	24,4	;volatile
   962                           
   963                           ;UART.c: 37: RCSTAbits.SPEN = 1;
   964  0278  1283               	bcf	3,5	;RP0=0, select bank0
   965  0279  1303               	bcf	3,6	;RP1=0, select bank0
   966  027A  1798               	bsf	24,7	;volatile
   967                           
   968                           ;UART.c: 38: RCSTAbits.CREN = 1;
   969  027B  1618               	bsf	24,4	;volatile
   970                           
   971                           ;UART.c: 41: TXSTAbits.BRGH = 0;
   972  027C  1683               	bsf	3,5	;RP0=1, select bank1
   973  027D  1303               	bcf	3,6	;RP1=0, select bank1
   974  027E  1118               	bcf	24,2	;volatile
   975                           
   976                           ;UART.c: 42: SPBRG = 25;
   977  027F  3019               	movlw	25
   978  0280  0099               	movwf	25	;volatile
   979  0281  0008               	return
   980  0282                     __end_of_UART_init:	
   981                           
   982                           	psect	text2
   983  02C3                     __ptext2:	
   984 ;; *************** function _SPI_init *****************
   985 ;; Defined at:
   986 ;;		line 32 in file "SPI.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;  mode            1    wreg     unsigned char 
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  mode            1    1[COMMON] unsigned char 
   991 ;; Return value:  Size  Location     Type
   992 ;;		None               void
   993 ;; Registers used:
   994 ;;		wreg, status,2, status,0
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1000 ;;      Params:         0       0       0       0
  1001 ;;      Locals:         1       0       0       0
  1002 ;;      Temps:          1       0       0       0
  1003 ;;      Totals:         2       0       0       0
  1004 ;;Total ram usage:        2 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; This function calls:
  1007 ;;		Nothing
  1008 ;; This function is called by:
  1009 ;;		_main
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           
  1014                           ;psect for function _SPI_init
  1015  02C3                     _SPI_init:	
  1016                           
  1017                           ;incstack = 0
  1018                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  1019                           ;SPI_init@mode stored from wreg
  1020  02C3  00F1               	movwf	SPI_init@mode
  1021                           
  1022                           ;SPI.c: 34: _mode = mode;
  1023  02C4  0871               	movf	SPI_init@mode,w
  1024  02C5  00F0               	movwf	??_SPI_init
  1025  02C6  0870               	movf	??_SPI_init,w
  1026  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1027  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1028  02C9  00EB               	movwf	__mode
  1029                           
  1030                           ;SPI.c: 35: TRISB &= ~(1<<7 | 1<<6);
  1031  02CA  303F               	movlw	63
  1032  02CB  00F0               	movwf	??_SPI_init
  1033  02CC  0870               	movf	??_SPI_init,w
  1034  02CD  1683               	bsf	3,5	;RP0=1, select bank1
  1035  02CE  1303               	bcf	3,6	;RP1=0, select bank1
  1036  02CF  0586               	andwf	6,f	;volatile
  1037                           
  1038                           ;SPI.c: 36: TRISB |= (1<<5);
  1039  02D0  1686               	bsf	6,5	;volatile
  1040                           
  1041                           ;SPI.c: 37: if(mode == 2 || mode == 3)
  1042  02D1  0871               	movf	SPI_init@mode,w
  1043  02D2  3A02               	xorlw	2
  1044  02D3  1903               	skipnz
  1045  02D4  2AD9               	goto	l70
  1046  02D5  0871               	movf	SPI_init@mode,w
  1047  02D6  3A03               	xorlw	3
  1048  02D7  1D03               	skipz
  1049  02D8  2ADD               	goto	l1672
  1050  02D9                     l70:	
  1051                           
  1052                           ;SPI.c: 38: PORTB |= (1<<7);
  1053  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  1054  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  1055  02DB  1786               	bsf	6,7	;volatile
  1056  02DC  0008               	return
  1057  02DD                     l1672:	
  1058                           
  1059                           ;SPI.c: 39: else
  1060                           ;SPI.c: 40: PORTB &= ~(1<<7);
  1061  02DD  307F               	movlw	127
  1062  02DE  00F0               	movwf	??_SPI_init
  1063  02DF  0870               	movf	??_SPI_init,w
  1064  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  1065  02E1  0586               	andwf	6,f	;volatile
  1066  02E2  0008               	return
  1067  02E3                     __end_of_SPI_init:	
  1068                           
  1069                           	psect	text3
  1070  0261                     __ptext3:	
  1071 ;; *************** function _MFRC522_isCard *****************
  1072 ;; Defined at:
  1073 ;;		line 476 in file "main.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  TagType         1    wreg     PTR unsigned char 
  1076 ;;		 -> main@TagType(1), 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  TagType         1   32[BANK0 ] PTR unsigned char 
  1079 ;;		 -> main@TagType(1), 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      unsigned char 
  1082 ;; Registers used:
  1083 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1089 ;;      Params:         0       0       0       0
  1090 ;;      Locals:         0       1       0       0
  1091 ;;      Temps:          0       1       0       0
  1092 ;;      Totals:         0       2       0       0
  1093 ;;Total ram usage:        2 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; Hardware stack levels required when called:    5
  1096 ;; This function calls:
  1097 ;;		_MFRC522_Request
  1098 ;; This function is called by:
  1099 ;;		_main
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           
  1104                           ;psect for function _MFRC522_isCard
  1105  0261                     _MFRC522_isCard:	
  1106                           
  1107                           ;incstack = 0
  1108                           ; Regs used in _MFRC522_isCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1109                           ;MFRC522_isCard@TagType stored from wreg
  1110  0261  1283               	bcf	3,5	;RP0=0, select bank0
  1111  0262  1303               	bcf	3,6	;RP1=0, select bank0
  1112  0263  00C0               	movwf	MFRC522_isCard@TagType
  1113                           
  1114                           ;main.c: 478: if (MFRC522_Request( 0x26, TagType ) == 0)
  1115  0264  0840               	movf	MFRC522_isCard@TagType,w
  1116  0265  00BF               	movwf	??_MFRC522_isCard
  1117  0266  083F               	movf	??_MFRC522_isCard,w
  1118  0267  00B6               	movwf	MFRC522_Request@TagType
  1119  0268  3026               	movlw	38
  1120  0269  234D               	fcall	_MFRC522_Request
  1121  026A  3800               	iorlw	0
  1122  026B  1D03               	skipz
  1123  026C  2A6F               	goto	l1712
  1124                           
  1125                           ;main.c: 479: return 1;
  1126  026D  3001               	movlw	1
  1127  026E  0008               	return
  1128  026F                     l1712:	
  1129                           
  1130                           ;main.c: 480: else
  1131                           ;main.c: 481: return 0;
  1132  026F  3000               	movlw	0
  1133  0270  0008               	return
  1134  0271                     __end_of_MFRC522_isCard:	
  1135                           
  1136                           	psect	text4
  1137  034D                     __ptext4:	
  1138 ;; *************** function _MFRC522_Request *****************
  1139 ;; Defined at:
  1140 ;;		line 285 in file "main.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;  reqMode         1    wreg     unsigned char 
  1143 ;;  TagType         1   22[BANK0 ] PTR unsigned char 
  1144 ;;		 -> main@TagType(1), 
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;  reqMode         1   27[BANK0 ] unsigned char 
  1147 ;;  backBits        2   29[BANK0 ] unsigned int 
  1148 ;;  _status         1   28[BANK0 ] unsigned char 
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      unsigned char 
  1151 ;; Registers used:
  1152 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1158 ;;      Params:         0       1       0       0
  1159 ;;      Locals:         0       4       0       0
  1160 ;;      Temps:          0       4       0       0
  1161 ;;      Totals:         0       9       0       0
  1162 ;;Total ram usage:        9 bytes
  1163 ;; Hardware stack levels used:    1
  1164 ;; Hardware stack levels required when called:    4
  1165 ;; This function calls:
  1166 ;;		_MFRC522_ToCard
  1167 ;;		_MFRC522_Wr
  1168 ;;		_printf
  1169 ;; This function is called by:
  1170 ;;		_MFRC522_isCard
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           
  1175                           ;psect for function _MFRC522_Request
  1176  034D                     _MFRC522_Request:	
  1177                           
  1178                           ;incstack = 0
  1179                           ; Regs used in _MFRC522_Request: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1180                           ;MFRC522_Request@reqMode stored from wreg
  1181  034D  1283               	bcf	3,5	;RP0=0, select bank0
  1182  034E  1303               	bcf	3,6	;RP1=0, select bank0
  1183  034F  00BB               	movwf	MFRC522_Request@reqMode
  1184                           
  1185                           ;main.c: 287: char _status;
  1186                           ;main.c: 288: unsigned backBits;
  1187                           ;main.c: 289: MFRC522_Wr( 0x0D, 0x07 );
  1188  0350  3007               	movlw	7
  1189  0351  00B7               	movwf	??_MFRC522_Request
  1190  0352  0837               	movf	??_MFRC522_Request,w
  1191  0353  00FB               	movwf	MFRC522_Wr@value
  1192  0354  300D               	movlw	13
  1193  0355  2242               	fcall	_MFRC522_Wr
  1194                           
  1195                           ;main.c: 290: TagType[0] = reqMode;
  1196  0356  1283               	bcf	3,5	;RP0=0, select bank0
  1197  0357  1303               	bcf	3,6	;RP1=0, select bank0
  1198  0358  083B               	movf	MFRC522_Request@reqMode,w
  1199  0359  00B7               	movwf	??_MFRC522_Request
  1200  035A  0836               	movf	MFRC522_Request@TagType,w
  1201  035B  0084               	movwf	4
  1202  035C  0837               	movf	??_MFRC522_Request,w
  1203  035D  1383               	bcf	3,7	;select IRP bank0
  1204  035E  0080               	movwf	0
  1205                           
  1206                           ;main.c: 291: _status = MFRC522_ToCard( 0x0C, TagType, 1, TagType, &backBits );
  1207  035F  0836               	movf	MFRC522_Request@TagType,w
  1208  0360  00B7               	movwf	??_MFRC522_Request
  1209  0361  0837               	movf	??_MFRC522_Request,w
  1210  0362  00A4               	movwf	MFRC522_ToCard@sendData
  1211  0363  01A5               	clrf	MFRC522_ToCard@sendLen
  1212  0364  0AA5               	incf	MFRC522_ToCard@sendLen,f
  1213  0365  0836               	movf	MFRC522_Request@TagType,w
  1214  0366  00B8               	movwf	??_MFRC522_Request+1
  1215  0367  0838               	movf	??_MFRC522_Request+1,w
  1216  0368  00A6               	movwf	MFRC522_ToCard@backData
  1217  0369  303D               	movlw	MFRC522_Request@backBits& (0+255)
  1218  036A  00B9               	movwf	??_MFRC522_Request+2
  1219  036B  0839               	movf	??_MFRC522_Request+2,w
  1220  036C  00A7               	movwf	MFRC522_ToCard@backLen
  1221  036D  300C               	movlw	12
  1222  036E  26C6               	fcall	_MFRC522_ToCard
  1223  036F  1283               	bcf	3,5	;RP0=0, select bank0
  1224  0370  1303               	bcf	3,6	;RP1=0, select bank0
  1225  0371  00BA               	movwf	??_MFRC522_Request+3
  1226  0372  083A               	movf	??_MFRC522_Request+3,w
  1227  0373  00BC               	movwf	MFRC522_Request@_status
  1228                           
  1229                           ;main.c: 292: printf("Ok\n");
  1230  0374  302F               	movlw	(STR_1-__stringbase)& (0+255)
  1231  0375  260F               	fcall	_printf
  1232                           
  1233                           ;main.c: 293: if ( (_status != 0) || (backBits != 0x10) )
  1234  0376  1283               	bcf	3,5	;RP0=0, select bank0
  1235  0377  1303               	bcf	3,6	;RP1=0, select bank0
  1236  0378  08BC               	movf	MFRC522_Request@_status,f
  1237  0379  1D03               	skipz
  1238  037A  2B80               	goto	l1596
  1239  037B  3010               	movlw	16
  1240  037C  063D               	xorwf	MFRC522_Request@backBits,w
  1241  037D  043E               	iorwf	MFRC522_Request@backBits+1,w
  1242  037E  1903               	skipnz
  1243  037F  2B84               	goto	l144
  1244  0380                     l1596:	
  1245                           
  1246                           ;main.c: 294: {
  1247                           ;main.c: 295: _status = 2;
  1248  0380  3002               	movlw	2
  1249  0381  00B7               	movwf	??_MFRC522_Request
  1250  0382  0837               	movf	??_MFRC522_Request,w
  1251  0383  00BC               	movwf	MFRC522_Request@_status
  1252  0384                     l144:	
  1253                           
  1254                           ;main.c: 296: }
  1255                           ;main.c: 297: return _status;
  1256  0384  083C               	movf	MFRC522_Request@_status,w
  1257  0385  0008               	return
  1258  0386                     __end_of_MFRC522_Request:	
  1259                           
  1260                           	psect	text5
  1261  060F                     __ptext5:	
  1262 ;; *************** function _printf *****************
  1263 ;; Defined at:
  1264 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;  f               1    wreg     PTR const unsigned char 
  1267 ;;		 -> STR_8(2), STR_7(2), STR_6(3), STR_5(9), 
  1268 ;;		 -> STR_4(16), STR_3(2), STR_2(11), STR_1(4), 
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  1271 ;;		 -> STR_8(2), STR_7(2), STR_6(3), STR_5(9), 
  1272 ;;		 -> STR_4(16), STR_3(2), STR_2(11), STR_1(4), 
  1273 ;;  _val            4    8[BANK0 ] struct .
  1274 ;;  c               1   13[BANK0 ] char 
  1275 ;;  flag            1    7[BANK0 ] unsigned char 
  1276 ;;  ap              1    6[BANK0 ] PTR void [1]
  1277 ;;		 -> ?_printf(2), 
  1278 ;;  prec            1    5[BANK0 ] char 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  2    0[BANK0 ] int 
  1281 ;; Registers used:
  1282 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1288 ;;      Params:         0       2       0       0
  1289 ;;      Locals:         0       9       0       0
  1290 ;;      Temps:          0       3       0       0
  1291 ;;      Totals:         0      14       0       0
  1292 ;;Total ram usage:       14 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; Hardware stack levels required when called:    1
  1295 ;; This function calls:
  1296 ;;		___lwdiv
  1297 ;;		___lwmod
  1298 ;;		_putch
  1299 ;; This function is called by:
  1300 ;;		_MFRC522_Request
  1301 ;;		_main
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           
  1306                           ;psect for function _printf
  1307  060F                     _printf:	
  1308                           
  1309                           ;incstack = 0
  1310                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1311                           ;printf@f stored from wreg
  1312  060F  1283               	bcf	3,5	;RP0=0, select bank0
  1313  0610  1303               	bcf	3,6	;RP1=0, select bank0
  1314  0611  00AC               	movwf	printf@f
  1315                           
  1316                           ;doprnt.c: 466: va_list ap;
  1317                           ;doprnt.c: 499: signed char c;
  1318                           ;doprnt.c: 506: signed char prec;
  1319                           ;doprnt.c: 508: unsigned char flag;
  1320                           ;doprnt.c: 527: union {
  1321                           ;doprnt.c: 528: unsigned int _val;
  1322                           ;doprnt.c: 529: struct {
  1323                           ;doprnt.c: 530: const char * _cp;
  1324                           ;doprnt.c: 531: unsigned _len;
  1325                           ;doprnt.c: 532: } _str;
  1326                           ;doprnt.c: 533: } _val;
  1327                           ;doprnt.c: 542: *ap = __va_start();
  1328  0612  3020               	movlw	?_printf& (0+255)
  1329  0613  00A2               	movwf	??_printf
  1330  0614  0822               	movf	??_printf,w
  1331  0615  00A6               	movwf	printf@ap
  1332  0616                     l1578:	
  1333                           ;doprnt.c: 545: while(c = *f++) {
  1334                           
  1335  0616  3001               	movlw	1
  1336  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1337  0618  1303               	bcf	3,6	;RP1=0, select bank0
  1338  0619  07AC               	addwf	printf@f,f
  1339  061A  30FF               	movlw	-1
  1340  061B  072C               	addwf	printf@f,w
  1341  061C  0084               	movwf	4
  1342  061D  2001               	fcall	stringdir
  1343  061E  00A2               	movwf	??_printf
  1344  061F  0822               	movf	??_printf,w
  1345  0620  00AD               	movwf	printf@c
  1346  0621  08AD               	movf	printf@c,f
  1347  0622  1903               	btfsc	3,2
  1348  0623  0008               	return
  1349                           
  1350                           ;doprnt.c: 547: if(c != '%')
  1351  0624  082D               	movf	printf@c,w
  1352  0625  3A25               	xorlw	37
  1353  0626  1903               	skipnz
  1354  0627  2E2B               	goto	l1532
  1355                           
  1356                           ;doprnt.c: 549: {
  1357                           ;doprnt.c: 550: (putch(c) );
  1358  0628  082D               	movf	printf@c,w
  1359  0629  22AC               	fcall	_putch
  1360                           
  1361                           ;doprnt.c: 551: continue;
  1362  062A  2E16               	goto	l1578
  1363  062B                     l1532:	
  1364                           
  1365                           ;doprnt.c: 552: }
  1366                           ;doprnt.c: 557: flag = 0;
  1367  062B  1283               	bcf	3,5	;RP0=0, select bank0
  1368  062C  1303               	bcf	3,6	;RP1=0, select bank0
  1369  062D  01A7               	clrf	printf@flag
  1370                           
  1371                           ;doprnt.c: 644: switch(c = *f++) {
  1372  062E  2E31               	goto	l1536
  1373  062F                     l245:	
  1374                           ;doprnt.c: 826: case 'u':
  1375                           
  1376                           ;doprnt.c: 822: continue;
  1377                           
  1378                           ;doprnt.c: 811: default:
  1379                           
  1380                           ;doprnt.c: 707: case 'i':
  1381                           ;doprnt.c: 708: break;
  1382                           
  1383                           ;doprnt.c: 706: case 'd':
  1384                           
  1385                           ;doprnt.c: 647: goto alldone;
  1386                           
  1387                           ;doprnt.c: 646: case 0:
  1388                           
  1389                           
  1390                           ;doprnt.c: 827: flag |= 0x40;
  1391  062F  1727               	bsf	printf@flag,6
  1392                           
  1393                           ;doprnt.c: 831: }
  1394                           
  1395                           ;doprnt.c: 828: break;
  1396  0630  2E45               	goto	l243
  1397  0631                     l1536:	
  1398  0631  3001               	movlw	1
  1399  0632  07AC               	addwf	printf@f,f
  1400  0633  30FF               	movlw	-1
  1401  0634  072C               	addwf	printf@f,w
  1402  0635  0084               	movwf	4
  1403  0636  2001               	fcall	stringdir
  1404  0637  00AD               	movwf	printf@c
  1405                           
  1406                           ; Switch size 1, requested type "space"
  1407                           ; Number of cases is 4, Range of values is 0 to 117
  1408                           ; switch strategies available:
  1409                           ; Name         Instructions Cycles
  1410                           ; simple_byte           13     7 (average)
  1411                           ; direct_byte          124     6 (fixed)
  1412                           ; jumptable            260     6 (fixed)
  1413                           ;	Chosen strategy is simple_byte
  1414  0638  3A00               	xorlw	0	; case 0
  1415  0639  1903               	skipnz
  1416  063A  2EC5               	goto	l257
  1417  063B  3A64               	xorlw	100	; case 100
  1418  063C  1903               	skipnz
  1419  063D  2E45               	goto	l243
  1420  063E  3A0D               	xorlw	13	; case 105
  1421  063F  1903               	skipnz
  1422  0640  2E45               	goto	l243
  1423  0641  3A1C               	xorlw	28	; case 117
  1424  0642  1903               	skipnz
  1425  0643  2E2F               	goto	l245
  1426  0644  2E16               	goto	l1578
  1427  0645                     l243:	
  1428                           
  1429                           ;doprnt.c: 1260: if((flag & 0x40) == 0x00)
  1430  0645  1B27               	btfsc	printf@flag,6
  1431  0646  2E5F               	goto	l1548
  1432                           
  1433                           ;doprnt.c: 1262: {
  1434                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1435  0647  0826               	movf	printf@ap,w
  1436  0648  0084               	movwf	4
  1437  0649  1383               	bcf	3,7	;select IRP bank0
  1438  064A  0800               	movf	0,w
  1439  064B  00A8               	movwf	printf@_val
  1440  064C  0A84               	incf	4,f
  1441  064D  0800               	movf	0,w
  1442  064E  00A9               	movwf	printf@_val+1
  1443  064F  3002               	movlw	2
  1444  0650  00A2               	movwf	??_printf
  1445  0651  0822               	movf	??_printf,w
  1446  0652  07A6               	addwf	printf@ap,f
  1447                           
  1448                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  1449  0653  1FA9               	btfss	printf@_val+1,7
  1450  0654  2E6B               	goto	l1552
  1451                           
  1452                           ;doprnt.c: 1271: flag |= 0x03;
  1453  0655  3003               	movlw	3
  1454  0656  00A2               	movwf	??_printf
  1455  0657  0822               	movf	??_printf,w
  1456  0658  04A7               	iorwf	printf@flag,f
  1457                           
  1458                           ;doprnt.c: 1272: _val._val = -_val._val;
  1459  0659  09A8               	comf	printf@_val,f
  1460  065A  09A9               	comf	printf@_val+1,f
  1461  065B  0AA8               	incf	printf@_val,f
  1462  065C  1903               	skipnz
  1463  065D  0AA9               	incf	printf@_val+1,f
  1464                           
  1465                           ;doprnt.c: 1273: }
  1466                           ;doprnt.c: 1275: }
  1467  065E  2E6B               	goto	l1552
  1468  065F                     l1548:	
  1469                           
  1470                           ;doprnt.c: 1277: else
  1471                           ;doprnt.c: 1282: {
  1472                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1473  065F  0826               	movf	printf@ap,w
  1474  0660  0084               	movwf	4
  1475  0661  1383               	bcf	3,7	;select IRP bank0
  1476  0662  0800               	movf	0,w
  1477  0663  00A8               	movwf	printf@_val
  1478  0664  0A84               	incf	4,f
  1479  0665  0800               	movf	0,w
  1480  0666  00A9               	movwf	printf@_val+1
  1481  0667  3002               	movlw	2
  1482  0668  00A2               	movwf	??_printf
  1483  0669  0822               	movf	??_printf,w
  1484  066A  07A6               	addwf	printf@ap,f
  1485  066B                     l1552:	
  1486                           
  1487                           ;doprnt.c: 1296: }
  1488                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1489  066B  01AD               	clrf	printf@c
  1490  066C  0AAD               	incf	printf@c,f
  1491  066D  082D               	movf	printf@c,w
  1492  066E  3A05               	xorlw	5
  1493  066F  1903               	btfsc	3,2
  1494  0670  2E8A               	goto	l1566
  1495  0671                     l1558:	
  1496                           
  1497                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1498  0671  082D               	movf	printf@c,w
  1499  0672  00A2               	movwf	??_printf
  1500  0673  0722               	addwf	??_printf,w
  1501  0674  3E01               	addlw	low (_dpowers-__stringbase)
  1502  0675  0084               	movwf	4
  1503  0676  2001               	fcall	stringdir
  1504  0677  00A3               	movwf	??_printf+1
  1505  0678  2001               	fcall	stringdir
  1506  0679  00A4               	movwf	??_printf+2
  1507  067A  0824               	movf	??_printf+2,w
  1508  067B  0229               	subwf	printf@_val+1,w
  1509  067C  1D03               	skipz
  1510  067D  2E80               	goto	u1365
  1511  067E  0823               	movf	??_printf+1,w
  1512  067F  0228               	subwf	printf@_val,w
  1513  0680                     u1365:	
  1514  0680  1C03               	btfss	3,0
  1515  0681  2E8A               	goto	l1566
  1516                           
  1517                           ;doprnt.c: 1316: break;
  1518  0682  3001               	movlw	1
  1519  0683  00A2               	movwf	??_printf
  1520  0684  0822               	movf	??_printf,w
  1521  0685  07AD               	addwf	printf@c,f
  1522  0686  082D               	movf	printf@c,w
  1523  0687  3A05               	xorlw	5
  1524  0688  1D03               	skipz
  1525  0689  2E71               	goto	l1558
  1526  068A                     l1566:	
  1527                           
  1528                           ;doprnt.c: 1431: {
  1529                           ;doprnt.c: 1447: if(flag & 0x03)
  1530  068A  0827               	movf	printf@flag,w
  1531  068B  3903               	andlw	3
  1532  068C  1903               	btfsc	3,2
  1533  068D  2E90               	goto	l1570
  1534                           
  1535                           ;doprnt.c: 1448: (putch('-') );
  1536  068E  302D               	movlw	45
  1537  068F  22AC               	fcall	_putch
  1538  0690                     l1570:	
  1539                           
  1540                           ;doprnt.c: 1478: }
  1541                           ;doprnt.c: 1481: prec = c;
  1542  0690  1283               	bcf	3,5	;RP0=0, select bank0
  1543  0691  1303               	bcf	3,6	;RP1=0, select bank0
  1544  0692  082D               	movf	printf@c,w
  1545  0693  00A2               	movwf	??_printf
  1546  0694  0822               	movf	??_printf,w
  1547  0695  00A5               	movwf	printf@prec
  1548  0696                     l1576:	
  1549                           ;doprnt.c: 1483: while(prec--) {
  1550                           
  1551  0696  30FF               	movlw	-1
  1552  0697  1283               	bcf	3,5	;RP0=0, select bank0
  1553  0698  1303               	bcf	3,6	;RP1=0, select bank0
  1554  0699  00A2               	movwf	??_printf
  1555  069A  0822               	movf	??_printf,w
  1556  069B  07A5               	addwf	printf@prec,f
  1557  069C  0825               	movf	printf@prec,w
  1558  069D  3AFF               	xorlw	-1
  1559  069E  1903               	btfsc	3,2
  1560  069F  2E16               	goto	l1578
  1561                           
  1562                           ;doprnt.c: 1487: {
  1563                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1564  06A0  300A               	movlw	10
  1565  06A1  00F8               	movwf	___lwmod@divisor
  1566  06A2  3000               	movlw	0
  1567  06A3  00F9               	movwf	___lwmod@divisor+1
  1568  06A4  0825               	movf	printf@prec,w
  1569  06A5  00A2               	movwf	??_printf
  1570  06A6  0722               	addwf	??_printf,w
  1571  06A7  3E01               	addlw	low (_dpowers-__stringbase)
  1572  06A8  0084               	movwf	4
  1573  06A9  2001               	fcall	stringdir
  1574  06AA  00F0               	movwf	___lwdiv@divisor
  1575  06AB  2001               	fcall	stringdir
  1576  06AC  00F1               	movwf	___lwdiv@divisor+1
  1577  06AD  0829               	movf	printf@_val+1,w
  1578  06AE  01F3               	clrf	___lwdiv@dividend+1
  1579  06AF  07F3               	addwf	___lwdiv@dividend+1,f
  1580  06B0  0828               	movf	printf@_val,w
  1581  06B1  01F2               	clrf	___lwdiv@dividend
  1582  06B2  07F2               	addwf	___lwdiv@dividend,f
  1583  06B3  2386               	fcall	___lwdiv
  1584  06B4  0871               	movf	?___lwdiv+1,w
  1585  06B5  01FB               	clrf	___lwmod@dividend+1
  1586  06B6  07FB               	addwf	___lwmod@dividend+1,f
  1587  06B7  0870               	movf	?___lwdiv,w
  1588  06B8  01FA               	clrf	___lwmod@dividend
  1589  06B9  07FA               	addwf	___lwmod@dividend,f
  1590  06BA  22E3               	fcall	___lwmod
  1591  06BB  0878               	movf	?___lwmod,w
  1592  06BC  3E30               	addlw	48
  1593  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1594  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  1595  06BF  00A3               	movwf	??_printf+1
  1596  06C0  0823               	movf	??_printf+1,w
  1597  06C1  00AD               	movwf	printf@c
  1598                           
  1599                           ;doprnt.c: 1532: }
  1600                           ;doprnt.c: 1533: (putch(c) );
  1601  06C2  082D               	movf	printf@c,w
  1602  06C3  22AC               	fcall	_putch
  1603  06C4  2E96               	goto	l1576
  1604  06C5                     l257:	
  1605                           ;doprnt.c: 1549: return 0;
  1606                           ;	Return value of _printf is never used
  1607                           
  1608                           ;doprnt.c: 1534: }
  1609                           ;doprnt.c: 1542: }
  1610                           ;doprnt.c: 1544: alldone:
  1611                           
  1612  06C5  0008               	return
  1613  06C6                     __end_of_printf:	
  1614                           
  1615                           	psect	text6
  1616  02AC                     __ptext6:	
  1617 ;; *************** function _putch *****************
  1618 ;; Defined at:
  1619 ;;		line 8 in file "UART.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  data            1    wreg     unsigned char 
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  data            1    0[COMMON] unsigned char 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;		None               void
  1626 ;; Registers used:
  1627 ;;		wreg
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1633 ;;      Params:         0       0       0       0
  1634 ;;      Locals:         1       0       0       0
  1635 ;;      Temps:          0       0       0       0
  1636 ;;      Totals:         1       0       0       0
  1637 ;;Total ram usage:        1 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_printf
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function _putch
  1648  02AC                     _putch:	
  1649                           
  1650                           ;incstack = 0
  1651                           ; Regs used in _putch: [wreg]
  1652                           ;putch@data stored from wreg
  1653  02AC  00F0               	movwf	putch@data
  1654                           
  1655                           ;UART.c: 10: if(data == 10)
  1656  02AD  0870               	movf	putch@data,w
  1657  02AE  3A0A               	xorlw	10
  1658  02AF  1D03               	skipz
  1659  02B0  2ABC               	goto	l45
  1660  02B1                     l38:	
  1661                           ;UART.c: 13: continue;
  1662                           
  1663                           ;UART.c: 11: {
  1664                           ;UART.c: 12: while(!TXIF)
  1665                           
  1666  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  1667  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  1668  02B3  1E0C               	btfss	12,4	;volatile
  1669  02B4  2AB1               	goto	l38
  1670                           
  1671                           ;UART.c: 14: TXREG = 10;
  1672  02B5  300A               	movlw	10
  1673  02B6  0099               	movwf	25	;volatile
  1674  02B7                     l41:	
  1675                           ;UART.c: 16: continue;
  1676                           
  1677                           ;UART.c: 15: while(!TXIF)
  1678                           
  1679  02B7  1E0C               	btfss	12,4	;volatile
  1680  02B8  2AB7               	goto	l41
  1681                           
  1682                           ;UART.c: 17: TXREG = 13;
  1683  02B9  300D               	movlw	13
  1684  02BA  0099               	movwf	25	;volatile
  1685                           
  1686                           ;UART.c: 18: return;
  1687  02BB  0008               	return
  1688  02BC                     l45:	
  1689                           ;UART.c: 21: continue;
  1690                           
  1691                           ;UART.c: 19: }
  1692                           ;UART.c: 20: while(!TXIF)
  1693                           
  1694  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  1695  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  1696  02BE  1E0C               	btfss	12,4	;volatile
  1697  02BF  2ABC               	goto	l45
  1698                           
  1699                           ;UART.c: 22: TXREG = data;
  1700  02C0  0870               	movf	putch@data,w
  1701  02C1  0099               	movwf	25	;volatile
  1702  02C2  0008               	return
  1703  02C3                     __end_of_putch:	
  1704                           
  1705                           	psect	text7
  1706  02E3                     __ptext7:	
  1707 ;; *************** function ___lwmod *****************
  1708 ;; Defined at:
  1709 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  divisor         2    8[COMMON] unsigned int 
  1712 ;;  dividend        2   10[COMMON] unsigned int 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  counter         1   13[COMMON] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  2    8[COMMON] unsigned int 
  1717 ;; Registers used:
  1718 ;;		wreg, status,2, status,0
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1724 ;;      Params:         4       0       0       0
  1725 ;;      Locals:         1       0       0       0
  1726 ;;      Temps:          1       0       0       0
  1727 ;;      Totals:         6       0       0       0
  1728 ;;Total ram usage:        6 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_printf
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           
  1738                           ;psect for function ___lwmod
  1739  02E3                     ___lwmod:	
  1740                           
  1741                           ;incstack = 0
  1742                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1743  02E3  0879               	movf	___lwmod@divisor+1,w
  1744  02E4  0478               	iorwf	___lwmod@divisor,w
  1745  02E5  1903               	skipnz
  1746  02E6  2B10               	goto	l1440
  1747  02E7  01FD               	clrf	___lwmod@counter
  1748  02E8  0AFD               	incf	___lwmod@counter,f
  1749  02E9                     l1430:	
  1750  02E9  1BF9               	btfsc	___lwmod@divisor+1,7
  1751  02EA  2AF7               	goto	l1432
  1752  02EB  3001               	movlw	1
  1753  02EC                     u1145:	
  1754  02EC  1003               	clrc
  1755  02ED  0DF8               	rlf	___lwmod@divisor,f
  1756  02EE  0DF9               	rlf	___lwmod@divisor+1,f
  1757  02EF  3EFF               	addlw	-1
  1758  02F0  1D03               	skipz
  1759  02F1  2AEC               	goto	u1145
  1760  02F2  3001               	movlw	1
  1761  02F3  00FC               	movwf	??___lwmod
  1762  02F4  087C               	movf	??___lwmod,w
  1763  02F5  07FD               	addwf	___lwmod@counter,f
  1764  02F6  2AE9               	goto	l1430
  1765  02F7                     l1432:	
  1766  02F7  0879               	movf	___lwmod@divisor+1,w
  1767  02F8  027B               	subwf	___lwmod@dividend+1,w
  1768  02F9  1D03               	skipz
  1769  02FA  2AFD               	goto	u1165
  1770  02FB  0878               	movf	___lwmod@divisor,w
  1771  02FC  027A               	subwf	___lwmod@dividend,w
  1772  02FD                     u1165:	
  1773  02FD  1C03               	skipc
  1774  02FE  2B05               	goto	l1436
  1775  02FF  0878               	movf	___lwmod@divisor,w
  1776  0300  02FA               	subwf	___lwmod@dividend,f
  1777  0301  0879               	movf	___lwmod@divisor+1,w
  1778  0302  1C03               	skipc
  1779  0303  03FB               	decf	___lwmod@dividend+1,f
  1780  0304  02FB               	subwf	___lwmod@dividend+1,f
  1781  0305                     l1436:	
  1782  0305  3001               	movlw	1
  1783  0306                     u1175:	
  1784  0306  1003               	clrc
  1785  0307  0CF9               	rrf	___lwmod@divisor+1,f
  1786  0308  0CF8               	rrf	___lwmod@divisor,f
  1787  0309  3EFF               	addlw	-1
  1788  030A  1D03               	skipz
  1789  030B  2B06               	goto	u1175
  1790  030C  3001               	movlw	1
  1791  030D  02FD               	subwf	___lwmod@counter,f
  1792  030E  1D03               	btfss	3,2
  1793  030F  2AF7               	goto	l1432
  1794  0310                     l1440:	
  1795  0310  087B               	movf	___lwmod@dividend+1,w
  1796  0311  01F9               	clrf	?___lwmod+1
  1797  0312  07F9               	addwf	?___lwmod+1,f
  1798  0313  087A               	movf	___lwmod@dividend,w
  1799  0314  01F8               	clrf	?___lwmod
  1800  0315  07F8               	addwf	?___lwmod,f
  1801  0316  0008               	return
  1802  0317                     __end_of___lwmod:	
  1803                           
  1804                           	psect	text8
  1805  0386                     __ptext8:	
  1806 ;; *************** function ___lwdiv *****************
  1807 ;; Defined at:
  1808 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  divisor         2    0[COMMON] unsigned int 
  1811 ;;  dividend        2    2[COMMON] unsigned int 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  quotient        2    5[COMMON] unsigned int 
  1814 ;;  counter         1    7[COMMON] unsigned char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  2    0[COMMON] unsigned int 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2, status,0
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1824 ;;      Params:         4       0       0       0
  1825 ;;      Locals:         3       0       0       0
  1826 ;;      Temps:          1       0       0       0
  1827 ;;      Totals:         8       0       0       0
  1828 ;;Total ram usage:        8 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_printf
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           
  1838                           ;psect for function ___lwdiv
  1839  0386                     ___lwdiv:	
  1840                           
  1841                           ;incstack = 0
  1842                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1843  0386  01F5               	clrf	___lwdiv@quotient
  1844  0387  01F6               	clrf	___lwdiv@quotient+1
  1845  0388  0871               	movf	___lwdiv@divisor+1,w
  1846  0389  0470               	iorwf	___lwdiv@divisor,w
  1847  038A  1903               	skipnz
  1848  038B  2BBD               	goto	l1418
  1849  038C  01F7               	clrf	___lwdiv@counter
  1850  038D  0AF7               	incf	___lwdiv@counter,f
  1851  038E                     l1406:	
  1852  038E  1BF1               	btfsc	___lwdiv@divisor+1,7
  1853  038F  2B9C               	goto	l1408
  1854  0390  3001               	movlw	1
  1855  0391                     u1075:	
  1856  0391  1003               	clrc
  1857  0392  0DF0               	rlf	___lwdiv@divisor,f
  1858  0393  0DF1               	rlf	___lwdiv@divisor+1,f
  1859  0394  3EFF               	addlw	-1
  1860  0395  1D03               	skipz
  1861  0396  2B91               	goto	u1075
  1862  0397  3001               	movlw	1
  1863  0398  00F4               	movwf	??___lwdiv
  1864  0399  0874               	movf	??___lwdiv,w
  1865  039A  07F7               	addwf	___lwdiv@counter,f
  1866  039B  2B8E               	goto	l1406
  1867  039C                     l1408:	
  1868  039C  3001               	movlw	1
  1869  039D                     u1095:	
  1870  039D  1003               	clrc
  1871  039E  0DF5               	rlf	___lwdiv@quotient,f
  1872  039F  0DF6               	rlf	___lwdiv@quotient+1,f
  1873  03A0  3EFF               	addlw	-1
  1874  03A1  1D03               	skipz
  1875  03A2  2B9D               	goto	u1095
  1876  03A3  0871               	movf	___lwdiv@divisor+1,w
  1877  03A4  0273               	subwf	___lwdiv@dividend+1,w
  1878  03A5  1D03               	skipz
  1879  03A6  2BA9               	goto	u1105
  1880  03A7  0870               	movf	___lwdiv@divisor,w
  1881  03A8  0272               	subwf	___lwdiv@dividend,w
  1882  03A9                     u1105:	
  1883  03A9  1C03               	skipc
  1884  03AA  2BB2               	goto	l1414
  1885  03AB  0870               	movf	___lwdiv@divisor,w
  1886  03AC  02F2               	subwf	___lwdiv@dividend,f
  1887  03AD  0871               	movf	___lwdiv@divisor+1,w
  1888  03AE  1C03               	skipc
  1889  03AF  03F3               	decf	___lwdiv@dividend+1,f
  1890  03B0  02F3               	subwf	___lwdiv@dividend+1,f
  1891  03B1  1475               	bsf	___lwdiv@quotient,0
  1892  03B2                     l1414:	
  1893  03B2  3001               	movlw	1
  1894  03B3                     u1115:	
  1895  03B3  1003               	clrc
  1896  03B4  0CF1               	rrf	___lwdiv@divisor+1,f
  1897  03B5  0CF0               	rrf	___lwdiv@divisor,f
  1898  03B6  3EFF               	addlw	-1
  1899  03B7  1D03               	skipz
  1900  03B8  2BB3               	goto	u1115
  1901  03B9  3001               	movlw	1
  1902  03BA  02F7               	subwf	___lwdiv@counter,f
  1903  03BB  1D03               	btfss	3,2
  1904  03BC  2B9C               	goto	l1408
  1905  03BD                     l1418:	
  1906  03BD  0876               	movf	___lwdiv@quotient+1,w
  1907  03BE  01F1               	clrf	?___lwdiv+1
  1908  03BF  07F1               	addwf	?___lwdiv+1,f
  1909  03C0  0875               	movf	___lwdiv@quotient,w
  1910  03C1  01F0               	clrf	?___lwdiv
  1911  03C2  07F0               	addwf	?___lwdiv,f
  1912  03C3  0008               	return
  1913  03C4                     __end_of___lwdiv:	
  1914                           
  1915                           	psect	text9
  1916  041F                     __ptext9:	
  1917 ;; *************** function _MFRC522_SelectTag *****************
  1918 ;; Defined at:
  1919 ;;		line 325 in file "main.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;  serNum          1    wreg     PTR unsigned char 
  1922 ;;		 -> main@UID(6), 
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;  serNum          1   38[BANK0 ] PTR unsigned char 
  1925 ;;		 -> main@UID(6), 
  1926 ;;  buffer          9   27[BANK0 ] unsigned char [9]
  1927 ;;  recvBits        2   39[BANK0 ] unsigned int 
  1928 ;;  i               1   41[BANK0 ] unsigned char 
  1929 ;;  size            1   37[BANK0 ] unsigned char 
  1930 ;;  _status         1   36[BANK0 ] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  1    wreg      unsigned char 
  1933 ;; Registers used:
  1934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1940 ;;      Params:         0       0       0       0
  1941 ;;      Locals:         0      15       0       0
  1942 ;;      Temps:          0       5       0       0
  1943 ;;      Totals:         0      20       0       0
  1944 ;;Total ram usage:       20 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:    4
  1947 ;; This function calls:
  1948 ;;		_MFRC522_CRC
  1949 ;;		_MFRC522_ToCard
  1950 ;; This function is called by:
  1951 ;;		_main
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           
  1956                           ;psect for function _MFRC522_SelectTag
  1957  041F                     _MFRC522_SelectTag:	
  1958                           
  1959                           ;incstack = 0
  1960                           ; Regs used in _MFRC522_SelectTag: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1961                           ;MFRC522_SelectTag@serNum stored from wreg
  1962  041F  1283               	bcf	3,5	;RP0=0, select bank0
  1963  0420  1303               	bcf	3,6	;RP1=0, select bank0
  1964  0421  00C6               	movwf	MFRC522_SelectTag@serNum
  1965                           
  1966                           ;main.c: 327: char i;
  1967                           ;main.c: 328: char _status;
  1968                           ;main.c: 329: char size;
  1969                           ;main.c: 330: unsigned recvBits;
  1970                           ;main.c: 331: char buffer[9];
  1971                           ;main.c: 335: buffer[0] = 0x93;
  1972  0422  3093               	movlw	147
  1973  0423  00B6               	movwf	??_MFRC522_SelectTag
  1974  0424  0836               	movf	??_MFRC522_SelectTag,w
  1975  0425  00BB               	movwf	MFRC522_SelectTag@buffer
  1976                           
  1977                           ;main.c: 336: buffer[1] = 0x70;
  1978  0426  3070               	movlw	112
  1979  0427  00B6               	movwf	??_MFRC522_SelectTag
  1980  0428  0836               	movf	??_MFRC522_SelectTag,w
  1981  0429  00BC               	movwf	MFRC522_SelectTag@buffer+1
  1982                           
  1983                           ;main.c: 338: for ( i=2; i < 7; i++ )
  1984  042A  3002               	movlw	2
  1985  042B  00B6               	movwf	??_MFRC522_SelectTag
  1986  042C  0836               	movf	??_MFRC522_SelectTag,w
  1987  042D  00C9               	movwf	MFRC522_SelectTag@i
  1988  042E  3007               	movlw	7
  1989  042F  0249               	subwf	MFRC522_SelectTag@i,w
  1990  0430  1803               	btfsc	3,0
  1991  0431  2C48               	goto	l1690
  1992  0432                     l1682:	
  1993                           
  1994                           ;main.c: 339: {
  1995                           ;main.c: 340: buffer[i] = *serNum++;
  1996  0432  0846               	movf	MFRC522_SelectTag@serNum,w
  1997  0433  0084               	movwf	4
  1998  0434  1383               	bcf	3,7	;select IRP bank0
  1999  0435  0800               	movf	0,w
  2000  0436  00B6               	movwf	??_MFRC522_SelectTag
  2001  0437  0849               	movf	MFRC522_SelectTag@i,w
  2002  0438  3E3B               	addlw	MFRC522_SelectTag@buffer& (0+255)
  2003  0439  0084               	movwf	4
  2004  043A  0836               	movf	??_MFRC522_SelectTag,w
  2005  043B  0080               	movwf	0
  2006  043C  3001               	movlw	1
  2007  043D  00B6               	movwf	??_MFRC522_SelectTag
  2008  043E  0836               	movf	??_MFRC522_SelectTag,w
  2009  043F  07C6               	addwf	MFRC522_SelectTag@serNum,f
  2010  0440  3001               	movlw	1
  2011  0441  00B6               	movwf	??_MFRC522_SelectTag
  2012  0442  0836               	movf	??_MFRC522_SelectTag,w
  2013  0443  07C9               	addwf	MFRC522_SelectTag@i,f
  2014  0444  3007               	movlw	7
  2015  0445  0249               	subwf	MFRC522_SelectTag@i,w
  2016  0446  1C03               	skipc
  2017  0447  2C32               	goto	l1682
  2018  0448                     l1690:	
  2019                           
  2020                           ;main.c: 341: }
  2021                           ;main.c: 343: MFRC522_CRC( buffer, 7, &buffer[7] );
  2022  0448  3007               	movlw	7
  2023  0449  00B6               	movwf	??_MFRC522_SelectTag
  2024  044A  0836               	movf	??_MFRC522_SelectTag,w
  2025  044B  00A4               	movwf	MFRC522_CRC@length
  2026  044C  3042               	movlw	(MFRC522_SelectTag@buffer+7)& (0+255)
  2027  044D  00B7               	movwf	??_MFRC522_SelectTag+1
  2028  044E  0837               	movf	??_MFRC522_SelectTag+1,w
  2029  044F  00A5               	movwf	MFRC522_CRC@dataOut
  2030  0450  303B               	movlw	MFRC522_SelectTag@buffer& (0+255)
  2031  0451  23C4               	fcall	_MFRC522_CRC
  2032                           
  2033                           ;main.c: 345: _status = MFRC522_ToCard( 0x0C, buffer, 9, buffer, &recvBits );
  2034  0452  303B               	movlw	MFRC522_SelectTag@buffer& (0+255)
  2035  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2036  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2037  0455  00B6               	movwf	??_MFRC522_SelectTag
  2038  0456  0836               	movf	??_MFRC522_SelectTag,w
  2039  0457  00A4               	movwf	MFRC522_ToCard@sendData
  2040  0458  3009               	movlw	9
  2041  0459  00B7               	movwf	??_MFRC522_SelectTag+1
  2042  045A  0837               	movf	??_MFRC522_SelectTag+1,w
  2043  045B  00A5               	movwf	MFRC522_ToCard@sendLen
  2044  045C  303B               	movlw	MFRC522_SelectTag@buffer& (0+255)
  2045  045D  00B8               	movwf	??_MFRC522_SelectTag+2
  2046  045E  0838               	movf	??_MFRC522_SelectTag+2,w
  2047  045F  00A6               	movwf	MFRC522_ToCard@backData
  2048  0460  3047               	movlw	MFRC522_SelectTag@recvBits& (0+255)
  2049  0461  00B9               	movwf	??_MFRC522_SelectTag+3
  2050  0462  0839               	movf	??_MFRC522_SelectTag+3,w
  2051  0463  00A7               	movwf	MFRC522_ToCard@backLen
  2052  0464  300C               	movlw	12
  2053  0465  26C6               	fcall	_MFRC522_ToCard
  2054  0466  1283               	bcf	3,5	;RP0=0, select bank0
  2055  0467  1303               	bcf	3,6	;RP1=0, select bank0
  2056  0468  00BA               	movwf	??_MFRC522_SelectTag+4
  2057  0469  083A               	movf	??_MFRC522_SelectTag+4,w
  2058  046A  00C4               	movwf	MFRC522_SelectTag@_status
  2059                           
  2060                           ;main.c: 346: if ( (_status == 0) && (recvBits == 0x18) )
  2061  046B  08C4               	movf	MFRC522_SelectTag@_status,f
  2062  046C  1D03               	skipz
  2063  046D  2C78               	goto	l1698
  2064  046E  3018               	movlw	24
  2065  046F  0647               	xorwf	MFRC522_SelectTag@recvBits,w
  2066  0470  0448               	iorwf	MFRC522_SelectTag@recvBits+1,w
  2067  0471  1D03               	skipz
  2068  0472  2C78               	goto	l1698
  2069                           
  2070                           ;main.c: 347: {
  2071                           ;main.c: 348: size = buffer[0];
  2072  0473  083B               	movf	MFRC522_SelectTag@buffer,w
  2073  0474  00B6               	movwf	??_MFRC522_SelectTag
  2074  0475  0836               	movf	??_MFRC522_SelectTag,w
  2075  0476  00C5               	movwf	MFRC522_SelectTag@size
  2076                           
  2077                           ;main.c: 349: }
  2078  0477  2C79               	goto	l1700
  2079  0478                     l1698:	
  2080                           
  2081                           ;main.c: 350: else
  2082                           ;main.c: 351: {
  2083                           ;main.c: 352: size = 0;
  2084  0478  01C5               	clrf	MFRC522_SelectTag@size
  2085  0479                     l1700:	
  2086                           
  2087                           ;main.c: 353: }
  2088                           ;main.c: 354: return size;
  2089  0479  0845               	movf	MFRC522_SelectTag@size,w
  2090  047A  0008               	return
  2091  047B                     __end_of_MFRC522_SelectTag:	
  2092                           
  2093                           	psect	text10
  2094  03C4                     __ptext10:	
  2095 ;; *************** function _MFRC522_CRC *****************
  2096 ;; Defined at:
  2097 ;;		line 299 in file "main.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  dataIn          1    wreg     PTR unsigned char 
  2100 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2101 ;;  length          1    4[BANK0 ] unsigned char 
  2102 ;;  dataOut         1    5[BANK0 ] PTR unsigned char 
  2103 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;  dataIn          1    9[BANK0 ] PTR unsigned char 
  2106 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2107 ;;  i               1    8[BANK0 ] unsigned char 
  2108 ;;  n               1    7[BANK0 ] unsigned char 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;		None               void
  2111 ;; Registers used:
  2112 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2118 ;;      Params:         0       2       0       0
  2119 ;;      Locals:         0       3       0       0
  2120 ;;      Temps:          0       1       0       0
  2121 ;;      Totals:         0       6       0       0
  2122 ;;Total ram usage:        6 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    3
  2125 ;; This function calls:
  2126 ;;		_MFRC522_Clear_Bit
  2127 ;;		_MFRC522_Rd
  2128 ;;		_MFRC522_Set_Bit
  2129 ;;		_MFRC522_Wr
  2130 ;; This function is called by:
  2131 ;;		_MFRC522_SelectTag
  2132 ;;		_MFRC522_Halt
  2133 ;;		_MFRC522_Write
  2134 ;;		_MFRC522_Read
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           
  2139                           ;psect for function _MFRC522_CRC
  2140  03C4                     _MFRC522_CRC:	
  2141                           
  2142                           ;incstack = 0
  2143                           ; Regs used in _MFRC522_CRC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2144                           ;MFRC522_CRC@dataIn stored from wreg
  2145  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2146  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2147  03C6  00A9               	movwf	MFRC522_CRC@dataIn
  2148                           
  2149                           ;main.c: 301: char i, n;
  2150                           ;main.c: 302: MFRC522_Clear_Bit( 0x05, 0x04 );
  2151  03C7  3004               	movlw	4
  2152  03C8  00A6               	movwf	??_MFRC522_CRC
  2153  03C9  0826               	movf	??_MFRC522_CRC,w
  2154  03CA  00A0               	movwf	MFRC522_Clear_Bit@mask
  2155  03CB  3005               	movlw	5
  2156  03CC  2251               	fcall	_MFRC522_Clear_Bit
  2157                           
  2158                           ;main.c: 303: MFRC522_Set_Bit( 0x0A, 0x80 );
  2159  03CD  3080               	movlw	128
  2160  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  2161  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  2162  03D0  00A6               	movwf	??_MFRC522_CRC
  2163  03D1  0826               	movf	??_MFRC522_CRC,w
  2164  03D2  00A0               	movwf	MFRC522_Set_Bit@mask
  2165  03D3  300A               	movlw	10
  2166  03D4  2234               	fcall	_MFRC522_Set_Bit
  2167                           
  2168                           ;main.c: 306: for ( i = 0; i < length; i++ )
  2169  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  2170  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  2171  03D7  01A8               	clrf	MFRC522_CRC@i
  2172  03D8                     l1610:	
  2173  03D8  0824               	movf	MFRC522_CRC@length,w
  2174  03D9  0228               	subwf	MFRC522_CRC@i,w
  2175  03DA  1803               	btfsc	3,0
  2176  03DB  2BF0               	goto	l1612
  2177                           
  2178                           ;main.c: 307: {
  2179                           ;main.c: 308: MFRC522_Wr( 0x09, *dataIn++ );
  2180  03DC  0829               	movf	MFRC522_CRC@dataIn,w
  2181  03DD  0084               	movwf	4
  2182  03DE  1383               	bcf	3,7	;select IRP bank0
  2183  03DF  0800               	movf	0,w
  2184  03E0  00A6               	movwf	??_MFRC522_CRC
  2185  03E1  0826               	movf	??_MFRC522_CRC,w
  2186  03E2  00FB               	movwf	MFRC522_Wr@value
  2187  03E3  3009               	movlw	9
  2188  03E4  2242               	fcall	_MFRC522_Wr
  2189  03E5  3001               	movlw	1
  2190  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  2191  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  2192  03E8  00A6               	movwf	??_MFRC522_CRC
  2193  03E9  0826               	movf	??_MFRC522_CRC,w
  2194  03EA  07A9               	addwf	MFRC522_CRC@dataIn,f
  2195  03EB  3001               	movlw	1
  2196  03EC  00A6               	movwf	??_MFRC522_CRC
  2197  03ED  0826               	movf	??_MFRC522_CRC,w
  2198  03EE  07A8               	addwf	MFRC522_CRC@i,f
  2199  03EF  2BD8               	goto	l1610
  2200  03F0                     l1612:	
  2201                           
  2202                           ;main.c: 309: }
  2203                           ;main.c: 311: MFRC522_Wr( 0x01, 0x03 );
  2204  03F0  3003               	movlw	3
  2205  03F1  00A6               	movwf	??_MFRC522_CRC
  2206  03F2  0826               	movf	??_MFRC522_CRC,w
  2207  03F3  00FB               	movwf	MFRC522_Wr@value
  2208  03F4  3001               	movlw	1
  2209  03F5  2242               	fcall	_MFRC522_Wr
  2210                           
  2211                           ;main.c: 313: i = 0xFF;
  2212  03F6  30FF               	movlw	255
  2213  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2214  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2215  03F9  00A6               	movwf	??_MFRC522_CRC
  2216  03FA  0826               	movf	??_MFRC522_CRC,w
  2217  03FB  00A8               	movwf	MFRC522_CRC@i
  2218  03FC                     l1616:	
  2219                           ;main.c: 315: do
  2220                           
  2221                           
  2222                           ;main.c: 316: {
  2223                           ;main.c: 317: n = MFRC522_Rd( 0x05 );
  2224  03FC  3005               	movlw	5
  2225  03FD  2282               	fcall	_MFRC522_Rd
  2226  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2227  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  2228  0400  00A6               	movwf	??_MFRC522_CRC
  2229  0401  0826               	movf	??_MFRC522_CRC,w
  2230  0402  00A7               	movwf	MFRC522_CRC@n
  2231                           
  2232                           ;main.c: 318: i--;
  2233  0403  3001               	movlw	1
  2234  0404  02A8               	subwf	MFRC522_CRC@i,f
  2235                           
  2236                           ;main.c: 319: }
  2237                           ;main.c: 320: while( i && !(n & 0x04) );
  2238  0405  0828               	movf	MFRC522_CRC@i,w
  2239  0406  1D03               	skipz
  2240  0407  1927               	btfsc	MFRC522_CRC@n,2
  2241  0408  2C0A               	goto	l1624
  2242  0409  2BFC               	goto	l1616
  2243  040A                     l1624:	
  2244                           
  2245                           ;main.c: 322: dataOut[0] = MFRC522_Rd( 0x22 );
  2246  040A  3022               	movlw	34
  2247  040B  2282               	fcall	_MFRC522_Rd
  2248  040C  1283               	bcf	3,5	;RP0=0, select bank0
  2249  040D  1303               	bcf	3,6	;RP1=0, select bank0
  2250  040E  00A6               	movwf	??_MFRC522_CRC
  2251  040F  0825               	movf	MFRC522_CRC@dataOut,w
  2252  0410  0084               	movwf	4
  2253  0411  0826               	movf	??_MFRC522_CRC,w
  2254  0412  1383               	bcf	3,7	;select IRP bank0
  2255  0413  0080               	movwf	0
  2256                           
  2257                           ;main.c: 323: dataOut[1] = MFRC522_Rd( 0x21 );
  2258  0414  3021               	movlw	33
  2259  0415  2282               	fcall	_MFRC522_Rd
  2260  0416  1283               	bcf	3,5	;RP0=0, select bank0
  2261  0417  1303               	bcf	3,6	;RP1=0, select bank0
  2262  0418  00A6               	movwf	??_MFRC522_CRC
  2263  0419  0A25               	incf	MFRC522_CRC@dataOut,w
  2264  041A  0084               	movwf	4
  2265  041B  0826               	movf	??_MFRC522_CRC,w
  2266  041C  1383               	bcf	3,7	;select IRP bank0
  2267  041D  0080               	movwf	0
  2268  041E  0008               	return
  2269  041F                     __end_of_MFRC522_CRC:	
  2270                           
  2271                           	psect	text11
  2272  0296                     __ptext11:	
  2273 ;; *************** function _MFRC522_ReadCardSerial *****************
  2274 ;; Defined at:
  2275 ;;		line 483 in file "main.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  str             1    wreg     PTR unsigned char 
  2278 ;;		 -> main@UID(6), 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  str             1   35[BANK0 ] PTR unsigned char 
  2281 ;;		 -> main@UID(6), 
  2282 ;;  _status         1   34[BANK0 ] unsigned char 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      unsigned char 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2292 ;;      Params:         0       0       0       0
  2293 ;;      Locals:         0       2       0       0
  2294 ;;      Temps:          0       1       0       0
  2295 ;;      Totals:         0       3       0       0
  2296 ;;Total ram usage:        3 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    5
  2299 ;; This function calls:
  2300 ;;		_MFRC522_AntiColl
  2301 ;; This function is called by:
  2302 ;;		_main
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           
  2307                           ;psect for function _MFRC522_ReadCardSerial
  2308  0296                     _MFRC522_ReadCardSerial:	
  2309                           
  2310                           ;incstack = 0
  2311                           ; Regs used in _MFRC522_ReadCardSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  2312                           ;MFRC522_ReadCardSerial@str stored from wreg
  2313  0296  1283               	bcf	3,5	;RP0=0, select bank0
  2314  0297  1303               	bcf	3,6	;RP1=0, select bank0
  2315  0298  00C3               	movwf	MFRC522_ReadCardSerial@str
  2316                           
  2317                           ;main.c: 485: char _status;
  2318                           ;main.c: 486: _status = MFRC522_AntiColl( str );
  2319  0299  0843               	movf	MFRC522_ReadCardSerial@str,w
  2320  029A  247B               	fcall	_MFRC522_AntiColl
  2321  029B  1283               	bcf	3,5	;RP0=0, select bank0
  2322  029C  1303               	bcf	3,6	;RP1=0, select bank0
  2323  029D  00C1               	movwf	??_MFRC522_ReadCardSerial
  2324  029E  0841               	movf	??_MFRC522_ReadCardSerial,w
  2325  029F  00C2               	movwf	MFRC522_ReadCardSerial@_status
  2326                           
  2327                           ;main.c: 487: str[5] = 0;
  2328  02A0  0843               	movf	MFRC522_ReadCardSerial@str,w
  2329  02A1  3E05               	addlw	5
  2330  02A2  0084               	movwf	4
  2331  02A3  1383               	bcf	3,7	;select IRP bank0
  2332  02A4  0180               	clrf	0
  2333                           
  2334                           ;main.c: 488: if (_status == 0)
  2335  02A5  08C2               	movf	MFRC522_ReadCardSerial@_status,f
  2336  02A6  1D03               	skipz
  2337  02A7  2AAA               	goto	l1728
  2338                           
  2339                           ;main.c: 489: return 1;
  2340  02A8  3001               	movlw	1
  2341  02A9  0008               	return
  2342  02AA                     l1728:	
  2343                           
  2344                           ;main.c: 490: else
  2345                           ;main.c: 491: return 0;
  2346  02AA  3000               	movlw	0
  2347  02AB  0008               	return
  2348  02AC                     __end_of_MFRC522_ReadCardSerial:	
  2349                           
  2350                           	psect	text12
  2351  047B                     __ptext12:	
  2352 ;; *************** function _MFRC522_AntiColl *****************
  2353 ;; Defined at:
  2354 ;;		line 446 in file "main.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;  serNum          1    wreg     PTR unsigned char 
  2357 ;;		 -> main@UID(6), 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  serNum          1   32[BANK0 ] PTR unsigned char 
  2360 ;;		 -> main@UID(6), 
  2361 ;;  unLen           2   28[BANK0 ] unsigned int 
  2362 ;;  i               1   31[BANK0 ] unsigned char 
  2363 ;;  _status         1   30[BANK0 ] unsigned char 
  2364 ;;  serNumCheck     1   27[BANK0 ] unsigned char 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      unsigned char 
  2367 ;; Registers used:
  2368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2374 ;;      Params:         0       0       0       0
  2375 ;;      Locals:         0       6       0       0
  2376 ;;      Temps:          0       5       0       0
  2377 ;;      Totals:         0      11       0       0
  2378 ;;Total ram usage:       11 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    4
  2381 ;; This function calls:
  2382 ;;		_MFRC522_Clear_Bit
  2383 ;;		_MFRC522_ToCard
  2384 ;;		_MFRC522_Wr
  2385 ;; This function is called by:
  2386 ;;		_MFRC522_ReadCardSerial
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           
  2391                           ;psect for function _MFRC522_AntiColl
  2392  047B                     _MFRC522_AntiColl:	
  2393                           
  2394                           ;incstack = 0
  2395                           ; Regs used in _MFRC522_AntiColl: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2396                           ;MFRC522_AntiColl@serNum stored from wreg
  2397  047B  1283               	bcf	3,5	;RP0=0, select bank0
  2398  047C  1303               	bcf	3,6	;RP1=0, select bank0
  2399  047D  00C0               	movwf	MFRC522_AntiColl@serNum
  2400                           
  2401                           ;main.c: 448: char _status;
  2402                           ;main.c: 449: char i;
  2403                           ;main.c: 450: char serNumCheck = 0;
  2404  047E  01BB               	clrf	MFRC522_AntiColl@serNumCheck
  2405                           
  2406                           ;main.c: 451: unsigned unLen;
  2407                           ;main.c: 452: MFRC522_Wr( 0x0D, 0x00 );
  2408  047F  01FB               	clrf	MFRC522_Wr@value
  2409  0480  300D               	movlw	13
  2410  0481  2242               	fcall	_MFRC522_Wr
  2411                           
  2412                           ;main.c: 453: serNum[0] = 0x93;
  2413  0482  3093               	movlw	147
  2414  0483  1283               	bcf	3,5	;RP0=0, select bank0
  2415  0484  1303               	bcf	3,6	;RP1=0, select bank0
  2416  0485  00B6               	movwf	??_MFRC522_AntiColl
  2417  0486  0840               	movf	MFRC522_AntiColl@serNum,w
  2418  0487  0084               	movwf	4
  2419  0488  0836               	movf	??_MFRC522_AntiColl,w
  2420  0489  1383               	bcf	3,7	;select IRP bank0
  2421  048A  0080               	movwf	0
  2422                           
  2423                           ;main.c: 454: serNum[1] = 0x20;
  2424  048B  3020               	movlw	32
  2425  048C  00B6               	movwf	??_MFRC522_AntiColl
  2426  048D  0A40               	incf	MFRC522_AntiColl@serNum,w
  2427  048E  0084               	movwf	4
  2428  048F  0836               	movf	??_MFRC522_AntiColl,w
  2429  0490  0080               	movwf	0
  2430                           
  2431                           ;main.c: 455: MFRC522_Clear_Bit( 0x08, 0x08 );
  2432  0491  3008               	movlw	8
  2433  0492  00B6               	movwf	??_MFRC522_AntiColl
  2434  0493  0836               	movf	??_MFRC522_AntiColl,w
  2435  0494  00A0               	movwf	MFRC522_Clear_Bit@mask
  2436  0495  3008               	movlw	8
  2437  0496  2251               	fcall	_MFRC522_Clear_Bit
  2438                           
  2439                           ;main.c: 456: _status = MFRC522_ToCard( 0x0C, serNum, 2, serNum, &unLen );
  2440  0497  1283               	bcf	3,5	;RP0=0, select bank0
  2441  0498  1303               	bcf	3,6	;RP1=0, select bank0
  2442  0499  0840               	movf	MFRC522_AntiColl@serNum,w
  2443  049A  00B6               	movwf	??_MFRC522_AntiColl
  2444  049B  0836               	movf	??_MFRC522_AntiColl,w
  2445  049C  00A4               	movwf	MFRC522_ToCard@sendData
  2446  049D  3002               	movlw	2
  2447  049E  00B7               	movwf	??_MFRC522_AntiColl+1
  2448  049F  0837               	movf	??_MFRC522_AntiColl+1,w
  2449  04A0  00A5               	movwf	MFRC522_ToCard@sendLen
  2450  04A1  0840               	movf	MFRC522_AntiColl@serNum,w
  2451  04A2  00B8               	movwf	??_MFRC522_AntiColl+2
  2452  04A3  0838               	movf	??_MFRC522_AntiColl+2,w
  2453  04A4  00A6               	movwf	MFRC522_ToCard@backData
  2454  04A5  303C               	movlw	MFRC522_AntiColl@unLen& (0+255)
  2455  04A6  00B9               	movwf	??_MFRC522_AntiColl+3
  2456  04A7  0839               	movf	??_MFRC522_AntiColl+3,w
  2457  04A8  00A7               	movwf	MFRC522_ToCard@backLen
  2458  04A9  300C               	movlw	12
  2459  04AA  26C6               	fcall	_MFRC522_ToCard
  2460  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  2461  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  2462  04AD  00BA               	movwf	??_MFRC522_AntiColl+4
  2463  04AE  083A               	movf	??_MFRC522_AntiColl+4,w
  2464  04AF  00BE               	movwf	MFRC522_AntiColl@_status
  2465                           
  2466                           ;main.c: 457: if (_status == 0)
  2467  04B0  08BE               	movf	MFRC522_AntiColl@_status,f
  2468  04B1  1D03               	skipz
  2469  04B2  2CD6               	goto	l198
  2470                           
  2471                           ;main.c: 458: {
  2472                           ;main.c: 459: for ( i=0; i < 4; i++ )
  2473  04B3  01BF               	clrf	MFRC522_AntiColl@i
  2474  04B4  3004               	movlw	4
  2475  04B5  023F               	subwf	MFRC522_AntiColl@i,w
  2476  04B6  1803               	btfsc	3,0
  2477  04B7  2CCA               	goto	l1652
  2478  04B8                     l1646:	
  2479                           
  2480                           ;main.c: 460: {
  2481                           ;main.c: 461: serNumCheck ^= serNum[i];
  2482  04B8  083F               	movf	MFRC522_AntiColl@i,w
  2483  04B9  0740               	addwf	MFRC522_AntiColl@serNum,w
  2484  04BA  00B6               	movwf	??_MFRC522_AntiColl
  2485  04BB  0836               	movf	??_MFRC522_AntiColl,w
  2486  04BC  0084               	movwf	4
  2487  04BD  1383               	bcf	3,7	;select IRP bank0
  2488  04BE  0800               	movf	0,w
  2489  04BF  00B7               	movwf	??_MFRC522_AntiColl+1
  2490  04C0  0837               	movf	??_MFRC522_AntiColl+1,w
  2491  04C1  06BB               	xorwf	MFRC522_AntiColl@serNumCheck,f
  2492  04C2  3001               	movlw	1
  2493  04C3  00B6               	movwf	??_MFRC522_AntiColl
  2494  04C4  0836               	movf	??_MFRC522_AntiColl,w
  2495  04C5  07BF               	addwf	MFRC522_AntiColl@i,f
  2496  04C6  3004               	movlw	4
  2497  04C7  023F               	subwf	MFRC522_AntiColl@i,w
  2498  04C8  1C03               	skipc
  2499  04C9  2CB8               	goto	l1646
  2500  04CA                     l1652:	
  2501                           
  2502                           ;main.c: 462: }
  2503                           ;main.c: 464: if ( serNumCheck != serNum[4] )
  2504  04CA  0840               	movf	MFRC522_AntiColl@serNum,w
  2505  04CB  3E04               	addlw	4
  2506  04CC  0084               	movwf	4
  2507  04CD  1383               	bcf	3,7	;select IRP bank0
  2508  04CE  0800               	movf	0,w
  2509  04CF  063B               	xorwf	MFRC522_AntiColl@serNumCheck,w
  2510  04D0  1903               	skipnz
  2511  04D1  2CD6               	goto	l198
  2512                           
  2513                           ;main.c: 465: {
  2514                           ;main.c: 466: _status = 2;
  2515  04D2  3002               	movlw	2
  2516  04D3  00B6               	movwf	??_MFRC522_AntiColl
  2517  04D4  0836               	movf	??_MFRC522_AntiColl,w
  2518  04D5  00BE               	movwf	MFRC522_AntiColl@_status
  2519  04D6                     l198:	
  2520                           
  2521                           ;main.c: 467: }
  2522                           ;main.c: 468: }
  2523                           ;main.c: 469: return _status;
  2524  04D6  083E               	movf	MFRC522_AntiColl@_status,w
  2525  04D7  0008               	return
  2526  04D8                     __end_of_MFRC522_AntiColl:	
  2527                           
  2528                           	psect	text13
  2529  06C6                     __ptext13:	
  2530 ;; *************** function _MFRC522_ToCard *****************
  2531 ;; Defined at:
  2532 ;;		line 182 in file "main.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  command         1    wreg     unsigned char 
  2535 ;;  sendData        1    4[BANK0 ] PTR unsigned char 
  2536 ;;		 -> main@UID(6), main@TagType(1), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  2537 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2538 ;;  sendLen         1    5[BANK0 ] unsigned char 
  2539 ;;  backData        1    6[BANK0 ] PTR unsigned char 
  2540 ;;		 -> main@UID(6), main@TagType(1), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  2541 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2542 ;;  backLen         1    7[BANK0 ] PTR unsigned int 
  2543 ;;		 -> MFRC522_AntiColl@unLen(2), MFRC522_Read@unLen(2), MFRC522_Write@recvBits(2), MFRC522_Auth@recvBits(2), 
  2544 ;;		 -> MFRC522_Halt@unLen(2), MFRC522_SelectTag@recvBits(2), MFRC522_Request@backBits(2), 
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;  command         1   18[BANK0 ] unsigned char 
  2547 ;;  i               2   19[BANK0 ] unsigned int 
  2548 ;;  n               1   21[BANK0 ] unsigned char 
  2549 ;;  irqEn           1   17[BANK0 ] unsigned char 
  2550 ;;  lastBits        1   16[BANK0 ] unsigned char 
  2551 ;;  _status         1   15[BANK0 ] unsigned char 
  2552 ;;  waitIRq         1   14[BANK0 ] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      unsigned char 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2562 ;;      Params:         0       4       0       0
  2563 ;;      Locals:         0       8       0       0
  2564 ;;      Temps:          0       6       0       0
  2565 ;;      Totals:         0      18       0       0
  2566 ;;Total ram usage:       18 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    3
  2569 ;; This function calls:
  2570 ;;		_MFRC522_Clear_Bit
  2571 ;;		_MFRC522_Rd
  2572 ;;		_MFRC522_Set_Bit
  2573 ;;		_MFRC522_Wr
  2574 ;; This function is called by:
  2575 ;;		_MFRC522_Request
  2576 ;;		_MFRC522_SelectTag
  2577 ;;		_MFRC522_AntiColl
  2578 ;;		_MFRC522_Halt
  2579 ;;		_MFRC522_Auth
  2580 ;;		_MFRC522_Write
  2581 ;;		_MFRC522_Read
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585                           
  2586                           ;psect for function _MFRC522_ToCard
  2587  06C6                     _MFRC522_ToCard:	
  2588                           
  2589                           ;incstack = 0
  2590                           ; Regs used in _MFRC522_ToCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2591                           ;MFRC522_ToCard@command stored from wreg
  2592  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  2593  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  2594  06C8  00B2               	movwf	MFRC522_ToCard@command
  2595                           
  2596                           ;main.c: 184: char _status = 2;
  2597  06C9  3002               	movlw	2
  2598  06CA  00A8               	movwf	??_MFRC522_ToCard
  2599  06CB  0828               	movf	??_MFRC522_ToCard,w
  2600  06CC  00AF               	movwf	MFRC522_ToCard@_status
  2601                           
  2602                           ;main.c: 185: char irqEn = 0x00;
  2603  06CD  01B1               	clrf	MFRC522_ToCard@irqEn
  2604                           
  2605                           ;main.c: 186: char waitIRq = 0x00;
  2606  06CE  01AE               	clrf	MFRC522_ToCard@waitIRq
  2607                           
  2608                           ;main.c: 187: char lastBits;
  2609                           ;main.c: 188: char n;
  2610                           ;main.c: 189: unsigned i;
  2611                           ;main.c: 191: switch (command)
  2612  06CF  2EDF               	goto	l1456
  2613  06D0                     l1450:	
  2614                           ;main.c: 192: {
  2615                           ;main.c: 193: case 0x0E:
  2616                           
  2617                           
  2618                           ;main.c: 194: {
  2619                           ;main.c: 195: irqEn = 0x12;
  2620  06D0  3012               	movlw	18
  2621  06D1  00A8               	movwf	??_MFRC522_ToCard
  2622  06D2  0828               	movf	??_MFRC522_ToCard,w
  2623  06D3  00B1               	movwf	MFRC522_ToCard@irqEn
  2624                           
  2625                           ;main.c: 196: waitIRq = 0x10;
  2626  06D4  3010               	movlw	16
  2627  06D5  2EDB               	goto	L1
  2628  06D6                     l1452:	
  2629                           ;main.c: 198: }
  2630                           ;main.c: 199: case 0x0C:
  2631                           
  2632                           ;main.c: 197: break;
  2633                           
  2634                           
  2635                           ;main.c: 200: {
  2636                           ;main.c: 201: irqEn = 0x77;
  2637  06D6  3077               	movlw	119
  2638  06D7  00A8               	movwf	??_MFRC522_ToCard
  2639  06D8  0828               	movf	??_MFRC522_ToCard,w
  2640  06D9  00B1               	movwf	MFRC522_ToCard@irqEn
  2641                           
  2642                           ;main.c: 202: waitIRq = 0x30;
  2643  06DA  3030               	movlw	48
  2644  06DB                     L1:	
  2645  06DB  00A8               	movwf	??_MFRC522_ToCard
  2646  06DC  0828               	movf	??_MFRC522_ToCard,w
  2647  06DD  00AE               	movwf	MFRC522_ToCard@waitIRq
  2648                           
  2649                           ;main.c: 207: }
  2650                           
  2651                           ;main.c: 206: break;
  2652                           
  2653                           ;main.c: 204: }
  2654                           ;main.c: 205: default:
  2655                           
  2656                           ;main.c: 203: break;
  2657  06DE  2EE7               	goto	l1458
  2658  06DF                     l1456:	
  2659  06DF  0832               	movf	MFRC522_ToCard@command,w
  2660                           
  2661                           ; Switch size 1, requested type "space"
  2662                           ; Number of cases is 2, Range of values is 12 to 14
  2663                           ; switch strategies available:
  2664                           ; Name         Instructions Cycles
  2665                           ; simple_byte            7     4 (average)
  2666                           ; direct_byte           12     9 (fixed)
  2667                           ; jumptable            263     9 (fixed)
  2668                           ;	Chosen strategy is simple_byte
  2669  06E0  3A0C               	xorlw	12	; case 12
  2670  06E1  1903               	skipnz
  2671  06E2  2ED6               	goto	l1452
  2672  06E3  3A02               	xorlw	2	; case 14
  2673  06E4  1903               	skipnz
  2674  06E5  2ED0               	goto	l1450
  2675  06E6  2EE7               	goto	l1458
  2676  06E7                     l1458:	
  2677                           
  2678                           ;main.c: 208: MFRC522_Wr( 0x02, irqEn | 0x80 );
  2679  06E7  0831               	movf	MFRC522_ToCard@irqEn,w
  2680  06E8  3880               	iorlw	128
  2681  06E9  00A8               	movwf	??_MFRC522_ToCard
  2682  06EA  0828               	movf	??_MFRC522_ToCard,w
  2683  06EB  00FB               	movwf	MFRC522_Wr@value
  2684  06EC  3002               	movlw	2
  2685  06ED  2242               	fcall	_MFRC522_Wr
  2686                           
  2687                           ;main.c: 209: MFRC522_Clear_Bit( 0x04, 0x80 );
  2688  06EE  3080               	movlw	128
  2689  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  2690  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  2691  06F1  00A8               	movwf	??_MFRC522_ToCard
  2692  06F2  0828               	movf	??_MFRC522_ToCard,w
  2693  06F3  00A0               	movwf	MFRC522_Clear_Bit@mask
  2694  06F4  3004               	movlw	4
  2695  06F5  2251               	fcall	_MFRC522_Clear_Bit
  2696                           
  2697                           ;main.c: 210: MFRC522_Set_Bit( 0x0A, 0x80 );
  2698  06F6  3080               	movlw	128
  2699  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  2700  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  2701  06F9  00A8               	movwf	??_MFRC522_ToCard
  2702  06FA  0828               	movf	??_MFRC522_ToCard,w
  2703  06FB  00A0               	movwf	MFRC522_Set_Bit@mask
  2704  06FC  300A               	movlw	10
  2705  06FD  2234               	fcall	_MFRC522_Set_Bit
  2706                           
  2707                           ;main.c: 211: MFRC522_Wr( 0x01, 0x00 );
  2708  06FE  01FB               	clrf	MFRC522_Wr@value
  2709  06FF  3001               	movlw	1
  2710  0700  2242               	fcall	_MFRC522_Wr
  2711                           
  2712                           ;main.c: 216: for ( i=0; i < sendLen; i++ )
  2713  0701  1283               	bcf	3,5	;RP0=0, select bank0
  2714  0702  1303               	bcf	3,6	;RP1=0, select bank0
  2715  0703  01B3               	clrf	MFRC522_ToCard@i
  2716  0704  01B4               	clrf	MFRC522_ToCard@i+1
  2717  0705                     l1466:	
  2718  0705  0825               	movf	MFRC522_ToCard@sendLen,w
  2719  0706  00A8               	movwf	??_MFRC522_ToCard
  2720  0707  01A9               	clrf	??_MFRC522_ToCard+1
  2721  0708  0829               	movf	??_MFRC522_ToCard+1,w
  2722  0709  0234               	subwf	MFRC522_ToCard@i+1,w
  2723  070A  1D03               	skipz
  2724  070B  2F0E               	goto	u1195
  2725  070C  0828               	movf	??_MFRC522_ToCard,w
  2726  070D  0233               	subwf	MFRC522_ToCard@i,w
  2727  070E                     u1195:	
  2728  070E  1803               	btfsc	3,0
  2729  070F  2F25               	goto	l1468
  2730                           
  2731                           ;main.c: 217: {
  2732                           ;main.c: 218: MFRC522_Wr( 0x09, sendData[i] );
  2733  0710  0833               	movf	MFRC522_ToCard@i,w
  2734  0711  0724               	addwf	MFRC522_ToCard@sendData,w
  2735  0712  00A8               	movwf	??_MFRC522_ToCard
  2736  0713  0828               	movf	??_MFRC522_ToCard,w
  2737  0714  0084               	movwf	4
  2738  0715  1383               	bcf	3,7	;select IRP bank0
  2739  0716  0800               	movf	0,w
  2740  0717  00A9               	movwf	??_MFRC522_ToCard+1
  2741  0718  0829               	movf	??_MFRC522_ToCard+1,w
  2742  0719  00FB               	movwf	MFRC522_Wr@value
  2743  071A  3009               	movlw	9
  2744  071B  2242               	fcall	_MFRC522_Wr
  2745  071C  3001               	movlw	1
  2746  071D  1283               	bcf	3,5	;RP0=0, select bank0
  2747  071E  1303               	bcf	3,6	;RP1=0, select bank0
  2748  071F  07B3               	addwf	MFRC522_ToCard@i,f
  2749  0720  1803               	skipnc
  2750  0721  0AB4               	incf	MFRC522_ToCard@i+1,f
  2751  0722  3000               	movlw	0
  2752  0723  07B4               	addwf	MFRC522_ToCard@i+1,f
  2753  0724  2F05               	goto	l1466
  2754  0725                     l1468:	
  2755                           
  2756                           ;main.c: 219: }
  2757                           ;main.c: 221: MFRC522_Wr( 0x01, command );
  2758  0725  0832               	movf	MFRC522_ToCard@command,w
  2759  0726  00A8               	movwf	??_MFRC522_ToCard
  2760  0727  0828               	movf	??_MFRC522_ToCard,w
  2761  0728  00FB               	movwf	MFRC522_Wr@value
  2762  0729  3001               	movlw	1
  2763  072A  2242               	fcall	_MFRC522_Wr
  2764                           
  2765                           ;main.c: 222: if (command == 0x0C )
  2766  072B  1283               	bcf	3,5	;RP0=0, select bank0
  2767  072C  1303               	bcf	3,6	;RP1=0, select bank0
  2768  072D  0832               	movf	MFRC522_ToCard@command,w
  2769  072E  3A0C               	xorlw	12
  2770  072F  1D03               	skipz
  2771  0730  2F37               	goto	l1474
  2772                           
  2773                           ;main.c: 223: {
  2774                           ;main.c: 224: MFRC522_Set_Bit( 0x0D, 0x80 );
  2775  0731  3080               	movlw	128
  2776  0732  00A8               	movwf	??_MFRC522_ToCard
  2777  0733  0828               	movf	??_MFRC522_ToCard,w
  2778  0734  00A0               	movwf	MFRC522_Set_Bit@mask
  2779  0735  300D               	movlw	13
  2780  0736  2234               	fcall	_MFRC522_Set_Bit
  2781  0737                     l1474:	
  2782                           
  2783                           ;main.c: 225: }
  2784                           ;main.c: 228: i = 0xFFFF;
  2785  0737  30FF               	movlw	255
  2786  0738  1283               	bcf	3,5	;RP0=0, select bank0
  2787  0739  1303               	bcf	3,6	;RP1=0, select bank0
  2788  073A  00B3               	movwf	MFRC522_ToCard@i
  2789  073B  30FF               	movlw	255
  2790  073C  00B4               	movwf	MFRC522_ToCard@i+1
  2791  073D                     l1476:	
  2792                           ;main.c: 229: do
  2793                           
  2794                           
  2795                           ;main.c: 230: {
  2796                           ;main.c: 233: n = MFRC522_Rd( 0x04 );
  2797  073D  3004               	movlw	4
  2798  073E  2282               	fcall	_MFRC522_Rd
  2799  073F  1283               	bcf	3,5	;RP0=0, select bank0
  2800  0740  1303               	bcf	3,6	;RP1=0, select bank0
  2801  0741  00A8               	movwf	??_MFRC522_ToCard
  2802  0742  0828               	movf	??_MFRC522_ToCard,w
  2803  0743  00B5               	movwf	MFRC522_ToCard@n
  2804                           
  2805                           ;main.c: 234: i--;
  2806  0744  3001               	movlw	1
  2807  0745  02B3               	subwf	MFRC522_ToCard@i,f
  2808  0746  3000               	movlw	0
  2809  0747  1C03               	skipc
  2810  0748  03B4               	decf	MFRC522_ToCard@i+1,f
  2811  0749  02B4               	subwf	MFRC522_ToCard@i+1,f
  2812                           
  2813                           ;main.c: 235: }
  2814                           ;main.c: 236: while ( i && !(n & 0x01) && !( n & waitIRq ) );
  2815  074A  0834               	movf	MFRC522_ToCard@i+1,w
  2816  074B  0433               	iorwf	MFRC522_ToCard@i,w
  2817  074C  1D03               	btfss	3,2
  2818  074D  1835               	btfsc	MFRC522_ToCard@n,0
  2819  074E  2F53               	goto	l1482
  2820  074F  0835               	movf	MFRC522_ToCard@n,w
  2821  0750  052E               	andwf	MFRC522_ToCard@waitIRq,w
  2822  0751  1903               	btfsc	3,2
  2823  0752  2F3D               	goto	l1476
  2824  0753                     l1482:	
  2825                           
  2826                           ;main.c: 237: MFRC522_Clear_Bit( 0x0D, 0x80 );
  2827  0753  3080               	movlw	128
  2828  0754  00A8               	movwf	??_MFRC522_ToCard
  2829  0755  0828               	movf	??_MFRC522_ToCard,w
  2830  0756  00A0               	movwf	MFRC522_Clear_Bit@mask
  2831  0757  300D               	movlw	13
  2832  0758  2251               	fcall	_MFRC522_Clear_Bit
  2833                           
  2834                           ;main.c: 238: if (i != 0)
  2835  0759  1283               	bcf	3,5	;RP0=0, select bank0
  2836  075A  1303               	bcf	3,6	;RP1=0, select bank0
  2837  075B  0834               	movf	MFRC522_ToCard@i+1,w
  2838  075C  0433               	iorwf	MFRC522_ToCard@i,w
  2839  075D  1903               	skipnz
  2840  075E  2FF7               	goto	l129
  2841                           
  2842                           ;main.c: 239: {
  2843                           ;main.c: 240: if( !( MFRC522_Rd( 0x06 ) & 0x1B ) )
  2844  075F  3006               	movlw	6
  2845  0760  2282               	fcall	_MFRC522_Rd
  2846  0761  391B               	andlw	27
  2847  0762  1D03               	btfss	3,2
  2848  0763  2FF1               	goto	l1522
  2849                           
  2850                           ;main.c: 241: {
  2851                           ;main.c: 242: _status = 0;
  2852  0764  1283               	bcf	3,5	;RP0=0, select bank0
  2853  0765  1303               	bcf	3,6	;RP1=0, select bank0
  2854  0766  01AF               	clrf	MFRC522_ToCard@_status
  2855                           
  2856                           ;main.c: 243: if ( n & irqEn & 0x01 )
  2857  0767  0831               	movf	MFRC522_ToCard@irqEn,w
  2858  0768  0535               	andwf	MFRC522_ToCard@n,w
  2859  0769  00A8               	movwf	??_MFRC522_ToCard
  2860  076A  1C28               	btfss	??_MFRC522_ToCard,0
  2861  076B  2F6E               	goto	l1494
  2862                           
  2863                           ;main.c: 244: {
  2864                           ;main.c: 245: _status = 1;
  2865  076C  01AF               	clrf	MFRC522_ToCard@_status
  2866  076D  0AAF               	incf	MFRC522_ToCard@_status,f
  2867  076E                     l1494:	
  2868                           
  2869                           ;main.c: 246: }
  2870                           ;main.c: 247: if ( command == 0x0C )
  2871  076E  0832               	movf	MFRC522_ToCard@command,w
  2872  076F  3A0C               	xorlw	12
  2873  0770  1D03               	skipz
  2874  0771  2FF7               	goto	l129
  2875                           
  2876                           ;main.c: 248: {
  2877                           ;main.c: 249: n = MFRC522_Rd( 0x0A );
  2878  0772  300A               	movlw	10
  2879  0773  2282               	fcall	_MFRC522_Rd
  2880  0774  1283               	bcf	3,5	;RP0=0, select bank0
  2881  0775  1303               	bcf	3,6	;RP1=0, select bank0
  2882  0776  00A8               	movwf	??_MFRC522_ToCard
  2883  0777  0828               	movf	??_MFRC522_ToCard,w
  2884  0778  00B5               	movwf	MFRC522_ToCard@n
  2885                           
  2886                           ;main.c: 250: lastBits = MFRC522_Rd( 0x0C ) & 0x07;
  2887  0779  300C               	movlw	12
  2888  077A  2282               	fcall	_MFRC522_Rd
  2889  077B  3907               	andlw	7
  2890  077C  1283               	bcf	3,5	;RP0=0, select bank0
  2891  077D  1303               	bcf	3,6	;RP1=0, select bank0
  2892  077E  00A8               	movwf	??_MFRC522_ToCard
  2893  077F  0828               	movf	??_MFRC522_ToCard,w
  2894  0780  00B0               	movwf	MFRC522_ToCard@lastBits
  2895                           
  2896                           ;main.c: 251: if (lastBits)
  2897  0781  0830               	movf	MFRC522_ToCard@lastBits,w
  2898  0782  1903               	btfsc	3,2
  2899  0783  2FA8               	goto	l1502
  2900                           
  2901                           ;main.c: 252: {
  2902                           ;main.c: 253: *backLen = (n-1) * 8 + lastBits;
  2903  0784  0835               	movf	MFRC522_ToCard@n,w
  2904  0785  00A8               	movwf	??_MFRC522_ToCard
  2905  0786  01A9               	clrf	??_MFRC522_ToCard+1
  2906  0787  1003               	clrc
  2907  0788  0DA8               	rlf	??_MFRC522_ToCard,f
  2908  0789  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2909  078A  1003               	clrc
  2910  078B  0DA8               	rlf	??_MFRC522_ToCard,f
  2911  078C  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2912  078D  1003               	clrc
  2913  078E  0DA8               	rlf	??_MFRC522_ToCard,f
  2914  078F  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2915  0790  0830               	movf	MFRC522_ToCard@lastBits,w
  2916  0791  0728               	addwf	??_MFRC522_ToCard,w
  2917  0792  00AA               	movwf	??_MFRC522_ToCard+2
  2918  0793  3000               	movlw	0
  2919  0794  1803               	skipnc
  2920  0795  3001               	movlw	1
  2921  0796  0729               	addwf	??_MFRC522_ToCard+1,w
  2922  0797  00AB               	movwf	??_MFRC522_ToCard+3
  2923  0798  082A               	movf	??_MFRC522_ToCard+2,w
  2924  0799  3EF8               	addlw	248
  2925  079A  00AC               	movwf	??_MFRC522_ToCard+4
  2926  079B  082B               	movf	??_MFRC522_ToCard+3,w
  2927  079C  1803               	skipnc
  2928  079D  3E01               	addlw	1
  2929  079E  3EFF               	addlw	255
  2930  079F  00AD               	movwf	??_MFRC522_ToCard+5
  2931  07A0  0827               	movf	MFRC522_ToCard@backLen,w
  2932  07A1  0084               	movwf	4
  2933  07A2  082C               	movf	??_MFRC522_ToCard+4,w
  2934  07A3  1383               	bcf	3,7	;select IRP bank0
  2935  07A4  0080               	movwf	0
  2936  07A5  0A84               	incf	4,f
  2937  07A6  082D               	movf	??_MFRC522_ToCard+5,w
  2938  07A7  2FBB               	goto	L2
  2939  07A8                     l1502:	
  2940                           ;main.c: 254: }
  2941                           
  2942                           
  2943                           ;main.c: 255: else
  2944                           ;main.c: 256: {
  2945                           ;main.c: 257: *backLen = n * 8;
  2946  07A8  0835               	movf	MFRC522_ToCard@n,w
  2947  07A9  00A8               	movwf	??_MFRC522_ToCard
  2948  07AA  01A9               	clrf	??_MFRC522_ToCard+1
  2949  07AB  1003               	clrc
  2950  07AC  0DA8               	rlf	??_MFRC522_ToCard,f
  2951  07AD  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2952  07AE  1003               	clrc
  2953  07AF  0DA8               	rlf	??_MFRC522_ToCard,f
  2954  07B0  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2955  07B1  1003               	clrc
  2956  07B2  0DA8               	rlf	??_MFRC522_ToCard,f
  2957  07B3  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2958  07B4  0827               	movf	MFRC522_ToCard@backLen,w
  2959  07B5  0084               	movwf	4
  2960  07B6  0828               	movf	??_MFRC522_ToCard,w
  2961  07B7  1383               	bcf	3,7	;select IRP bank0
  2962  07B8  0080               	movwf	0
  2963  07B9  0A84               	incf	4,f
  2964  07BA  0829               	movf	??_MFRC522_ToCard+1,w
  2965  07BB                     L2:	
  2966  07BB  0080               	movwf	0
  2967                           
  2968                           ;main.c: 258: }
  2969                           ;main.c: 259: if (n == 0)
  2970  07BC  08B5               	movf	MFRC522_ToCard@n,f
  2971  07BD  1D03               	skipz
  2972  07BE  2FC1               	goto	l1508
  2973                           
  2974                           ;main.c: 260: {
  2975                           ;main.c: 261: n = 1;
  2976  07BF  01B5               	clrf	MFRC522_ToCard@n
  2977  07C0  0AB5               	incf	MFRC522_ToCard@n,f
  2978  07C1                     l1508:	
  2979                           
  2980                           ;main.c: 262: }
  2981                           ;main.c: 263: if (n > 16)
  2982  07C1  3011               	movlw	17
  2983  07C2  0235               	subwf	MFRC522_ToCard@n,w
  2984  07C3  1C03               	skipc
  2985  07C4  2FC9               	goto	l1512
  2986                           
  2987                           ;main.c: 264: {
  2988                           ;main.c: 265: n = 16;
  2989  07C5  3010               	movlw	16
  2990  07C6  00A8               	movwf	??_MFRC522_ToCard
  2991  07C7  0828               	movf	??_MFRC522_ToCard,w
  2992  07C8  00B5               	movwf	MFRC522_ToCard@n
  2993  07C9                     l1512:	
  2994                           
  2995                           ;main.c: 266: }
  2996                           ;main.c: 268: for (i=0; i < n; i++)
  2997  07C9  01B3               	clrf	MFRC522_ToCard@i
  2998  07CA  01B4               	clrf	MFRC522_ToCard@i+1
  2999  07CB                     l1518:	
  3000  07CB  0835               	movf	MFRC522_ToCard@n,w
  3001  07CC  00A8               	movwf	??_MFRC522_ToCard
  3002  07CD  01A9               	clrf	??_MFRC522_ToCard+1
  3003  07CE  0829               	movf	??_MFRC522_ToCard+1,w
  3004  07CF  0234               	subwf	MFRC522_ToCard@i+1,w
  3005  07D0  1D03               	skipz
  3006  07D1  2FD4               	goto	u1315
  3007  07D2  0828               	movf	??_MFRC522_ToCard,w
  3008  07D3  0233               	subwf	MFRC522_ToCard@i,w
  3009  07D4                     u1315:	
  3010  07D4  1803               	btfsc	3,0
  3011  07D5  2FEA               	goto	l1520
  3012                           
  3013                           ;main.c: 269: {
  3014                           ;main.c: 270: backData[i] = MFRC522_Rd( 0x09 );
  3015  07D6  3009               	movlw	9
  3016  07D7  2282               	fcall	_MFRC522_Rd
  3017  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  3018  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  3019  07DA  00A8               	movwf	??_MFRC522_ToCard
  3020  07DB  0833               	movf	MFRC522_ToCard@i,w
  3021  07DC  0726               	addwf	MFRC522_ToCard@backData,w
  3022  07DD  00A9               	movwf	??_MFRC522_ToCard+1
  3023  07DE  0829               	movf	??_MFRC522_ToCard+1,w
  3024  07DF  0084               	movwf	4
  3025  07E0  0828               	movf	??_MFRC522_ToCard,w
  3026  07E1  1383               	bcf	3,7	;select IRP bank0
  3027  07E2  0080               	movwf	0
  3028  07E3  3001               	movlw	1
  3029  07E4  07B3               	addwf	MFRC522_ToCard@i,f
  3030  07E5  1803               	skipnc
  3031  07E6  0AB4               	incf	MFRC522_ToCard@i+1,f
  3032  07E7  3000               	movlw	0
  3033  07E8  07B4               	addwf	MFRC522_ToCard@i+1,f
  3034  07E9  2FCB               	goto	l1518
  3035  07EA                     l1520:	
  3036                           
  3037                           ;main.c: 271: }
  3038                           ;main.c: 273: backData[i] = 0;
  3039  07EA  0833               	movf	MFRC522_ToCard@i,w
  3040  07EB  0726               	addwf	MFRC522_ToCard@backData,w
  3041  07EC  00A8               	movwf	??_MFRC522_ToCard
  3042  07ED  0828               	movf	??_MFRC522_ToCard,w
  3043  07EE  0084               	movwf	4
  3044  07EF  0180               	clrf	0
  3045                           
  3046                           ;main.c: 274: }
  3047                           ;main.c: 275: }
  3048  07F0  2FF7               	goto	l129
  3049  07F1                     l1522:	
  3050                           
  3051                           ;main.c: 276: else
  3052                           ;main.c: 277: {
  3053                           ;main.c: 278: _status = 2;
  3054  07F1  3002               	movlw	2
  3055  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  3056  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  3057  07F4  00A8               	movwf	??_MFRC522_ToCard
  3058  07F5  0828               	movf	??_MFRC522_ToCard,w
  3059  07F6  00AF               	movwf	MFRC522_ToCard@_status
  3060  07F7                     l129:	
  3061                           
  3062                           ;main.c: 279: }
  3063                           ;main.c: 280: }
  3064                           ;main.c: 283: return _status;
  3065  07F7  082F               	movf	MFRC522_ToCard@_status,w
  3066  07F8  0008               	return
  3067  07F9                     __end_of_MFRC522_ToCard:	
  3068                           
  3069                           	psect	text14
  3070  0251                     __ptext14:	
  3071 ;; *************** function _MFRC522_Clear_Bit *****************
  3072 ;; Defined at:
  3073 ;;		line 140 in file "main.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  addr            1    wreg     unsigned char 
  3076 ;;  mask            1    0[BANK0 ] unsigned char 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  addr            1    3[BANK0 ] unsigned char 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;		None               void
  3081 ;; Registers used:
  3082 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3088 ;;      Params:         0       1       0       0
  3089 ;;      Locals:         0       1       0       0
  3090 ;;      Temps:          0       2       0       0
  3091 ;;      Totals:         0       4       0       0
  3092 ;;Total ram usage:        4 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    2
  3095 ;; This function calls:
  3096 ;;		_MFRC522_Rd
  3097 ;;		_MFRC522_Wr
  3098 ;; This function is called by:
  3099 ;;		_MFRC522_ToCard
  3100 ;;		_MFRC522_CRC
  3101 ;;		_MFRC522_AntiColl
  3102 ;;		_MFRC522_AntennaOff
  3103 ;;		_MFRC522_Halt
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           
  3108                           ;psect for function _MFRC522_Clear_Bit
  3109  0251                     _MFRC522_Clear_Bit:	
  3110                           
  3111                           ;incstack = 0
  3112                           ; Regs used in _MFRC522_Clear_Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3113                           ;MFRC522_Clear_Bit@addr stored from wreg
  3114  0251  1283               	bcf	3,5	;RP0=0, select bank0
  3115  0252  1303               	bcf	3,6	;RP1=0, select bank0
  3116  0253  00A3               	movwf	MFRC522_Clear_Bit@addr
  3117                           
  3118                           ;main.c: 142: MFRC522_Wr( addr, MFRC522_Rd( addr ) & (~mask) );
  3119  0254  0920               	comf	MFRC522_Clear_Bit@mask,w
  3120  0255  00A1               	movwf	??_MFRC522_Clear_Bit
  3121  0256  0823               	movf	MFRC522_Clear_Bit@addr,w
  3122  0257  2282               	fcall	_MFRC522_Rd
  3123  0258  1283               	bcf	3,5	;RP0=0, select bank0
  3124  0259  1303               	bcf	3,6	;RP1=0, select bank0
  3125  025A  0521               	andwf	??_MFRC522_Clear_Bit,w
  3126  025B  00A2               	movwf	??_MFRC522_Clear_Bit+1
  3127  025C  0822               	movf	??_MFRC522_Clear_Bit+1,w
  3128  025D  00FB               	movwf	MFRC522_Wr@value
  3129  025E  0823               	movf	MFRC522_Clear_Bit@addr,w
  3130  025F  2242               	fcall	_MFRC522_Wr
  3131  0260  0008               	return
  3132  0261                     __end_of_MFRC522_Clear_Bit:	
  3133                           
  3134                           	psect	text15
  3135  0317                     __ptext15:	
  3136 ;; *************** function _MFRC522_Init *****************
  3137 ;; Defined at:
  3138 ;;		line 160 in file "main.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;		None
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;		None
  3143 ;; Return value:  Size  Location     Type
  3144 ;;		None               void
  3145 ;; Registers used:
  3146 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3152 ;;      Params:         0       0       0       0
  3153 ;;      Locals:         0       0       0       0
  3154 ;;      Temps:          0       1       0       0
  3155 ;;      Totals:         0       1       0       0
  3156 ;;Total ram usage:        1 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    4
  3159 ;; This function calls:
  3160 ;;		_MFRC522_AntennaOn
  3161 ;;		_MFRC522_Reset
  3162 ;;		_MFRC522_Wr
  3163 ;; This function is called by:
  3164 ;;		_main
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           
  3169                           ;psect for function _MFRC522_Init
  3170  0317                     _MFRC522_Init:	
  3171                           
  3172                           ;main.c: 162: TRISAbits.TRISA1 = 0;
  3173                           
  3174                           ;incstack = 0
  3175                           ; Regs used in _MFRC522_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3176  0317  1683               	bsf	3,5	;RP0=1, select bank1
  3177  0318  1303               	bcf	3,6	;RP1=0, select bank1
  3178  0319  1085               	bcf	5,1	;volatile
  3179                           
  3180                           ;main.c: 163: TRISAbits.TRISA0 = 0;
  3181  031A  1005               	bcf	5,0	;volatile
  3182                           
  3183                           ;main.c: 164: PORTAbits.RA1 = 1;
  3184  031B  1283               	bcf	3,5	;RP0=0, select bank0
  3185  031C  1303               	bcf	3,6	;RP1=0, select bank0
  3186  031D  1485               	bsf	5,1	;volatile
  3187                           
  3188                           ;main.c: 165: PORTAbits.RA0 = 1;
  3189  031E  1405               	bsf	5,0	;volatile
  3190                           
  3191                           ;main.c: 167: MFRC522_Reset();
  3192  031F  222B               	fcall	_MFRC522_Reset
  3193                           
  3194                           ;main.c: 169: MFRC522_Wr( 0x2A, 0x8D );
  3195  0320  308D               	movlw	141
  3196  0321  1283               	bcf	3,5	;RP0=0, select bank0
  3197  0322  1303               	bcf	3,6	;RP1=0, select bank0
  3198  0323  00A4               	movwf	??_MFRC522_Init
  3199  0324  0824               	movf	??_MFRC522_Init,w
  3200  0325  00FB               	movwf	MFRC522_Wr@value
  3201  0326  302A               	movlw	42
  3202  0327  2242               	fcall	_MFRC522_Wr
  3203                           
  3204                           ;main.c: 170: MFRC522_Wr( 0x2B, 0x3E );
  3205  0328  303E               	movlw	62
  3206  0329  1283               	bcf	3,5	;RP0=0, select bank0
  3207  032A  1303               	bcf	3,6	;RP1=0, select bank0
  3208  032B  00A4               	movwf	??_MFRC522_Init
  3209  032C  0824               	movf	??_MFRC522_Init,w
  3210  032D  00FB               	movwf	MFRC522_Wr@value
  3211  032E  302B               	movlw	43
  3212  032F  2242               	fcall	_MFRC522_Wr
  3213                           
  3214                           ;main.c: 171: MFRC522_Wr( 0x2D, 30 );
  3215  0330  301E               	movlw	30
  3216  0331  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0332  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0333  00A4               	movwf	??_MFRC522_Init
  3219  0334  0824               	movf	??_MFRC522_Init,w
  3220  0335  00FB               	movwf	MFRC522_Wr@value
  3221  0336  302D               	movlw	45
  3222  0337  2242               	fcall	_MFRC522_Wr
  3223                           
  3224                           ;main.c: 172: MFRC522_Wr( 0x2C, 0 );
  3225  0338  01FB               	clrf	MFRC522_Wr@value
  3226  0339  302C               	movlw	44
  3227  033A  2242               	fcall	_MFRC522_Wr
  3228                           
  3229                           ;main.c: 174: MFRC522_Wr( 0x15, 0x40 );
  3230  033B  3040               	movlw	64
  3231  033C  1283               	bcf	3,5	;RP0=0, select bank0
  3232  033D  1303               	bcf	3,6	;RP1=0, select bank0
  3233  033E  00A4               	movwf	??_MFRC522_Init
  3234  033F  0824               	movf	??_MFRC522_Init,w
  3235  0340  00FB               	movwf	MFRC522_Wr@value
  3236  0341  3015               	movlw	21
  3237  0342  2242               	fcall	_MFRC522_Wr
  3238                           
  3239                           ;main.c: 175: MFRC522_Wr( 0x11, 0x3D );
  3240  0343  303D               	movlw	61
  3241  0344  1283               	bcf	3,5	;RP0=0, select bank0
  3242  0345  1303               	bcf	3,6	;RP1=0, select bank0
  3243  0346  00A4               	movwf	??_MFRC522_Init
  3244  0347  0824               	movf	??_MFRC522_Init,w
  3245  0348  00FB               	movwf	MFRC522_Wr@value
  3246  0349  3011               	movlw	17
  3247  034A  2242               	fcall	_MFRC522_Wr
  3248                           
  3249                           ;main.c: 180: MFRC522_AntennaOn();
  3250  034B  2222               	fcall	_MFRC522_AntennaOn
  3251  034C  0008               	return
  3252  034D                     __end_of_MFRC522_Init:	
  3253                           
  3254                           	psect	text16
  3255  022B                     __ptext16:	
  3256 ;; *************** function _MFRC522_Reset *****************
  3257 ;; Defined at:
  3258 ;;		line 148 in file "main.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;		None
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;		None
  3263 ;; Return value:  Size  Location     Type
  3264 ;;		None               void
  3265 ;; Registers used:
  3266 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3272 ;;      Params:         0       0       0       0
  3273 ;;      Locals:         0       0       0       0
  3274 ;;      Temps:          0       1       0       0
  3275 ;;      Totals:         0       1       0       0
  3276 ;;Total ram usage:        1 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    2
  3279 ;; This function calls:
  3280 ;;		_MFRC522_Wr
  3281 ;; This function is called by:
  3282 ;;		_MFRC522_Init
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           
  3287                           ;psect for function _MFRC522_Reset
  3288  022B                     _MFRC522_Reset:	
  3289                           
  3290                           ;main.c: 150: MFRC522_Wr( 0x01, 0x0F );
  3291                           
  3292                           ;incstack = 0
  3293                           ; Regs used in _MFRC522_Reset: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3294  022B  300F               	movlw	15
  3295  022C  1283               	bcf	3,5	;RP0=0, select bank0
  3296  022D  1303               	bcf	3,6	;RP1=0, select bank0
  3297  022E  00A0               	movwf	??_MFRC522_Reset
  3298  022F  0820               	movf	??_MFRC522_Reset,w
  3299  0230  00FB               	movwf	MFRC522_Wr@value
  3300  0231  3001               	movlw	1
  3301  0232  2242               	fcall	_MFRC522_Wr
  3302  0233  0008               	return
  3303  0234                     __end_of_MFRC522_Reset:	
  3304                           
  3305                           	psect	text17
  3306  0222                     __ptext17:	
  3307 ;; *************** function _MFRC522_AntennaOn *****************
  3308 ;; Defined at:
  3309 ;;		line 152 in file "main.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;		None
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;		None
  3314 ;; Return value:  Size  Location     Type
  3315 ;;		None               void
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3323 ;;      Params:         0       0       0       0
  3324 ;;      Locals:         0       0       0       0
  3325 ;;      Temps:          0       1       0       0
  3326 ;;      Totals:         0       1       0       0
  3327 ;;Total ram usage:        1 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    3
  3330 ;; This function calls:
  3331 ;;		_MFRC522_Set_Bit
  3332 ;; This function is called by:
  3333 ;;		_MFRC522_Init
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           
  3338                           ;psect for function _MFRC522_AntennaOn
  3339  0222                     _MFRC522_AntennaOn:	
  3340                           
  3341                           ;main.c: 154: MFRC522_Set_Bit( 0x14, 0x03 );
  3342                           
  3343                           ;incstack = 0
  3344                           ; Regs used in _MFRC522_AntennaOn: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3345  0222  3003               	movlw	3
  3346  0223  1283               	bcf	3,5	;RP0=0, select bank0
  3347  0224  1303               	bcf	3,6	;RP1=0, select bank0
  3348  0225  00A3               	movwf	??_MFRC522_AntennaOn
  3349  0226  0823               	movf	??_MFRC522_AntennaOn,w
  3350  0227  00A0               	movwf	MFRC522_Set_Bit@mask
  3351  0228  3014               	movlw	20
  3352  0229  2234               	fcall	_MFRC522_Set_Bit
  3353  022A  0008               	return
  3354  022B                     __end_of_MFRC522_AntennaOn:	
  3355                           
  3356                           	psect	text18
  3357  0234                     __ptext18:	
  3358 ;; *************** function _MFRC522_Set_Bit *****************
  3359 ;; Defined at:
  3360 ;;		line 144 in file "main.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  addr            1    wreg     unsigned char 
  3363 ;;  mask            1    0[BANK0 ] unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  addr            1    2[BANK0 ] unsigned char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;		None               void
  3368 ;; Registers used:
  3369 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3375 ;;      Params:         0       1       0       0
  3376 ;;      Locals:         0       1       0       0
  3377 ;;      Temps:          0       1       0       0
  3378 ;;      Totals:         0       3       0       0
  3379 ;;Total ram usage:        3 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    2
  3382 ;; This function calls:
  3383 ;;		_MFRC522_Rd
  3384 ;;		_MFRC522_Wr
  3385 ;; This function is called by:
  3386 ;;		_MFRC522_AntennaOn
  3387 ;;		_MFRC522_ToCard
  3388 ;;		_MFRC522_CRC
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _MFRC522_Set_Bit
  3394  0234                     _MFRC522_Set_Bit:	
  3395                           
  3396                           ;incstack = 0
  3397                           ; Regs used in _MFRC522_Set_Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3398                           ;MFRC522_Set_Bit@addr stored from wreg
  3399  0234  1283               	bcf	3,5	;RP0=0, select bank0
  3400  0235  1303               	bcf	3,6	;RP1=0, select bank0
  3401  0236  00A2               	movwf	MFRC522_Set_Bit@addr
  3402                           
  3403                           ;main.c: 146: MFRC522_Wr( addr, MFRC522_Rd( addr ) | mask );
  3404  0237  0822               	movf	MFRC522_Set_Bit@addr,w
  3405  0238  2282               	fcall	_MFRC522_Rd
  3406  0239  1283               	bcf	3,5	;RP0=0, select bank0
  3407  023A  1303               	bcf	3,6	;RP1=0, select bank0
  3408  023B  0420               	iorwf	MFRC522_Set_Bit@mask,w
  3409  023C  00A1               	movwf	??_MFRC522_Set_Bit
  3410  023D  0821               	movf	??_MFRC522_Set_Bit,w
  3411  023E  00FB               	movwf	MFRC522_Wr@value
  3412  023F  0822               	movf	MFRC522_Set_Bit@addr,w
  3413  0240  2242               	fcall	_MFRC522_Wr
  3414  0241  0008               	return
  3415  0242                     __end_of_MFRC522_Set_Bit:	
  3416                           
  3417                           	psect	text19
  3418  0242                     __ptext19:	
  3419 ;; *************** function _MFRC522_Wr *****************
  3420 ;; Defined at:
  3421 ;;		line 124 in file "main.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;  addr            1    wreg     unsigned char 
  3424 ;;  value           1   11[COMMON] unsigned char 
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;  addr            1   13[COMMON] unsigned char 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;		None               void
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3436 ;;      Params:         1       0       0       0
  3437 ;;      Locals:         1       0       0       0
  3438 ;;      Temps:          1       0       0       0
  3439 ;;      Totals:         3       0       0       0
  3440 ;;Total ram usage:        3 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    1
  3443 ;; This function calls:
  3444 ;;		_SPI_transfer
  3445 ;; This function is called by:
  3446 ;;		_MFRC522_Clear_Bit
  3447 ;;		_MFRC522_Set_Bit
  3448 ;;		_MFRC522_Reset
  3449 ;;		_MFRC522_Init
  3450 ;;		_MFRC522_ToCard
  3451 ;;		_MFRC522_Request
  3452 ;;		_MFRC522_CRC
  3453 ;;		_MFRC522_AntiColl
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           
  3458                           ;psect for function _MFRC522_Wr
  3459  0242                     _MFRC522_Wr:	
  3460                           
  3461                           ;incstack = 0
  3462                           ; Regs used in _MFRC522_Wr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3463                           ;MFRC522_Wr@addr stored from wreg
  3464  0242  00FD               	movwf	MFRC522_Wr@addr
  3465                           
  3466                           ;main.c: 126: PORTAbits.RA1 = 0;
  3467  0243  1283               	bcf	3,5	;RP0=0, select bank0
  3468  0244  1303               	bcf	3,6	;RP1=0, select bank0
  3469  0245  1085               	bcf	5,1	;volatile
  3470                           
  3471                           ;main.c: 127: SPI_transfer( ( addr << 1 ) & 0x7E );
  3472  0246  087D               	movf	MFRC522_Wr@addr,w
  3473  0247  00FC               	movwf	??_MFRC522_Wr
  3474  0248  077C               	addwf	??_MFRC522_Wr,w
  3475  0249  397E               	andlw	126
  3476  024A  24D8               	fcall	_SPI_transfer
  3477                           
  3478                           ;main.c: 128: SPI_transfer( value );
  3479  024B  087B               	movf	MFRC522_Wr@value,w
  3480  024C  24D8               	fcall	_SPI_transfer
  3481                           
  3482                           ;main.c: 129: PORTAbits.RA1 = 1;
  3483  024D  1283               	bcf	3,5	;RP0=0, select bank0
  3484  024E  1303               	bcf	3,6	;RP1=0, select bank0
  3485  024F  1485               	bsf	5,1	;volatile
  3486  0250  0008               	return
  3487  0251                     __end_of_MFRC522_Wr:	
  3488                           
  3489                           	psect	text20
  3490  0282                     __ptext20:	
  3491 ;; *************** function _MFRC522_Rd *****************
  3492 ;; Defined at:
  3493 ;;		line 131 in file "main.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  addr            1    wreg     unsigned char 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;  addr            1    9[COMMON] unsigned char 
  3498 ;;  value           1   10[COMMON] unsigned char 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      unsigned char 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3508 ;;      Params:         0       0       0       0
  3509 ;;      Locals:         2       0       0       0
  3510 ;;      Temps:          1       0       0       0
  3511 ;;      Totals:         3       0       0       0
  3512 ;;Total ram usage:        3 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    1
  3515 ;; This function calls:
  3516 ;;		_SPI_transfer
  3517 ;; This function is called by:
  3518 ;;		_MFRC522_Clear_Bit
  3519 ;;		_MFRC522_Set_Bit
  3520 ;;		_MFRC522_ToCard
  3521 ;;		_MFRC522_CRC
  3522 ;;		_MFRC522_Auth
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           
  3527                           ;psect for function _MFRC522_Rd
  3528  0282                     _MFRC522_Rd:	
  3529                           
  3530                           ;incstack = 0
  3531                           ; Regs used in _MFRC522_Rd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3532                           ;MFRC522_Rd@addr stored from wreg
  3533  0282  00F9               	movwf	MFRC522_Rd@addr
  3534                           
  3535                           ;main.c: 133: char value;
  3536                           ;main.c: 134: PORTAbits.RA1 = 0;
  3537  0283  1283               	bcf	3,5	;RP0=0, select bank0
  3538  0284  1303               	bcf	3,6	;RP1=0, select bank0
  3539  0285  1085               	bcf	5,1	;volatile
  3540                           
  3541                           ;main.c: 135: SPI_transfer( (( addr << 1 ) & 0x7E) | 0x80 );
  3542  0286  0879               	movf	MFRC522_Rd@addr,w
  3543  0287  00F8               	movwf	??_MFRC522_Rd
  3544  0288  0778               	addwf	??_MFRC522_Rd,w
  3545  0289  397E               	andlw	126
  3546  028A  3880               	iorlw	128
  3547  028B  24D8               	fcall	_SPI_transfer
  3548                           
  3549                           ;main.c: 136: value = SPI_transfer( 0x00 );
  3550  028C  3000               	movlw	0
  3551  028D  24D8               	fcall	_SPI_transfer
  3552  028E  00F8               	movwf	??_MFRC522_Rd
  3553  028F  0878               	movf	??_MFRC522_Rd,w
  3554  0290  00FA               	movwf	MFRC522_Rd@value
  3555                           
  3556                           ;main.c: 137: PORTAbits.RA1 = 1;
  3557  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3558  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3559  0293  1485               	bsf	5,1	;volatile
  3560                           
  3561                           ;main.c: 138: return value;
  3562  0294  087A               	movf	MFRC522_Rd@value,w
  3563  0295  0008               	return
  3564  0296                     __end_of_MFRC522_Rd:	
  3565                           
  3566                           	psect	text21
  3567  04D8                     __ptext21:	
  3568 ;; *************** function _SPI_transfer *****************
  3569 ;; Defined at:
  3570 ;;		line 42 in file "SPI.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;  data            1    wreg     unsigned char 
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;  data            1    7[COMMON] unsigned char 
  3575 ;;  i               2    5[COMMON] int 
  3576 ;;  i               2    3[COMMON] int 
  3577 ;;  ret             1    1[COMMON] unsigned char 
  3578 ;;  ret             1    2[COMMON] unsigned char 
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      unsigned char 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0, btemp+1
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3588 ;;      Params:         0       0       0       0
  3589 ;;      Locals:         7       0       0       0
  3590 ;;      Temps:          1       0       0       0
  3591 ;;      Totals:         8       0       0       0
  3592 ;;Total ram usage:        8 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; This function calls:
  3595 ;;		Nothing
  3596 ;; This function is called by:
  3597 ;;		_MFRC522_Wr
  3598 ;;		_MFRC522_Rd
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           
  3603                           ;psect for function _SPI_transfer
  3604  04D8                     _SPI_transfer:	
  3605                           
  3606                           ;incstack = 0
  3607                           ; Regs used in _SPI_transfer: [wreg+status,2+status,0+btemp+1]
  3608                           ;SPI_transfer@data stored from wreg
  3609  04D8  00F7               	movwf	SPI_transfer@data
  3610                           
  3611                           ;SPI.c: 44: unsigned char ret;
  3612                           ;SPI.c: 45: if(_mode==1 || _mode==3)
  3613  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  3614  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  3615  04DB  086B               	movf	__mode,w
  3616  04DC  3A01               	xorlw	1
  3617  04DD  1903               	skipnz
  3618  04DE  2CE3               	goto	l1310
  3619  04DF  086B               	movf	__mode,w
  3620  04E0  3A03               	xorlw	3
  3621  04E1  1D03               	skipz
  3622  04E2  2D1B               	goto	l1338
  3623  04E3                     l1310:	
  3624                           
  3625                           ;SPI.c: 46: {
  3626                           ;SPI.c: 47: for(int i=0;i<8;i++)
  3627  04E3  01F3               	clrf	SPI_transfer@i
  3628  04E4  01F4               	clrf	SPI_transfer@i+1
  3629  04E5                     L3:	
  3630  04E5  0874               	movf	SPI_transfer@i+1,w
  3631  04E6  3A80               	xorlw	128
  3632  04E7  00FF               	movwf	127
  3633  04E8  3080               	movlw	128
  3634  04E9  027F               	subwf	127,w
  3635  04EA  1D03               	skipz
  3636  04EB  2CEE               	goto	u945
  3637  04EC  3008               	movlw	8
  3638  04ED  0273               	subwf	SPI_transfer@i,w
  3639  04EE                     u945:	
  3640  04EE  1803               	btfsc	3,0
  3641  04EF  2D5B               	goto	l1360
  3642                           
  3643                           ;SPI.c: 48: {
  3644                           ;SPI.c: 50: if(data & 0x80)PORTB |= (1<<6);
  3645  04F0  1FF7               	btfss	SPI_transfer@data,7
  3646  04F1  2CF6               	goto	l1318
  3647  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  3648  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  3649  04F4  1706               	bsf	6,6	;volatile
  3650  04F5  2CFC               	goto	l81
  3651  04F6                     l1318:	
  3652                           
  3653                           ;SPI.c: 51: else PORTB &= ~(1<<6);
  3654  04F6  30BF               	movlw	191
  3655  04F7  00F0               	movwf	??_SPI_transfer
  3656  04F8  0870               	movf	??_SPI_transfer,w
  3657  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  3658  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  3659  04FB  0586               	andwf	6,f	;volatile
  3660  04FC                     l81:	
  3661                           
  3662                           ;SPI.c: 53: PORTB ^= (1<<7);
  3663  04FC  3080               	movlw	128
  3664  04FD  00F0               	movwf	??_SPI_transfer
  3665  04FE  0870               	movf	??_SPI_transfer,w
  3666  04FF  0686               	xorwf	6,f	;volatile
  3667                           
  3668                           ;SPI.c: 54: if(PORTB & (1<<5))ret|=1;
  3669  0500  1A86               	btfsc	6,5	;volatile
  3670  0501  1472               	bsf	SPI_transfer@ret,0
  3671                           
  3672                           ;SPI.c: 55: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3673  0502  300D               	movlw	13
  3674  0503  00F0               	movwf	??_SPI_transfer
  3675  0504                     u1867:	
  3676  0504  0BF0               	decfsz	??_SPI_transfer,f
  3677  0505  2D04               	goto	u1867
  3678                           
  3679                           ;SPI.c: 56: PORTB ^= (1<<7);
  3680  0506  3080               	movlw	128
  3681  0507  00F0               	movwf	??_SPI_transfer
  3682  0508  0870               	movf	??_SPI_transfer,w
  3683  0509  1283               	bcf	3,5	;RP0=0, select bank0
  3684  050A  1303               	bcf	3,6	;RP1=0, select bank0
  3685  050B  0686               	xorwf	6,f	;volatile
  3686                           
  3687                           ;SPI.c: 58: ret<<=1;
  3688  050C  1003               	clrc
  3689  050D  0DF2               	rlf	SPI_transfer@ret,f
  3690                           
  3691                           ;SPI.c: 59: data<<=1;
  3692  050E  1003               	clrc
  3693  050F  0DF7               	rlf	SPI_transfer@data,f
  3694                           
  3695                           ;SPI.c: 60: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3696  0510  300D               	movlw	13
  3697  0511  00F0               	movwf	??_SPI_transfer
  3698  0512                     u1877:	
  3699  0512  0BF0               	decfsz	??_SPI_transfer,f
  3700  0513  2D12               	goto	u1877
  3701  0514  3001               	movlw	1
  3702  0515  07F3               	addwf	SPI_transfer@i,f
  3703  0516  1803               	skipnc
  3704  0517  0AF4               	incf	SPI_transfer@i+1,f
  3705  0518  3000               	movlw	0
  3706  0519  07F4               	addwf	SPI_transfer@i+1,f
  3707  051A  2CE5               	goto	L3
  3708  051B                     l1338:	
  3709                           ;SPI.c: 61: }
  3710                           ;SPI.c: 62: }
  3711                           
  3712                           
  3713                           ;SPI.c: 63: else
  3714                           ;SPI.c: 64: {
  3715                           ;SPI.c: 65: unsigned char ret;
  3716                           ;SPI.c: 66: for(int i=0;i<8;i++)
  3717  051B  01F5               	clrf	SPI_transfer@i_214
  3718  051C  01F6               	clrf	SPI_transfer@i_214+1
  3719  051D  0876               	movf	SPI_transfer@i_214+1,w
  3720  051E  3A80               	xorlw	128
  3721  051F  00FF               	movwf	127
  3722  0520  3080               	movlw	128
  3723  0521  027F               	subwf	127,w
  3724  0522  1D03               	skipz
  3725  0523  2D26               	goto	u985
  3726  0524  3008               	movlw	8
  3727  0525  0275               	subwf	SPI_transfer@i_214,w
  3728  0526                     u985:	
  3729  0526  1803               	btfsc	3,0
  3730  0527  2D5B               	goto	l1360
  3731  0528                     l84:	
  3732                           
  3733                           ;SPI.c: 67: {
  3734                           ;SPI.c: 69: if(PORTB & (1<<5))ret|=1;
  3735  0528  1283               	bcf	3,5	;RP0=0, select bank0
  3736  0529  1303               	bcf	3,6	;RP1=0, select bank0
  3737  052A  1A86               	btfsc	6,5	;volatile
  3738  052B  1471               	bsf	SPI_transfer@ret_213,0
  3739                           
  3740                           ;SPI.c: 70: PORTB ^= (1<<7);
  3741  052C  3080               	movlw	128
  3742  052D  00F0               	movwf	??_SPI_transfer
  3743  052E  0870               	movf	??_SPI_transfer,w
  3744  052F  0686               	xorwf	6,f	;volatile
  3745                           
  3746                           ;SPI.c: 73: if(data & 0x80)PORTB |= (1<<6);
  3747  0530  1FF7               	btfss	SPI_transfer@data,7
  3748  0531  2D34               	goto	l1352
  3749  0532  1706               	bsf	6,6	;volatile
  3750  0533  2D38               	goto	l1354
  3751  0534                     l1352:	
  3752                           
  3753                           ;SPI.c: 74: else PORTB &= ~(1<<6);
  3754  0534  30BF               	movlw	191
  3755  0535  00F0               	movwf	??_SPI_transfer
  3756  0536  0870               	movf	??_SPI_transfer,w
  3757  0537  0586               	andwf	6,f	;volatile
  3758  0538                     l1354:	
  3759                           
  3760                           ;SPI.c: 75: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3761  0538  300D               	movlw	13
  3762  0539  00F0               	movwf	??_SPI_transfer
  3763  053A                     u1887:	
  3764  053A  0BF0               	decfsz	??_SPI_transfer,f
  3765  053B  2D3A               	goto	u1887
  3766                           
  3767                           ;SPI.c: 76: PORTB ^= (1<<7);
  3768  053C  3080               	movlw	128
  3769  053D  00F0               	movwf	??_SPI_transfer
  3770  053E  0870               	movf	??_SPI_transfer,w
  3771  053F  1283               	bcf	3,5	;RP0=0, select bank0
  3772  0540  1303               	bcf	3,6	;RP1=0, select bank0
  3773  0541  0686               	xorwf	6,f	;volatile
  3774                           
  3775                           ;SPI.c: 78: ret<<=1;
  3776  0542  1003               	clrc
  3777  0543  0DF1               	rlf	SPI_transfer@ret_213,f
  3778                           
  3779                           ;SPI.c: 79: data<<=1;
  3780  0544  1003               	clrc
  3781  0545  0DF7               	rlf	SPI_transfer@data,f
  3782                           
  3783                           ;SPI.c: 80: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3784  0546  300D               	movlw	13
  3785  0547  00F0               	movwf	??_SPI_transfer
  3786  0548                     u1897:	
  3787  0548  0BF0               	decfsz	??_SPI_transfer,f
  3788  0549  2D48               	goto	u1897
  3789  054A  3001               	movlw	1
  3790  054B  07F5               	addwf	SPI_transfer@i_214,f
  3791  054C  1803               	skipnc
  3792  054D  0AF6               	incf	SPI_transfer@i_214+1,f
  3793  054E  3000               	movlw	0
  3794  054F  07F6               	addwf	SPI_transfer@i_214+1,f
  3795  0550  0876               	movf	SPI_transfer@i_214+1,w
  3796  0551  3A80               	xorlw	128
  3797  0552  00FF               	movwf	127
  3798  0553  3080               	movlw	128
  3799  0554  027F               	subwf	127,w
  3800  0555  1D03               	skipz
  3801  0556  2D59               	goto	u1015
  3802  0557  3008               	movlw	8
  3803  0558  0275               	subwf	SPI_transfer@i_214,w
  3804  0559                     u1015:	
  3805  0559  1C03               	skipc
  3806  055A  2D28               	goto	l84
  3807  055B                     l1360:	
  3808                           
  3809                           ;SPI.c: 81: }
  3810                           ;SPI.c: 82: }
  3811                           ;SPI.c: 83: return ret;
  3812  055B  0872               	movf	SPI_transfer@ret,w
  3813  055C  0008               	return
  3814  055D                     __end_of_SPI_transfer:	
  3815  007E                     btemp	set	126	;btemp
  3816  007E                     wtemp	set	126
  3817  007E                     wtemp0	set	126
  3818  0080                     wtemp1	set	128
  3819  0082                     wtemp2	set	130
  3820  0084                     wtemp3	set	132
  3821  0086                     wtemp4	set	134
  3822  0088                     wtemp5	set	136
  3823  007F                     wtemp6	set	127
  3824  007E                     ttemp	set	126
  3825  007E                     ttemp0	set	126
  3826  0081                     ttemp1	set	129
  3827  0084                     ttemp2	set	132
  3828  0087                     ttemp3	set	135
  3829  007F                     ttemp4	set	127
  3830  007E                     ltemp	set	126
  3831  007E                     ltemp0	set	126
  3832  0082                     ltemp1	set	130
  3833  0086                     ltemp2	set	134
  3834  0080                     ltemp3	set	128


Data Sizes:
    Strings     45
    Constant    10
    Data        0
    BSS         18
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      76
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[3]), STR_5(CODE[9]), 
		 -> STR_4(CODE[16]), STR_3(CODE[2]), STR_2(CODE[11]), STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S368$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    MFRC522_ReadCardSerial@str	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_isCard@TagType	PTR unsigned char  size(1) Largest target is 1
		 -> main@TagType(BANK0[1]), 

    MFRC522_AntiColl@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_SelectTag@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_CRC@dataOut	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_CRC@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_Request@TagType	PTR unsigned char  size(1) Largest target is 1
		 -> main@TagType(BANK0[1]), 

    MFRC522_ToCard@backData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[1]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_ToCard@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> MFRC522_AntiColl@unLen(BANK0[2]), MFRC522_Read@unLen(COMMON[2]), MFRC522_Write@recvBits(COMMON[2]), MFRC522_Auth@recvBits(COMMON[2]), 
		 -> MFRC522_Halt@unLen(COMMON[2]), MFRC522_SelectTag@recvBits(BANK0[2]), MFRC522_Request@backBits(BANK0[2]), 

    MFRC522_ToCard@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[1]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 


Critical Paths under _main in COMMON

    _MFRC522_Request->_MFRC522_Wr
    _printf->___lwmod
    ___lwmod->___lwdiv
    _MFRC522_CRC->_MFRC522_Wr
    _MFRC522_AntiColl->_MFRC522_Wr
    _MFRC522_ToCard->_MFRC522_Wr
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Init->_MFRC522_Wr
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_SPI_transfer

Critical Paths under _main in BANK0

    _main->_MFRC522_SelectTag
    _MFRC522_isCard->_MFRC522_Request
    _MFRC522_Request->_MFRC522_ToCard
    _MFRC522_SelectTag->_MFRC522_ToCard
    _MFRC522_CRC->_MFRC522_Clear_Bit
    _MFRC522_ReadCardSerial->_MFRC522_AntiColl
    _MFRC522_AntiColl->_MFRC522_ToCard
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_Init->_MFRC522_AntennaOn
    _MFRC522_AntennaOn->_MFRC522_Set_Bit

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0   38333
                                             42 BANK0     15    15      0
                       _MFRC522_Init
             _MFRC522_ReadCardSerial
                  _MFRC522_SelectTag
                     _MFRC522_isCard
                           _SPI_init
                          _UART_init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MFRC522_isCard                                       2     2      0    9687
                                             31 BANK0      2     2      0
                    _MFRC522_Request
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Request                                      9     8      1    9638
                                             22 BANK0      9     8      1
                     _MFRC522_ToCard
                         _MFRC522_Wr
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              14    12      2    1226
                                              0 BANK0     14    12      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _MFRC522_SelectTag                                   20    20      0   12944
                                             22 BANK0     20    20      0
                        _MFRC522_CRC
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (2) _MFRC522_CRC                                          6     4      2    5494
                                              4 BANK0      6     4      2
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_ReadCardSerial                               3     3      0   10349
                                             33 BANK0      3     3      0
                   _MFRC522_AntiColl
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntiColl                                    11    11      0   10255
                                             22 BANK0     11    11      0
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_ToCard                                      18    14      4    7068
                                              4 BANK0     18    14      4
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    4     3      1    1755
                                              0 BANK0      4     3      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Init                                         1     1      0    3814
                                              4 BANK0      1     1      0
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Reset                                        1     1      0    1109
                                              0 BANK0      1     1      0
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntennaOn                                    1     1      0    1596
                                              3 BANK0      1     1      0
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      3     2      1    1596
                                              0 BANK0      3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           3     2      1    1109
                                             11 COMMON     3     2      1
                         _MFRC522_Rd (ARG)
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           3     3      0     209
                                              8 COMMON     3     3      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _SPI_transfer                                         8     8      0     164
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MFRC522_Init
     _MFRC522_AntennaOn
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
     _MFRC522_Reset
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_Wr
       _MFRC522_Rd (ARG)
         _SPI_transfer
       _SPI_transfer (ARG)
   _MFRC522_ReadCardSerial
     _MFRC522_AntiColl
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_SelectTag
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_isCard
     _MFRC522_Request
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
   _SPI_init
   _UART_init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     39      4C       3       95.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      5A      10        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat Apr 11 21:29:47 2015

                              pc 0002                      __CFG_CP$OFF 0000                     MFRC522_CRC@i 0028  
                   MFRC522_CRC@n 0027                               l41 02B7                               l45 02BC  
                             l38 02B1                               l70 02D9                               l81 04FC  
                             l84 0528                               fsr 0004                      main@TagType 0058  
                            l144 0384                              l129 07F7                              l243 0645  
                            l245 062F                              l257 06C5                              l198 04D6  
                   __CFG_CPD$OFF 0000                              u945 04EE                              u985 0526  
                            fsr0 0004                              indf 0000                     __CFG_FOSC$HS 0000  
                 ??_MFRC522_Init 0024                     __CFG_LVP$OFF 0000                             l1310 04E3  
          __size_of_SPI_transfer 0085                             l1318 04F6                             l1502 07A8  
                           l1414 03B2                             l1406 038E                             l1430 02E9  
                           l1352 0534                             l1360 055B                             l1520 07EA  
                           l1512 07C9                             l1408 039C                             l1432 02F7  
                           l1440 0310                             l1354 0538                             l1338 051B  
                           l1522 07F1                             l1450 06D0                             l1610 03D8  
                           l1418 03BD                             l1508 07C1                             l1452 06D6  
                           l1612 03F0                             l1700 0479                             l1436 0305  
                           l1532 062B                             l1518 07CB                             l1456 06DF  
                           l1624 040A                             l1616 03FC                             l1552 066B  
                           l1536 0631                             l1712 026F                             l1482 0753  
                           l1474 0737                             l1466 0705                             l1458 06E7  
                           l1570 0690                             l1476 073D                             l1468 0725  
                           l1652 04CA                             l1548 065F                             l1494 076E  
                           l1646 04B8                             l1566 068A                             l1558 0671  
                           l1728 02AA                             l1576 0696                             l1672 02DD  
                           l1690 0448                             l1682 0432                             l1578 0616  
                           l1596 0380                             l1870 05A6                             l1856 0573  
                           l1698 0478                             l1890 05F5                             l1884 05D1  
                           l1892 05FE                             STR_1 0035                             STR_2 0021  
                           STR_3 003C                             STR_4 0011                             STR_5 002C  
                           STR_6 0039                             STR_7 0033                             STR_8 0037  
                           u1015 0559                             u1105 03A9                             u1115 03B3  
                           u1145 02EC                             u1315 07D4                             u1075 0391  
                           u1165 02FD                             u1095 039D                             u1175 0306  
                           u1195 070E                             u1365 0680                             u1815 05CF  
                           u1825 05F3                             u1837 057E                             u1847 058D  
                           u1775 0571                             u1857 0607                             u1785 05A4  
                           u1867 0504                             u1877 0512                             u1887 053A  
                           u1897 0548                             _RCIF 0065                             _TXIF 0064  
                           _main 055D            MFRC522_AntiColl@unLen 003C                             btemp 007E  
                           ltemp 007E                             start 0000                             ttemp 007E  
                           wtemp 007E                 _MFRC522_AntiColl 047B                    __CFG_MCLRE$ON 0000  
                 MFRC522_Rd@addr 0079                  ??_MFRC522_Reset 0020                   MFRC522_Wr@addr 007D  
                          ?_main 0070          ?_MFRC522_ReadCardSerial 0070                    __CFG_WDTE$OFF 0000  
                __end_of___lwdiv 03C4                  __end_of___lwmod 0317                 SPI_transfer@data 0077  
                          _RCREG 001A                     _SPI_transfer 04D8                            _SPBRG 0099  
                          _PORTB 0006                            _TRISB 0086                            _TXREG 0019  
            __size_of_MFRC522_Rd 0014              __size_of_MFRC522_Wr 000F                            __mode 006B  
             __size_of_UART_init 0011        MFRC522_SelectTag@recvBits 0047                  __end_of_dpowers 0011  
                          _count 0069           MFRC522_AntiColl@serNum 0040                            _putch 02AC  
                          main@i 0054                   __CFG_BOREN$OFF 0000                            pclath 000A  
                          ltemp0 007E                 __end_of_SPI_init 02E3                            ltemp1 0082  
                          ltemp2 0086                            ltemp3 0080                _MFRC522_Clear_Bit 0251  
                          ttemp0 007E                            ttemp1 0081                            ttemp2 0084  
                          ttemp3 0087                            ttemp4 007F                            status 0003  
                          wtemp0 007E                            wtemp1 0080                            wtemp2 0082  
                          wtemp3 0084                            wtemp4 0086                            wtemp5 0088  
                          wtemp6 007F               ?_MFRC522_Clear_Bit 0020          MFRC522_SelectTag@buffer 003B  
        MFRC522_SelectTag@serNum 0046                _MFRC522_AntennaOn 0222                  __initialization 07F9  
                   __end_of_main 060F               ?_MFRC522_AntennaOn 0070              ??_MFRC522_Clear_Bit 0021  
      MFRC522_ReadCardSerial@str 0043                  MFRC522_Rd@value 007A   __end_of_MFRC522_ReadCardSerial 02AC  
               ??_MFRC522_ToCard 0028         __size_of_MFRC522_Set_Bit 000E         __size_of_MFRC522_Request 0039  
                         ??_main 004A              ??_MFRC522_AntennaOn 0023                  MFRC522_ToCard@i 0033  
                MFRC522_ToCard@n 0035                 ??_MFRC522_isCard 003F            MFRC522_ToCard@backLen 0027  
                MFRC522_Wr@value 007B        __end_of_MFRC522_Clear_Bit 0261            MFRC522_ToCard@_status 002F  
          MFRC522_ToCard@command 0032                SPI_transfer@i_214 0075                           ?_putch 0070  
              _MFRC522_SelectTag 041F            MFRC522_ToCard@sendLen 0025               ?_MFRC522_SelectTag 0070  
          MFRC522_ToCard@waitIRq 002E        __end_of_MFRC522_AntennaOn 022B                   __CFG_PWRTE$OFF 0000  
           __size_of_MFRC522_CRC 005B              ??_MFRC522_SelectTag 0036                __end_of_UART_init 0282  
           __end_of_MFRC522_Init 034D          MFRC522_AntiColl@_status 003E                        ??___lwdiv 0074  
                      ??___lwmod 007C                           _buffer 0059                           _printf 060F  
      __end_of_MFRC522_SelectTag 047B         MFRC522_SelectTag@_status 0044          __end_of__initialization 07FE  
         MFRC522_Request@TagType 0036                     ??_MFRC522_Rd 0078                     ??_MFRC522_Wr 007C  
          MFRC522_isCard@TagType 0040                     SPI_init@mode 0071                   __pcstackCOMMON 0070  
                  __end_of_putch 02C3           MFRC522_Request@_status 003C                        ?_SPI_init 0070  
         MFRC522_Request@reqMode 003B         __end_of_MFRC522_AntiColl 04D8                ??_MFRC522_Set_Bit 0021  
             __end_of_MFRC522_Rd 0296               __end_of_MFRC522_Wr 0251                ??_MFRC522_Request 0037  
     __size_of_MFRC522_Clear_Bit 0010                          ??_putch 0070                       __pbssBANK0 0059  
         MFRC522_ToCard@backData 0026       __size_of_MFRC522_AntennaOn 0009                MFRC522_CRC@dataIn 0029  
                     __pmaintext 055D                MFRC522_CRC@length 0024               MFRC522_SelectTag@i 0049  
                        ?_printf 0020           MFRC522_ToCard@lastBits 0030                       ??_SPI_init 0070  
         MFRC522_ToCard@sendData 0024       __size_of_MFRC522_SelectTag 005C                       __stringtab 0001  
          __size_of_MFRC522_Init 0036                          ___lwdiv 0386                          ___lwmod 02E3  
          __end_of_MFRC522_Reset 0234                          __ptext1 0271                          __ptext2 02C3  
                        __ptext3 0261                          __ptext4 034D                          __ptext5 060F  
                        __ptext6 02AC                          __ptext7 02E3                          __ptext8 0386  
                        __ptext9 041F                  __size_of_printf 00B7                          _dpowers 0007  
                        main@UID 004E                          clrloop0 021B                     _MFRC522_Init 0317  
           end_of_initialization 07FE    MFRC522_ReadCardSerial@_status 0042                        _RCSTAbits 0018  
                        printf@c 002D                          printf@f 002C                        _PORTAbits 0005  
                      _PORTBbits 0006                        _UART_init 0271                        _TRISAbits 0085  
                      _TRISBbits 0086                    ??_MFRC522_CRC 0026                        _TXSTAbits 0098  
                _MFRC522_Set_Bit 0234          MFRC522_Request@backBits 003D              MFRC522_ToCard@irqEn 0031  
                SPI_transfer@ret 0072                  _MFRC522_Request 034D                       ?_UART_init 0070  
                 __end_of_printf 06C6              start_initialization 07F9                __size_of_SPI_init 0020  
              ?_MFRC522_AntiColl 0070                MFRC522_AntiColl@i 003F          __size_of_MFRC522_ToCard 0133  
             ??_MFRC522_AntiColl 0036          __size_of_MFRC522_isCard 0010         ??_MFRC522_ReadCardSerial 0041  
            __end_of_MFRC522_CRC 041F                         ??_printf 0022                    ?_SPI_transfer 0070  
                      ___latbits 0000                    __pcstackBANK0 0020              __end_of__stringdata 003E  
                  SPI_transfer@i 0073                        __pnvBANK0 006B          __end_of_MFRC522_Set_Bit 0242  
             MFRC522_CRC@dataOut 0025          __end_of_MFRC522_Request 0386                 ___lwdiv@dividend 0072  
            MFRC522_Set_Bit@addr 0022              MFRC522_Set_Bit@mask 0020                         ?___lwdiv 0070  
                       ?___lwmod 0078                        __pstrings 0001                      ??_UART_init 0070  
                 ??_SPI_transfer 0070                 ___lwdiv@quotient 0075                   __size_of_putch 0017  
                    _MFRC522_CRC 03C4                        clear_ram0 021A  __size_of_MFRC522_ReadCardSerial 0016  
            SPI_transfer@ret_213 0071                      __stringbase 0006                      __stringdata 0011  
                      main@i_346 0056                         _SPI_init 02C3                       printf@_val 0028  
                     printf@flag 0027                       printf@prec 0025                   _MFRC522_ToCard 06C6  
                 _MFRC522_isCard 0261            MFRC522_SelectTag@size 0045           __size_of_MFRC522_Reset 0009  
               ?_MFRC522_Set_Bit 0020            MFRC522_Clear_Bit@addr 0023                 ?_MFRC522_Request 0036  
          MFRC522_Clear_Bit@mask 0020                 __size_of___lwdiv 003E                 __size_of___lwmod 0034  
             __end_of__stringtab 0007           __end_of_MFRC522_ToCard 07F9           _MFRC522_ReadCardSerial 0296  
                ___lwdiv@divisor 0070                  ___lwdiv@counter 0077                         __ptext10 03C4  
                       __ptext11 0296                         __ptext20 0282                         __ptext12 047B  
                       __ptext21 04D8                         __ptext13 06C6                         __ptext14 0251  
                       __ptext15 0317                         __ptext16 022B                         __ptext17 0222  
                       __ptext18 0234                         __ptext19 0242           __end_of_MFRC522_isCard 0271  
    MFRC522_AntiColl@serNumCheck 003B                    __size_of_main 00B2             __end_of_SPI_transfer 055D  
                     _MFRC522_Rd 0282                       _MFRC522_Wr 0242        __size_of_MFRC522_AntiColl 005D  
                       main@size 004D                    _MFRC522_Reset 022B                        putch@data 0070  
                ?_MFRC522_ToCard 0024                  ?_MFRC522_isCard 0070                 ___lwmod@dividend 007A  
                      stringcode 0001                         printf@ap 0026                   ?_MFRC522_Reset 0070  
                ___lwmod@divisor 0078                  ___lwmod@counter 007D                         stringdir 0001  
                       stringtab 0001                    ?_MFRC522_Init 0070                     ?_MFRC522_CRC 0024  
                    ?_MFRC522_Rd 0070                      ?_MFRC522_Wr 007B  
