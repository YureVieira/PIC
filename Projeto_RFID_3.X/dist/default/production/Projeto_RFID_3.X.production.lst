

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Apr 09 16:37:43 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     	;# 
    35  0001                     	;# 
    36  0002                     	;# 
    37  0003                     	;# 
    38  0004                     	;# 
    39  0005                     	;# 
    40  0006                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000E                     	;# 
    45  000E                     	;# 
    46  000F                     	;# 
    47  0010                     	;# 
    48  0011                     	;# 
    49  0012                     	;# 
    50  0015                     	;# 
    51  0015                     	;# 
    52  0016                     	;# 
    53  0017                     	;# 
    54  0018                     	;# 
    55  0019                     	;# 
    56  001A                     	;# 
    57  001F                     	;# 
    58  0081                     	;# 
    59  0085                     	;# 
    60  0086                     	;# 
    61  008C                     	;# 
    62  008E                     	;# 
    63  0092                     	;# 
    64  0098                     	;# 
    65  0099                     	;# 
    66  009A                     	;# 
    67  009B                     	;# 
    68  009C                     	;# 
    69  009D                     	;# 
    70  009F                     	;# 
    71                           
    72                           	psect	strings
    73  0001                     __pstrings:	
    74  0001                     stringtab:	
    75  0001                     __stringtab:	
    76  0001                     stringcode:	
    77                           ;	String table - string pointers are 1 byte each
    78                           
    79  0001                     stringdir:	
    80  0001  3000               	movlw	high stringdir
    81  0002  008A               	movwf	10
    82  0003  0804               	movf	4,w
    83  0004  0A84               	incf	4,f
    84  0005  0782               	addwf	2,f
    85  0006                     __stringbase:	
    86  0006  3400               	retlw	0
    87  0007                     __end_of__stringtab:	
    88  0007                     _dpowers:	
    89  0007  3401               	retlw	1
    90  0008  3400               	retlw	0
    91  0009  340A               	retlw	10
    92  000A  3400               	retlw	0
    93  000B  3464               	retlw	100
    94  000C  3400               	retlw	0
    95  000D  34E8               	retlw	232
    96  000E  3403               	retlw	3
    97  000F  3410               	retlw	16
    98  0010  3427               	retlw	39
    99  0011                     __end_of_dpowers:	
   100  0011                     __stringdata:	
   101  0011                     STR_2:	
   102  0011  3454               	retlw	84	;'T'
   103  0012  3469               	retlw	105	;'i'
   104  0013  3470               	retlw	112	;'p'
   105  0014  346F               	retlw	111	;'o'
   106  0015  3420               	retlw	32	;' '
   107  0016  3464               	retlw	100	;'d'
   108  0017  3465               	retlw	101	;'e'
   109  0018  3420               	retlw	32	;' '
   110  0019  3454               	retlw	84	;'T'
   111  001A  3461               	retlw	97	;'a'
   112  001B  3467               	retlw	103	;'g'
   113  001C  343A               	retlw	58	;':'
   114  001D  3420               	retlw	32	;' '
   115  001E  3425               	retlw	37	;'%'
   116  001F  3475               	retlw	117	;'u'
   117  0020  3400               	retlw	0
   118  0021                     STR_1:	
   119  0021  3445               	retlw	69	;'E'
   120  0022  346D               	retlw	109	;'m'
   121  0023  3420               	retlw	32	;' '
   122  0024  3465               	retlw	101	;'e'
   123  0025  3473               	retlw	115	;'s'
   124  0026  3470               	retlw	112	;'p'
   125  0027  3465               	retlw	101	;'e'
   126  0028  3472               	retlw	114	;'r'
   127  0029  3461               	retlw	97	;'a'
   128  002A  342E               	retlw	46	;'.'
   129  002B  342E               	retlw	46	;'.'
   130  002C  342E               	retlw	46	;'.'
   131  002D  340A               	retlw	10
   132  002E  3400               	retlw	0
   133  002F                     STR_3:	
   134  002F  3443               	retlw	67	;'C'
   135  0030  346F               	retlw	111	;'o'
   136  0031  3464               	retlw	100	;'d'
   137  0032  3469               	retlw	105	;'i'
   138  0033  3467               	retlw	103	;'g'
   139  0034  346F               	retlw	111	;'o'
   140  0035  343A               	retlw	58	;':'
   141  0036  3420               	retlw	32	;' '
   142  0037  3400               	retlw	0
   143  0038                     STR_4:	
   144  0038  3425               	retlw	37	;'%'
   145  0039  3464               	retlw	100	;'d'
   146  003A  3400               	retlw	0
   147  003B                     __end_of__stringdata:	
   148                           
   149                           ; #config settings
   150  0000                     
   151                           	psect	nvBANK0
   152  006A                     __pnvBANK0:	
   153  006A                     __mode:	
   154  006A                     	ds	1
   155  0005                     _PORTAbits	set	5
   156  0006                     _PORTB	set	6
   157  0006                     _PORTBbits	set	6
   158  001A                     _RCREG	set	26
   159  0018                     _RCSTAbits	set	24
   160  0019                     _TXREG	set	25
   161  0065                     _RCIF	set	101
   162  0064                     _TXIF	set	100
   163  0099                     _SPBRG	set	153
   164  0085                     _TRISAbits	set	133
   165  0086                     _TRISB	set	134
   166  0086                     _TRISBbits	set	134
   167  0098                     _TXSTAbits	set	152
   168                           
   169                           	psect	cinit
   170  07F9                     start_initialization:	
   171  07F9                     __initialization:	
   172                           
   173                           ; Clear objects allocated to BANK0
   174  07F9  1383               	bcf	3,7	;select IRP bank0
   175  07FA  3058               	movlw	low __pbssBANK0
   176  07FB  0084               	movwf	4
   177  07FC  306A               	movlw	low (__pbssBANK0+18)
   178  07FD  224B               	fcall	clear_ram0
   179  07FE                     end_of_initialization:	
   180                           ;End of C runtime variable initialization code
   181                           
   182  07FE                     __end_of__initialization:	
   183  07FE  0183               	clrf	3
   184  07FF  2D8A               	ljmp	_main	;jump to C main() function
   185                           
   186                           	psect	bssBANK0
   187  0058                     __pbssBANK0:	
   188  0058                     _buffer:	
   189  0058                     	ds	16
   190  0068                     _count:	
   191  0068                     	ds	2
   192                           
   193                           	psect	clrtext
   194  024B                     clear_ram0:	
   195                           ;	Called with FSR containing the base address, and
   196                           ;	W with the last address+1
   197                           
   198  024B  0064               	clrwdt	;clear the watchdog before getting into this loop
   199  024C                     clrloop0:	
   200  024C  0180               	clrf	0	;clear RAM location pointed to by FSR
   201  024D  0A84               	incf	4,f	;increment pointer
   202  024E  0604               	xorwf	4,w	;XOR with final address
   203  024F  1903               	btfsc	3,2	;have we reached the end yet?
   204  0250  3400               	retlw	0	;all done for this memory range, return
   205  0251  0604               	xorwf	4,w	;XOR again to restore value
   206  0252  2A4C               	goto	clrloop0	;do the next byte
   207                           
   208                           	psect	cstackCOMMON
   209  0070                     __pcstackCOMMON:	
   210  0070                     ?_SPI_init:	
   211  0070                     ??_SPI_init:	
   212                           ; 0 bytes @ 0x0
   213                           
   214  0070                     ??_SPI_transfer:	
   215                           ; 0 bytes @ 0x0
   216                           
   217  0070                     ?_putch:	
   218                           ; 0 bytes @ 0x0
   219                           
   220  0070                     ??_putch:	
   221                           ; 0 bytes @ 0x0
   222                           
   223  0070                     ?_UART_init:	
   224                           ; 0 bytes @ 0x0
   225                           
   226  0070                     ??_UART_init:	
   227                           ; 0 bytes @ 0x0
   228                           
   229  0070                     ?_MFRC522_Reset:	
   230                           ; 0 bytes @ 0x0
   231                           
   232  0070                     ?_MFRC522_AntennaOn:	
   233                           ; 0 bytes @ 0x0
   234                           
   235  0070                     ?_MFRC522_Init:	
   236                           ; 0 bytes @ 0x0
   237                           
   238  0070                     ?_main:	
   239                           ; 0 bytes @ 0x0
   240                           
   241  0070                     ?_SPI_transfer:	
   242                           ; 0 bytes @ 0x0
   243                           
   244  0070                     ?_MFRC522_Rd:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_MFRC522_SelectTag:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_MFRC522_AntiColl:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_MFRC522_isCard:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_MFRC522_ReadCardSerial:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?___lwdiv:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     putch@data:	
   263                           ; 2 bytes @ 0x0
   264                           
   265  0070                     ___lwdiv@divisor:	
   266                           ; 1 bytes @ 0x0
   267                           
   268                           
   269                           ; 2 bytes @ 0x0
   270  0070                     	ds	1
   271  0071                     SPI_init@mode:	
   272  0071                     SPI_transfer@ret_177:	
   273                           ; 1 bytes @ 0x1
   274                           
   275                           
   276                           ; 1 bytes @ 0x1
   277  0071                     	ds	1
   278  0072                     SPI_transfer@ret:	
   279  0072                     ___lwdiv@dividend:	
   280                           ; 1 bytes @ 0x2
   281                           
   282                           
   283                           ; 2 bytes @ 0x2
   284  0072                     	ds	1
   285  0073                     SPI_transfer@i:	
   286                           
   287                           ; 2 bytes @ 0x3
   288  0073                     	ds	1
   289  0074                     ??___lwdiv:	
   290                           
   291                           ; 0 bytes @ 0x4
   292  0074                     	ds	1
   293  0075                     SPI_transfer@i_178:	
   294  0075                     ___lwdiv@quotient:	
   295                           ; 2 bytes @ 0x5
   296                           
   297                           
   298                           ; 2 bytes @ 0x5
   299  0075                     	ds	2
   300  0077                     SPI_transfer@data:	
   301  0077                     ___lwdiv@counter:	
   302                           ; 1 bytes @ 0x7
   303                           
   304                           
   305                           ; 1 bytes @ 0x7
   306  0077                     	ds	1
   307  0078                     ??_MFRC522_Rd:	
   308  0078                     ?___lwmod:	
   309                           ; 0 bytes @ 0x8
   310                           
   311  0078                     ___lwmod@divisor:	
   312                           ; 2 bytes @ 0x8
   313                           
   314                           
   315                           ; 2 bytes @ 0x8
   316  0078                     	ds	1
   317  0079                     MFRC522_Rd@addr:	
   318                           
   319                           ; 1 bytes @ 0x9
   320  0079                     	ds	1
   321  007A                     MFRC522_Rd@value:	
   322  007A                     ___lwmod@dividend:	
   323                           ; 1 bytes @ 0xA
   324                           
   325                           
   326                           ; 2 bytes @ 0xA
   327  007A                     	ds	1
   328  007B                     ?_MFRC522_Wr:	
   329  007B                     MFRC522_Wr@value:	
   330                           ; 0 bytes @ 0xB
   331                           
   332                           
   333                           ; 1 bytes @ 0xB
   334  007B                     	ds	1
   335  007C                     ??_MFRC522_Wr:	
   336  007C                     ??___lwmod:	
   337                           ; 0 bytes @ 0xC
   338                           
   339                           
   340                           ; 0 bytes @ 0xC
   341  007C                     	ds	1
   342  007D                     MFRC522_Wr@addr:	
   343  007D                     ___lwmod@counter:	
   344                           ; 1 bytes @ 0xD
   345                           
   346                           
   347                           ; 1 bytes @ 0xD
   348  007D                     	ds	1
   349                           
   350                           	psect	cstackBANK0
   351  0020                     __pcstackBANK0:	
   352  0020                     ?_MFRC522_Clear_Bit:	
   353  0020                     ?_MFRC522_Set_Bit:	
   354                           ; 0 bytes @ 0x0
   355                           
   356  0020                     ??_MFRC522_Reset:	
   357                           ; 0 bytes @ 0x0
   358                           
   359  0020                     ?_printf:	
   360                           ; 0 bytes @ 0x0
   361                           
   362  0020                     MFRC522_Clear_Bit@mask:	
   363                           ; 2 bytes @ 0x0
   364                           
   365  0020                     MFRC522_Set_Bit@mask:	
   366                           ; 1 bytes @ 0x0
   367                           
   368                           
   369                           ; 1 bytes @ 0x0
   370  0020                     	ds	1
   371  0021                     ??_MFRC522_Clear_Bit:	
   372  0021                     ??_MFRC522_Set_Bit:	
   373                           ; 0 bytes @ 0x1
   374                           
   375                           
   376                           ; 0 bytes @ 0x1
   377  0021                     	ds	1
   378  0022                     ??_printf:	
   379  0022                     MFRC522_Set_Bit@addr:	
   380                           ; 0 bytes @ 0x2
   381                           
   382                           
   383                           ; 1 bytes @ 0x2
   384  0022                     	ds	1
   385  0023                     ??_MFRC522_AntennaOn:	
   386  0023                     MFRC522_Clear_Bit@addr:	
   387                           ; 0 bytes @ 0x3
   388                           
   389                           
   390                           ; 1 bytes @ 0x3
   391  0023                     	ds	1
   392  0024                     ??_MFRC522_Init:	
   393  0024                     ?_MFRC522_CRC:	
   394                           ; 0 bytes @ 0x4
   395                           
   396  0024                     ?_MFRC522_ToCard:	
   397                           ; 0 bytes @ 0x4
   398                           
   399  0024                     MFRC522_ToCard@sendData:	
   400                           ; 1 bytes @ 0x4
   401                           
   402  0024                     MFRC522_CRC@length:	
   403                           ; 1 bytes @ 0x4
   404                           
   405                           
   406                           ; 1 bytes @ 0x4
   407  0024                     	ds	1
   408  0025                     MFRC522_ToCard@sendLen:	
   409  0025                     MFRC522_CRC@dataOut:	
   410                           ; 1 bytes @ 0x5
   411                           
   412  0025                     printf@prec:	
   413                           ; 1 bytes @ 0x5
   414                           
   415                           
   416                           ; 1 bytes @ 0x5
   417  0025                     	ds	1
   418  0026                     ??_MFRC522_CRC:	
   419  0026                     MFRC522_ToCard@backData:	
   420                           ; 0 bytes @ 0x6
   421                           
   422  0026                     printf@ap:	
   423                           ; 1 bytes @ 0x6
   424                           
   425                           
   426                           ; 1 bytes @ 0x6
   427  0026                     	ds	1
   428  0027                     MFRC522_ToCard@backLen:	
   429  0027                     MFRC522_CRC@n:	
   430                           ; 1 bytes @ 0x7
   431                           
   432  0027                     printf@flag:	
   433                           ; 1 bytes @ 0x7
   434                           
   435                           
   436                           ; 1 bytes @ 0x7
   437  0027                     	ds	1
   438  0028                     ??_MFRC522_ToCard:	
   439  0028                     MFRC522_CRC@i:	
   440                           ; 0 bytes @ 0x8
   441                           
   442  0028                     printf@f:	
   443                           ; 1 bytes @ 0x8
   444                           
   445                           
   446                           ; 1 bytes @ 0x8
   447  0028                     	ds	1
   448  0029                     MFRC522_CRC@dataIn:	
   449  0029                     printf@_val:	
   450                           ; 1 bytes @ 0x9
   451                           
   452                           
   453                           ; 4 bytes @ 0x9
   454  0029                     	ds	4
   455  002D                     printf@c:	
   456                           
   457                           ; 1 bytes @ 0xD
   458  002D                     	ds	1
   459  002E                     MFRC522_ToCard@waitIRq:	
   460                           
   461                           ; 1 bytes @ 0xE
   462  002E                     	ds	1
   463  002F                     MFRC522_ToCard@_status:	
   464                           
   465                           ; 1 bytes @ 0xF
   466  002F                     	ds	1
   467  0030                     MFRC522_ToCard@lastBits:	
   468                           
   469                           ; 1 bytes @ 0x10
   470  0030                     	ds	1
   471  0031                     MFRC522_ToCard@irqEn:	
   472                           
   473                           ; 1 bytes @ 0x11
   474  0031                     	ds	1
   475  0032                     MFRC522_ToCard@command:	
   476                           
   477                           ; 1 bytes @ 0x12
   478  0032                     	ds	1
   479  0033                     MFRC522_ToCard@i:	
   480                           
   481                           ; 2 bytes @ 0x13
   482  0033                     	ds	2
   483  0035                     MFRC522_ToCard@n:	
   484                           
   485                           ; 1 bytes @ 0x15
   486  0035                     	ds	1
   487  0036                     ??_MFRC522_SelectTag:	
   488  0036                     ??_MFRC522_AntiColl:	
   489                           ; 0 bytes @ 0x16
   490                           
   491  0036                     ?_MFRC522_Request:	
   492                           ; 0 bytes @ 0x16
   493                           
   494  0036                     MFRC522_Request@TagType:	
   495                           ; 1 bytes @ 0x16
   496                           
   497                           
   498                           ; 1 bytes @ 0x16
   499  0036                     	ds	1
   500  0037                     ??_MFRC522_Request:	
   501                           
   502                           ; 0 bytes @ 0x17
   503  0037                     	ds	4
   504  003B                     MFRC522_Request@reqMode:	
   505  003B                     MFRC522_AntiColl@serNumCheck:	
   506                           ; 1 bytes @ 0x1B
   507                           
   508  003B                     MFRC522_SelectTag@buffer:	
   509                           ; 1 bytes @ 0x1B
   510                           
   511                           
   512                           ; 9 bytes @ 0x1B
   513  003B                     	ds	1
   514  003C                     MFRC522_Request@_status:	
   515  003C                     MFRC522_AntiColl@unLen:	
   516                           ; 1 bytes @ 0x1C
   517                           
   518                           
   519                           ; 2 bytes @ 0x1C
   520  003C                     	ds	1
   521  003D                     MFRC522_Request@backBits:	
   522                           
   523                           ; 2 bytes @ 0x1D
   524  003D                     	ds	1
   525  003E                     MFRC522_AntiColl@_status:	
   526                           
   527                           ; 1 bytes @ 0x1E
   528  003E                     	ds	1
   529  003F                     ??_MFRC522_isCard:	
   530  003F                     MFRC522_AntiColl@i:	
   531                           ; 0 bytes @ 0x1F
   532                           
   533                           
   534                           ; 1 bytes @ 0x1F
   535  003F                     	ds	1
   536  0040                     MFRC522_AntiColl@serNum:	
   537  0040                     MFRC522_isCard@TagType:	
   538                           ; 1 bytes @ 0x20
   539                           
   540                           
   541                           ; 1 bytes @ 0x20
   542  0040                     	ds	1
   543  0041                     ??_MFRC522_ReadCardSerial:	
   544                           
   545                           ; 0 bytes @ 0x21
   546  0041                     	ds	1
   547  0042                     MFRC522_ReadCardSerial@_status:	
   548                           
   549                           ; 1 bytes @ 0x22
   550  0042                     	ds	1
   551  0043                     MFRC522_ReadCardSerial@str:	
   552                           
   553                           ; 1 bytes @ 0x23
   554  0043                     	ds	1
   555  0044                     MFRC522_SelectTag@_status:	
   556                           
   557                           ; 1 bytes @ 0x24
   558  0044                     	ds	1
   559  0045                     MFRC522_SelectTag@size:	
   560                           
   561                           ; 1 bytes @ 0x25
   562  0045                     	ds	1
   563  0046                     MFRC522_SelectTag@serNum:	
   564                           
   565                           ; 1 bytes @ 0x26
   566  0046                     	ds	1
   567  0047                     MFRC522_SelectTag@recvBits:	
   568                           
   569                           ; 2 bytes @ 0x27
   570  0047                     	ds	2
   571  0049                     MFRC522_SelectTag@i:	
   572                           
   573                           ; 1 bytes @ 0x29
   574  0049                     	ds	1
   575  004A                     ??_main:	
   576                           
   577                           ; 0 bytes @ 0x2A
   578  004A                     	ds	3
   579  004D                     main@size:	
   580                           
   581                           ; 1 bytes @ 0x2D
   582  004D                     	ds	1
   583  004E                     main@UID:	
   584                           
   585                           ; 6 bytes @ 0x2E
   586  004E                     	ds	6
   587  0054                     main@i_345:	
   588                           
   589                           ; 2 bytes @ 0x34
   590  0054                     	ds	2
   591  0056                     main@TagType:	
   592                           
   593                           ; 2 bytes @ 0x36
   594  0056                     	ds	2
   595                           
   596                           	psect	maintext
   597  058A                     __pmaintext:	
   598 ;;
   599 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   600 ;;
   601 ;; *************** function _main *****************
   602 ;; Defined at:
   603 ;;		line 495 in file "main.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;		None
   606 ;; Auto vars:     Size  Location     Type
   607 ;;  i               2   52[BANK0 ] int 
   608 ;;  msg            12    0        unsigned char [12]
   609 ;;  UID             6   46[BANK0 ] unsigned char [6]
   610 ;;  TagType         2   54[BANK0 ] unsigned int 
   611 ;;  size            1   45[BANK0 ] unsigned char 
   612 ;;  i               1    0        unsigned char 
   613 ;; Return value:  Size  Location     Type
   614 ;;		None               void
   615 ;; Registers used:
   616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 17F/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   622 ;;      Params:         0       0       0       0
   623 ;;      Locals:         0      11       0       0
   624 ;;      Temps:          0       3       0       0
   625 ;;      Totals:         0      14       0       0
   626 ;;Total ram usage:       14 bytes
   627 ;; Hardware stack levels required when called:    6
   628 ;; This function calls:
   629 ;;		_MFRC522_Init
   630 ;;		_MFRC522_ReadCardSerial
   631 ;;		_MFRC522_SelectTag
   632 ;;		_MFRC522_isCard
   633 ;;		_SPI_init
   634 ;;		_UART_init
   635 ;;		_printf
   636 ;; This function is called by:
   637 ;;		Startup code after reset
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           
   642                           ;psect for function _main
   643  058A                     _main:	
   644                           
   645                           ;main.c: 498: char msg[12];
   646                           ;main.c: 499: char UID[6];
   647                           ;main.c: 500: unsigned TagType;
   648                           ;main.c: 501: char size;
   649                           ;main.c: 502: char i;
   650                           ;main.c: 504: SPI_init(0);
   651                           
   652                           ;incstack = 0
   653                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   654  058A  3000               	movlw	0
   655  058B  22F4               	fcall	_SPI_init
   656                           
   657                           ;main.c: 507: MFRC522_Init();
   658  058C  237D               	fcall	_MFRC522_Init
   659                           
   660                           ;main.c: 509: UART_init();
   661  058D  22A2               	fcall	_UART_init
   662                           
   663                           ;main.c: 511: TRISBbits.TRISB4 = 0;
   664  058E  1683               	bsf	3,5	;RP0=1, select bank1
   665  058F  1303               	bcf	3,6	;RP1=0, select bank1
   666  0590  1206               	bcf	6,4	;volatile
   667                           
   668                           ;main.c: 512: TRISBbits.TRISB0 = 0;
   669  0591  1006               	bcf	6,0	;volatile
   670  0592                     l1836:	
   671                           ;main.c: 513: while(1)
   672                           
   673                           
   674                           ;main.c: 514: {
   675                           ;main.c: 515: PORTBbits.RB0 = ~PORTBbits.RB0;
   676  0592  1003               	clrc
   677  0593  1283               	bcf	3,5	;RP0=0, select bank0
   678  0594  1303               	bcf	3,6	;RP1=0, select bank0
   679  0595  1C06               	btfss	6,0	;volatile
   680  0596  1403               	setc
   681  0597  1C03               	btfss	3,0
   682  0598  2D9D               	goto	u1790
   683  0599  1283               	bcf	3,5	;RP0=0, select bank0
   684  059A  1303               	bcf	3,6	;RP1=0, select bank0
   685  059B  1406               	bsf	6,0	;volatile
   686  059C  2DA0               	goto	l1838
   687  059D                     u1790:	
   688  059D  1283               	bcf	3,5	;RP0=0, select bank0
   689  059E  1303               	bcf	3,6	;RP1=0, select bank0
   690  059F  1006               	bcf	6,0	;volatile
   691  05A0                     l1838:	
   692                           
   693                           ;main.c: 516: printf("Em espera...\n");
   694  05A0  301B               	movlw	(STR_1-__stringbase)& (0+255)
   695  05A1  260F               	fcall	_printf
   696                           
   697                           ;main.c: 517: if( MFRC522_isCard( &TagType ) )
   698  05A2  3056               	movlw	main@TagType& (0+255)
   699  05A3  2292               	fcall	_MFRC522_isCard
   700  05A4  3A00               	xorlw	0
   701  05A5  1903               	skipnz
   702  05A6  2E00               	goto	l1864
   703                           
   704                           ;main.c: 518: {
   705                           ;main.c: 519: PORTBbits.RB4 = ~PORTBbits.RB4;
   706  05A7  1003               	clrc
   707  05A8  1283               	bcf	3,5	;RP0=0, select bank0
   708  05A9  1303               	bcf	3,6	;RP1=0, select bank0
   709  05AA  1E06               	btfss	6,4	;volatile
   710  05AB  1403               	setc
   711  05AC  1C03               	btfss	3,0
   712  05AD  2DB2               	goto	u1820
   713  05AE  1283               	bcf	3,5	;RP0=0, select bank0
   714  05AF  1303               	bcf	3,6	;RP1=0, select bank0
   715  05B0  1606               	bsf	6,4	;volatile
   716  05B1  2DB5               	goto	l1844
   717  05B2                     u1820:	
   718  05B2  1283               	bcf	3,5	;RP0=0, select bank0
   719  05B3  1303               	bcf	3,6	;RP1=0, select bank0
   720  05B4  1206               	bcf	6,4	;volatile
   721  05B5                     l1844:	
   722                           
   723                           ;main.c: 521: printf("Tipo de Tag: %u",TagType);
   724  05B5  0857               	movf	main@TagType+1,w
   725  05B6  01A1               	clrf	?_printf+1
   726  05B7  07A1               	addwf	?_printf+1,f
   727  05B8  0856               	movf	main@TagType,w
   728  05B9  01A0               	clrf	?_printf
   729  05BA  07A0               	addwf	?_printf,f
   730  05BB  300B               	movlw	(STR_2-__stringbase)& (0+255)
   731  05BC  260F               	fcall	_printf
   732                           
   733                           ;main.c: 523: if( MFRC522_ReadCardSerial( UID ) )
   734  05BD  304E               	movlw	main@UID& (0+255)
   735  05BE  22C7               	fcall	_MFRC522_ReadCardSerial
   736  05BF  3A00               	xorlw	0
   737  05C0  1903               	skipnz
   738  05C1  2E00               	goto	l1864
   739                           
   740                           ;main.c: 524: {
   741                           ;main.c: 525: printf("Codigo: ");
   742  05C2  3029               	movlw	(STR_3-__stringbase)& (0+255)
   743  05C3  260F               	fcall	_printf
   744                           
   745                           ;main.c: 526: for(int i=0; i < 5; i++)
   746  05C4  1283               	bcf	3,5	;RP0=0, select bank0
   747  05C5  1303               	bcf	3,6	;RP1=0, select bank0
   748  05C6  01D4               	clrf	main@i_345
   749  05C7  01D5               	clrf	main@i_345+1
   750  05C8  0855               	movf	main@i_345+1,w
   751  05C9  3A80               	xorlw	128
   752  05CA  00FF               	movwf	127
   753  05CB  3080               	movlw	128
   754  05CC  027F               	subwf	127,w
   755  05CD  1D03               	skipz
   756  05CE  2DD1               	goto	u1855
   757  05CF  3005               	movlw	5
   758  05D0  0254               	subwf	main@i_345,w
   759  05D1                     u1855:	
   760  05D1  1803               	btfsc	3,0
   761  05D2  2DF7               	goto	l1862
   762  05D3                     l1856:	
   763                           
   764                           ;main.c: 527: {
   765                           ;main.c: 528: printf("%d",(int)UID[i]);
   766  05D3  1283               	bcf	3,5	;RP0=0, select bank0
   767  05D4  1303               	bcf	3,6	;RP1=0, select bank0
   768  05D5  0854               	movf	main@i_345,w
   769  05D6  3E4E               	addlw	main@UID& (0+255)
   770  05D7  0084               	movwf	4
   771  05D8  1383               	bcf	3,7	;select IRP bank0
   772  05D9  0800               	movf	0,w
   773  05DA  00CA               	movwf	??_main
   774  05DB  01CB               	clrf	??_main+1
   775  05DC  084A               	movf	??_main,w
   776  05DD  00A0               	movwf	?_printf
   777  05DE  084B               	movf	??_main+1,w
   778  05DF  00A1               	movwf	?_printf+1
   779  05E0  3032               	movlw	(STR_4-__stringbase)& (0+255)
   780  05E1  260F               	fcall	_printf
   781                           
   782                           ;main.c: 529: printf(" ");
   783  05E2  3030               	movlw	((STR_3+7)-__stringbase)& (0+255)
   784  05E3  260F               	fcall	_printf
   785  05E4  3001               	movlw	1
   786  05E5  1283               	bcf	3,5	;RP0=0, select bank0
   787  05E6  1303               	bcf	3,6	;RP1=0, select bank0
   788  05E7  07D4               	addwf	main@i_345,f
   789  05E8  1803               	skipnc
   790  05E9  0AD5               	incf	main@i_345+1,f
   791  05EA  3000               	movlw	0
   792  05EB  07D5               	addwf	main@i_345+1,f
   793  05EC  0855               	movf	main@i_345+1,w
   794  05ED  3A80               	xorlw	128
   795  05EE  00FF               	movwf	127
   796  05EF  3080               	movlw	128
   797  05F0  027F               	subwf	127,w
   798  05F1  1D03               	skipz
   799  05F2  2DF5               	goto	u1865
   800  05F3  3005               	movlw	5
   801  05F4  0254               	subwf	main@i_345,w
   802  05F5                     u1865:	
   803  05F5  1C03               	skipc
   804  05F6  2DD3               	goto	l1856
   805  05F7                     l1862:	
   806                           
   807                           ;main.c: 530: }
   808                           ;main.c: 531: printf("\n");
   809  05F7  3027               	movlw	((STR_1+12)-__stringbase)& (0+255)
   810  05F8  260F               	fcall	_printf
   811                           
   812                           ;main.c: 532: size = MFRC522_SelectTag( UID );
   813  05F9  304E               	movlw	main@UID& (0+255)
   814  05FA  244C               	fcall	_MFRC522_SelectTag
   815  05FB  1283               	bcf	3,5	;RP0=0, select bank0
   816  05FC  1303               	bcf	3,6	;RP1=0, select bank0
   817  05FD  00CA               	movwf	??_main
   818  05FE  084A               	movf	??_main,w
   819  05FF  00CD               	movwf	main@size
   820  0600                     l1864:	
   821                           
   822                           ;main.c: 533: }
   823                           ;main.c: 536: }
   824                           ;main.c: 537: _delay((unsigned long)((100)*(16000000/4000.0)));
   825  0600  3003               	movlw	3
   826  0601  1283               	bcf	3,5	;RP0=0, select bank0
   827  0602  1303               	bcf	3,6	;RP1=0, select bank0
   828  0603  00CC               	movwf	??_main+2
   829  0604  3008               	movlw	8
   830  0605  00CB               	movwf	??_main+1
   831  0606  3078               	movlw	120
   832  0607  00CA               	movwf	??_main
   833  0608                     u1877:	
   834  0608  0BCA               	decfsz	??_main,f
   835  0609  2E08               	goto	u1877
   836  060A  0BCB               	decfsz	??_main+1,f
   837  060B  2E08               	goto	u1877
   838  060C  0BCC               	decfsz	??_main+2,f
   839  060D  2E08               	goto	u1877
   840  060E  2D92               	goto	l1836
   841  060F                     __end_of_main:	
   842                           
   843                           	psect	text1
   844  060F                     __ptext1:	
   845 ;; *************** function _printf *****************
   846 ;; Defined at:
   847 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;  f               1    wreg     PTR const unsigned char 
   850 ;;		 -> STR_6(2), STR_5(2), STR_4(3), STR_3(9), 
   851 ;;		 -> STR_2(16), STR_1(14), 
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  f               1    8[BANK0 ] PTR const unsigned char 
   854 ;;		 -> STR_6(2), STR_5(2), STR_4(3), STR_3(9), 
   855 ;;		 -> STR_2(16), STR_1(14), 
   856 ;;  _val            4    9[BANK0 ] struct .
   857 ;;  c               1   13[BANK0 ] char 
   858 ;;  flag            1    7[BANK0 ] unsigned char 
   859 ;;  ap              1    6[BANK0 ] PTR void [1]
   860 ;;		 -> ?_printf(2), 
   861 ;;  prec            1    5[BANK0 ] char 
   862 ;; Return value:  Size  Location     Type
   863 ;;                  2    0[BANK0 ] int 
   864 ;; Registers used:
   865 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   866 ;; Tracked objects:
   867 ;;		On entry : 0/0
   868 ;;		On exit  : 0/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   871 ;;      Params:         0       2       0       0
   872 ;;      Locals:         0       9       0       0
   873 ;;      Temps:          0       3       0       0
   874 ;;      Totals:         0      14       0       0
   875 ;;Total ram usage:       14 bytes
   876 ;; Hardware stack levels used:    1
   877 ;; Hardware stack levels required when called:    1
   878 ;; This function calls:
   879 ;;		___lwdiv
   880 ;;		___lwmod
   881 ;;		_putch
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           
   888                           ;psect for function _printf
   889  060F                     _printf:	
   890                           
   891                           ;incstack = 0
   892                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   893                           ;printf@f stored from wreg
   894  060F  1283               	bcf	3,5	;RP0=0, select bank0
   895  0610  1303               	bcf	3,6	;RP1=0, select bank0
   896  0611  00A8               	movwf	printf@f
   897                           
   898                           ;doprnt.c: 466: va_list ap;
   899                           ;doprnt.c: 499: signed char c;
   900                           ;doprnt.c: 506: signed char prec;
   901                           ;doprnt.c: 508: unsigned char flag;
   902                           ;doprnt.c: 527: union {
   903                           ;doprnt.c: 528: unsigned int _val;
   904                           ;doprnt.c: 529: struct {
   905                           ;doprnt.c: 530: const char * _cp;
   906                           ;doprnt.c: 531: unsigned _len;
   907                           ;doprnt.c: 532: } _str;
   908                           ;doprnt.c: 533: } _val;
   909                           ;doprnt.c: 542: *ap = __va_start();
   910  0612  3020               	movlw	?_printf& (0+255)
   911  0613  00A2               	movwf	??_printf
   912  0614  0822               	movf	??_printf,w
   913  0615  00A6               	movwf	printf@ap
   914  0616                     l1714:	
   915                           ;doprnt.c: 545: while(c = *f++) {
   916                           
   917  0616  3001               	movlw	1
   918  0617  1283               	bcf	3,5	;RP0=0, select bank0
   919  0618  1303               	bcf	3,6	;RP1=0, select bank0
   920  0619  07A8               	addwf	printf@f,f
   921  061A  30FF               	movlw	-1
   922  061B  0728               	addwf	printf@f,w
   923  061C  0084               	movwf	4
   924  061D  2001               	fcall	stringdir
   925  061E  00A2               	movwf	??_printf
   926  061F  0822               	movf	??_printf,w
   927  0620  00AD               	movwf	printf@c
   928  0621  08AD               	movf	printf@c,f
   929  0622  1903               	btfsc	3,2
   930  0623  0008               	return
   931                           
   932                           ;doprnt.c: 547: if(c != '%')
   933  0624  082D               	movf	printf@c,w
   934  0625  3A25               	xorlw	37
   935  0626  1903               	skipnz
   936  0627  2E2B               	goto	l1668
   937                           
   938                           ;doprnt.c: 549: {
   939                           ;doprnt.c: 550: (putch(c) );
   940  0628  082D               	movf	printf@c,w
   941  0629  22DD               	fcall	_putch
   942                           
   943                           ;doprnt.c: 551: continue;
   944  062A  2E16               	goto	l1714
   945  062B                     l1668:	
   946                           
   947                           ;doprnt.c: 552: }
   948                           ;doprnt.c: 557: flag = 0;
   949  062B  1283               	bcf	3,5	;RP0=0, select bank0
   950  062C  1303               	bcf	3,6	;RP1=0, select bank0
   951  062D  01A7               	clrf	printf@flag
   952                           
   953                           ;doprnt.c: 644: switch(c = *f++) {
   954  062E  2E31               	goto	l1672
   955  062F                     l243:	
   956                           ;doprnt.c: 826: case 'u':
   957                           
   958                           ;doprnt.c: 822: continue;
   959                           
   960                           ;doprnt.c: 811: default:
   961                           
   962                           ;doprnt.c: 707: case 'i':
   963                           ;doprnt.c: 708: break;
   964                           
   965                           ;doprnt.c: 706: case 'd':
   966                           
   967                           ;doprnt.c: 647: goto alldone;
   968                           
   969                           ;doprnt.c: 646: case 0:
   970                           
   971                           
   972                           ;doprnt.c: 827: flag |= 0x40;
   973  062F  1727               	bsf	printf@flag,6
   974                           
   975                           ;doprnt.c: 831: }
   976                           
   977                           ;doprnt.c: 828: break;
   978  0630  2E45               	goto	l241
   979  0631                     l1672:	
   980  0631  3001               	movlw	1
   981  0632  07A8               	addwf	printf@f,f
   982  0633  30FF               	movlw	-1
   983  0634  0728               	addwf	printf@f,w
   984  0635  0084               	movwf	4
   985  0636  2001               	fcall	stringdir
   986  0637  00AD               	movwf	printf@c
   987                           
   988                           ; Switch size 1, requested type "space"
   989                           ; Number of cases is 4, Range of values is 0 to 117
   990                           ; switch strategies available:
   991                           ; Name         Instructions Cycles
   992                           ; simple_byte           13     7 (average)
   993                           ; direct_byte          124     6 (fixed)
   994                           ; jumptable            260     6 (fixed)
   995                           ;	Chosen strategy is simple_byte
   996  0638  3A00               	xorlw	0	; case 0
   997  0639  1903               	skipnz
   998  063A  2EC5               	goto	l255
   999  063B  3A64               	xorlw	100	; case 100
  1000  063C  1903               	skipnz
  1001  063D  2E45               	goto	l241
  1002  063E  3A0D               	xorlw	13	; case 105
  1003  063F  1903               	skipnz
  1004  0640  2E45               	goto	l241
  1005  0641  3A1C               	xorlw	28	; case 117
  1006  0642  1903               	skipnz
  1007  0643  2E2F               	goto	l243
  1008  0644  2E16               	goto	l1714
  1009  0645                     l241:	
  1010                           
  1011                           ;doprnt.c: 1260: if((flag & 0x40) == 0x00)
  1012  0645  1B27               	btfsc	printf@flag,6
  1013  0646  2E5F               	goto	l1684
  1014                           
  1015                           ;doprnt.c: 1262: {
  1016                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1017  0647  0826               	movf	printf@ap,w
  1018  0648  0084               	movwf	4
  1019  0649  1383               	bcf	3,7	;select IRP bank0
  1020  064A  0800               	movf	0,w
  1021  064B  00A9               	movwf	printf@_val
  1022  064C  0A84               	incf	4,f
  1023  064D  0800               	movf	0,w
  1024  064E  00AA               	movwf	printf@_val+1
  1025  064F  3002               	movlw	2
  1026  0650  00A2               	movwf	??_printf
  1027  0651  0822               	movf	??_printf,w
  1028  0652  07A6               	addwf	printf@ap,f
  1029                           
  1030                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  1031  0653  1FAA               	btfss	printf@_val+1,7
  1032  0654  2E6B               	goto	l1688
  1033                           
  1034                           ;doprnt.c: 1271: flag |= 0x03;
  1035  0655  3003               	movlw	3
  1036  0656  00A2               	movwf	??_printf
  1037  0657  0822               	movf	??_printf,w
  1038  0658  04A7               	iorwf	printf@flag,f
  1039                           
  1040                           ;doprnt.c: 1272: _val._val = -_val._val;
  1041  0659  09A9               	comf	printf@_val,f
  1042  065A  09AA               	comf	printf@_val+1,f
  1043  065B  0AA9               	incf	printf@_val,f
  1044  065C  1903               	skipnz
  1045  065D  0AAA               	incf	printf@_val+1,f
  1046                           
  1047                           ;doprnt.c: 1273: }
  1048                           ;doprnt.c: 1275: }
  1049  065E  2E6B               	goto	l1688
  1050  065F                     l1684:	
  1051                           
  1052                           ;doprnt.c: 1277: else
  1053                           ;doprnt.c: 1282: {
  1054                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1055  065F  0826               	movf	printf@ap,w
  1056  0660  0084               	movwf	4
  1057  0661  1383               	bcf	3,7	;select IRP bank0
  1058  0662  0800               	movf	0,w
  1059  0663  00A9               	movwf	printf@_val
  1060  0664  0A84               	incf	4,f
  1061  0665  0800               	movf	0,w
  1062  0666  00AA               	movwf	printf@_val+1
  1063  0667  3002               	movlw	2
  1064  0668  00A2               	movwf	??_printf
  1065  0669  0822               	movf	??_printf,w
  1066  066A  07A6               	addwf	printf@ap,f
  1067  066B                     l1688:	
  1068                           
  1069                           ;doprnt.c: 1296: }
  1070                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1071  066B  01AD               	clrf	printf@c
  1072  066C  0AAD               	incf	printf@c,f
  1073  066D  082D               	movf	printf@c,w
  1074  066E  3A05               	xorlw	5
  1075  066F  1903               	btfsc	3,2
  1076  0670  2E8A               	goto	l1702
  1077  0671                     l1694:	
  1078                           
  1079                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1080  0671  082D               	movf	printf@c,w
  1081  0672  00A2               	movwf	??_printf
  1082  0673  0722               	addwf	??_printf,w
  1083  0674  3E01               	addlw	low (_dpowers-__stringbase)
  1084  0675  0084               	movwf	4
  1085  0676  2001               	fcall	stringdir
  1086  0677  00A3               	movwf	??_printf+1
  1087  0678  2001               	fcall	stringdir
  1088  0679  00A4               	movwf	??_printf+2
  1089  067A  0824               	movf	??_printf+2,w
  1090  067B  022A               	subwf	printf@_val+1,w
  1091  067C  1D03               	skipz
  1092  067D  2E80               	goto	u1555
  1093  067E  0823               	movf	??_printf+1,w
  1094  067F  0229               	subwf	printf@_val,w
  1095  0680                     u1555:	
  1096  0680  1C03               	btfss	3,0
  1097  0681  2E8A               	goto	l1702
  1098                           
  1099                           ;doprnt.c: 1316: break;
  1100  0682  3001               	movlw	1
  1101  0683  00A2               	movwf	??_printf
  1102  0684  0822               	movf	??_printf,w
  1103  0685  07AD               	addwf	printf@c,f
  1104  0686  082D               	movf	printf@c,w
  1105  0687  3A05               	xorlw	5
  1106  0688  1D03               	skipz
  1107  0689  2E71               	goto	l1694
  1108  068A                     l1702:	
  1109                           
  1110                           ;doprnt.c: 1431: {
  1111                           ;doprnt.c: 1447: if(flag & 0x03)
  1112  068A  0827               	movf	printf@flag,w
  1113  068B  3903               	andlw	3
  1114  068C  1903               	btfsc	3,2
  1115  068D  2E90               	goto	l1706
  1116                           
  1117                           ;doprnt.c: 1448: (putch('-') );
  1118  068E  302D               	movlw	45
  1119  068F  22DD               	fcall	_putch
  1120  0690                     l1706:	
  1121                           
  1122                           ;doprnt.c: 1478: }
  1123                           ;doprnt.c: 1481: prec = c;
  1124  0690  1283               	bcf	3,5	;RP0=0, select bank0
  1125  0691  1303               	bcf	3,6	;RP1=0, select bank0
  1126  0692  082D               	movf	printf@c,w
  1127  0693  00A2               	movwf	??_printf
  1128  0694  0822               	movf	??_printf,w
  1129  0695  00A5               	movwf	printf@prec
  1130  0696                     l1712:	
  1131                           ;doprnt.c: 1483: while(prec--) {
  1132                           
  1133  0696  30FF               	movlw	-1
  1134  0697  1283               	bcf	3,5	;RP0=0, select bank0
  1135  0698  1303               	bcf	3,6	;RP1=0, select bank0
  1136  0699  00A2               	movwf	??_printf
  1137  069A  0822               	movf	??_printf,w
  1138  069B  07A5               	addwf	printf@prec,f
  1139  069C  0825               	movf	printf@prec,w
  1140  069D  3AFF               	xorlw	-1
  1141  069E  1903               	btfsc	3,2
  1142  069F  2E16               	goto	l1714
  1143                           
  1144                           ;doprnt.c: 1487: {
  1145                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1146  06A0  300A               	movlw	10
  1147  06A1  00F8               	movwf	___lwmod@divisor
  1148  06A2  3000               	movlw	0
  1149  06A3  00F9               	movwf	___lwmod@divisor+1
  1150  06A4  0825               	movf	printf@prec,w
  1151  06A5  00A2               	movwf	??_printf
  1152  06A6  0722               	addwf	??_printf,w
  1153  06A7  3E01               	addlw	low (_dpowers-__stringbase)
  1154  06A8  0084               	movwf	4
  1155  06A9  2001               	fcall	stringdir
  1156  06AA  00F0               	movwf	___lwdiv@divisor
  1157  06AB  2001               	fcall	stringdir
  1158  06AC  00F1               	movwf	___lwdiv@divisor+1
  1159  06AD  082A               	movf	printf@_val+1,w
  1160  06AE  01F3               	clrf	___lwdiv@dividend+1
  1161  06AF  07F3               	addwf	___lwdiv@dividend+1,f
  1162  06B0  0829               	movf	printf@_val,w
  1163  06B1  01F2               	clrf	___lwdiv@dividend
  1164  06B2  07F2               	addwf	___lwdiv@dividend,f
  1165  06B3  23B3               	fcall	___lwdiv
  1166  06B4  0871               	movf	?___lwdiv+1,w
  1167  06B5  01FB               	clrf	___lwmod@dividend+1
  1168  06B6  07FB               	addwf	___lwmod@dividend+1,f
  1169  06B7  0870               	movf	?___lwdiv,w
  1170  06B8  01FA               	clrf	___lwmod@dividend
  1171  06B9  07FA               	addwf	___lwmod@dividend,f
  1172  06BA  2314               	fcall	___lwmod
  1173  06BB  0878               	movf	?___lwmod,w
  1174  06BC  3E30               	addlw	48
  1175  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1176  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  1177  06BF  00A3               	movwf	??_printf+1
  1178  06C0  0823               	movf	??_printf+1,w
  1179  06C1  00AD               	movwf	printf@c
  1180                           
  1181                           ;doprnt.c: 1532: }
  1182                           ;doprnt.c: 1533: (putch(c) );
  1183  06C2  082D               	movf	printf@c,w
  1184  06C3  22DD               	fcall	_putch
  1185  06C4  2E96               	goto	l1712
  1186  06C5                     l255:	
  1187                           ;doprnt.c: 1549: return 0;
  1188                           ;	Return value of _printf is never used
  1189                           
  1190                           ;doprnt.c: 1534: }
  1191                           ;doprnt.c: 1542: }
  1192                           ;doprnt.c: 1544: alldone:
  1193                           
  1194  06C5  0008               	return
  1195  06C6                     __end_of_printf:	
  1196                           
  1197                           	psect	text2
  1198  02DD                     __ptext2:	
  1199 ;; *************** function _putch *****************
  1200 ;; Defined at:
  1201 ;;		line 8 in file "UART.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;  data            1    wreg     unsigned char 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  data            1    0[COMMON] unsigned char 
  1206 ;; Return value:  Size  Location     Type
  1207 ;;		None               void
  1208 ;; Registers used:
  1209 ;;		wreg
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1215 ;;      Params:         0       0       0       0
  1216 ;;      Locals:         1       0       0       0
  1217 ;;      Temps:          0       0       0       0
  1218 ;;      Totals:         1       0       0       0
  1219 ;;Total ram usage:        1 bytes
  1220 ;; Hardware stack levels used:    1
  1221 ;; This function calls:
  1222 ;;		Nothing
  1223 ;; This function is called by:
  1224 ;;		_printf
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           
  1229                           ;psect for function _putch
  1230  02DD                     _putch:	
  1231                           
  1232                           ;incstack = 0
  1233                           ; Regs used in _putch: [wreg]
  1234                           ;putch@data stored from wreg
  1235  02DD  00F0               	movwf	putch@data
  1236                           
  1237                           ;UART.c: 10: if(data == 10)
  1238  02DE  0870               	movf	putch@data,w
  1239  02DF  3A0A               	xorlw	10
  1240  02E0  1D03               	skipz
  1241  02E1  2AED               	goto	l71
  1242  02E2                     l64:	
  1243                           ;UART.c: 13: continue;
  1244                           
  1245                           ;UART.c: 11: {
  1246                           ;UART.c: 12: while(!TXIF)
  1247                           
  1248  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  1249  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  1250  02E4  1E0C               	btfss	12,4	;volatile
  1251  02E5  2AE2               	goto	l64
  1252                           
  1253                           ;UART.c: 14: TXREG = 10;
  1254  02E6  300A               	movlw	10
  1255  02E7  0099               	movwf	25	;volatile
  1256  02E8                     l67:	
  1257                           ;UART.c: 16: continue;
  1258                           
  1259                           ;UART.c: 15: while(!TXIF)
  1260                           
  1261  02E8  1E0C               	btfss	12,4	;volatile
  1262  02E9  2AE8               	goto	l67
  1263                           
  1264                           ;UART.c: 17: TXREG = 13;
  1265  02EA  300D               	movlw	13
  1266  02EB  0099               	movwf	25	;volatile
  1267                           
  1268                           ;UART.c: 18: return;
  1269  02EC  0008               	return
  1270  02ED                     l71:	
  1271                           ;UART.c: 21: continue;
  1272                           
  1273                           ;UART.c: 19: }
  1274                           ;UART.c: 20: while(!TXIF)
  1275                           
  1276  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  1277  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  1278  02EF  1E0C               	btfss	12,4	;volatile
  1279  02F0  2AED               	goto	l71
  1280                           
  1281                           ;UART.c: 22: TXREG = data;
  1282  02F1  0870               	movf	putch@data,w
  1283  02F2  0099               	movwf	25	;volatile
  1284  02F3  0008               	return
  1285  02F4                     __end_of_putch:	
  1286                           
  1287                           	psect	text3
  1288  0314                     __ptext3:	
  1289 ;; *************** function ___lwmod *****************
  1290 ;; Defined at:
  1291 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;  divisor         2    8[COMMON] unsigned int 
  1294 ;;  dividend        2   10[COMMON] unsigned int 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  counter         1   13[COMMON] unsigned char 
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  2    8[COMMON] unsigned int 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2, status,0
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1306 ;;      Params:         4       0       0       0
  1307 ;;      Locals:         1       0       0       0
  1308 ;;      Temps:          1       0       0       0
  1309 ;;      Totals:         6       0       0       0
  1310 ;;Total ram usage:        6 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; This function calls:
  1313 ;;		Nothing
  1314 ;; This function is called by:
  1315 ;;		_printf
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           
  1320                           ;psect for function ___lwmod
  1321  0314                     ___lwmod:	
  1322                           
  1323                           ;incstack = 0
  1324                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1325  0314  0879               	movf	___lwmod@divisor+1,w
  1326  0315  0478               	iorwf	___lwmod@divisor,w
  1327  0316  1903               	skipnz
  1328  0317  2B41               	goto	l1584
  1329  0318  01FD               	clrf	___lwmod@counter
  1330  0319  0AFD               	incf	___lwmod@counter,f
  1331  031A                     l1574:	
  1332  031A  1BF9               	btfsc	___lwmod@divisor+1,7
  1333  031B  2B28               	goto	l1576
  1334  031C  3001               	movlw	1
  1335  031D                     u1385:	
  1336  031D  1003               	clrc
  1337  031E  0DF8               	rlf	___lwmod@divisor,f
  1338  031F  0DF9               	rlf	___lwmod@divisor+1,f
  1339  0320  3EFF               	addlw	-1
  1340  0321  1D03               	skipz
  1341  0322  2B1D               	goto	u1385
  1342  0323  3001               	movlw	1
  1343  0324  00FC               	movwf	??___lwmod
  1344  0325  087C               	movf	??___lwmod,w
  1345  0326  07FD               	addwf	___lwmod@counter,f
  1346  0327  2B1A               	goto	l1574
  1347  0328                     l1576:	
  1348  0328  0879               	movf	___lwmod@divisor+1,w
  1349  0329  027B               	subwf	___lwmod@dividend+1,w
  1350  032A  1D03               	skipz
  1351  032B  2B2E               	goto	u1405
  1352  032C  0878               	movf	___lwmod@divisor,w
  1353  032D  027A               	subwf	___lwmod@dividend,w
  1354  032E                     u1405:	
  1355  032E  1C03               	skipc
  1356  032F  2B36               	goto	l1580
  1357  0330  0878               	movf	___lwmod@divisor,w
  1358  0331  02FA               	subwf	___lwmod@dividend,f
  1359  0332  0879               	movf	___lwmod@divisor+1,w
  1360  0333  1C03               	skipc
  1361  0334  03FB               	decf	___lwmod@dividend+1,f
  1362  0335  02FB               	subwf	___lwmod@dividend+1,f
  1363  0336                     l1580:	
  1364  0336  3001               	movlw	1
  1365  0337                     u1415:	
  1366  0337  1003               	clrc
  1367  0338  0CF9               	rrf	___lwmod@divisor+1,f
  1368  0339  0CF8               	rrf	___lwmod@divisor,f
  1369  033A  3EFF               	addlw	-1
  1370  033B  1D03               	skipz
  1371  033C  2B37               	goto	u1415
  1372  033D  3001               	movlw	1
  1373  033E  02FD               	subwf	___lwmod@counter,f
  1374  033F  1D03               	btfss	3,2
  1375  0340  2B28               	goto	l1576
  1376  0341                     l1584:	
  1377  0341  087B               	movf	___lwmod@dividend+1,w
  1378  0342  01F9               	clrf	?___lwmod+1
  1379  0343  07F9               	addwf	?___lwmod+1,f
  1380  0344  087A               	movf	___lwmod@dividend,w
  1381  0345  01F8               	clrf	?___lwmod
  1382  0346  07F8               	addwf	?___lwmod,f
  1383  0347  0008               	return
  1384  0348                     __end_of___lwmod:	
  1385                           
  1386                           	psect	text4
  1387  03B3                     __ptext4:	
  1388 ;; *************** function ___lwdiv *****************
  1389 ;; Defined at:
  1390 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  divisor         2    0[COMMON] unsigned int 
  1393 ;;  dividend        2    2[COMMON] unsigned int 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  quotient        2    5[COMMON] unsigned int 
  1396 ;;  counter         1    7[COMMON] unsigned char 
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  2    0[COMMON] unsigned int 
  1399 ;; Registers used:
  1400 ;;		wreg, status,2, status,0
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1406 ;;      Params:         4       0       0       0
  1407 ;;      Locals:         3       0       0       0
  1408 ;;      Temps:          1       0       0       0
  1409 ;;      Totals:         8       0       0       0
  1410 ;;Total ram usage:        8 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; This function calls:
  1413 ;;		Nothing
  1414 ;; This function is called by:
  1415 ;;		_printf
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           
  1420                           ;psect for function ___lwdiv
  1421  03B3                     ___lwdiv:	
  1422                           
  1423                           ;incstack = 0
  1424                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1425  03B3  01F5               	clrf	___lwdiv@quotient
  1426  03B4  01F6               	clrf	___lwdiv@quotient+1
  1427  03B5  0871               	movf	___lwdiv@divisor+1,w
  1428  03B6  0470               	iorwf	___lwdiv@divisor,w
  1429  03B7  1903               	skipnz
  1430  03B8  2BEA               	goto	l1562
  1431  03B9  01F7               	clrf	___lwdiv@counter
  1432  03BA  0AF7               	incf	___lwdiv@counter,f
  1433  03BB                     l1550:	
  1434  03BB  1BF1               	btfsc	___lwdiv@divisor+1,7
  1435  03BC  2BC9               	goto	l1552
  1436  03BD  3001               	movlw	1
  1437  03BE                     u1315:	
  1438  03BE  1003               	clrc
  1439  03BF  0DF0               	rlf	___lwdiv@divisor,f
  1440  03C0  0DF1               	rlf	___lwdiv@divisor+1,f
  1441  03C1  3EFF               	addlw	-1
  1442  03C2  1D03               	skipz
  1443  03C3  2BBE               	goto	u1315
  1444  03C4  3001               	movlw	1
  1445  03C5  00F4               	movwf	??___lwdiv
  1446  03C6  0874               	movf	??___lwdiv,w
  1447  03C7  07F7               	addwf	___lwdiv@counter,f
  1448  03C8  2BBB               	goto	l1550
  1449  03C9                     l1552:	
  1450  03C9  3001               	movlw	1
  1451  03CA                     u1335:	
  1452  03CA  1003               	clrc
  1453  03CB  0DF5               	rlf	___lwdiv@quotient,f
  1454  03CC  0DF6               	rlf	___lwdiv@quotient+1,f
  1455  03CD  3EFF               	addlw	-1
  1456  03CE  1D03               	skipz
  1457  03CF  2BCA               	goto	u1335
  1458  03D0  0871               	movf	___lwdiv@divisor+1,w
  1459  03D1  0273               	subwf	___lwdiv@dividend+1,w
  1460  03D2  1D03               	skipz
  1461  03D3  2BD6               	goto	u1345
  1462  03D4  0870               	movf	___lwdiv@divisor,w
  1463  03D5  0272               	subwf	___lwdiv@dividend,w
  1464  03D6                     u1345:	
  1465  03D6  1C03               	skipc
  1466  03D7  2BDF               	goto	l1558
  1467  03D8  0870               	movf	___lwdiv@divisor,w
  1468  03D9  02F2               	subwf	___lwdiv@dividend,f
  1469  03DA  0871               	movf	___lwdiv@divisor+1,w
  1470  03DB  1C03               	skipc
  1471  03DC  03F3               	decf	___lwdiv@dividend+1,f
  1472  03DD  02F3               	subwf	___lwdiv@dividend+1,f
  1473  03DE  1475               	bsf	___lwdiv@quotient,0
  1474  03DF                     l1558:	
  1475  03DF  3001               	movlw	1
  1476  03E0                     u1355:	
  1477  03E0  1003               	clrc
  1478  03E1  0CF1               	rrf	___lwdiv@divisor+1,f
  1479  03E2  0CF0               	rrf	___lwdiv@divisor,f
  1480  03E3  3EFF               	addlw	-1
  1481  03E4  1D03               	skipz
  1482  03E5  2BE0               	goto	u1355
  1483  03E6  3001               	movlw	1
  1484  03E7  02F7               	subwf	___lwdiv@counter,f
  1485  03E8  1D03               	btfss	3,2
  1486  03E9  2BC9               	goto	l1552
  1487  03EA                     l1562:	
  1488  03EA  0876               	movf	___lwdiv@quotient+1,w
  1489  03EB  01F1               	clrf	?___lwdiv+1
  1490  03EC  07F1               	addwf	?___lwdiv+1,f
  1491  03ED  0875               	movf	___lwdiv@quotient,w
  1492  03EE  01F0               	clrf	?___lwdiv
  1493  03EF  07F0               	addwf	?___lwdiv,f
  1494  03F0  0008               	return
  1495  03F1                     __end_of___lwdiv:	
  1496                           
  1497                           	psect	text5
  1498  02A2                     __ptext5:	
  1499 ;; *************** function _UART_init *****************
  1500 ;; Defined at:
  1501 ;;		line 24 in file "UART.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;		None
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;		None
  1506 ;; Return value:  Size  Location     Type
  1507 ;;		None               void
  1508 ;; Registers used:
  1509 ;;		wreg
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1515 ;;      Params:         0       0       0       0
  1516 ;;      Locals:         0       0       0       0
  1517 ;;      Temps:          0       0       0       0
  1518 ;;      Totals:         0       0       0       0
  1519 ;;Total ram usage:        0 bytes
  1520 ;; Hardware stack levels used:    1
  1521 ;; This function calls:
  1522 ;;		Nothing
  1523 ;; This function is called by:
  1524 ;;		_main
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           
  1529                           ;psect for function _UART_init
  1530  02A2                     _UART_init:	
  1531                           
  1532                           ;UART.c: 27: TRISBbits.TRISB1 = 1;
  1533                           
  1534                           ;incstack = 0
  1535                           ; Regs used in _UART_init: [wreg]
  1536  02A2  1683               	bsf	3,5	;RP0=1, select bank1
  1537  02A3  1303               	bcf	3,6	;RP1=0, select bank1
  1538  02A4  1486               	bsf	6,1	;volatile
  1539                           
  1540                           ;UART.c: 28: TRISBbits.TRISB2 = 1;
  1541  02A5  1506               	bsf	6,2	;volatile
  1542                           
  1543                           ;UART.c: 32: TXSTAbits.CSRC = 1;
  1544  02A6  1798               	bsf	24,7	;volatile
  1545                           
  1546                           ;UART.c: 33: TXSTAbits.TXEN = 1;
  1547  02A7  1698               	bsf	24,5	;volatile
  1548                           
  1549                           ;UART.c: 34: TXSTAbits.SYNC = 0;
  1550  02A8  1218               	bcf	24,4	;volatile
  1551                           
  1552                           ;UART.c: 37: RCSTAbits.SPEN = 1;
  1553  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  1554  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  1555  02AB  1798               	bsf	24,7	;volatile
  1556                           
  1557                           ;UART.c: 38: RCSTAbits.CREN = 1;
  1558  02AC  1618               	bsf	24,4	;volatile
  1559                           
  1560                           ;UART.c: 41: TXSTAbits.BRGH = 0;
  1561  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  1562  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  1563  02AF  1118               	bcf	24,2	;volatile
  1564                           
  1565                           ;UART.c: 42: SPBRG = 25;
  1566  02B0  3019               	movlw	25
  1567  02B1  0099               	movwf	25	;volatile
  1568  02B2  0008               	return
  1569  02B3                     __end_of_UART_init:	
  1570                           
  1571                           	psect	text6
  1572  02F4                     __ptext6:	
  1573 ;; *************** function _SPI_init *****************
  1574 ;; Defined at:
  1575 ;;		line 32 in file "SPI.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;  mode            1    wreg     unsigned char 
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;  mode            1    1[COMMON] unsigned char 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;		None               void
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1589 ;;      Params:         0       0       0       0
  1590 ;;      Locals:         1       0       0       0
  1591 ;;      Temps:          1       0       0       0
  1592 ;;      Totals:         2       0       0       0
  1593 ;;Total ram usage:        2 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           
  1603                           ;psect for function _SPI_init
  1604  02F4                     _SPI_init:	
  1605                           
  1606                           ;incstack = 0
  1607                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  1608                           ;SPI_init@mode stored from wreg
  1609  02F4  00F1               	movwf	SPI_init@mode
  1610                           
  1611                           ;SPI.c: 34: _mode = mode;
  1612  02F5  0871               	movf	SPI_init@mode,w
  1613  02F6  00F0               	movwf	??_SPI_init
  1614  02F7  0870               	movf	??_SPI_init,w
  1615  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  1616  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  1617  02FA  00EA               	movwf	__mode
  1618                           
  1619                           ;SPI.c: 35: TRISB &= ~(1<<7 | 1<<6);
  1620  02FB  303F               	movlw	63
  1621  02FC  00F0               	movwf	??_SPI_init
  1622  02FD  0870               	movf	??_SPI_init,w
  1623  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  1624  02FF  1303               	bcf	3,6	;RP1=0, select bank1
  1625  0300  0586               	andwf	6,f	;volatile
  1626                           
  1627                           ;SPI.c: 36: TRISB |= (1<<5);
  1628  0301  1686               	bsf	6,5	;volatile
  1629                           
  1630                           ;SPI.c: 37: if(mode == 2 || mode == 3)
  1631  0302  0871               	movf	SPI_init@mode,w
  1632  0303  3A02               	xorlw	2
  1633  0304  1903               	skipnz
  1634  0305  2B0A               	goto	l37
  1635  0306  0871               	movf	SPI_init@mode,w
  1636  0307  3A03               	xorlw	3
  1637  0308  1D03               	skipz
  1638  0309  2B0E               	goto	l1598
  1639  030A                     l37:	
  1640                           
  1641                           ;SPI.c: 38: PORTB |= (1<<7);
  1642  030A  1283               	bcf	3,5	;RP0=0, select bank0
  1643  030B  1303               	bcf	3,6	;RP1=0, select bank0
  1644  030C  1786               	bsf	6,7	;volatile
  1645  030D  0008               	return
  1646  030E                     l1598:	
  1647                           
  1648                           ;SPI.c: 39: else
  1649                           ;SPI.c: 40: PORTB &= ~(1<<7);
  1650  030E  307F               	movlw	127
  1651  030F  00F0               	movwf	??_SPI_init
  1652  0310  0870               	movf	??_SPI_init,w
  1653  0311  1283               	bcf	3,5	;RP0=0, select bank0
  1654  0312  0586               	andwf	6,f	;volatile
  1655  0313  0008               	return
  1656  0314                     __end_of_SPI_init:	
  1657                           
  1658                           	psect	text7
  1659  0292                     __ptext7:	
  1660 ;; *************** function _MFRC522_isCard *****************
  1661 ;; Defined at:
  1662 ;;		line 474 in file "main.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  TagType         1    wreg     PTR unsigned char 
  1665 ;;		 -> main@TagType(2), 
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;  TagType         1   32[BANK0 ] PTR unsigned char 
  1668 ;;		 -> main@TagType(2), 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      unsigned char 
  1671 ;; Registers used:
  1672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1678 ;;      Params:         0       0       0       0
  1679 ;;      Locals:         0       1       0       0
  1680 ;;      Temps:          0       1       0       0
  1681 ;;      Totals:         0       2       0       0
  1682 ;;Total ram usage:        2 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    5
  1685 ;; This function calls:
  1686 ;;		_MFRC522_Request
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           
  1693                           ;psect for function _MFRC522_isCard
  1694  0292                     _MFRC522_isCard:	
  1695                           
  1696                           ;incstack = 0
  1697                           ; Regs used in _MFRC522_isCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1698                           ;MFRC522_isCard@TagType stored from wreg
  1699  0292  1283               	bcf	3,5	;RP0=0, select bank0
  1700  0293  1303               	bcf	3,6	;RP1=0, select bank0
  1701  0294  00C0               	movwf	MFRC522_isCard@TagType
  1702                           
  1703                           ;main.c: 476: if (MFRC522_Request( 0x26, TagType ) == 0)
  1704  0295  0840               	movf	MFRC522_isCard@TagType,w
  1705  0296  00BF               	movwf	??_MFRC522_isCard
  1706  0297  083F               	movf	??_MFRC522_isCard,w
  1707  0298  00B6               	movwf	MFRC522_Request@TagType
  1708  0299  3026               	movlw	38
  1709  029A  2348               	fcall	_MFRC522_Request
  1710  029B  3800               	iorlw	0
  1711  029C  1D03               	skipz
  1712  029D  2AA0               	goto	l1642
  1713                           
  1714                           ;main.c: 477: return 1;
  1715  029E  3001               	movlw	1
  1716  029F  0008               	return
  1717  02A0                     l1642:	
  1718                           
  1719                           ;main.c: 478: else
  1720                           ;main.c: 479: return 0;
  1721  02A0  3000               	movlw	0
  1722  02A1  0008               	return
  1723  02A2                     __end_of_MFRC522_isCard:	
  1724                           
  1725                           	psect	text8
  1726  0348                     __ptext8:	
  1727 ;; *************** function _MFRC522_Request *****************
  1728 ;; Defined at:
  1729 ;;		line 284 in file "main.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;  reqMode         1    wreg     unsigned char 
  1732 ;;  TagType         1   22[BANK0 ] PTR unsigned char 
  1733 ;;		 -> main@TagType(2), 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  reqMode         1   27[BANK0 ] unsigned char 
  1736 ;;  backBits        2   29[BANK0 ] unsigned int 
  1737 ;;  _status         1   28[BANK0 ] unsigned char 
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  1    wreg      unsigned char 
  1740 ;; Registers used:
  1741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1747 ;;      Params:         0       1       0       0
  1748 ;;      Locals:         0       4       0       0
  1749 ;;      Temps:          0       4       0       0
  1750 ;;      Totals:         0       9       0       0
  1751 ;;Total ram usage:        9 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; Hardware stack levels required when called:    4
  1754 ;; This function calls:
  1755 ;;		_MFRC522_ToCard
  1756 ;;		_MFRC522_Wr
  1757 ;; This function is called by:
  1758 ;;		_MFRC522_isCard
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           
  1763                           ;psect for function _MFRC522_Request
  1764  0348                     _MFRC522_Request:	
  1765                           
  1766                           ;incstack = 0
  1767                           ; Regs used in _MFRC522_Request: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1768                           ;MFRC522_Request@reqMode stored from wreg
  1769  0348  1283               	bcf	3,5	;RP0=0, select bank0
  1770  0349  1303               	bcf	3,6	;RP1=0, select bank0
  1771  034A  00BB               	movwf	MFRC522_Request@reqMode
  1772                           
  1773                           ;main.c: 286: char _status;
  1774                           ;main.c: 287: unsigned backBits;
  1775                           ;main.c: 288: MFRC522_Wr( 0x0D, 0x07 );
  1776  034B  3007               	movlw	7
  1777  034C  00B7               	movwf	??_MFRC522_Request
  1778  034D  0837               	movf	??_MFRC522_Request,w
  1779  034E  00FB               	movwf	MFRC522_Wr@value
  1780  034F  300D               	movlw	13
  1781  0350  2273               	fcall	_MFRC522_Wr
  1782                           
  1783                           ;main.c: 289: TagType[0] = reqMode;
  1784  0351  1283               	bcf	3,5	;RP0=0, select bank0
  1785  0352  1303               	bcf	3,6	;RP1=0, select bank0
  1786  0353  083B               	movf	MFRC522_Request@reqMode,w
  1787  0354  00B7               	movwf	??_MFRC522_Request
  1788  0355  0836               	movf	MFRC522_Request@TagType,w
  1789  0356  0084               	movwf	4
  1790  0357  0837               	movf	??_MFRC522_Request,w
  1791  0358  1383               	bcf	3,7	;select IRP bank0
  1792  0359  0080               	movwf	0
  1793                           
  1794                           ;main.c: 290: _status = MFRC522_ToCard( 0x0C, TagType, 1, TagType, &backBits );
  1795  035A  0836               	movf	MFRC522_Request@TagType,w
  1796  035B  00B7               	movwf	??_MFRC522_Request
  1797  035C  0837               	movf	??_MFRC522_Request,w
  1798  035D  00A4               	movwf	MFRC522_ToCard@sendData
  1799  035E  01A5               	clrf	MFRC522_ToCard@sendLen
  1800  035F  0AA5               	incf	MFRC522_ToCard@sendLen,f
  1801  0360  0836               	movf	MFRC522_Request@TagType,w
  1802  0361  00B8               	movwf	??_MFRC522_Request+1
  1803  0362  0838               	movf	??_MFRC522_Request+1,w
  1804  0363  00A6               	movwf	MFRC522_ToCard@backData
  1805  0364  303D               	movlw	MFRC522_Request@backBits& (0+255)
  1806  0365  00B9               	movwf	??_MFRC522_Request+2
  1807  0366  0839               	movf	??_MFRC522_Request+2,w
  1808  0367  00A7               	movwf	MFRC522_ToCard@backLen
  1809  0368  300C               	movlw	12
  1810  0369  26C6               	fcall	_MFRC522_ToCard
  1811  036A  1283               	bcf	3,5	;RP0=0, select bank0
  1812  036B  1303               	bcf	3,6	;RP1=0, select bank0
  1813  036C  00BA               	movwf	??_MFRC522_Request+3
  1814  036D  083A               	movf	??_MFRC522_Request+3,w
  1815  036E  00BC               	movwf	MFRC522_Request@_status
  1816                           
  1817                           ;main.c: 291: if ( (_status != 0) || (backBits != 0x10) )
  1818  036F  08BC               	movf	MFRC522_Request@_status,f
  1819  0370  1D03               	skipz
  1820  0371  2B77               	goto	l1478
  1821  0372  3010               	movlw	16
  1822  0373  063D               	xorwf	MFRC522_Request@backBits,w
  1823  0374  043E               	iorwf	MFRC522_Request@backBits+1,w
  1824  0375  1903               	skipnz
  1825  0376  2B7B               	goto	l144
  1826  0377                     l1478:	
  1827                           
  1828                           ;main.c: 292: {
  1829                           ;main.c: 293: _status = 2;
  1830  0377  3002               	movlw	2
  1831  0378  00B7               	movwf	??_MFRC522_Request
  1832  0379  0837               	movf	??_MFRC522_Request,w
  1833  037A  00BC               	movwf	MFRC522_Request@_status
  1834  037B                     l144:	
  1835                           
  1836                           ;main.c: 294: }
  1837                           ;main.c: 295: return _status;
  1838  037B  083C               	movf	MFRC522_Request@_status,w
  1839  037C  0008               	return
  1840  037D                     __end_of_MFRC522_Request:	
  1841                           
  1842                           	psect	text9
  1843  044C                     __ptext9:	
  1844 ;; *************** function _MFRC522_SelectTag *****************
  1845 ;; Defined at:
  1846 ;;		line 323 in file "main.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;  serNum          1    wreg     PTR unsigned char 
  1849 ;;		 -> main@UID(6), 
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  serNum          1   38[BANK0 ] PTR unsigned char 
  1852 ;;		 -> main@UID(6), 
  1853 ;;  buffer          9   27[BANK0 ] unsigned char [9]
  1854 ;;  recvBits        2   39[BANK0 ] unsigned int 
  1855 ;;  i               1   41[BANK0 ] unsigned char 
  1856 ;;  size            1   37[BANK0 ] unsigned char 
  1857 ;;  _status         1   36[BANK0 ] unsigned char 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      unsigned char 
  1860 ;; Registers used:
  1861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1867 ;;      Params:         0       0       0       0
  1868 ;;      Locals:         0      15       0       0
  1869 ;;      Temps:          0       5       0       0
  1870 ;;      Totals:         0      20       0       0
  1871 ;;Total ram usage:       20 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    4
  1874 ;; This function calls:
  1875 ;;		_MFRC522_CRC
  1876 ;;		_MFRC522_ToCard
  1877 ;; This function is called by:
  1878 ;;		_main
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           
  1883                           ;psect for function _MFRC522_SelectTag
  1884  044C                     _MFRC522_SelectTag:	
  1885                           
  1886                           ;incstack = 0
  1887                           ; Regs used in _MFRC522_SelectTag: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1888                           ;MFRC522_SelectTag@serNum stored from wreg
  1889  044C  1283               	bcf	3,5	;RP0=0, select bank0
  1890  044D  1303               	bcf	3,6	;RP1=0, select bank0
  1891  044E  00C6               	movwf	MFRC522_SelectTag@serNum
  1892                           
  1893                           ;main.c: 325: char i;
  1894                           ;main.c: 326: char _status;
  1895                           ;main.c: 327: char size;
  1896                           ;main.c: 328: unsigned recvBits;
  1897                           ;main.c: 329: char buffer[9];
  1898                           ;main.c: 333: buffer[0] = 0x93;
  1899  044F  3093               	movlw	147
  1900  0450  00B6               	movwf	??_MFRC522_SelectTag
  1901  0451  0836               	movf	??_MFRC522_SelectTag,w
  1902  0452  00BB               	movwf	MFRC522_SelectTag@buffer
  1903                           
  1904                           ;main.c: 334: buffer[1] = 0x70;
  1905  0453  3070               	movlw	112
  1906  0454  00B6               	movwf	??_MFRC522_SelectTag
  1907  0455  0836               	movf	??_MFRC522_SelectTag,w
  1908  0456  00BC               	movwf	MFRC522_SelectTag@buffer+1
  1909                           
  1910                           ;main.c: 336: for ( i=2; i < 7; i++ )
  1911  0457  3002               	movlw	2
  1912  0458  00B6               	movwf	??_MFRC522_SelectTag
  1913  0459  0836               	movf	??_MFRC522_SelectTag,w
  1914  045A  00C9               	movwf	MFRC522_SelectTag@i
  1915  045B  3007               	movlw	7
  1916  045C  0249               	subwf	MFRC522_SelectTag@i,w
  1917  045D  1803               	btfsc	3,0
  1918  045E  2C75               	goto	l1620
  1919  045F                     l1612:	
  1920                           
  1921                           ;main.c: 337: {
  1922                           ;main.c: 338: buffer[i] = *serNum++;
  1923  045F  0846               	movf	MFRC522_SelectTag@serNum,w
  1924  0460  0084               	movwf	4
  1925  0461  1383               	bcf	3,7	;select IRP bank0
  1926  0462  0800               	movf	0,w
  1927  0463  00B6               	movwf	??_MFRC522_SelectTag
  1928  0464  0849               	movf	MFRC522_SelectTag@i,w
  1929  0465  3E3B               	addlw	MFRC522_SelectTag@buffer& (0+255)
  1930  0466  0084               	movwf	4
  1931  0467  0836               	movf	??_MFRC522_SelectTag,w
  1932  0468  0080               	movwf	0
  1933  0469  3001               	movlw	1
  1934  046A  00B6               	movwf	??_MFRC522_SelectTag
  1935  046B  0836               	movf	??_MFRC522_SelectTag,w
  1936  046C  07C6               	addwf	MFRC522_SelectTag@serNum,f
  1937  046D  3001               	movlw	1
  1938  046E  00B6               	movwf	??_MFRC522_SelectTag
  1939  046F  0836               	movf	??_MFRC522_SelectTag,w
  1940  0470  07C9               	addwf	MFRC522_SelectTag@i,f
  1941  0471  3007               	movlw	7
  1942  0472  0249               	subwf	MFRC522_SelectTag@i,w
  1943  0473  1C03               	skipc
  1944  0474  2C5F               	goto	l1612
  1945  0475                     l1620:	
  1946                           
  1947                           ;main.c: 339: }
  1948                           ;main.c: 341: MFRC522_CRC( buffer, 7, &buffer[7] );
  1949  0475  3007               	movlw	7
  1950  0476  00B6               	movwf	??_MFRC522_SelectTag
  1951  0477  0836               	movf	??_MFRC522_SelectTag,w
  1952  0478  00A4               	movwf	MFRC522_CRC@length
  1953  0479  3042               	movlw	(MFRC522_SelectTag@buffer+7)& (0+255)
  1954  047A  00B7               	movwf	??_MFRC522_SelectTag+1
  1955  047B  0837               	movf	??_MFRC522_SelectTag+1,w
  1956  047C  00A5               	movwf	MFRC522_CRC@dataOut
  1957  047D  303B               	movlw	MFRC522_SelectTag@buffer& (0+255)
  1958  047E  23F1               	fcall	_MFRC522_CRC
  1959                           
  1960                           ;main.c: 343: _status = MFRC522_ToCard( 0x0C, buffer, 9, buffer, &recvBits );
  1961  047F  303B               	movlw	MFRC522_SelectTag@buffer& (0+255)
  1962  0480  1283               	bcf	3,5	;RP0=0, select bank0
  1963  0481  1303               	bcf	3,6	;RP1=0, select bank0
  1964  0482  00B6               	movwf	??_MFRC522_SelectTag
  1965  0483  0836               	movf	??_MFRC522_SelectTag,w
  1966  0484  00A4               	movwf	MFRC522_ToCard@sendData
  1967  0485  3009               	movlw	9
  1968  0486  00B7               	movwf	??_MFRC522_SelectTag+1
  1969  0487  0837               	movf	??_MFRC522_SelectTag+1,w
  1970  0488  00A5               	movwf	MFRC522_ToCard@sendLen
  1971  0489  303B               	movlw	MFRC522_SelectTag@buffer& (0+255)
  1972  048A  00B8               	movwf	??_MFRC522_SelectTag+2
  1973  048B  0838               	movf	??_MFRC522_SelectTag+2,w
  1974  048C  00A6               	movwf	MFRC522_ToCard@backData
  1975  048D  3047               	movlw	MFRC522_SelectTag@recvBits& (0+255)
  1976  048E  00B9               	movwf	??_MFRC522_SelectTag+3
  1977  048F  0839               	movf	??_MFRC522_SelectTag+3,w
  1978  0490  00A7               	movwf	MFRC522_ToCard@backLen
  1979  0491  300C               	movlw	12
  1980  0492  26C6               	fcall	_MFRC522_ToCard
  1981  0493  1283               	bcf	3,5	;RP0=0, select bank0
  1982  0494  1303               	bcf	3,6	;RP1=0, select bank0
  1983  0495  00BA               	movwf	??_MFRC522_SelectTag+4
  1984  0496  083A               	movf	??_MFRC522_SelectTag+4,w
  1985  0497  00C4               	movwf	MFRC522_SelectTag@_status
  1986                           
  1987                           ;main.c: 344: if ( (_status == 0) && (recvBits == 0x18) )
  1988  0498  08C4               	movf	MFRC522_SelectTag@_status,f
  1989  0499  1D03               	skipz
  1990  049A  2CA5               	goto	l1628
  1991  049B  3018               	movlw	24
  1992  049C  0647               	xorwf	MFRC522_SelectTag@recvBits,w
  1993  049D  0448               	iorwf	MFRC522_SelectTag@recvBits+1,w
  1994  049E  1D03               	skipz
  1995  049F  2CA5               	goto	l1628
  1996                           
  1997                           ;main.c: 345: {
  1998                           ;main.c: 346: size = buffer[0];
  1999  04A0  083B               	movf	MFRC522_SelectTag@buffer,w
  2000  04A1  00B6               	movwf	??_MFRC522_SelectTag
  2001  04A2  0836               	movf	??_MFRC522_SelectTag,w
  2002  04A3  00C5               	movwf	MFRC522_SelectTag@size
  2003                           
  2004                           ;main.c: 347: }
  2005  04A4  2CA6               	goto	l1630
  2006  04A5                     l1628:	
  2007                           
  2008                           ;main.c: 348: else
  2009                           ;main.c: 349: {
  2010                           ;main.c: 350: size = 0;
  2011  04A5  01C5               	clrf	MFRC522_SelectTag@size
  2012  04A6                     l1630:	
  2013                           
  2014                           ;main.c: 351: }
  2015                           ;main.c: 352: return size;
  2016  04A6  0845               	movf	MFRC522_SelectTag@size,w
  2017  04A7  0008               	return
  2018  04A8                     __end_of_MFRC522_SelectTag:	
  2019                           
  2020                           	psect	text10
  2021  03F1                     __ptext10:	
  2022 ;; *************** function _MFRC522_CRC *****************
  2023 ;; Defined at:
  2024 ;;		line 297 in file "main.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  dataIn          1    wreg     PTR unsigned char 
  2027 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2028 ;;  length          1    4[BANK0 ] unsigned char 
  2029 ;;  dataOut         1    5[BANK0 ] PTR unsigned char 
  2030 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;  dataIn          1    9[BANK0 ] PTR unsigned char 
  2033 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2034 ;;  i               1    8[BANK0 ] unsigned char 
  2035 ;;  n               1    7[BANK0 ] unsigned char 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;		None               void
  2038 ;; Registers used:
  2039 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2045 ;;      Params:         0       2       0       0
  2046 ;;      Locals:         0       3       0       0
  2047 ;;      Temps:          0       1       0       0
  2048 ;;      Totals:         0       6       0       0
  2049 ;;Total ram usage:        6 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; Hardware stack levels required when called:    3
  2052 ;; This function calls:
  2053 ;;		_MFRC522_Clear_Bit
  2054 ;;		_MFRC522_Rd
  2055 ;;		_MFRC522_Set_Bit
  2056 ;;		_MFRC522_Wr
  2057 ;; This function is called by:
  2058 ;;		_MFRC522_SelectTag
  2059 ;;		_MFRC522_Halt
  2060 ;;		_MFRC522_Write
  2061 ;;		_MFRC522_Read
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           
  2066                           ;psect for function _MFRC522_CRC
  2067  03F1                     _MFRC522_CRC:	
  2068                           
  2069                           ;incstack = 0
  2070                           ; Regs used in _MFRC522_CRC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2071                           ;MFRC522_CRC@dataIn stored from wreg
  2072  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  2073  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  2074  03F3  00A9               	movwf	MFRC522_CRC@dataIn
  2075                           
  2076                           ;main.c: 299: char i, n;
  2077                           ;main.c: 300: MFRC522_Clear_Bit( 0x05, 0x04 );
  2078  03F4  3004               	movlw	4
  2079  03F5  00A6               	movwf	??_MFRC522_CRC
  2080  03F6  0826               	movf	??_MFRC522_CRC,w
  2081  03F7  00A0               	movwf	MFRC522_Clear_Bit@mask
  2082  03F8  3005               	movlw	5
  2083  03F9  2282               	fcall	_MFRC522_Clear_Bit
  2084                           
  2085                           ;main.c: 301: MFRC522_Set_Bit( 0x0A, 0x80 );
  2086  03FA  3080               	movlw	128
  2087  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  2088  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  2089  03FD  00A6               	movwf	??_MFRC522_CRC
  2090  03FE  0826               	movf	??_MFRC522_CRC,w
  2091  03FF  00A0               	movwf	MFRC522_Set_Bit@mask
  2092  0400  300A               	movlw	10
  2093  0401  2265               	fcall	_MFRC522_Set_Bit
  2094                           
  2095                           ;main.c: 304: for ( i = 0; i < length; i++ )
  2096  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2097  0403  1303               	bcf	3,6	;RP1=0, select bank0
  2098  0404  01A8               	clrf	MFRC522_CRC@i
  2099  0405                     l1492:	
  2100  0405  0824               	movf	MFRC522_CRC@length,w
  2101  0406  0228               	subwf	MFRC522_CRC@i,w
  2102  0407  1803               	btfsc	3,0
  2103  0408  2C1D               	goto	l1494
  2104                           
  2105                           ;main.c: 305: {
  2106                           ;main.c: 306: MFRC522_Wr( 0x09, *dataIn++ );
  2107  0409  0829               	movf	MFRC522_CRC@dataIn,w
  2108  040A  0084               	movwf	4
  2109  040B  1383               	bcf	3,7	;select IRP bank0
  2110  040C  0800               	movf	0,w
  2111  040D  00A6               	movwf	??_MFRC522_CRC
  2112  040E  0826               	movf	??_MFRC522_CRC,w
  2113  040F  00FB               	movwf	MFRC522_Wr@value
  2114  0410  3009               	movlw	9
  2115  0411  2273               	fcall	_MFRC522_Wr
  2116  0412  3001               	movlw	1
  2117  0413  1283               	bcf	3,5	;RP0=0, select bank0
  2118  0414  1303               	bcf	3,6	;RP1=0, select bank0
  2119  0415  00A6               	movwf	??_MFRC522_CRC
  2120  0416  0826               	movf	??_MFRC522_CRC,w
  2121  0417  07A9               	addwf	MFRC522_CRC@dataIn,f
  2122  0418  3001               	movlw	1
  2123  0419  00A6               	movwf	??_MFRC522_CRC
  2124  041A  0826               	movf	??_MFRC522_CRC,w
  2125  041B  07A8               	addwf	MFRC522_CRC@i,f
  2126  041C  2C05               	goto	l1492
  2127  041D                     l1494:	
  2128                           
  2129                           ;main.c: 307: }
  2130                           ;main.c: 309: MFRC522_Wr( 0x01, 0x03 );
  2131  041D  3003               	movlw	3
  2132  041E  00A6               	movwf	??_MFRC522_CRC
  2133  041F  0826               	movf	??_MFRC522_CRC,w
  2134  0420  00FB               	movwf	MFRC522_Wr@value
  2135  0421  3001               	movlw	1
  2136  0422  2273               	fcall	_MFRC522_Wr
  2137                           
  2138                           ;main.c: 311: i = 0xFF;
  2139  0423  30FF               	movlw	255
  2140  0424  1283               	bcf	3,5	;RP0=0, select bank0
  2141  0425  1303               	bcf	3,6	;RP1=0, select bank0
  2142  0426  00A6               	movwf	??_MFRC522_CRC
  2143  0427  0826               	movf	??_MFRC522_CRC,w
  2144  0428  00A8               	movwf	MFRC522_CRC@i
  2145  0429                     l1498:	
  2146                           ;main.c: 313: do
  2147                           
  2148                           
  2149                           ;main.c: 314: {
  2150                           ;main.c: 315: n = MFRC522_Rd( 0x05 );
  2151  0429  3005               	movlw	5
  2152  042A  22B3               	fcall	_MFRC522_Rd
  2153  042B  1283               	bcf	3,5	;RP0=0, select bank0
  2154  042C  1303               	bcf	3,6	;RP1=0, select bank0
  2155  042D  00A6               	movwf	??_MFRC522_CRC
  2156  042E  0826               	movf	??_MFRC522_CRC,w
  2157  042F  00A7               	movwf	MFRC522_CRC@n
  2158                           
  2159                           ;main.c: 316: i--;
  2160  0430  3001               	movlw	1
  2161  0431  02A8               	subwf	MFRC522_CRC@i,f
  2162                           
  2163                           ;main.c: 317: }
  2164                           ;main.c: 318: while( i && !(n & 0x04) );
  2165  0432  0828               	movf	MFRC522_CRC@i,w
  2166  0433  1D03               	skipz
  2167  0434  1927               	btfsc	MFRC522_CRC@n,2
  2168  0435  2C37               	goto	l1506
  2169  0436  2C29               	goto	l1498
  2170  0437                     l1506:	
  2171                           
  2172                           ;main.c: 320: dataOut[0] = MFRC522_Rd( 0x22 );
  2173  0437  3022               	movlw	34
  2174  0438  22B3               	fcall	_MFRC522_Rd
  2175  0439  1283               	bcf	3,5	;RP0=0, select bank0
  2176  043A  1303               	bcf	3,6	;RP1=0, select bank0
  2177  043B  00A6               	movwf	??_MFRC522_CRC
  2178  043C  0825               	movf	MFRC522_CRC@dataOut,w
  2179  043D  0084               	movwf	4
  2180  043E  0826               	movf	??_MFRC522_CRC,w
  2181  043F  1383               	bcf	3,7	;select IRP bank0
  2182  0440  0080               	movwf	0
  2183                           
  2184                           ;main.c: 321: dataOut[1] = MFRC522_Rd( 0x21 );
  2185  0441  3021               	movlw	33
  2186  0442  22B3               	fcall	_MFRC522_Rd
  2187  0443  1283               	bcf	3,5	;RP0=0, select bank0
  2188  0444  1303               	bcf	3,6	;RP1=0, select bank0
  2189  0445  00A6               	movwf	??_MFRC522_CRC
  2190  0446  0A25               	incf	MFRC522_CRC@dataOut,w
  2191  0447  0084               	movwf	4
  2192  0448  0826               	movf	??_MFRC522_CRC,w
  2193  0449  1383               	bcf	3,7	;select IRP bank0
  2194  044A  0080               	movwf	0
  2195  044B  0008               	return
  2196  044C                     __end_of_MFRC522_CRC:	
  2197                           
  2198                           	psect	text11
  2199  02C7                     __ptext11:	
  2200 ;; *************** function _MFRC522_ReadCardSerial *****************
  2201 ;; Defined at:
  2202 ;;		line 481 in file "main.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;  str             1    wreg     PTR unsigned char 
  2205 ;;		 -> main@UID(6), 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  str             1   35[BANK0 ] PTR unsigned char 
  2208 ;;		 -> main@UID(6), 
  2209 ;;  _status         1   34[BANK0 ] unsigned char 
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      unsigned char 
  2212 ;; Registers used:
  2213 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2219 ;;      Params:         0       0       0       0
  2220 ;;      Locals:         0       2       0       0
  2221 ;;      Temps:          0       1       0       0
  2222 ;;      Totals:         0       3       0       0
  2223 ;;Total ram usage:        3 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    5
  2226 ;; This function calls:
  2227 ;;		_MFRC522_AntiColl
  2228 ;; This function is called by:
  2229 ;;		_main
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           
  2234                           ;psect for function _MFRC522_ReadCardSerial
  2235  02C7                     _MFRC522_ReadCardSerial:	
  2236                           
  2237                           ;incstack = 0
  2238                           ; Regs used in _MFRC522_ReadCardSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  2239                           ;MFRC522_ReadCardSerial@str stored from wreg
  2240  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  2241  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  2242  02C9  00C3               	movwf	MFRC522_ReadCardSerial@str
  2243                           
  2244                           ;main.c: 483: char _status;
  2245                           ;main.c: 484: _status = MFRC522_AntiColl( str );
  2246  02CA  0843               	movf	MFRC522_ReadCardSerial@str,w
  2247  02CB  24A8               	fcall	_MFRC522_AntiColl
  2248  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2249  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  2250  02CE  00C1               	movwf	??_MFRC522_ReadCardSerial
  2251  02CF  0841               	movf	??_MFRC522_ReadCardSerial,w
  2252  02D0  00C2               	movwf	MFRC522_ReadCardSerial@_status
  2253                           
  2254                           ;main.c: 485: str[5] = 0;
  2255  02D1  0843               	movf	MFRC522_ReadCardSerial@str,w
  2256  02D2  3E05               	addlw	5
  2257  02D3  0084               	movwf	4
  2258  02D4  1383               	bcf	3,7	;select IRP bank0
  2259  02D5  0180               	clrf	0
  2260                           
  2261                           ;main.c: 486: if (_status == 0)
  2262  02D6  08C2               	movf	MFRC522_ReadCardSerial@_status,f
  2263  02D7  1D03               	skipz
  2264  02D8  2ADB               	goto	l1658
  2265                           
  2266                           ;main.c: 487: return 1;
  2267  02D9  3001               	movlw	1
  2268  02DA  0008               	return
  2269  02DB                     l1658:	
  2270                           
  2271                           ;main.c: 488: else
  2272                           ;main.c: 489: return 0;
  2273  02DB  3000               	movlw	0
  2274  02DC  0008               	return
  2275  02DD                     __end_of_MFRC522_ReadCardSerial:	
  2276                           
  2277                           	psect	text12
  2278  04A8                     __ptext12:	
  2279 ;; *************** function _MFRC522_AntiColl *****************
  2280 ;; Defined at:
  2281 ;;		line 444 in file "main.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  serNum          1    wreg     PTR unsigned char 
  2284 ;;		 -> main@UID(6), 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  serNum          1   32[BANK0 ] PTR unsigned char 
  2287 ;;		 -> main@UID(6), 
  2288 ;;  unLen           2   28[BANK0 ] unsigned int 
  2289 ;;  i               1   31[BANK0 ] unsigned char 
  2290 ;;  _status         1   30[BANK0 ] unsigned char 
  2291 ;;  serNumCheck     1   27[BANK0 ] unsigned char 
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  1    wreg      unsigned char 
  2294 ;; Registers used:
  2295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2301 ;;      Params:         0       0       0       0
  2302 ;;      Locals:         0       6       0       0
  2303 ;;      Temps:          0       5       0       0
  2304 ;;      Totals:         0      11       0       0
  2305 ;;Total ram usage:       11 bytes
  2306 ;; Hardware stack levels used:    1
  2307 ;; Hardware stack levels required when called:    4
  2308 ;; This function calls:
  2309 ;;		_MFRC522_Clear_Bit
  2310 ;;		_MFRC522_ToCard
  2311 ;;		_MFRC522_Wr
  2312 ;; This function is called by:
  2313 ;;		_MFRC522_ReadCardSerial
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           
  2318                           ;psect for function _MFRC522_AntiColl
  2319  04A8                     _MFRC522_AntiColl:	
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in _MFRC522_AntiColl: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2323                           ;MFRC522_AntiColl@serNum stored from wreg
  2324  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2325  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2326  04AA  00C0               	movwf	MFRC522_AntiColl@serNum
  2327                           
  2328                           ;main.c: 446: char _status;
  2329                           ;main.c: 447: char i;
  2330                           ;main.c: 448: char serNumCheck = 0;
  2331  04AB  01BB               	clrf	MFRC522_AntiColl@serNumCheck
  2332                           
  2333                           ;main.c: 449: unsigned unLen;
  2334                           ;main.c: 450: MFRC522_Wr( 0x0D, 0x00 );
  2335  04AC  01FB               	clrf	MFRC522_Wr@value
  2336  04AD  300D               	movlw	13
  2337  04AE  2273               	fcall	_MFRC522_Wr
  2338                           
  2339                           ;main.c: 451: serNum[0] = 0x93;
  2340  04AF  3093               	movlw	147
  2341  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  2342  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  2343  04B2  00B6               	movwf	??_MFRC522_AntiColl
  2344  04B3  0840               	movf	MFRC522_AntiColl@serNum,w
  2345  04B4  0084               	movwf	4
  2346  04B5  0836               	movf	??_MFRC522_AntiColl,w
  2347  04B6  1383               	bcf	3,7	;select IRP bank0
  2348  04B7  0080               	movwf	0
  2349                           
  2350                           ;main.c: 452: serNum[1] = 0x20;
  2351  04B8  3020               	movlw	32
  2352  04B9  00B6               	movwf	??_MFRC522_AntiColl
  2353  04BA  0A40               	incf	MFRC522_AntiColl@serNum,w
  2354  04BB  0084               	movwf	4
  2355  04BC  0836               	movf	??_MFRC522_AntiColl,w
  2356  04BD  0080               	movwf	0
  2357                           
  2358                           ;main.c: 453: MFRC522_Clear_Bit( 0x08, 0x08 );
  2359  04BE  3008               	movlw	8
  2360  04BF  00B6               	movwf	??_MFRC522_AntiColl
  2361  04C0  0836               	movf	??_MFRC522_AntiColl,w
  2362  04C1  00A0               	movwf	MFRC522_Clear_Bit@mask
  2363  04C2  3008               	movlw	8
  2364  04C3  2282               	fcall	_MFRC522_Clear_Bit
  2365                           
  2366                           ;main.c: 454: _status = MFRC522_ToCard( 0x0C, serNum, 2, serNum, &unLen );
  2367  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  2368  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  2369  04C6  0840               	movf	MFRC522_AntiColl@serNum,w
  2370  04C7  00B6               	movwf	??_MFRC522_AntiColl
  2371  04C8  0836               	movf	??_MFRC522_AntiColl,w
  2372  04C9  00A4               	movwf	MFRC522_ToCard@sendData
  2373  04CA  3002               	movlw	2
  2374  04CB  00B7               	movwf	??_MFRC522_AntiColl+1
  2375  04CC  0837               	movf	??_MFRC522_AntiColl+1,w
  2376  04CD  00A5               	movwf	MFRC522_ToCard@sendLen
  2377  04CE  0840               	movf	MFRC522_AntiColl@serNum,w
  2378  04CF  00B8               	movwf	??_MFRC522_AntiColl+2
  2379  04D0  0838               	movf	??_MFRC522_AntiColl+2,w
  2380  04D1  00A6               	movwf	MFRC522_ToCard@backData
  2381  04D2  303C               	movlw	MFRC522_AntiColl@unLen& (0+255)
  2382  04D3  00B9               	movwf	??_MFRC522_AntiColl+3
  2383  04D4  0839               	movf	??_MFRC522_AntiColl+3,w
  2384  04D5  00A7               	movwf	MFRC522_ToCard@backLen
  2385  04D6  300C               	movlw	12
  2386  04D7  26C6               	fcall	_MFRC522_ToCard
  2387  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2388  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2389  04DA  00BA               	movwf	??_MFRC522_AntiColl+4
  2390  04DB  083A               	movf	??_MFRC522_AntiColl+4,w
  2391  04DC  00BE               	movwf	MFRC522_AntiColl@_status
  2392                           
  2393                           ;main.c: 455: if (_status == 0)
  2394  04DD  08BE               	movf	MFRC522_AntiColl@_status,f
  2395  04DE  1D03               	skipz
  2396  04DF  2D03               	goto	l198
  2397                           
  2398                           ;main.c: 456: {
  2399                           ;main.c: 457: for ( i=0; i < 4; i++ )
  2400  04E0  01BF               	clrf	MFRC522_AntiColl@i
  2401  04E1  3004               	movlw	4
  2402  04E2  023F               	subwf	MFRC522_AntiColl@i,w
  2403  04E3  1803               	btfsc	3,0
  2404  04E4  2CF7               	goto	l1534
  2405  04E5                     l1528:	
  2406                           
  2407                           ;main.c: 458: {
  2408                           ;main.c: 459: serNumCheck ^= serNum[i];
  2409  04E5  083F               	movf	MFRC522_AntiColl@i,w
  2410  04E6  0740               	addwf	MFRC522_AntiColl@serNum,w
  2411  04E7  00B6               	movwf	??_MFRC522_AntiColl
  2412  04E8  0836               	movf	??_MFRC522_AntiColl,w
  2413  04E9  0084               	movwf	4
  2414  04EA  1383               	bcf	3,7	;select IRP bank0
  2415  04EB  0800               	movf	0,w
  2416  04EC  00B7               	movwf	??_MFRC522_AntiColl+1
  2417  04ED  0837               	movf	??_MFRC522_AntiColl+1,w
  2418  04EE  06BB               	xorwf	MFRC522_AntiColl@serNumCheck,f
  2419  04EF  3001               	movlw	1
  2420  04F0  00B6               	movwf	??_MFRC522_AntiColl
  2421  04F1  0836               	movf	??_MFRC522_AntiColl,w
  2422  04F2  07BF               	addwf	MFRC522_AntiColl@i,f
  2423  04F3  3004               	movlw	4
  2424  04F4  023F               	subwf	MFRC522_AntiColl@i,w
  2425  04F5  1C03               	skipc
  2426  04F6  2CE5               	goto	l1528
  2427  04F7                     l1534:	
  2428                           
  2429                           ;main.c: 460: }
  2430                           ;main.c: 462: if ( serNumCheck != serNum[4] )
  2431  04F7  0840               	movf	MFRC522_AntiColl@serNum,w
  2432  04F8  3E04               	addlw	4
  2433  04F9  0084               	movwf	4
  2434  04FA  1383               	bcf	3,7	;select IRP bank0
  2435  04FB  0800               	movf	0,w
  2436  04FC  063B               	xorwf	MFRC522_AntiColl@serNumCheck,w
  2437  04FD  1903               	skipnz
  2438  04FE  2D03               	goto	l198
  2439                           
  2440                           ;main.c: 463: {
  2441                           ;main.c: 464: _status = 2;
  2442  04FF  3002               	movlw	2
  2443  0500  00B6               	movwf	??_MFRC522_AntiColl
  2444  0501  0836               	movf	??_MFRC522_AntiColl,w
  2445  0502  00BE               	movwf	MFRC522_AntiColl@_status
  2446  0503                     l198:	
  2447                           
  2448                           ;main.c: 465: }
  2449                           ;main.c: 466: }
  2450                           ;main.c: 467: return _status;
  2451  0503  083E               	movf	MFRC522_AntiColl@_status,w
  2452  0504  0008               	return
  2453  0505                     __end_of_MFRC522_AntiColl:	
  2454                           
  2455                           	psect	text13
  2456  06C6                     __ptext13:	
  2457 ;; *************** function _MFRC522_ToCard *****************
  2458 ;; Defined at:
  2459 ;;		line 181 in file "main.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  command         1    wreg     unsigned char 
  2462 ;;  sendData        1    4[BANK0 ] PTR unsigned char 
  2463 ;;		 -> main@UID(6), main@TagType(2), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  2464 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2465 ;;  sendLen         1    5[BANK0 ] unsigned char 
  2466 ;;  backData        1    6[BANK0 ] PTR unsigned char 
  2467 ;;		 -> main@UID(6), main@TagType(2), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  2468 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2469 ;;  backLen         1    7[BANK0 ] PTR unsigned int 
  2470 ;;		 -> MFRC522_AntiColl@unLen(2), MFRC522_Read@unLen(2), MFRC522_Write@recvBits(2), MFRC522_Auth@recvBits(2), 
  2471 ;;		 -> MFRC522_Halt@unLen(2), MFRC522_SelectTag@recvBits(2), MFRC522_Request@backBits(2), 
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;  command         1   18[BANK0 ] unsigned char 
  2474 ;;  i               2   19[BANK0 ] unsigned int 
  2475 ;;  n               1   21[BANK0 ] unsigned char 
  2476 ;;  irqEn           1   17[BANK0 ] unsigned char 
  2477 ;;  lastBits        1   16[BANK0 ] unsigned char 
  2478 ;;  _status         1   15[BANK0 ] unsigned char 
  2479 ;;  waitIRq         1   14[BANK0 ] unsigned char 
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      unsigned char 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2489 ;;      Params:         0       4       0       0
  2490 ;;      Locals:         0       8       0       0
  2491 ;;      Temps:          0       6       0       0
  2492 ;;      Totals:         0      18       0       0
  2493 ;;Total ram usage:       18 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    3
  2496 ;; This function calls:
  2497 ;;		_MFRC522_Clear_Bit
  2498 ;;		_MFRC522_Rd
  2499 ;;		_MFRC522_Set_Bit
  2500 ;;		_MFRC522_Wr
  2501 ;; This function is called by:
  2502 ;;		_MFRC522_Request
  2503 ;;		_MFRC522_SelectTag
  2504 ;;		_MFRC522_AntiColl
  2505 ;;		_MFRC522_Halt
  2506 ;;		_MFRC522_Auth
  2507 ;;		_MFRC522_Write
  2508 ;;		_MFRC522_Read
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _MFRC522_ToCard
  2514  06C6                     _MFRC522_ToCard:	
  2515                           
  2516                           ;incstack = 0
  2517                           ; Regs used in _MFRC522_ToCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2518                           ;MFRC522_ToCard@command stored from wreg
  2519  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  2520  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  2521  06C8  00B2               	movwf	MFRC522_ToCard@command
  2522                           
  2523                           ;main.c: 183: char _status = 2;
  2524  06C9  3002               	movlw	2
  2525  06CA  00A8               	movwf	??_MFRC522_ToCard
  2526  06CB  0828               	movf	??_MFRC522_ToCard,w
  2527  06CC  00AF               	movwf	MFRC522_ToCard@_status
  2528                           
  2529                           ;main.c: 184: char irqEn = 0x00;
  2530  06CD  01B1               	clrf	MFRC522_ToCard@irqEn
  2531                           
  2532                           ;main.c: 185: char waitIRq = 0x00;
  2533  06CE  01AE               	clrf	MFRC522_ToCard@waitIRq
  2534                           
  2535                           ;main.c: 186: char lastBits;
  2536                           ;main.c: 187: char n;
  2537                           ;main.c: 188: unsigned i;
  2538                           ;main.c: 190: switch (command)
  2539  06CF  2EDF               	goto	l1382
  2540  06D0                     l1376:	
  2541                           ;main.c: 191: {
  2542                           ;main.c: 192: case 0x0E:
  2543                           
  2544                           
  2545                           ;main.c: 193: {
  2546                           ;main.c: 194: irqEn = 0x12;
  2547  06D0  3012               	movlw	18
  2548  06D1  00A8               	movwf	??_MFRC522_ToCard
  2549  06D2  0828               	movf	??_MFRC522_ToCard,w
  2550  06D3  00B1               	movwf	MFRC522_ToCard@irqEn
  2551                           
  2552                           ;main.c: 195: waitIRq = 0x10;
  2553  06D4  3010               	movlw	16
  2554  06D5  2EDB               	goto	L1
  2555  06D6                     l1378:	
  2556                           ;main.c: 197: }
  2557                           ;main.c: 198: case 0x0C:
  2558                           
  2559                           ;main.c: 196: break;
  2560                           
  2561                           
  2562                           ;main.c: 199: {
  2563                           ;main.c: 200: irqEn = 0x77;
  2564  06D6  3077               	movlw	119
  2565  06D7  00A8               	movwf	??_MFRC522_ToCard
  2566  06D8  0828               	movf	??_MFRC522_ToCard,w
  2567  06D9  00B1               	movwf	MFRC522_ToCard@irqEn
  2568                           
  2569                           ;main.c: 201: waitIRq = 0x30;
  2570  06DA  3030               	movlw	48
  2571  06DB                     L1:	
  2572  06DB  00A8               	movwf	??_MFRC522_ToCard
  2573  06DC  0828               	movf	??_MFRC522_ToCard,w
  2574  06DD  00AE               	movwf	MFRC522_ToCard@waitIRq
  2575                           
  2576                           ;main.c: 206: }
  2577                           
  2578                           ;main.c: 205: break;
  2579                           
  2580                           ;main.c: 203: }
  2581                           ;main.c: 204: default:
  2582                           
  2583                           ;main.c: 202: break;
  2584  06DE  2EE7               	goto	l1384
  2585  06DF                     l1382:	
  2586  06DF  0832               	movf	MFRC522_ToCard@command,w
  2587                           
  2588                           ; Switch size 1, requested type "space"
  2589                           ; Number of cases is 2, Range of values is 12 to 14
  2590                           ; switch strategies available:
  2591                           ; Name         Instructions Cycles
  2592                           ; simple_byte            7     4 (average)
  2593                           ; direct_byte           12     9 (fixed)
  2594                           ; jumptable            263     9 (fixed)
  2595                           ;	Chosen strategy is simple_byte
  2596  06E0  3A0C               	xorlw	12	; case 12
  2597  06E1  1903               	skipnz
  2598  06E2  2ED6               	goto	l1378
  2599  06E3  3A02               	xorlw	2	; case 14
  2600  06E4  1903               	skipnz
  2601  06E5  2ED0               	goto	l1376
  2602  06E6  2EE7               	goto	l1384
  2603  06E7                     l1384:	
  2604                           
  2605                           ;main.c: 207: MFRC522_Wr( 0x02, irqEn | 0x80 );
  2606  06E7  0831               	movf	MFRC522_ToCard@irqEn,w
  2607  06E8  3880               	iorlw	128
  2608  06E9  00A8               	movwf	??_MFRC522_ToCard
  2609  06EA  0828               	movf	??_MFRC522_ToCard,w
  2610  06EB  00FB               	movwf	MFRC522_Wr@value
  2611  06EC  3002               	movlw	2
  2612  06ED  2273               	fcall	_MFRC522_Wr
  2613                           
  2614                           ;main.c: 208: MFRC522_Clear_Bit( 0x04, 0x80 );
  2615  06EE  3080               	movlw	128
  2616  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  2617  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  2618  06F1  00A8               	movwf	??_MFRC522_ToCard
  2619  06F2  0828               	movf	??_MFRC522_ToCard,w
  2620  06F3  00A0               	movwf	MFRC522_Clear_Bit@mask
  2621  06F4  3004               	movlw	4
  2622  06F5  2282               	fcall	_MFRC522_Clear_Bit
  2623                           
  2624                           ;main.c: 209: MFRC522_Set_Bit( 0x0A, 0x80 );
  2625  06F6  3080               	movlw	128
  2626  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  2627  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  2628  06F9  00A8               	movwf	??_MFRC522_ToCard
  2629  06FA  0828               	movf	??_MFRC522_ToCard,w
  2630  06FB  00A0               	movwf	MFRC522_Set_Bit@mask
  2631  06FC  300A               	movlw	10
  2632  06FD  2265               	fcall	_MFRC522_Set_Bit
  2633                           
  2634                           ;main.c: 210: MFRC522_Wr( 0x01, 0x00 );
  2635  06FE  01FB               	clrf	MFRC522_Wr@value
  2636  06FF  3001               	movlw	1
  2637  0700  2273               	fcall	_MFRC522_Wr
  2638                           
  2639                           ;main.c: 215: for ( i=0; i < sendLen; i++ )
  2640  0701  1283               	bcf	3,5	;RP0=0, select bank0
  2641  0702  1303               	bcf	3,6	;RP1=0, select bank0
  2642  0703  01B3               	clrf	MFRC522_ToCard@i
  2643  0704  01B4               	clrf	MFRC522_ToCard@i+1
  2644  0705                     l1392:	
  2645  0705  0825               	movf	MFRC522_ToCard@sendLen,w
  2646  0706  00A8               	movwf	??_MFRC522_ToCard
  2647  0707  01A9               	clrf	??_MFRC522_ToCard+1
  2648  0708  0829               	movf	??_MFRC522_ToCard+1,w
  2649  0709  0234               	subwf	MFRC522_ToCard@i+1,w
  2650  070A  1D03               	skipz
  2651  070B  2F0E               	goto	u1045
  2652  070C  0828               	movf	??_MFRC522_ToCard,w
  2653  070D  0233               	subwf	MFRC522_ToCard@i,w
  2654  070E                     u1045:	
  2655  070E  1803               	btfsc	3,0
  2656  070F  2F25               	goto	l1394
  2657                           
  2658                           ;main.c: 216: {
  2659                           ;main.c: 217: MFRC522_Wr( 0x09, sendData[i] );
  2660  0710  0833               	movf	MFRC522_ToCard@i,w
  2661  0711  0724               	addwf	MFRC522_ToCard@sendData,w
  2662  0712  00A8               	movwf	??_MFRC522_ToCard
  2663  0713  0828               	movf	??_MFRC522_ToCard,w
  2664  0714  0084               	movwf	4
  2665  0715  1383               	bcf	3,7	;select IRP bank0
  2666  0716  0800               	movf	0,w
  2667  0717  00A9               	movwf	??_MFRC522_ToCard+1
  2668  0718  0829               	movf	??_MFRC522_ToCard+1,w
  2669  0719  00FB               	movwf	MFRC522_Wr@value
  2670  071A  3009               	movlw	9
  2671  071B  2273               	fcall	_MFRC522_Wr
  2672  071C  3001               	movlw	1
  2673  071D  1283               	bcf	3,5	;RP0=0, select bank0
  2674  071E  1303               	bcf	3,6	;RP1=0, select bank0
  2675  071F  07B3               	addwf	MFRC522_ToCard@i,f
  2676  0720  1803               	skipnc
  2677  0721  0AB4               	incf	MFRC522_ToCard@i+1,f
  2678  0722  3000               	movlw	0
  2679  0723  07B4               	addwf	MFRC522_ToCard@i+1,f
  2680  0724  2F05               	goto	l1392
  2681  0725                     l1394:	
  2682                           
  2683                           ;main.c: 218: }
  2684                           ;main.c: 220: MFRC522_Wr( 0x01, command );
  2685  0725  0832               	movf	MFRC522_ToCard@command,w
  2686  0726  00A8               	movwf	??_MFRC522_ToCard
  2687  0727  0828               	movf	??_MFRC522_ToCard,w
  2688  0728  00FB               	movwf	MFRC522_Wr@value
  2689  0729  3001               	movlw	1
  2690  072A  2273               	fcall	_MFRC522_Wr
  2691                           
  2692                           ;main.c: 221: if (command == 0x0C )
  2693  072B  1283               	bcf	3,5	;RP0=0, select bank0
  2694  072C  1303               	bcf	3,6	;RP1=0, select bank0
  2695  072D  0832               	movf	MFRC522_ToCard@command,w
  2696  072E  3A0C               	xorlw	12
  2697  072F  1D03               	skipz
  2698  0730  2F37               	goto	l1400
  2699                           
  2700                           ;main.c: 222: {
  2701                           ;main.c: 223: MFRC522_Set_Bit( 0x0D, 0x80 );
  2702  0731  3080               	movlw	128
  2703  0732  00A8               	movwf	??_MFRC522_ToCard
  2704  0733  0828               	movf	??_MFRC522_ToCard,w
  2705  0734  00A0               	movwf	MFRC522_Set_Bit@mask
  2706  0735  300D               	movlw	13
  2707  0736  2265               	fcall	_MFRC522_Set_Bit
  2708  0737                     l1400:	
  2709                           
  2710                           ;main.c: 224: }
  2711                           ;main.c: 227: i = 0xFFFF;
  2712  0737  30FF               	movlw	255
  2713  0738  1283               	bcf	3,5	;RP0=0, select bank0
  2714  0739  1303               	bcf	3,6	;RP1=0, select bank0
  2715  073A  00B3               	movwf	MFRC522_ToCard@i
  2716  073B  30FF               	movlw	255
  2717  073C  00B4               	movwf	MFRC522_ToCard@i+1
  2718  073D                     l1402:	
  2719                           ;main.c: 228: do
  2720                           
  2721                           
  2722                           ;main.c: 229: {
  2723                           ;main.c: 232: n = MFRC522_Rd( 0x04 );
  2724  073D  3004               	movlw	4
  2725  073E  22B3               	fcall	_MFRC522_Rd
  2726  073F  1283               	bcf	3,5	;RP0=0, select bank0
  2727  0740  1303               	bcf	3,6	;RP1=0, select bank0
  2728  0741  00A8               	movwf	??_MFRC522_ToCard
  2729  0742  0828               	movf	??_MFRC522_ToCard,w
  2730  0743  00B5               	movwf	MFRC522_ToCard@n
  2731                           
  2732                           ;main.c: 233: i--;
  2733  0744  3001               	movlw	1
  2734  0745  02B3               	subwf	MFRC522_ToCard@i,f
  2735  0746  3000               	movlw	0
  2736  0747  1C03               	skipc
  2737  0748  03B4               	decf	MFRC522_ToCard@i+1,f
  2738  0749  02B4               	subwf	MFRC522_ToCard@i+1,f
  2739                           
  2740                           ;main.c: 234: }
  2741                           ;main.c: 235: while ( i && !(n & 0x01) && !( n & waitIRq ) );
  2742  074A  0834               	movf	MFRC522_ToCard@i+1,w
  2743  074B  0433               	iorwf	MFRC522_ToCard@i,w
  2744  074C  1D03               	btfss	3,2
  2745  074D  1835               	btfsc	MFRC522_ToCard@n,0
  2746  074E  2F53               	goto	l1408
  2747  074F  0835               	movf	MFRC522_ToCard@n,w
  2748  0750  052E               	andwf	MFRC522_ToCard@waitIRq,w
  2749  0751  1903               	btfsc	3,2
  2750  0752  2F3D               	goto	l1402
  2751  0753                     l1408:	
  2752                           
  2753                           ;main.c: 236: MFRC522_Clear_Bit( 0x0D, 0x80 );
  2754  0753  3080               	movlw	128
  2755  0754  00A8               	movwf	??_MFRC522_ToCard
  2756  0755  0828               	movf	??_MFRC522_ToCard,w
  2757  0756  00A0               	movwf	MFRC522_Clear_Bit@mask
  2758  0757  300D               	movlw	13
  2759  0758  2282               	fcall	_MFRC522_Clear_Bit
  2760                           
  2761                           ;main.c: 237: if (i != 0)
  2762  0759  1283               	bcf	3,5	;RP0=0, select bank0
  2763  075A  1303               	bcf	3,6	;RP1=0, select bank0
  2764  075B  0834               	movf	MFRC522_ToCard@i+1,w
  2765  075C  0433               	iorwf	MFRC522_ToCard@i,w
  2766  075D  1903               	skipnz
  2767  075E  2FF7               	goto	l129
  2768                           
  2769                           ;main.c: 238: {
  2770                           ;main.c: 239: if( !( MFRC522_Rd( 0x06 ) & 0x1B ) )
  2771  075F  3006               	movlw	6
  2772  0760  22B3               	fcall	_MFRC522_Rd
  2773  0761  391B               	andlw	27
  2774  0762  1D03               	btfss	3,2
  2775  0763  2FF1               	goto	l1448
  2776                           
  2777                           ;main.c: 240: {
  2778                           ;main.c: 241: _status = 0;
  2779  0764  1283               	bcf	3,5	;RP0=0, select bank0
  2780  0765  1303               	bcf	3,6	;RP1=0, select bank0
  2781  0766  01AF               	clrf	MFRC522_ToCard@_status
  2782                           
  2783                           ;main.c: 242: if ( n & irqEn & 0x01 )
  2784  0767  0831               	movf	MFRC522_ToCard@irqEn,w
  2785  0768  0535               	andwf	MFRC522_ToCard@n,w
  2786  0769  00A8               	movwf	??_MFRC522_ToCard
  2787  076A  1C28               	btfss	??_MFRC522_ToCard,0
  2788  076B  2F6E               	goto	l1420
  2789                           
  2790                           ;main.c: 243: {
  2791                           ;main.c: 244: _status = 1;
  2792  076C  01AF               	clrf	MFRC522_ToCard@_status
  2793  076D  0AAF               	incf	MFRC522_ToCard@_status,f
  2794  076E                     l1420:	
  2795                           
  2796                           ;main.c: 245: }
  2797                           ;main.c: 246: if ( command == 0x0C )
  2798  076E  0832               	movf	MFRC522_ToCard@command,w
  2799  076F  3A0C               	xorlw	12
  2800  0770  1D03               	skipz
  2801  0771  2FF7               	goto	l129
  2802                           
  2803                           ;main.c: 247: {
  2804                           ;main.c: 248: n = MFRC522_Rd( 0x0A );
  2805  0772  300A               	movlw	10
  2806  0773  22B3               	fcall	_MFRC522_Rd
  2807  0774  1283               	bcf	3,5	;RP0=0, select bank0
  2808  0775  1303               	bcf	3,6	;RP1=0, select bank0
  2809  0776  00A8               	movwf	??_MFRC522_ToCard
  2810  0777  0828               	movf	??_MFRC522_ToCard,w
  2811  0778  00B5               	movwf	MFRC522_ToCard@n
  2812                           
  2813                           ;main.c: 249: lastBits = MFRC522_Rd( 0x0C ) & 0x07;
  2814  0779  300C               	movlw	12
  2815  077A  22B3               	fcall	_MFRC522_Rd
  2816  077B  3907               	andlw	7
  2817  077C  1283               	bcf	3,5	;RP0=0, select bank0
  2818  077D  1303               	bcf	3,6	;RP1=0, select bank0
  2819  077E  00A8               	movwf	??_MFRC522_ToCard
  2820  077F  0828               	movf	??_MFRC522_ToCard,w
  2821  0780  00B0               	movwf	MFRC522_ToCard@lastBits
  2822                           
  2823                           ;main.c: 250: if (lastBits)
  2824  0781  0830               	movf	MFRC522_ToCard@lastBits,w
  2825  0782  1903               	btfsc	3,2
  2826  0783  2FA8               	goto	l1428
  2827                           
  2828                           ;main.c: 251: {
  2829                           ;main.c: 252: *backLen = (n-1) * 8 + lastBits;
  2830  0784  0835               	movf	MFRC522_ToCard@n,w
  2831  0785  00A8               	movwf	??_MFRC522_ToCard
  2832  0786  01A9               	clrf	??_MFRC522_ToCard+1
  2833  0787  1003               	clrc
  2834  0788  0DA8               	rlf	??_MFRC522_ToCard,f
  2835  0789  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2836  078A  1003               	clrc
  2837  078B  0DA8               	rlf	??_MFRC522_ToCard,f
  2838  078C  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2839  078D  1003               	clrc
  2840  078E  0DA8               	rlf	??_MFRC522_ToCard,f
  2841  078F  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2842  0790  0830               	movf	MFRC522_ToCard@lastBits,w
  2843  0791  0728               	addwf	??_MFRC522_ToCard,w
  2844  0792  00AA               	movwf	??_MFRC522_ToCard+2
  2845  0793  3000               	movlw	0
  2846  0794  1803               	skipnc
  2847  0795  3001               	movlw	1
  2848  0796  0729               	addwf	??_MFRC522_ToCard+1,w
  2849  0797  00AB               	movwf	??_MFRC522_ToCard+3
  2850  0798  082A               	movf	??_MFRC522_ToCard+2,w
  2851  0799  3EF8               	addlw	248
  2852  079A  00AC               	movwf	??_MFRC522_ToCard+4
  2853  079B  082B               	movf	??_MFRC522_ToCard+3,w
  2854  079C  1803               	skipnc
  2855  079D  3E01               	addlw	1
  2856  079E  3EFF               	addlw	255
  2857  079F  00AD               	movwf	??_MFRC522_ToCard+5
  2858  07A0  0827               	movf	MFRC522_ToCard@backLen,w
  2859  07A1  0084               	movwf	4
  2860  07A2  082C               	movf	??_MFRC522_ToCard+4,w
  2861  07A3  1383               	bcf	3,7	;select IRP bank0
  2862  07A4  0080               	movwf	0
  2863  07A5  0A84               	incf	4,f
  2864  07A6  082D               	movf	??_MFRC522_ToCard+5,w
  2865  07A7  2FBB               	goto	L2
  2866  07A8                     l1428:	
  2867                           ;main.c: 253: }
  2868                           
  2869                           
  2870                           ;main.c: 254: else
  2871                           ;main.c: 255: {
  2872                           ;main.c: 256: *backLen = n * 8;
  2873  07A8  0835               	movf	MFRC522_ToCard@n,w
  2874  07A9  00A8               	movwf	??_MFRC522_ToCard
  2875  07AA  01A9               	clrf	??_MFRC522_ToCard+1
  2876  07AB  1003               	clrc
  2877  07AC  0DA8               	rlf	??_MFRC522_ToCard,f
  2878  07AD  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2879  07AE  1003               	clrc
  2880  07AF  0DA8               	rlf	??_MFRC522_ToCard,f
  2881  07B0  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2882  07B1  1003               	clrc
  2883  07B2  0DA8               	rlf	??_MFRC522_ToCard,f
  2884  07B3  0DA9               	rlf	??_MFRC522_ToCard+1,f
  2885  07B4  0827               	movf	MFRC522_ToCard@backLen,w
  2886  07B5  0084               	movwf	4
  2887  07B6  0828               	movf	??_MFRC522_ToCard,w
  2888  07B7  1383               	bcf	3,7	;select IRP bank0
  2889  07B8  0080               	movwf	0
  2890  07B9  0A84               	incf	4,f
  2891  07BA  0829               	movf	??_MFRC522_ToCard+1,w
  2892  07BB                     L2:	
  2893  07BB  0080               	movwf	0
  2894                           
  2895                           ;main.c: 257: }
  2896                           ;main.c: 258: if (n == 0)
  2897  07BC  08B5               	movf	MFRC522_ToCard@n,f
  2898  07BD  1D03               	skipz
  2899  07BE  2FC1               	goto	l1434
  2900                           
  2901                           ;main.c: 259: {
  2902                           ;main.c: 260: n = 1;
  2903  07BF  01B5               	clrf	MFRC522_ToCard@n
  2904  07C0  0AB5               	incf	MFRC522_ToCard@n,f
  2905  07C1                     l1434:	
  2906                           
  2907                           ;main.c: 261: }
  2908                           ;main.c: 262: if (n > 16)
  2909  07C1  3011               	movlw	17
  2910  07C2  0235               	subwf	MFRC522_ToCard@n,w
  2911  07C3  1C03               	skipc
  2912  07C4  2FC9               	goto	l1438
  2913                           
  2914                           ;main.c: 263: {
  2915                           ;main.c: 264: n = 16;
  2916  07C5  3010               	movlw	16
  2917  07C6  00A8               	movwf	??_MFRC522_ToCard
  2918  07C7  0828               	movf	??_MFRC522_ToCard,w
  2919  07C8  00B5               	movwf	MFRC522_ToCard@n
  2920  07C9                     l1438:	
  2921                           
  2922                           ;main.c: 265: }
  2923                           ;main.c: 267: for (i=0; i < n; i++)
  2924  07C9  01B3               	clrf	MFRC522_ToCard@i
  2925  07CA  01B4               	clrf	MFRC522_ToCard@i+1
  2926  07CB                     l1444:	
  2927  07CB  0835               	movf	MFRC522_ToCard@n,w
  2928  07CC  00A8               	movwf	??_MFRC522_ToCard
  2929  07CD  01A9               	clrf	??_MFRC522_ToCard+1
  2930  07CE  0829               	movf	??_MFRC522_ToCard+1,w
  2931  07CF  0234               	subwf	MFRC522_ToCard@i+1,w
  2932  07D0  1D03               	skipz
  2933  07D1  2FD4               	goto	u1165
  2934  07D2  0828               	movf	??_MFRC522_ToCard,w
  2935  07D3  0233               	subwf	MFRC522_ToCard@i,w
  2936  07D4                     u1165:	
  2937  07D4  1803               	btfsc	3,0
  2938  07D5  2FEA               	goto	l1446
  2939                           
  2940                           ;main.c: 268: {
  2941                           ;main.c: 269: backData[i] = MFRC522_Rd( 0x09 );
  2942  07D6  3009               	movlw	9
  2943  07D7  22B3               	fcall	_MFRC522_Rd
  2944  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  2945  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  2946  07DA  00A8               	movwf	??_MFRC522_ToCard
  2947  07DB  0833               	movf	MFRC522_ToCard@i,w
  2948  07DC  0726               	addwf	MFRC522_ToCard@backData,w
  2949  07DD  00A9               	movwf	??_MFRC522_ToCard+1
  2950  07DE  0829               	movf	??_MFRC522_ToCard+1,w
  2951  07DF  0084               	movwf	4
  2952  07E0  0828               	movf	??_MFRC522_ToCard,w
  2953  07E1  1383               	bcf	3,7	;select IRP bank0
  2954  07E2  0080               	movwf	0
  2955  07E3  3001               	movlw	1
  2956  07E4  07B3               	addwf	MFRC522_ToCard@i,f
  2957  07E5  1803               	skipnc
  2958  07E6  0AB4               	incf	MFRC522_ToCard@i+1,f
  2959  07E7  3000               	movlw	0
  2960  07E8  07B4               	addwf	MFRC522_ToCard@i+1,f
  2961  07E9  2FCB               	goto	l1444
  2962  07EA                     l1446:	
  2963                           
  2964                           ;main.c: 270: }
  2965                           ;main.c: 272: backData[i] = 0;
  2966  07EA  0833               	movf	MFRC522_ToCard@i,w
  2967  07EB  0726               	addwf	MFRC522_ToCard@backData,w
  2968  07EC  00A8               	movwf	??_MFRC522_ToCard
  2969  07ED  0828               	movf	??_MFRC522_ToCard,w
  2970  07EE  0084               	movwf	4
  2971  07EF  0180               	clrf	0
  2972                           
  2973                           ;main.c: 273: }
  2974                           ;main.c: 274: }
  2975  07F0  2FF7               	goto	l129
  2976  07F1                     l1448:	
  2977                           
  2978                           ;main.c: 275: else
  2979                           ;main.c: 276: {
  2980                           ;main.c: 277: _status = 2;
  2981  07F1  3002               	movlw	2
  2982  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  2983  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  2984  07F4  00A8               	movwf	??_MFRC522_ToCard
  2985  07F5  0828               	movf	??_MFRC522_ToCard,w
  2986  07F6  00AF               	movwf	MFRC522_ToCard@_status
  2987  07F7                     l129:	
  2988                           
  2989                           ;main.c: 278: }
  2990                           ;main.c: 279: }
  2991                           ;main.c: 282: return _status;
  2992  07F7  082F               	movf	MFRC522_ToCard@_status,w
  2993  07F8  0008               	return
  2994  07F9                     __end_of_MFRC522_ToCard:	
  2995                           
  2996                           	psect	text14
  2997  0282                     __ptext14:	
  2998 ;; *************** function _MFRC522_Clear_Bit *****************
  2999 ;; Defined at:
  3000 ;;		line 139 in file "main.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  addr            1    wreg     unsigned char 
  3003 ;;  mask            1    0[BANK0 ] unsigned char 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  addr            1    3[BANK0 ] unsigned char 
  3006 ;; Return value:  Size  Location     Type
  3007 ;;		None               void
  3008 ;; Registers used:
  3009 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/0
  3012 ;;		On exit  : 0/0
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3015 ;;      Params:         0       1       0       0
  3016 ;;      Locals:         0       1       0       0
  3017 ;;      Temps:          0       2       0       0
  3018 ;;      Totals:         0       4       0       0
  3019 ;;Total ram usage:        4 bytes
  3020 ;; Hardware stack levels used:    1
  3021 ;; Hardware stack levels required when called:    2
  3022 ;; This function calls:
  3023 ;;		_MFRC522_Rd
  3024 ;;		_MFRC522_Wr
  3025 ;; This function is called by:
  3026 ;;		_MFRC522_ToCard
  3027 ;;		_MFRC522_CRC
  3028 ;;		_MFRC522_AntiColl
  3029 ;;		_MFRC522_AntennaOff
  3030 ;;		_MFRC522_Halt
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           
  3035                           ;psect for function _MFRC522_Clear_Bit
  3036  0282                     _MFRC522_Clear_Bit:	
  3037                           
  3038                           ;incstack = 0
  3039                           ; Regs used in _MFRC522_Clear_Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3040                           ;MFRC522_Clear_Bit@addr stored from wreg
  3041  0282  1283               	bcf	3,5	;RP0=0, select bank0
  3042  0283  1303               	bcf	3,6	;RP1=0, select bank0
  3043  0284  00A3               	movwf	MFRC522_Clear_Bit@addr
  3044                           
  3045                           ;main.c: 141: MFRC522_Wr( addr, MFRC522_Rd( addr ) & (~mask) );
  3046  0285  0920               	comf	MFRC522_Clear_Bit@mask,w
  3047  0286  00A1               	movwf	??_MFRC522_Clear_Bit
  3048  0287  0823               	movf	MFRC522_Clear_Bit@addr,w
  3049  0288  22B3               	fcall	_MFRC522_Rd
  3050  0289  1283               	bcf	3,5	;RP0=0, select bank0
  3051  028A  1303               	bcf	3,6	;RP1=0, select bank0
  3052  028B  0521               	andwf	??_MFRC522_Clear_Bit,w
  3053  028C  00A2               	movwf	??_MFRC522_Clear_Bit+1
  3054  028D  0822               	movf	??_MFRC522_Clear_Bit+1,w
  3055  028E  00FB               	movwf	MFRC522_Wr@value
  3056  028F  0823               	movf	MFRC522_Clear_Bit@addr,w
  3057  0290  2273               	fcall	_MFRC522_Wr
  3058  0291  0008               	return
  3059  0292                     __end_of_MFRC522_Clear_Bit:	
  3060                           
  3061                           	psect	text15
  3062  037D                     __ptext15:	
  3063 ;; *************** function _MFRC522_Init *****************
  3064 ;; Defined at:
  3065 ;;		line 159 in file "main.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;		None               void
  3072 ;; Registers used:
  3073 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3079 ;;      Params:         0       0       0       0
  3080 ;;      Locals:         0       0       0       0
  3081 ;;      Temps:          0       1       0       0
  3082 ;;      Totals:         0       1       0       0
  3083 ;;Total ram usage:        1 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    4
  3086 ;; This function calls:
  3087 ;;		_MFRC522_AntennaOn
  3088 ;;		_MFRC522_Reset
  3089 ;;		_MFRC522_Wr
  3090 ;; This function is called by:
  3091 ;;		_main
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           
  3096                           ;psect for function _MFRC522_Init
  3097  037D                     _MFRC522_Init:	
  3098                           
  3099                           ;main.c: 161: TRISAbits.TRISA1 = 0;
  3100                           
  3101                           ;incstack = 0
  3102                           ; Regs used in _MFRC522_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3103  037D  1683               	bsf	3,5	;RP0=1, select bank1
  3104  037E  1303               	bcf	3,6	;RP1=0, select bank1
  3105  037F  1085               	bcf	5,1	;volatile
  3106                           
  3107                           ;main.c: 162: TRISAbits.TRISA0 = 0;
  3108  0380  1005               	bcf	5,0	;volatile
  3109                           
  3110                           ;main.c: 163: PORTAbits.RA1 = 1;
  3111  0381  1283               	bcf	3,5	;RP0=0, select bank0
  3112  0382  1303               	bcf	3,6	;RP1=0, select bank0
  3113  0383  1485               	bsf	5,1	;volatile
  3114                           
  3115                           ;main.c: 164: PORTAbits.RA0 = 1;
  3116  0384  1405               	bsf	5,0	;volatile
  3117                           
  3118                           ;main.c: 166: MFRC522_Reset();
  3119  0385  225C               	fcall	_MFRC522_Reset
  3120                           
  3121                           ;main.c: 168: MFRC522_Wr( 0x2A, 0x8D );
  3122  0386  308D               	movlw	141
  3123  0387  1283               	bcf	3,5	;RP0=0, select bank0
  3124  0388  1303               	bcf	3,6	;RP1=0, select bank0
  3125  0389  00A4               	movwf	??_MFRC522_Init
  3126  038A  0824               	movf	??_MFRC522_Init,w
  3127  038B  00FB               	movwf	MFRC522_Wr@value
  3128  038C  302A               	movlw	42
  3129  038D  2273               	fcall	_MFRC522_Wr
  3130                           
  3131                           ;main.c: 169: MFRC522_Wr( 0x2B, 0x3E );
  3132  038E  303E               	movlw	62
  3133  038F  1283               	bcf	3,5	;RP0=0, select bank0
  3134  0390  1303               	bcf	3,6	;RP1=0, select bank0
  3135  0391  00A4               	movwf	??_MFRC522_Init
  3136  0392  0824               	movf	??_MFRC522_Init,w
  3137  0393  00FB               	movwf	MFRC522_Wr@value
  3138  0394  302B               	movlw	43
  3139  0395  2273               	fcall	_MFRC522_Wr
  3140                           
  3141                           ;main.c: 170: MFRC522_Wr( 0x2D, 30 );
  3142  0396  301E               	movlw	30
  3143  0397  1283               	bcf	3,5	;RP0=0, select bank0
  3144  0398  1303               	bcf	3,6	;RP1=0, select bank0
  3145  0399  00A4               	movwf	??_MFRC522_Init
  3146  039A  0824               	movf	??_MFRC522_Init,w
  3147  039B  00FB               	movwf	MFRC522_Wr@value
  3148  039C  302D               	movlw	45
  3149  039D  2273               	fcall	_MFRC522_Wr
  3150                           
  3151                           ;main.c: 171: MFRC522_Wr( 0x2C, 0 );
  3152  039E  01FB               	clrf	MFRC522_Wr@value
  3153  039F  302C               	movlw	44
  3154  03A0  2273               	fcall	_MFRC522_Wr
  3155                           
  3156                           ;main.c: 173: MFRC522_Wr( 0x15, 0x40 );
  3157  03A1  3040               	movlw	64
  3158  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  3159  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  3160  03A4  00A4               	movwf	??_MFRC522_Init
  3161  03A5  0824               	movf	??_MFRC522_Init,w
  3162  03A6  00FB               	movwf	MFRC522_Wr@value
  3163  03A7  3015               	movlw	21
  3164  03A8  2273               	fcall	_MFRC522_Wr
  3165                           
  3166                           ;main.c: 174: MFRC522_Wr( 0x11, 0x3D );
  3167  03A9  303D               	movlw	61
  3168  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  3169  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  3170  03AC  00A4               	movwf	??_MFRC522_Init
  3171  03AD  0824               	movf	??_MFRC522_Init,w
  3172  03AE  00FB               	movwf	MFRC522_Wr@value
  3173  03AF  3011               	movlw	17
  3174  03B0  2273               	fcall	_MFRC522_Wr
  3175                           
  3176                           ;main.c: 179: MFRC522_AntennaOn();
  3177  03B1  2253               	fcall	_MFRC522_AntennaOn
  3178  03B2  0008               	return
  3179  03B3                     __end_of_MFRC522_Init:	
  3180                           
  3181                           	psect	text16
  3182  025C                     __ptext16:	
  3183 ;; *************** function _MFRC522_Reset *****************
  3184 ;; Defined at:
  3185 ;;		line 147 in file "main.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;		None               void
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3199 ;;      Params:         0       0       0       0
  3200 ;;      Locals:         0       0       0       0
  3201 ;;      Temps:          0       1       0       0
  3202 ;;      Totals:         0       1       0       0
  3203 ;;Total ram usage:        1 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    2
  3206 ;; This function calls:
  3207 ;;		_MFRC522_Wr
  3208 ;; This function is called by:
  3209 ;;		_MFRC522_Init
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           
  3214                           ;psect for function _MFRC522_Reset
  3215  025C                     _MFRC522_Reset:	
  3216                           
  3217                           ;main.c: 149: MFRC522_Wr( 0x01, 0x0F );
  3218                           
  3219                           ;incstack = 0
  3220                           ; Regs used in _MFRC522_Reset: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3221  025C  300F               	movlw	15
  3222  025D  1283               	bcf	3,5	;RP0=0, select bank0
  3223  025E  1303               	bcf	3,6	;RP1=0, select bank0
  3224  025F  00A0               	movwf	??_MFRC522_Reset
  3225  0260  0820               	movf	??_MFRC522_Reset,w
  3226  0261  00FB               	movwf	MFRC522_Wr@value
  3227  0262  3001               	movlw	1
  3228  0263  2273               	fcall	_MFRC522_Wr
  3229  0264  0008               	return
  3230  0265                     __end_of_MFRC522_Reset:	
  3231                           
  3232                           	psect	text17
  3233  0253                     __ptext17:	
  3234 ;; *************** function _MFRC522_AntennaOn *****************
  3235 ;; Defined at:
  3236 ;;		line 151 in file "main.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;		None
  3241 ;; Return value:  Size  Location     Type
  3242 ;;		None               void
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3250 ;;      Params:         0       0       0       0
  3251 ;;      Locals:         0       0       0       0
  3252 ;;      Temps:          0       1       0       0
  3253 ;;      Totals:         0       1       0       0
  3254 ;;Total ram usage:        1 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    3
  3257 ;; This function calls:
  3258 ;;		_MFRC522_Set_Bit
  3259 ;; This function is called by:
  3260 ;;		_MFRC522_Init
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           
  3265                           ;psect for function _MFRC522_AntennaOn
  3266  0253                     _MFRC522_AntennaOn:	
  3267                           
  3268                           ;main.c: 153: MFRC522_Set_Bit( 0x14, 0x03 );
  3269                           
  3270                           ;incstack = 0
  3271                           ; Regs used in _MFRC522_AntennaOn: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3272  0253  3003               	movlw	3
  3273  0254  1283               	bcf	3,5	;RP0=0, select bank0
  3274  0255  1303               	bcf	3,6	;RP1=0, select bank0
  3275  0256  00A3               	movwf	??_MFRC522_AntennaOn
  3276  0257  0823               	movf	??_MFRC522_AntennaOn,w
  3277  0258  00A0               	movwf	MFRC522_Set_Bit@mask
  3278  0259  3014               	movlw	20
  3279  025A  2265               	fcall	_MFRC522_Set_Bit
  3280  025B  0008               	return
  3281  025C                     __end_of_MFRC522_AntennaOn:	
  3282                           
  3283                           	psect	text18
  3284  0265                     __ptext18:	
  3285 ;; *************** function _MFRC522_Set_Bit *****************
  3286 ;; Defined at:
  3287 ;;		line 143 in file "main.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  addr            1    wreg     unsigned char 
  3290 ;;  mask            1    0[BANK0 ] unsigned char 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  addr            1    2[BANK0 ] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;		None               void
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3302 ;;      Params:         0       1       0       0
  3303 ;;      Locals:         0       1       0       0
  3304 ;;      Temps:          0       1       0       0
  3305 ;;      Totals:         0       3       0       0
  3306 ;;Total ram usage:        3 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    2
  3309 ;; This function calls:
  3310 ;;		_MFRC522_Rd
  3311 ;;		_MFRC522_Wr
  3312 ;; This function is called by:
  3313 ;;		_MFRC522_AntennaOn
  3314 ;;		_MFRC522_ToCard
  3315 ;;		_MFRC522_CRC
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           
  3320                           ;psect for function _MFRC522_Set_Bit
  3321  0265                     _MFRC522_Set_Bit:	
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _MFRC522_Set_Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3325                           ;MFRC522_Set_Bit@addr stored from wreg
  3326  0265  1283               	bcf	3,5	;RP0=0, select bank0
  3327  0266  1303               	bcf	3,6	;RP1=0, select bank0
  3328  0267  00A2               	movwf	MFRC522_Set_Bit@addr
  3329                           
  3330                           ;main.c: 145: MFRC522_Wr( addr, MFRC522_Rd( addr ) | mask );
  3331  0268  0822               	movf	MFRC522_Set_Bit@addr,w
  3332  0269  22B3               	fcall	_MFRC522_Rd
  3333  026A  1283               	bcf	3,5	;RP0=0, select bank0
  3334  026B  1303               	bcf	3,6	;RP1=0, select bank0
  3335  026C  0420               	iorwf	MFRC522_Set_Bit@mask,w
  3336  026D  00A1               	movwf	??_MFRC522_Set_Bit
  3337  026E  0821               	movf	??_MFRC522_Set_Bit,w
  3338  026F  00FB               	movwf	MFRC522_Wr@value
  3339  0270  0822               	movf	MFRC522_Set_Bit@addr,w
  3340  0271  2273               	fcall	_MFRC522_Wr
  3341  0272  0008               	return
  3342  0273                     __end_of_MFRC522_Set_Bit:	
  3343                           
  3344                           	psect	text19
  3345  0273                     __ptext19:	
  3346 ;; *************** function _MFRC522_Wr *****************
  3347 ;; Defined at:
  3348 ;;		line 123 in file "main.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;  addr            1    wreg     unsigned char 
  3351 ;;  value           1   11[COMMON] unsigned char 
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;  addr            1   13[COMMON] unsigned char 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;		None               void
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3363 ;;      Params:         1       0       0       0
  3364 ;;      Locals:         1       0       0       0
  3365 ;;      Temps:          1       0       0       0
  3366 ;;      Totals:         3       0       0       0
  3367 ;;Total ram usage:        3 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    1
  3370 ;; This function calls:
  3371 ;;		_SPI_transfer
  3372 ;; This function is called by:
  3373 ;;		_MFRC522_Clear_Bit
  3374 ;;		_MFRC522_Set_Bit
  3375 ;;		_MFRC522_Reset
  3376 ;;		_MFRC522_Init
  3377 ;;		_MFRC522_ToCard
  3378 ;;		_MFRC522_Request
  3379 ;;		_MFRC522_CRC
  3380 ;;		_MFRC522_AntiColl
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           
  3385                           ;psect for function _MFRC522_Wr
  3386  0273                     _MFRC522_Wr:	
  3387                           
  3388                           ;incstack = 0
  3389                           ; Regs used in _MFRC522_Wr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3390                           ;MFRC522_Wr@addr stored from wreg
  3391  0273  00FD               	movwf	MFRC522_Wr@addr
  3392                           
  3393                           ;main.c: 125: PORTAbits.RA1 = 0;
  3394  0274  1283               	bcf	3,5	;RP0=0, select bank0
  3395  0275  1303               	bcf	3,6	;RP1=0, select bank0
  3396  0276  1085               	bcf	5,1	;volatile
  3397                           
  3398                           ;main.c: 126: SPI_transfer( ( addr << 1 ) & 0x7E );
  3399  0277  087D               	movf	MFRC522_Wr@addr,w
  3400  0278  00FC               	movwf	??_MFRC522_Wr
  3401  0279  077C               	addwf	??_MFRC522_Wr,w
  3402  027A  397E               	andlw	126
  3403  027B  2505               	fcall	_SPI_transfer
  3404                           
  3405                           ;main.c: 127: SPI_transfer( value );
  3406  027C  087B               	movf	MFRC522_Wr@value,w
  3407  027D  2505               	fcall	_SPI_transfer
  3408                           
  3409                           ;main.c: 128: PORTAbits.RA1 = 1;
  3410  027E  1283               	bcf	3,5	;RP0=0, select bank0
  3411  027F  1303               	bcf	3,6	;RP1=0, select bank0
  3412  0280  1485               	bsf	5,1	;volatile
  3413  0281  0008               	return
  3414  0282                     __end_of_MFRC522_Wr:	
  3415                           
  3416                           	psect	text20
  3417  02B3                     __ptext20:	
  3418 ;; *************** function _MFRC522_Rd *****************
  3419 ;; Defined at:
  3420 ;;		line 130 in file "main.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  addr            1    wreg     unsigned char 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;  addr            1    9[COMMON] unsigned char 
  3425 ;;  value           1   10[COMMON] unsigned char 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      unsigned char 
  3428 ;; Registers used:
  3429 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3435 ;;      Params:         0       0       0       0
  3436 ;;      Locals:         2       0       0       0
  3437 ;;      Temps:          1       0       0       0
  3438 ;;      Totals:         3       0       0       0
  3439 ;;Total ram usage:        3 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    1
  3442 ;; This function calls:
  3443 ;;		_SPI_transfer
  3444 ;; This function is called by:
  3445 ;;		_MFRC522_Clear_Bit
  3446 ;;		_MFRC522_Set_Bit
  3447 ;;		_MFRC522_ToCard
  3448 ;;		_MFRC522_CRC
  3449 ;;		_MFRC522_Auth
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           
  3454                           ;psect for function _MFRC522_Rd
  3455  02B3                     _MFRC522_Rd:	
  3456                           
  3457                           ;incstack = 0
  3458                           ; Regs used in _MFRC522_Rd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3459                           ;MFRC522_Rd@addr stored from wreg
  3460  02B3  00F9               	movwf	MFRC522_Rd@addr
  3461                           
  3462                           ;main.c: 132: char value;
  3463                           ;main.c: 133: PORTAbits.RA1 = 0;
  3464  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  3465  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  3466  02B6  1085               	bcf	5,1	;volatile
  3467                           
  3468                           ;main.c: 134: SPI_transfer( (( addr << 1 ) & 0x7E) | 0x80 );
  3469  02B7  0879               	movf	MFRC522_Rd@addr,w
  3470  02B8  00F8               	movwf	??_MFRC522_Rd
  3471  02B9  0778               	addwf	??_MFRC522_Rd,w
  3472  02BA  397E               	andlw	126
  3473  02BB  3880               	iorlw	128
  3474  02BC  2505               	fcall	_SPI_transfer
  3475                           
  3476                           ;main.c: 135: value = SPI_transfer( 0x00 );
  3477  02BD  3000               	movlw	0
  3478  02BE  2505               	fcall	_SPI_transfer
  3479  02BF  00F8               	movwf	??_MFRC522_Rd
  3480  02C0  0878               	movf	??_MFRC522_Rd,w
  3481  02C1  00FA               	movwf	MFRC522_Rd@value
  3482                           
  3483                           ;main.c: 136: PORTAbits.RA1 = 1;
  3484  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  3485  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  3486  02C4  1485               	bsf	5,1	;volatile
  3487                           
  3488                           ;main.c: 137: return value;
  3489  02C5  087A               	movf	MFRC522_Rd@value,w
  3490  02C6  0008               	return
  3491  02C7                     __end_of_MFRC522_Rd:	
  3492                           
  3493                           	psect	text21
  3494  0505                     __ptext21:	
  3495 ;; *************** function _SPI_transfer *****************
  3496 ;; Defined at:
  3497 ;;		line 42 in file "SPI.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  data            1    wreg     unsigned char 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  data            1    7[COMMON] unsigned char 
  3502 ;;  i               2    5[COMMON] int 
  3503 ;;  i               2    3[COMMON] int 
  3504 ;;  ret             1    1[COMMON] unsigned char 
  3505 ;;  ret             1    2[COMMON] unsigned char 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  1    wreg      unsigned char 
  3508 ;; Registers used:
  3509 ;;		wreg, status,2, status,0, btemp+1
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3515 ;;      Params:         0       0       0       0
  3516 ;;      Locals:         7       0       0       0
  3517 ;;      Temps:          1       0       0       0
  3518 ;;      Totals:         8       0       0       0
  3519 ;;Total ram usage:        8 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; This function calls:
  3522 ;;		Nothing
  3523 ;; This function is called by:
  3524 ;;		_MFRC522_Wr
  3525 ;;		_MFRC522_Rd
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           
  3530                           ;psect for function _SPI_transfer
  3531  0505                     _SPI_transfer:	
  3532                           
  3533                           ;incstack = 0
  3534                           ; Regs used in _SPI_transfer: [wreg+status,2+status,0+btemp+1]
  3535                           ;SPI_transfer@data stored from wreg
  3536  0505  00F7               	movwf	SPI_transfer@data
  3537                           
  3538                           ;SPI.c: 44: unsigned char ret;
  3539                           ;SPI.c: 45: if(_mode==1 || _mode==3)
  3540  0506  1283               	bcf	3,5	;RP0=0, select bank0
  3541  0507  1303               	bcf	3,6	;RP1=0, select bank0
  3542  0508  086A               	movf	__mode,w
  3543  0509  3A01               	xorlw	1
  3544  050A  1903               	skipnz
  3545  050B  2D10               	goto	l1296
  3546  050C  086A               	movf	__mode,w
  3547  050D  3A03               	xorlw	3
  3548  050E  1D03               	skipz
  3549  050F  2D48               	goto	l1324
  3550  0510                     l1296:	
  3551                           
  3552                           ;SPI.c: 46: {
  3553                           ;SPI.c: 47: for(int i=0;i<8;i++)
  3554  0510  01F3               	clrf	SPI_transfer@i
  3555  0511  01F4               	clrf	SPI_transfer@i+1
  3556  0512                     L3:	
  3557  0512  0874               	movf	SPI_transfer@i+1,w
  3558  0513  3A80               	xorlw	128
  3559  0514  00FF               	movwf	127
  3560  0515  3080               	movlw	128
  3561  0516  027F               	subwf	127,w
  3562  0517  1D03               	skipz
  3563  0518  2D1B               	goto	u965
  3564  0519  3008               	movlw	8
  3565  051A  0273               	subwf	SPI_transfer@i,w
  3566  051B                     u965:	
  3567  051B  1803               	btfsc	3,0
  3568  051C  2D88               	goto	l1346
  3569                           
  3570                           ;SPI.c: 48: {
  3571                           ;SPI.c: 50: if(data & 0x80)PORTB |= (1<<6);
  3572  051D  1FF7               	btfss	SPI_transfer@data,7
  3573  051E  2D23               	goto	l1304
  3574  051F  1283               	bcf	3,5	;RP0=0, select bank0
  3575  0520  1303               	bcf	3,6	;RP1=0, select bank0
  3576  0521  1706               	bsf	6,6	;volatile
  3577  0522  2D29               	goto	l48
  3578  0523                     l1304:	
  3579                           
  3580                           ;SPI.c: 51: else PORTB &= ~(1<<6);
  3581  0523  30BF               	movlw	191
  3582  0524  00F0               	movwf	??_SPI_transfer
  3583  0525  0870               	movf	??_SPI_transfer,w
  3584  0526  1283               	bcf	3,5	;RP0=0, select bank0
  3585  0527  1303               	bcf	3,6	;RP1=0, select bank0
  3586  0528  0586               	andwf	6,f	;volatile
  3587  0529                     l48:	
  3588                           
  3589                           ;SPI.c: 53: PORTB ^= (1<<7);
  3590  0529  3080               	movlw	128
  3591  052A  00F0               	movwf	??_SPI_transfer
  3592  052B  0870               	movf	??_SPI_transfer,w
  3593  052C  0686               	xorwf	6,f	;volatile
  3594                           
  3595                           ;SPI.c: 54: if(PORTB & (1<<5))ret|=1;
  3596  052D  1A86               	btfsc	6,5	;volatile
  3597  052E  1472               	bsf	SPI_transfer@ret,0
  3598                           
  3599                           ;SPI.c: 55: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3600  052F  300D               	movlw	13
  3601  0530  00F0               	movwf	??_SPI_transfer
  3602  0531                     u1887:	
  3603  0531  0BF0               	decfsz	??_SPI_transfer,f
  3604  0532  2D31               	goto	u1887
  3605                           
  3606                           ;SPI.c: 56: PORTB ^= (1<<7);
  3607  0533  3080               	movlw	128
  3608  0534  00F0               	movwf	??_SPI_transfer
  3609  0535  0870               	movf	??_SPI_transfer,w
  3610  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3611  0537  1303               	bcf	3,6	;RP1=0, select bank0
  3612  0538  0686               	xorwf	6,f	;volatile
  3613                           
  3614                           ;SPI.c: 58: ret<<=1;
  3615  0539  1003               	clrc
  3616  053A  0DF2               	rlf	SPI_transfer@ret,f
  3617                           
  3618                           ;SPI.c: 59: data<<=1;
  3619  053B  1003               	clrc
  3620  053C  0DF7               	rlf	SPI_transfer@data,f
  3621                           
  3622                           ;SPI.c: 60: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3623  053D  300D               	movlw	13
  3624  053E  00F0               	movwf	??_SPI_transfer
  3625  053F                     u1897:	
  3626  053F  0BF0               	decfsz	??_SPI_transfer,f
  3627  0540  2D3F               	goto	u1897
  3628  0541  3001               	movlw	1
  3629  0542  07F3               	addwf	SPI_transfer@i,f
  3630  0543  1803               	skipnc
  3631  0544  0AF4               	incf	SPI_transfer@i+1,f
  3632  0545  3000               	movlw	0
  3633  0546  07F4               	addwf	SPI_transfer@i+1,f
  3634  0547  2D12               	goto	L3
  3635  0548                     l1324:	
  3636                           ;SPI.c: 61: }
  3637                           ;SPI.c: 62: }
  3638                           
  3639                           
  3640                           ;SPI.c: 63: else
  3641                           ;SPI.c: 64: {
  3642                           ;SPI.c: 65: unsigned char ret;
  3643                           ;SPI.c: 66: for(int i=0;i<8;i++)
  3644  0548  01F5               	clrf	SPI_transfer@i_178
  3645  0549  01F6               	clrf	SPI_transfer@i_178+1
  3646  054A  0876               	movf	SPI_transfer@i_178+1,w
  3647  054B  3A80               	xorlw	128
  3648  054C  00FF               	movwf	127
  3649  054D  3080               	movlw	128
  3650  054E  027F               	subwf	127,w
  3651  054F  1D03               	skipz
  3652  0550  2D53               	goto	u1005
  3653  0551  3008               	movlw	8
  3654  0552  0275               	subwf	SPI_transfer@i_178,w
  3655  0553                     u1005:	
  3656  0553  1803               	btfsc	3,0
  3657  0554  2D88               	goto	l1346
  3658  0555                     l51:	
  3659                           
  3660                           ;SPI.c: 67: {
  3661                           ;SPI.c: 69: if(PORTB & (1<<5))ret|=1;
  3662  0555  1283               	bcf	3,5	;RP0=0, select bank0
  3663  0556  1303               	bcf	3,6	;RP1=0, select bank0
  3664  0557  1A86               	btfsc	6,5	;volatile
  3665  0558  1471               	bsf	SPI_transfer@ret_177,0
  3666                           
  3667                           ;SPI.c: 70: PORTB ^= (1<<7);
  3668  0559  3080               	movlw	128
  3669  055A  00F0               	movwf	??_SPI_transfer
  3670  055B  0870               	movf	??_SPI_transfer,w
  3671  055C  0686               	xorwf	6,f	;volatile
  3672                           
  3673                           ;SPI.c: 73: if(data & 0x80)PORTB |= (1<<6);
  3674  055D  1FF7               	btfss	SPI_transfer@data,7
  3675  055E  2D61               	goto	l1338
  3676  055F  1706               	bsf	6,6	;volatile
  3677  0560  2D65               	goto	l1340
  3678  0561                     l1338:	
  3679                           
  3680                           ;SPI.c: 74: else PORTB &= ~(1<<6);
  3681  0561  30BF               	movlw	191
  3682  0562  00F0               	movwf	??_SPI_transfer
  3683  0563  0870               	movf	??_SPI_transfer,w
  3684  0564  0586               	andwf	6,f	;volatile
  3685  0565                     l1340:	
  3686                           
  3687                           ;SPI.c: 75: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3688  0565  300D               	movlw	13
  3689  0566  00F0               	movwf	??_SPI_transfer
  3690  0567                     u1907:	
  3691  0567  0BF0               	decfsz	??_SPI_transfer,f
  3692  0568  2D67               	goto	u1907
  3693                           
  3694                           ;SPI.c: 76: PORTB ^= (1<<7);
  3695  0569  3080               	movlw	128
  3696  056A  00F0               	movwf	??_SPI_transfer
  3697  056B  0870               	movf	??_SPI_transfer,w
  3698  056C  1283               	bcf	3,5	;RP0=0, select bank0
  3699  056D  1303               	bcf	3,6	;RP1=0, select bank0
  3700  056E  0686               	xorwf	6,f	;volatile
  3701                           
  3702                           ;SPI.c: 78: ret<<=1;
  3703  056F  1003               	clrc
  3704  0570  0DF1               	rlf	SPI_transfer@ret_177,f
  3705                           
  3706                           ;SPI.c: 79: data<<=1;
  3707  0571  1003               	clrc
  3708  0572  0DF7               	rlf	SPI_transfer@data,f
  3709                           
  3710                           ;SPI.c: 80: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3711  0573  300D               	movlw	13
  3712  0574  00F0               	movwf	??_SPI_transfer
  3713  0575                     u1917:	
  3714  0575  0BF0               	decfsz	??_SPI_transfer,f
  3715  0576  2D75               	goto	u1917
  3716  0577  3001               	movlw	1
  3717  0578  07F5               	addwf	SPI_transfer@i_178,f
  3718  0579  1803               	skipnc
  3719  057A  0AF6               	incf	SPI_transfer@i_178+1,f
  3720  057B  3000               	movlw	0
  3721  057C  07F6               	addwf	SPI_transfer@i_178+1,f
  3722  057D  0876               	movf	SPI_transfer@i_178+1,w
  3723  057E  3A80               	xorlw	128
  3724  057F  00FF               	movwf	127
  3725  0580  3080               	movlw	128
  3726  0581  027F               	subwf	127,w
  3727  0582  1D03               	skipz
  3728  0583  2D86               	goto	u1035
  3729  0584  3008               	movlw	8
  3730  0585  0275               	subwf	SPI_transfer@i_178,w
  3731  0586                     u1035:	
  3732  0586  1C03               	skipc
  3733  0587  2D55               	goto	l51
  3734  0588                     l1346:	
  3735                           
  3736                           ;SPI.c: 81: }
  3737                           ;SPI.c: 82: }
  3738                           ;SPI.c: 83: return ret;
  3739  0588  0872               	movf	SPI_transfer@ret,w
  3740  0589  0008               	return
  3741  058A                     __end_of_SPI_transfer:	
  3742  007E                     btemp	set	126	;btemp
  3743  007E                     wtemp	set	126
  3744  007E                     wtemp0	set	126
  3745  0080                     wtemp1	set	128
  3746  0082                     wtemp2	set	130
  3747  0084                     wtemp3	set	132
  3748  0086                     wtemp4	set	134
  3749  0088                     wtemp5	set	136
  3750  007F                     wtemp6	set	127
  3751  007E                     ttemp	set	126
  3752  007E                     ttemp0	set	126
  3753  0081                     ttemp1	set	129
  3754  0084                     ttemp2	set	132
  3755  0087                     ttemp3	set	135
  3756  007F                     ttemp4	set	127
  3757  007E                     ltemp	set	126
  3758  007E                     ltemp0	set	126
  3759  0082                     ltemp1	set	130
  3760  0086                     ltemp2	set	134
  3761  0080                     ltemp3	set	128


Data Sizes:
    Strings     42
    Constant    10
    Data        0
    BSS         18
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     56      75
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[3]), STR_3(CODE[9]), 
		 -> STR_2(CODE[16]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S367$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    MFRC522_ReadCardSerial@str	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_isCard@TagType	PTR unsigned char  size(1) Largest target is 2
		 -> main@TagType(BANK0[2]), 

    MFRC522_AntiColl@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_SelectTag@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_CRC@dataOut	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_CRC@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_Request@TagType	PTR unsigned char  size(1) Largest target is 2
		 -> main@TagType(BANK0[2]), 

    MFRC522_ToCard@backData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[2]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_ToCard@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> MFRC522_AntiColl@unLen(BANK0[2]), MFRC522_Read@unLen(COMMON[2]), MFRC522_Write@recvBits(COMMON[2]), MFRC522_Auth@recvBits(COMMON[2]), 
		 -> MFRC522_Halt@unLen(COMMON[2]), MFRC522_SelectTag@recvBits(BANK0[2]), MFRC522_Request@backBits(BANK0[2]), 

    MFRC522_ToCard@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[2]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 


Critical Paths under _main in COMMON

    _printf->___lwmod
    ___lwmod->___lwdiv
    _MFRC522_Request->_MFRC522_Wr
    _MFRC522_CRC->_MFRC522_Wr
    _MFRC522_AntiColl->_MFRC522_Wr
    _MFRC522_ToCard->_MFRC522_Wr
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Init->_MFRC522_Wr
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_SPI_transfer

Critical Paths under _main in BANK0

    _main->_MFRC522_SelectTag
    _MFRC522_isCard->_MFRC522_Request
    _MFRC522_Request->_MFRC522_ToCard
    _MFRC522_SelectTag->_MFRC522_ToCard
    _MFRC522_CRC->_MFRC522_Clear_Bit
    _MFRC522_ReadCardSerial->_MFRC522_AntiColl
    _MFRC522_AntiColl->_MFRC522_ToCard
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_Init->_MFRC522_AntennaOn
    _MFRC522_AntennaOn->_MFRC522_Set_Bit

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   42276
                                             42 BANK0     14    14      0
                       _MFRC522_Init
             _MFRC522_ReadCardSerial
                  _MFRC522_SelectTag
                     _MFRC522_isCard
                           _SPI_init
                          _UART_init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              14    12      2    1234
                                              0 BANK0     14    12      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MFRC522_isCard                                       2     2      0    9704
                                             31 BANK0      2     2      0
                    _MFRC522_Request
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Request                                      9     8      1    9644
                                             22 BANK0      9     8      1
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_SelectTag                                   20    20      0   14796
                                             22 BANK0     20    20      0
                        _MFRC522_CRC
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (2) _MFRC522_CRC                                          6     4      2    6301
                                              4 BANK0      6     4      2
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_ReadCardSerial                               3     3      0   11856
                                             33 BANK0      3     3      0
                   _MFRC522_AntiColl
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntiColl                                    11    11      0   11751
                                             22 BANK0     11    11      0
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_ToCard                                      18    14      4    8102
                                              4 BANK0     18    14      4
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    4     3      1    2019
                                              0 BANK0      4     3      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Init                                         1     1      0    4419
                                              4 BANK0      1     1      0
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Reset                                        1     1      0    1296
                                              0 BANK0      1     1      0
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntennaOn                                    1     1      0    1827
                                              3 BANK0      1     1      0
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      3     2      1    1827
                                              0 BANK0      3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           3     2      1    1296
                                             11 COMMON     3     2      1
                         _MFRC522_Rd (ARG)
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           3     3      0     209
                                              8 COMMON     3     3      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _SPI_transfer                                         8     8      0     164
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MFRC522_Init
     _MFRC522_AntennaOn
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
     _MFRC522_Reset
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_Wr
       _MFRC522_Rd (ARG)
         _SPI_transfer
       _SPI_transfer (ARG)
   _MFRC522_ReadCardSerial
     _MFRC522_AntiColl
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_SelectTag
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_isCard
     _MFRC522_Request
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _SPI_init
   _UART_init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     38      4B       3       93.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      59       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      59      10        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Apr 09 16:37:43 2015

                              pc 0002                      __CFG_CP$OFF 0000                     MFRC522_CRC@i 0028  
                   MFRC522_CRC@n 0027                               l51 0555                               l37 030A  
                             l71 02ED                               l48 0529                               l64 02E2  
                             l67 02E8                               fsr 0004                      main@TagType 0056  
                    __CFG_LVP$ON 0000                              l144 037B                              l129 07F7  
                            l241 0645                              l243 062F                              l255 06C5  
                            l198 0503                     __CFG_CPD$OFF 0000                              u965 051B  
                            fsr0 0004                              indf 0000                     __CFG_FOSC$HS 0000  
                 ??_MFRC522_Init 0024            __size_of_SPI_transfer 0085                             l1304 0523  
                           l1400 0737                             l1402 073D                             l1340 0565  
                           l1324 0548                             l1420 076E                             l1408 0753  
                           l1338 0561                             l1346 0588                             l1434 07C1  
                           l1506 0437                             l1444 07CB                             l1428 07A8  
                           l1620 0475                             l1612 045F                             l1446 07EA  
                           l1438 07C9                             l1382 06DF                             l1534 04F7  
                           l1630 04A6                             l1550 03BB                             l1702 068A  
                           l1296 0510                             l1448 07F1                             l1392 0705  
                           l1384 06E7                             l1376 06D0                             l1528 04E5  
                           l1552 03C9                             l1712 0696                             l1394 0725  
                           l1378 06D6                             l1642 02A0                             l1562 03EA  
                           l1706 0690                             l1714 0616                             l1492 0405  
                           l1628 04A5                             l1580 0336                             l1494 041D  
                           l1478 0377                             l1558 03DF                             l1574 031A  
                           l1576 0328                             l1584 0341                             l1672 0631  
                           l1658 02DB                             l1498 0429                             l1684 065F  
                           l1668 062B                             l1844 05B5                             l1836 0592  
                           l1598 030E                             l1694 0671                             l1862 05F7  
                           l1838 05A0                             l1688 066B                             l1856 05D3  
                           l1864 0600                             STR_1 0021                             STR_2 0011  
                           STR_3 002F                             STR_4 0038                             STR_5 0036  
                           STR_6 002D                             u1005 0553                             u1035 0586  
                           u1045 070E                             u1315 03BE                             u1165 07D4  
                           u1405 032E                             u1335 03CA                             u1415 0337  
                           u1345 03D6                             u1355 03E0                             u1385 031D  
                           u1555 0680                             u1820 05B2                             u1907 0567  
                           u1917 0575                             u1790 059D                             u1855 05D1  
                           u1865 05F5                             u1877 0608                             u1887 0531  
                           u1897 053F                             _RCIF 0065                             _TXIF 0064  
                           _main 058A            MFRC522_AntiColl@unLen 003C                             btemp 007E  
                  __CFG_BOREN$ON 0000                             ltemp 007E                             start 0000  
                           ttemp 007E                             wtemp 007E                 _MFRC522_AntiColl 04A8  
                 MFRC522_Rd@addr 0079                  ??_MFRC522_Reset 0020                   MFRC522_Wr@addr 007D  
                          ?_main 0070          ?_MFRC522_ReadCardSerial 0070                    __CFG_WDTE$OFF 0000  
                __end_of___lwdiv 03F1                  __end_of___lwmod 0348                 SPI_transfer@data 0077  
                          _RCREG 001A                     _SPI_transfer 0505                            _SPBRG 0099  
                          _PORTB 0006                            _TRISB 0086                            _TXREG 0019  
            __size_of_MFRC522_Rd 0014              __size_of_MFRC522_Wr 000F                            __mode 006A  
             __size_of_UART_init 0011        MFRC522_SelectTag@recvBits 0047                  __end_of_dpowers 0011  
                          _count 0068           MFRC522_AntiColl@serNum 0040                            _putch 02DD  
                          pclath 000A                            ltemp0 007E                 __end_of_SPI_init 0314  
                          ltemp1 0082                            ltemp2 0086                            ltemp3 0080  
              _MFRC522_Clear_Bit 0282                            ttemp0 007E                            ttemp1 0081  
                          ttemp2 0084                            ttemp3 0087                            ttemp4 007F  
                          status 0003                            wtemp0 007E                            wtemp1 0080  
                          wtemp2 0082                            wtemp3 0084                            wtemp4 0086  
                          wtemp5 0088                            wtemp6 007F               ?_MFRC522_Clear_Bit 0020  
        MFRC522_SelectTag@buffer 003B          MFRC522_SelectTag@serNum 0046                _MFRC522_AntennaOn 0253  
                 __CFG_MCLRE$OFF 0000                  __initialization 07F9                     __end_of_main 060F  
             ?_MFRC522_AntennaOn 0070              ??_MFRC522_Clear_Bit 0021        MFRC522_ReadCardSerial@str 0043  
                MFRC522_Rd@value 007A   __end_of_MFRC522_ReadCardSerial 02DD                 ??_MFRC522_ToCard 0028  
       __size_of_MFRC522_Set_Bit 000E         __size_of_MFRC522_Request 0035                           ??_main 004A  
            ??_MFRC522_AntennaOn 0023                  MFRC522_ToCard@i 0033                  MFRC522_ToCard@n 0035  
               ??_MFRC522_isCard 003F            MFRC522_ToCard@backLen 0027                  MFRC522_Wr@value 007B  
      __end_of_MFRC522_Clear_Bit 0292            MFRC522_ToCard@_status 002F            MFRC522_ToCard@command 0032  
              SPI_transfer@i_178 0075                           ?_putch 0070                _MFRC522_SelectTag 044C  
          MFRC522_ToCard@sendLen 0025               ?_MFRC522_SelectTag 0070            MFRC522_ToCard@waitIRq 002E  
      __end_of_MFRC522_AntennaOn 025C                   __CFG_PWRTE$OFF 0000             __size_of_MFRC522_CRC 005B  
            ??_MFRC522_SelectTag 0036                __end_of_UART_init 02B3             __end_of_MFRC522_Init 03B3  
        MFRC522_AntiColl@_status 003E                        ??___lwdiv 0074                        ??___lwmod 007C  
                         _buffer 0058                           _printf 060F        __end_of_MFRC522_SelectTag 04A8  
       MFRC522_SelectTag@_status 0044          __end_of__initialization 07FE           MFRC522_Request@TagType 0036  
                   ??_MFRC522_Rd 0078                     ??_MFRC522_Wr 007C            MFRC522_isCard@TagType 0040  
                   SPI_init@mode 0071                   __pcstackCOMMON 0070                    __end_of_putch 02F4  
         MFRC522_Request@_status 003C                        ?_SPI_init 0070           MFRC522_Request@reqMode 003B  
       __end_of_MFRC522_AntiColl 0505                ??_MFRC522_Set_Bit 0021               __end_of_MFRC522_Rd 02C7  
             __end_of_MFRC522_Wr 0282                ??_MFRC522_Request 0037       __size_of_MFRC522_Clear_Bit 0010  
                        ??_putch 0070                       __pbssBANK0 0058           MFRC522_ToCard@backData 0026  
     __size_of_MFRC522_AntennaOn 0009                MFRC522_CRC@dataIn 0029                       __pmaintext 058A  
              MFRC522_CRC@length 0024               MFRC522_SelectTag@i 0049                          ?_printf 0020  
         MFRC522_ToCard@lastBits 0030                       ??_SPI_init 0070           MFRC522_ToCard@sendData 0024  
     __size_of_MFRC522_SelectTag 005C                       __stringtab 0001            __size_of_MFRC522_Init 0036  
                        ___lwdiv 03B3                          ___lwmod 0314            __end_of_MFRC522_Reset 0265  
                        __ptext1 060F                          __ptext2 02DD                          __ptext3 0314  
                        __ptext4 03B3                          __ptext5 02A2                          __ptext6 02F4  
                        __ptext7 0292                          __ptext8 0348                          __ptext9 044C  
                __size_of_printf 00B7                          _dpowers 0007                          main@UID 004E  
                        clrloop0 024C                     _MFRC522_Init 037D             end_of_initialization 07FE  
  MFRC522_ReadCardSerial@_status 0042                        _RCSTAbits 0018                          printf@c 002D  
                        printf@f 0028                        _PORTAbits 0005                        _PORTBbits 0006  
                      _UART_init 02A2                        _TRISAbits 0085                        _TRISBbits 0086  
                  ??_MFRC522_CRC 0026                        _TXSTAbits 0098                  _MFRC522_Set_Bit 0265  
        MFRC522_Request@backBits 003D              MFRC522_ToCard@irqEn 0031                  SPI_transfer@ret 0072  
                _MFRC522_Request 0348                       ?_UART_init 0070                   __end_of_printf 06C6  
            start_initialization 07F9                __size_of_SPI_init 0020                ?_MFRC522_AntiColl 0070  
              MFRC522_AntiColl@i 003F          __size_of_MFRC522_ToCard 0133               ??_MFRC522_AntiColl 0036  
        __size_of_MFRC522_isCard 0010         ??_MFRC522_ReadCardSerial 0041              __end_of_MFRC522_CRC 044C  
                       ??_printf 0022                    ?_SPI_transfer 0070                        ___latbits 0000  
                  __pcstackBANK0 0020              __end_of__stringdata 003B                    SPI_transfer@i 0073  
                      __pnvBANK0 006A          __end_of_MFRC522_Set_Bit 0273               MFRC522_CRC@dataOut 0025  
        __end_of_MFRC522_Request 037D                 ___lwdiv@dividend 0072              MFRC522_Set_Bit@addr 0022  
            MFRC522_Set_Bit@mask 0020                         ?___lwdiv 0070                         ?___lwmod 0078  
                      __pstrings 0001                      ??_UART_init 0070                   ??_SPI_transfer 0070  
               ___lwdiv@quotient 0075                   __size_of_putch 0017                      _MFRC522_CRC 03F1  
                      clear_ram0 024B  __size_of_MFRC522_ReadCardSerial 0016              SPI_transfer@ret_177 0071  
                    __stringbase 0006                      __stringdata 0011                        main@i_345 0054  
                       _SPI_init 02F4                       printf@_val 0029                       printf@flag 0027  
                     printf@prec 0025                   _MFRC522_ToCard 06C6                   _MFRC522_isCard 0292  
          MFRC522_SelectTag@size 0045           __size_of_MFRC522_Reset 0009                 ?_MFRC522_Set_Bit 0020  
          MFRC522_Clear_Bit@addr 0023                 ?_MFRC522_Request 0036            MFRC522_Clear_Bit@mask 0020  
               __size_of___lwdiv 003E                 __size_of___lwmod 0034               __end_of__stringtab 0007  
         __end_of_MFRC522_ToCard 07F9           _MFRC522_ReadCardSerial 02C7                  ___lwdiv@divisor 0070  
                ___lwdiv@counter 0077                         __ptext10 03F1                         __ptext11 02C7  
                       __ptext20 02B3                         __ptext12 04A8                         __ptext21 0505  
                       __ptext13 06C6                         __ptext14 0282                         __ptext15 037D  
                       __ptext16 025C                         __ptext17 0253                         __ptext18 0265  
                       __ptext19 0273           __end_of_MFRC522_isCard 02A2      MFRC522_AntiColl@serNumCheck 003B  
                  __size_of_main 0085             __end_of_SPI_transfer 058A                       _MFRC522_Rd 02B3  
                     _MFRC522_Wr 0273        __size_of_MFRC522_AntiColl 005D                         main@size 004D  
                  _MFRC522_Reset 025C                        putch@data 0070                  ?_MFRC522_ToCard 0024  
                ?_MFRC522_isCard 0070                 ___lwmod@dividend 007A                        stringcode 0001  
                       printf@ap 0026                   ?_MFRC522_Reset 0070                  ___lwmod@divisor 0078  
                ___lwmod@counter 007D                         stringdir 0001                         stringtab 0001  
                  ?_MFRC522_Init 0070                     ?_MFRC522_CRC 0024                      ?_MFRC522_Rd 0070  
                    ?_MFRC522_Wr 007B  
