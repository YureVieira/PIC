

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Apr 12 17:28:20 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     	;# 
    35  0001                     	;# 
    36  0002                     	;# 
    37  0003                     	;# 
    38  0004                     	;# 
    39  0005                     	;# 
    40  0006                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000E                     	;# 
    45  000E                     	;# 
    46  000F                     	;# 
    47  0010                     	;# 
    48  0011                     	;# 
    49  0012                     	;# 
    50  0015                     	;# 
    51  0015                     	;# 
    52  0016                     	;# 
    53  0017                     	;# 
    54  0018                     	;# 
    55  0019                     	;# 
    56  001A                     	;# 
    57  001F                     	;# 
    58  0081                     	;# 
    59  0085                     	;# 
    60  0086                     	;# 
    61  008C                     	;# 
    62  008E                     	;# 
    63  0092                     	;# 
    64  0098                     	;# 
    65  0099                     	;# 
    66  009A                     	;# 
    67  009B                     	;# 
    68  009C                     	;# 
    69  009D                     	;# 
    70  009F                     	;# 
    71                           
    72                           	psect	strings
    73  0001                     __pstrings:	
    74  0001                     stringtab:	
    75  0001                     __stringtab:	
    76  0001                     stringcode:	
    77                           ;	String table - string pointers are 1 byte each
    78                           
    79  0001                     stringdir:	
    80  0001  3000               	movlw	high stringdir
    81  0002  008A               	movwf	10
    82  0003  0804               	movf	4,w
    83  0004  0A84               	incf	4,f
    84  0005  0782               	addwf	2,f
    85  0006                     __stringbase:	
    86  0006  3400               	retlw	0
    87  0007                     __end_of__stringtab:	
    88  0007                     _dpowers:	
    89  0007  3401               	retlw	1
    90  0008  3400               	retlw	0
    91  0009  340A               	retlw	10
    92  000A  3400               	retlw	0
    93  000B  3464               	retlw	100
    94  000C  3400               	retlw	0
    95  000D  34E8               	retlw	232
    96  000E  3403               	retlw	3
    97  000F  3410               	retlw	16
    98  0010  3427               	retlw	39
    99  0011                     __end_of_dpowers:	
   100  0011                     _hexpowers:	
   101  0011  3401               	retlw	1
   102  0012  3400               	retlw	0
   103  0013  3410               	retlw	16
   104  0014  3400               	retlw	0
   105  0015  3400               	retlw	0
   106  0016  3401               	retlw	1
   107  0017  3400               	retlw	0
   108  0018  3410               	retlw	16
   109  0019                     __end_of_hexpowers:	
   110  0019                     __stringdata:	
   111  0019                     STR_1:	
   112  0019  3454               	retlw	84	;'T'
   113  001A  3469               	retlw	105	;'i'
   114  001B  3470               	retlw	112	;'p'
   115  001C  346F               	retlw	111	;'o'
   116  001D  3420               	retlw	32	;' '
   117  001E  3464               	retlw	100	;'d'
   118  001F  3465               	retlw	101	;'e'
   119  0020  3420               	retlw	32	;' '
   120  0021  3454               	retlw	84	;'T'
   121  0022  3461               	retlw	97	;'a'
   122  0023  3467               	retlw	103	;'g'
   123  0024  343A               	retlw	58	;':'
   124  0025  3420               	retlw	32	;' '
   125  0026  3425               	retlw	37	;'%'
   126  0027  3475               	retlw	117	;'u'
   127  0028  340A               	retlw	10
   128  0029  340D               	retlw	13
   129  002A  3400               	retlw	0
   130  002B                     STR_5:	
   131  002B  3430               	retlw	48	;'0'
   132  002C  3431               	retlw	49	;'1'
   133  002D  3432               	retlw	50	;'2'
   134  002E  3433               	retlw	51	;'3'
   135  002F  3434               	retlw	52	;'4'
   136  0030  3435               	retlw	53	;'5'
   137  0031  3436               	retlw	54	;'6'
   138  0032  3437               	retlw	55	;'7'
   139  0033  3438               	retlw	56	;'8'
   140  0034  3439               	retlw	57	;'9'
   141  0035  3441               	retlw	65	;'A'
   142  0036  3442               	retlw	66	;'B'
   143  0037  3443               	retlw	67	;'C'
   144  0038  3444               	retlw	68	;'D'
   145  0039  3445               	retlw	69	;'E'
   146  003A  3446               	retlw	70	;'F'
   147  003B  3400               	retlw	0
   148  003C                     STR_2:	
   149  003C  3443               	retlw	67	;'C'
   150  003D  346F               	retlw	111	;'o'
   151  003E  3464               	retlw	100	;'d'
   152  003F  3469               	retlw	105	;'i'
   153  0040  3467               	retlw	103	;'g'
   154  0041  346F               	retlw	111	;'o'
   155  0042  343A               	retlw	58	;':'
   156  0043  3420               	retlw	32	;' '
   157  0044  3400               	retlw	0
   158  0045                     STR_3:	
   159  0045  3425               	retlw	37	;'%'
   160  0046  3458               	retlw	88	;'X'
   161  0047  3420               	retlw	32	;' '
   162  0048  3400               	retlw	0
   163  0049                     __end_of__stringdata:	
   164                           
   165                           ; #config settings
   166  0000                     
   167                           	psect	nvBANK0
   168  006A                     __pnvBANK0:	
   169  006A                     __mode:	
   170  006A                     	ds	1
   171  0005                     _PORTAbits	set	5
   172  0006                     _PORTB	set	6
   173  0006                     _PORTBbits	set	6
   174  001A                     _RCREG	set	26
   175  0018                     _RCSTAbits	set	24
   176  0019                     _TXREG	set	25
   177  0065                     _RCIF	set	101
   178  0064                     _TXIF	set	100
   179  0099                     _SPBRG	set	153
   180  0085                     _TRISAbits	set	133
   181  0086                     _TRISB	set	134
   182  0086                     _TRISBbits	set	134
   183  0098                     _TXSTAbits	set	152
   184                           
   185                           	psect	cinit
   186  07F9                     start_initialization:	
   187  07F9                     __initialization:	
   188                           
   189                           ; Clear objects allocated to BANK0
   190  07F9  1383               	bcf	3,7	;select IRP bank0
   191  07FA  3058               	movlw	low __pbssBANK0
   192  07FB  0084               	movwf	4
   193  07FC  306A               	movlw	low (__pbssBANK0+18)
   194  07FD  220E               	fcall	clear_ram0
   195  07FE                     end_of_initialization:	
   196                           ;End of C runtime variable initialization code
   197                           
   198  07FE                     __end_of__initialization:	
   199  07FE  0183               	clrf	3
   200  07FF  2D33               	ljmp	_main	;jump to C main() function
   201                           
   202                           	psect	bssBANK0
   203  0058                     __pbssBANK0:	
   204  0058                     _buffer:	
   205  0058                     	ds	16
   206  0068                     _count:	
   207  0068                     	ds	2
   208                           
   209                           	psect	clrtext
   210  020E                     clear_ram0:	
   211                           ;	Called with FSR containing the base address, and
   212                           ;	W with the last address+1
   213                           
   214  020E  0064               	clrwdt	;clear the watchdog before getting into this loop
   215  020F                     clrloop0:	
   216  020F  0180               	clrf	0	;clear RAM location pointed to by FSR
   217  0210  0A84               	incf	4,f	;increment pointer
   218  0211  0604               	xorwf	4,w	;XOR with final address
   219  0212  1903               	btfsc	3,2	;have we reached the end yet?
   220  0213  3400               	retlw	0	;all done for this memory range, return
   221  0214  0604               	xorwf	4,w	;XOR again to restore value
   222  0215  2A0F               	goto	clrloop0	;do the next byte
   223                           
   224                           	psect	cstackCOMMON
   225  0070                     __pcstackCOMMON:	
   226  0070                     ?_putch:	
   227  0070                     ??_putch:	
   228                           ; 0 bytes @ 0x0
   229                           
   230  0070                     ?_UART_init:	
   231                           ; 0 bytes @ 0x0
   232                           
   233  0070                     ??_UART_init:	
   234                           ; 0 bytes @ 0x0
   235                           
   236  0070                     ?_SPI_init:	
   237                           ; 0 bytes @ 0x0
   238                           
   239  0070                     ??_SPI_init:	
   240                           ; 0 bytes @ 0x0
   241                           
   242  0070                     ??_SPI_transfer:	
   243                           ; 0 bytes @ 0x0
   244                           
   245  0070                     ?_MFRC522_Reset:	
   246                           ; 0 bytes @ 0x0
   247                           
   248  0070                     ?_MFRC522_AntennaOn:	
   249                           ; 0 bytes @ 0x0
   250                           
   251  0070                     ?_MFRC522_Init:	
   252                           ; 0 bytes @ 0x0
   253                           
   254  0070                     ?_main:	
   255                           ; 0 bytes @ 0x0
   256                           
   257  0070                     ?_SPI_transfer:	
   258                           ; 0 bytes @ 0x0
   259                           
   260  0070                     ?_MFRC522_Rd:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?_MFRC522_SelectTag:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_MFRC522_AntiColl:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_MFRC522_isCard:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_MFRC522_ReadCardSerial:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?___lwdiv:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     putch@data:	
   279                           ; 2 bytes @ 0x0
   280                           
   281  0070                     ___lwdiv@divisor:	
   282                           ; 1 bytes @ 0x0
   283                           
   284                           
   285                           ; 2 bytes @ 0x0
   286  0070                     	ds	1
   287  0071                     SPI_init@mode:	
   288  0071                     SPI_transfer@data:	
   289                           ; 1 bytes @ 0x1
   290                           
   291                           
   292                           ; 1 bytes @ 0x1
   293  0071                     	ds	1
   294  0072                     SPI_transfer@i:	
   295  0072                     ___lwdiv@dividend:	
   296                           ; 2 bytes @ 0x2
   297                           
   298                           
   299                           ; 2 bytes @ 0x2
   300  0072                     	ds	2
   301  0074                     ??___lwdiv:	
   302  0074                     SPI_transfer@i_213:	
   303                           ; 0 bytes @ 0x4
   304                           
   305                           
   306                           ; 2 bytes @ 0x4
   307  0074                     	ds	1
   308  0075                     ___lwdiv@quotient:	
   309                           
   310                           ; 2 bytes @ 0x5
   311  0075                     	ds	1
   312  0076                     SPI_transfer@byte:	
   313                           
   314                           ; 1 bytes @ 0x6
   315  0076                     	ds	1
   316  0077                     ??_MFRC522_Rd:	
   317  0077                     ___lwdiv@counter:	
   318                           ; 0 bytes @ 0x7
   319                           
   320                           
   321                           ; 1 bytes @ 0x7
   322  0077                     	ds	1
   323  0078                     ?___lwmod:	
   324  0078                     MFRC522_Rd@addr:	
   325                           ; 2 bytes @ 0x8
   326                           
   327  0078                     ___lwmod@divisor:	
   328                           ; 1 bytes @ 0x8
   329                           
   330                           
   331                           ; 2 bytes @ 0x8
   332  0078                     	ds	1
   333  0079                     MFRC522_Rd@value:	
   334                           
   335                           ; 1 bytes @ 0x9
   336  0079                     	ds	1
   337  007A                     ?_MFRC522_Wr:	
   338  007A                     MFRC522_Wr@value:	
   339                           ; 0 bytes @ 0xA
   340                           
   341  007A                     ___lwmod@dividend:	
   342                           ; 1 bytes @ 0xA
   343                           
   344                           
   345                           ; 2 bytes @ 0xA
   346  007A                     	ds	1
   347  007B                     ??_MFRC522_Wr:	
   348                           
   349                           ; 0 bytes @ 0xB
   350  007B                     	ds	1
   351  007C                     ??___lwmod:	
   352  007C                     MFRC522_Wr@addr:	
   353                           ; 0 bytes @ 0xC
   354                           
   355                           
   356                           ; 1 bytes @ 0xC
   357  007C                     	ds	1
   358  007D                     ?_MFRC522_Clear_Bit:	
   359  007D                     ?_MFRC522_Set_Bit:	
   360                           ; 0 bytes @ 0xD
   361                           
   362  007D                     ??_MFRC522_Reset:	
   363                           ; 0 bytes @ 0xD
   364                           
   365  007D                     MFRC522_Clear_Bit@mask:	
   366                           ; 0 bytes @ 0xD
   367                           
   368  007D                     MFRC522_Set_Bit@mask:	
   369                           ; 1 bytes @ 0xD
   370                           
   371  007D                     ___lwmod@counter:	
   372                           ; 1 bytes @ 0xD
   373                           
   374                           
   375                           ; 1 bytes @ 0xD
   376  007D                     	ds	1
   377                           
   378                           	psect	cstackBANK0
   379  0020                     __pcstackBANK0:	
   380  0020                     ??_MFRC522_Clear_Bit:	
   381  0020                     ??_MFRC522_Set_Bit:	
   382                           ; 0 bytes @ 0x0
   383                           
   384  0020                     ?_printf:	
   385                           ; 0 bytes @ 0x0
   386                           
   387                           
   388                           ; 2 bytes @ 0x0
   389  0020                     	ds	1
   390  0021                     MFRC522_Set_Bit@addr:	
   391                           
   392                           ; 1 bytes @ 0x1
   393  0021                     	ds	1
   394  0022                     ??_printf:	
   395  0022                     ??_MFRC522_AntennaOn:	
   396                           ; 0 bytes @ 0x2
   397                           
   398  0022                     MFRC522_Clear_Bit@addr:	
   399                           ; 0 bytes @ 0x2
   400                           
   401                           
   402                           ; 1 bytes @ 0x2
   403  0022                     	ds	1
   404  0023                     ??_MFRC522_Init:	
   405  0023                     ?_MFRC522_CRC:	
   406                           ; 0 bytes @ 0x3
   407                           
   408  0023                     ?_MFRC522_ToCard:	
   409                           ; 0 bytes @ 0x3
   410                           
   411  0023                     MFRC522_ToCard@sendData:	
   412                           ; 1 bytes @ 0x3
   413                           
   414  0023                     MFRC522_CRC@length:	
   415                           ; 1 bytes @ 0x3
   416                           
   417                           
   418                           ; 1 bytes @ 0x3
   419  0023                     	ds	1
   420  0024                     MFRC522_ToCard@sendLen:	
   421  0024                     MFRC522_CRC@dataOut:	
   422                           ; 1 bytes @ 0x4
   423                           
   424                           
   425                           ; 1 bytes @ 0x4
   426  0024                     	ds	1
   427  0025                     ??_MFRC522_CRC:	
   428  0025                     MFRC522_ToCard@backData:	
   429                           ; 0 bytes @ 0x5
   430                           
   431  0025                     printf@idx:	
   432                           ; 1 bytes @ 0x5
   433                           
   434                           
   435                           ; 1 bytes @ 0x5
   436  0025                     	ds	1
   437  0026                     MFRC522_ToCard@backLen:	
   438  0026                     MFRC522_CRC@n:	
   439                           ; 1 bytes @ 0x6
   440                           
   441  0026                     printf@ap:	
   442                           ; 1 bytes @ 0x6
   443                           
   444                           
   445                           ; 1 bytes @ 0x6
   446  0026                     	ds	1
   447  0027                     ??_MFRC522_ToCard:	
   448  0027                     MFRC522_CRC@i:	
   449                           ; 0 bytes @ 0x7
   450                           
   451  0027                     printf@flag:	
   452                           ; 1 bytes @ 0x7
   453                           
   454                           
   455                           ; 1 bytes @ 0x7
   456  0027                     	ds	1
   457  0028                     MFRC522_CRC@dataIn:	
   458  0028                     printf@prec:	
   459                           ; 1 bytes @ 0x8
   460                           
   461                           
   462                           ; 1 bytes @ 0x8
   463  0028                     	ds	1
   464  0029                     printf@f:	
   465                           
   466                           ; 1 bytes @ 0x9
   467  0029                     	ds	1
   468  002A                     printf@_val:	
   469                           
   470                           ; 4 bytes @ 0xA
   471  002A                     	ds	3
   472  002D                     MFRC522_ToCard@waitIRq:	
   473                           
   474                           ; 1 bytes @ 0xD
   475  002D                     	ds	1
   476  002E                     MFRC522_ToCard@_status:	
   477  002E                     printf@c:	
   478                           ; 1 bytes @ 0xE
   479                           
   480                           
   481                           ; 1 bytes @ 0xE
   482  002E                     	ds	1
   483  002F                     MFRC522_ToCard@lastBits:	
   484                           
   485                           ; 1 bytes @ 0xF
   486  002F                     	ds	1
   487  0030                     MFRC522_ToCard@irqEn:	
   488                           
   489                           ; 1 bytes @ 0x10
   490  0030                     	ds	1
   491  0031                     MFRC522_ToCard@command:	
   492                           
   493                           ; 1 bytes @ 0x11
   494  0031                     	ds	1
   495  0032                     MFRC522_ToCard@i:	
   496                           
   497                           ; 2 bytes @ 0x12
   498  0032                     	ds	2
   499  0034                     MFRC522_ToCard@n:	
   500                           
   501                           ; 1 bytes @ 0x14
   502  0034                     	ds	1
   503  0035                     ??_MFRC522_SelectTag:	
   504  0035                     ??_MFRC522_AntiColl:	
   505                           ; 0 bytes @ 0x15
   506                           
   507  0035                     ?_MFRC522_Request:	
   508                           ; 0 bytes @ 0x15
   509                           
   510  0035                     MFRC522_Request@TagType:	
   511                           ; 1 bytes @ 0x15
   512                           
   513                           
   514                           ; 1 bytes @ 0x15
   515  0035                     	ds	1
   516  0036                     ??_MFRC522_Request:	
   517                           
   518                           ; 0 bytes @ 0x16
   519  0036                     	ds	4
   520  003A                     MFRC522_Request@reqMode:	
   521  003A                     MFRC522_AntiColl@serNumCheck:	
   522                           ; 1 bytes @ 0x1A
   523                           
   524  003A                     MFRC522_SelectTag@buffer:	
   525                           ; 1 bytes @ 0x1A
   526                           
   527                           
   528                           ; 9 bytes @ 0x1A
   529  003A                     	ds	1
   530  003B                     MFRC522_Request@_status:	
   531  003B                     MFRC522_AntiColl@unLen:	
   532                           ; 1 bytes @ 0x1B
   533                           
   534                           
   535                           ; 2 bytes @ 0x1B
   536  003B                     	ds	1
   537  003C                     MFRC522_Request@backBits:	
   538                           
   539                           ; 2 bytes @ 0x1C
   540  003C                     	ds	1
   541  003D                     MFRC522_AntiColl@_status:	
   542                           
   543                           ; 1 bytes @ 0x1D
   544  003D                     	ds	1
   545  003E                     ??_MFRC522_isCard:	
   546  003E                     MFRC522_AntiColl@i:	
   547                           ; 0 bytes @ 0x1E
   548                           
   549                           
   550                           ; 1 bytes @ 0x1E
   551  003E                     	ds	1
   552  003F                     MFRC522_AntiColl@serNum:	
   553  003F                     MFRC522_isCard@TagType:	
   554                           ; 1 bytes @ 0x1F
   555                           
   556                           
   557                           ; 1 bytes @ 0x1F
   558  003F                     	ds	1
   559  0040                     ??_MFRC522_ReadCardSerial:	
   560                           
   561                           ; 0 bytes @ 0x20
   562  0040                     	ds	1
   563  0041                     MFRC522_ReadCardSerial@_status:	
   564                           
   565                           ; 1 bytes @ 0x21
   566  0041                     	ds	1
   567  0042                     MFRC522_ReadCardSerial@str:	
   568                           
   569                           ; 1 bytes @ 0x22
   570  0042                     	ds	1
   571  0043                     MFRC522_SelectTag@_status:	
   572                           
   573                           ; 1 bytes @ 0x23
   574  0043                     	ds	1
   575  0044                     MFRC522_SelectTag@size:	
   576                           
   577                           ; 1 bytes @ 0x24
   578  0044                     	ds	1
   579  0045                     MFRC522_SelectTag@serNum:	
   580                           
   581                           ; 1 bytes @ 0x25
   582  0045                     	ds	1
   583  0046                     MFRC522_SelectTag@recvBits:	
   584                           
   585                           ; 2 bytes @ 0x26
   586  0046                     	ds	2
   587  0048                     MFRC522_SelectTag@i:	
   588                           
   589                           ; 1 bytes @ 0x28
   590  0048                     	ds	1
   591  0049                     ??_main:	
   592                           
   593                           ; 0 bytes @ 0x29
   594  0049                     	ds	3
   595  004C                     main@size:	
   596                           
   597                           ; 1 bytes @ 0x2C
   598  004C                     	ds	1
   599  004D                     main@UID:	
   600                           
   601                           ; 6 bytes @ 0x2D
   602  004D                     	ds	6
   603  0053                     main@i:	
   604                           
   605                           ; 2 bytes @ 0x33
   606  0053                     	ds	2
   607  0055                     main@i_342:	
   608                           
   609                           ; 2 bytes @ 0x35
   610  0055                     	ds	2
   611  0057                     main@TagType:	
   612                           
   613                           ; 1 bytes @ 0x37
   614  0057                     	ds	1
   615                           
   616                           	psect	maintext
   617  0533                     __pmaintext:	
   618 ;;
   619 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   620 ;;
   621 ;; *************** function _main *****************
   622 ;; Defined at:
   623 ;;		line 496 in file "main.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;  i               2   53[BANK0 ] int 
   628 ;;  i               2   51[BANK0 ] int 
   629 ;;  UID             6   45[BANK0 ] unsigned char [6]
   630 ;;  TagType         1   55[BANK0 ] unsigned char 
   631 ;;  size            1   44[BANK0 ] unsigned char 
   632 ;; Return value:  Size  Location     Type
   633 ;;		None               void
   634 ;; Registers used:
   635 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 17F/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   641 ;;      Params:         0       0       0       0
   642 ;;      Locals:         0      12       0       0
   643 ;;      Temps:          0       3       0       0
   644 ;;      Totals:         0      15       0       0
   645 ;;Total ram usage:       15 bytes
   646 ;; Hardware stack levels required when called:    6
   647 ;; This function calls:
   648 ;;		_MFRC522_Init
   649 ;;		_MFRC522_ReadCardSerial
   650 ;;		_MFRC522_SelectTag
   651 ;;		_MFRC522_isCard
   652 ;;		_SPI_init
   653 ;;		_UART_init
   654 ;;		_printf
   655 ;; This function is called by:
   656 ;;		Startup code after reset
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           
   661                           ;psect for function _main
   662  0533                     _main:	
   663                           
   664                           ;main.c: 498: char UID[6];
   665                           ;main.c: 499: unsigned char TagType;
   666                           ;main.c: 500: char size;
   667                           ;main.c: 502: UART_init();
   668                           
   669                           ;incstack = 0
   670                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   671  0533  225C               	fcall	_UART_init
   672                           
   673                           ;main.c: 504: SPI_init(0);
   674  0534  3000               	movlw	0
   675  0535  2297               	fcall	_SPI_init
   676                           
   677                           ;main.c: 507: MFRC522_Init();
   678  0536  2320               	fcall	_MFRC522_Init
   679                           
   680                           ;main.c: 509: TRISBbits.TRISB3 = 0;
   681  0537  1683               	bsf	3,5	;RP0=1, select bank1
   682  0538  1303               	bcf	3,6	;RP1=0, select bank1
   683  0539  1186               	bcf	6,3	;volatile
   684                           
   685                           ;main.c: 510: for(int i=0;i<10;i++)
   686  053A  1283               	bcf	3,5	;RP0=0, select bank0
   687  053B  1303               	bcf	3,6	;RP1=0, select bank0
   688  053C  01D3               	clrf	main@i
   689  053D  01D4               	clrf	main@i+1
   690  053E  0854               	movf	main@i+1,w
   691  053F  3A80               	xorlw	128
   692  0540  00FF               	movwf	127
   693  0541  3080               	movlw	128
   694  0542  027F               	subwf	127,w
   695  0543  1D03               	skipz
   696  0544  2D47               	goto	u1715
   697  0545  300A               	movlw	10
   698  0546  0253               	subwf	main@i,w
   699  0547                     u1715:	
   700  0547  1803               	btfsc	3,0
   701  0548  2D7C               	goto	l1856
   702  0549                     l208:	
   703                           
   704                           ;main.c: 511: {
   705                           ;main.c: 512: PORTBbits.RB3 = 1;
   706  0549  1283               	bcf	3,5	;RP0=0, select bank0
   707  054A  1303               	bcf	3,6	;RP1=0, select bank0
   708  054B  1586               	bsf	6,3	;volatile
   709                           
   710                           ;main.c: 513: _delay((unsigned long)((250)*(16000000/4000.0)));
   711  054C  3006               	movlw	6
   712  054D  00CB               	movwf	??_main+2
   713  054E  3013               	movlw	19
   714  054F  00CA               	movwf	??_main+1
   715  0550  30B1               	movlw	177
   716  0551  00C9               	movwf	??_main
   717  0552                     u1777:	
   718  0552  0BC9               	decfsz	??_main,f
   719  0553  2D52               	goto	u1777
   720  0554  0BCA               	decfsz	??_main+1,f
   721  0555  2D52               	goto	u1777
   722  0556  0BCB               	decfsz	??_main+2,f
   723  0557  2D52               	goto	u1777
   724  0558  2D59               	nop2
   725                           
   726                           ;main.c: 514: PORTBbits.RB3 = 0;
   727  0559  1283               	bcf	3,5	;RP0=0, select bank0
   728  055A  1303               	bcf	3,6	;RP1=0, select bank0
   729  055B  1186               	bcf	6,3	;volatile
   730                           
   731                           ;main.c: 515: _delay((unsigned long)((250)*(16000000/4000.0)));
   732  055C  3006               	movlw	6
   733  055D  00CB               	movwf	??_main+2
   734  055E  3013               	movlw	19
   735  055F  00CA               	movwf	??_main+1
   736  0560  30B1               	movlw	177
   737  0561  00C9               	movwf	??_main
   738  0562                     u1787:	
   739  0562  0BC9               	decfsz	??_main,f
   740  0563  2D62               	goto	u1787
   741  0564  0BCA               	decfsz	??_main+1,f
   742  0565  2D62               	goto	u1787
   743  0566  0BCB               	decfsz	??_main+2,f
   744  0567  2D62               	goto	u1787
   745  0568  2D69               	nop2
   746  0569  3001               	movlw	1
   747  056A  1283               	bcf	3,5	;RP0=0, select bank0
   748  056B  1303               	bcf	3,6	;RP1=0, select bank0
   749  056C  07D3               	addwf	main@i,f
   750  056D  1803               	skipnc
   751  056E  0AD4               	incf	main@i+1,f
   752  056F  3000               	movlw	0
   753  0570  07D4               	addwf	main@i+1,f
   754  0571  0854               	movf	main@i+1,w
   755  0572  3A80               	xorlw	128
   756  0573  00FF               	movwf	127
   757  0574  3080               	movlw	128
   758  0575  027F               	subwf	127,w
   759  0576  1D03               	skipz
   760  0577  2D7A               	goto	u1725
   761  0578  300A               	movlw	10
   762  0579  0253               	subwf	main@i,w
   763  057A                     u1725:	
   764  057A  1C03               	skipc
   765  057B  2D49               	goto	l208
   766  057C                     l1856:	
   767                           ;main.c: 516: }
   768                           ;main.c: 517: while(1)
   769                           
   770                           
   771                           ;main.c: 518: {
   772                           ;main.c: 522: if( MFRC522_isCard( &TagType ) )
   773  057C  3057               	movlw	main@TagType& (0+255)
   774  057D  224C               	fcall	_MFRC522_isCard
   775  057E  3A00               	xorlw	0
   776  057F  1903               	skipnz
   777  0580  2DD0               	goto	l1878
   778                           
   779                           ;main.c: 523: {
   780                           ;main.c: 525: printf("Tipo de Tag: %u\n\r",TagType);
   781  0581  1283               	bcf	3,5	;RP0=0, select bank0
   782  0582  1303               	bcf	3,6	;RP1=0, select bank0
   783  0583  0857               	movf	main@TagType,w
   784  0584  00C9               	movwf	??_main
   785  0585  01CA               	clrf	??_main+1
   786  0586  0849               	movf	??_main,w
   787  0587  00A0               	movwf	?_printf
   788  0588  084A               	movf	??_main+1,w
   789  0589  00A1               	movwf	?_printf+1
   790  058A  3013               	movlw	(STR_1-__stringbase)& (0+255)
   791  058B  25E1               	fcall	_printf
   792                           
   793                           ;main.c: 527: if( MFRC522_ReadCardSerial( UID ) )
   794  058C  304D               	movlw	main@UID& (0+255)
   795  058D  2281               	fcall	_MFRC522_ReadCardSerial
   796  058E  3A00               	xorlw	0
   797  058F  1903               	skipnz
   798  0590  2DD0               	goto	l1878
   799                           
   800                           ;main.c: 528: {
   801                           ;main.c: 529: PORTBbits.RB3 = 1;
   802  0591  1283               	bcf	3,5	;RP0=0, select bank0
   803  0592  1303               	bcf	3,6	;RP1=0, select bank0
   804  0593  1586               	bsf	6,3	;volatile
   805                           
   806                           ;main.c: 530: printf("Codigo: ");
   807  0594  3036               	movlw	(STR_2-__stringbase)& (0+255)
   808  0595  25E1               	fcall	_printf
   809                           
   810                           ;main.c: 531: for(int i=0; i < 5; i++)
   811  0596  1283               	bcf	3,5	;RP0=0, select bank0
   812  0597  1303               	bcf	3,6	;RP1=0, select bank0
   813  0598  01D5               	clrf	main@i_342
   814  0599  01D6               	clrf	main@i_342+1
   815  059A  0856               	movf	main@i_342+1,w
   816  059B  3A80               	xorlw	128
   817  059C  00FF               	movwf	127
   818  059D  3080               	movlw	128
   819  059E  027F               	subwf	127,w
   820  059F  1D03               	skipz
   821  05A0  2DA3               	goto	u1755
   822  05A1  3005               	movlw	5
   823  05A2  0255               	subwf	main@i_342,w
   824  05A3                     u1755:	
   825  05A3  1803               	btfsc	3,0
   826  05A4  2DC7               	goto	l1876
   827  05A5                     l1870:	
   828                           
   829                           ;main.c: 532: {
   830                           ;main.c: 533: printf("%X ",UID[i]);
   831  05A5  1283               	bcf	3,5	;RP0=0, select bank0
   832  05A6  1303               	bcf	3,6	;RP1=0, select bank0
   833  05A7  0855               	movf	main@i_342,w
   834  05A8  3E4D               	addlw	main@UID& (0+255)
   835  05A9  0084               	movwf	4
   836  05AA  1383               	bcf	3,7	;select IRP bank0
   837  05AB  0800               	movf	0,w
   838  05AC  00C9               	movwf	??_main
   839  05AD  01CA               	clrf	??_main+1
   840  05AE  0849               	movf	??_main,w
   841  05AF  00A0               	movwf	?_printf
   842  05B0  084A               	movf	??_main+1,w
   843  05B1  00A1               	movwf	?_printf+1
   844  05B2  303F               	movlw	(STR_3-__stringbase)& (0+255)
   845  05B3  25E1               	fcall	_printf
   846  05B4  3001               	movlw	1
   847  05B5  1283               	bcf	3,5	;RP0=0, select bank0
   848  05B6  1303               	bcf	3,6	;RP1=0, select bank0
   849  05B7  07D5               	addwf	main@i_342,f
   850  05B8  1803               	skipnc
   851  05B9  0AD6               	incf	main@i_342+1,f
   852  05BA  3000               	movlw	0
   853  05BB  07D6               	addwf	main@i_342+1,f
   854  05BC  0856               	movf	main@i_342+1,w
   855  05BD  3A80               	xorlw	128
   856  05BE  00FF               	movwf	127
   857  05BF  3080               	movlw	128
   858  05C0  027F               	subwf	127,w
   859  05C1  1D03               	skipz
   860  05C2  2DC5               	goto	u1765
   861  05C3  3005               	movlw	5
   862  05C4  0255               	subwf	main@i_342,w
   863  05C5                     u1765:	
   864  05C5  1C03               	skipc
   865  05C6  2DA5               	goto	l1870
   866  05C7                     l1876:	
   867                           
   868                           ;main.c: 534: }
   869                           ;main.c: 535: printf("\n\r");
   870  05C7  3022               	movlw	((STR_1+15)-__stringbase)& (0+255)
   871  05C8  25E1               	fcall	_printf
   872                           
   873                           ;main.c: 536: size = MFRC522_SelectTag( UID );
   874  05C9  304D               	movlw	main@UID& (0+255)
   875  05CA  23EF               	fcall	_MFRC522_SelectTag
   876  05CB  1283               	bcf	3,5	;RP0=0, select bank0
   877  05CC  1303               	bcf	3,6	;RP1=0, select bank0
   878  05CD  00C9               	movwf	??_main
   879  05CE  0849               	movf	??_main,w
   880  05CF  00CC               	movwf	main@size
   881  05D0                     l1878:	
   882                           
   883                           ;main.c: 537: }
   884                           ;main.c: 540: }
   885                           ;main.c: 541: PORTBbits.RB3 = 0;
   886  05D0  1283               	bcf	3,5	;RP0=0, select bank0
   887  05D1  1303               	bcf	3,6	;RP1=0, select bank0
   888  05D2  1186               	bcf	6,3	;volatile
   889                           
   890                           ;main.c: 542: _delay((unsigned long)((250)*(16000000/4000.0)));
   891  05D3  3006               	movlw	6
   892  05D4  00CB               	movwf	??_main+2
   893  05D5  3013               	movlw	19
   894  05D6  00CA               	movwf	??_main+1
   895  05D7  30B1               	movlw	177
   896  05D8  00C9               	movwf	??_main
   897  05D9                     u1797:	
   898  05D9  0BC9               	decfsz	??_main,f
   899  05DA  2DD9               	goto	u1797
   900  05DB  0BCA               	decfsz	??_main+1,f
   901  05DC  2DD9               	goto	u1797
   902  05DD  0BCB               	decfsz	??_main+2,f
   903  05DE  2DD9               	goto	u1797
   904  05DF  2DE0               	nop2
   905  05E0  2D7C               	goto	l1856
   906  05E1                     __end_of_main:	
   907                           
   908                           	psect	text1
   909  05E1                     __ptext1:	
   910 ;; *************** function _printf *****************
   911 ;; Defined at:
   912 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  f               1    wreg     PTR const unsigned char 
   915 ;;		 -> STR_4(3), STR_3(4), STR_2(9), STR_1(18), 
   916 ;; Auto vars:     Size  Location     Type
   917 ;;  f               1    9[BANK0 ] PTR const unsigned char 
   918 ;;		 -> STR_4(3), STR_3(4), STR_2(9), STR_1(18), 
   919 ;;  idx             1    5[BANK0 ] unsigned char 
   920 ;;  _val            4   10[BANK0 ] struct .
   921 ;;  c               1   14[BANK0 ] char 
   922 ;;  prec            1    8[BANK0 ] char 
   923 ;;  flag            1    7[BANK0 ] unsigned char 
   924 ;;  ap              1    6[BANK0 ] PTR void [1]
   925 ;;		 -> ?_printf(2), 
   926 ;; Return value:  Size  Location     Type
   927 ;;                  2    0[BANK0 ] int 
   928 ;; Registers used:
   929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   935 ;;      Params:         0       2       0       0
   936 ;;      Locals:         0      10       0       0
   937 ;;      Temps:          0       3       0       0
   938 ;;      Totals:         0      15       0       0
   939 ;;Total ram usage:       15 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    1
   942 ;; This function calls:
   943 ;;		___lwdiv
   944 ;;		___lwmod
   945 ;;		_putch
   946 ;; This function is called by:
   947 ;;		_main
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           
   952                           ;psect for function _printf
   953  05E1                     _printf:	
   954                           
   955                           ;incstack = 0
   956                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   957                           ;printf@f stored from wreg
   958  05E1  1283               	bcf	3,5	;RP0=0, select bank0
   959  05E2  1303               	bcf	3,6	;RP1=0, select bank0
   960  05E3  00A9               	movwf	printf@f
   961                           
   962                           ;doprnt.c: 466: va_list ap;
   963                           ;doprnt.c: 499: signed char c;
   964                           ;doprnt.c: 506: signed char prec;
   965                           ;doprnt.c: 508: unsigned char flag;
   966                           ;doprnt.c: 527: union {
   967                           ;doprnt.c: 528: unsigned int _val;
   968                           ;doprnt.c: 529: struct {
   969                           ;doprnt.c: 530: const char * _cp;
   970                           ;doprnt.c: 531: unsigned _len;
   971                           ;doprnt.c: 532: } _str;
   972                           ;doprnt.c: 533: } _val;
   973                           ;doprnt.c: 542: *ap = __va_start();
   974  05E4  3020               	movlw	?_printf& (0+255)
   975  05E5  00A2               	movwf	??_printf
   976  05E6  0822               	movf	??_printf,w
   977  05E7  00A6               	movwf	printf@ap
   978  05E8                     l1726:	
   979                           ;doprnt.c: 545: while(c = *f++) {
   980                           
   981  05E8  3001               	movlw	1
   982  05E9  1283               	bcf	3,5	;RP0=0, select bank0
   983  05EA  1303               	bcf	3,6	;RP1=0, select bank0
   984  05EB  07A9               	addwf	printf@f,f
   985  05EC  30FF               	movlw	-1
   986  05ED  0729               	addwf	printf@f,w
   987  05EE  0084               	movwf	4
   988  05EF  2001               	fcall	stringdir
   989  05F0  00A2               	movwf	??_printf
   990  05F1  0822               	movf	??_printf,w
   991  05F2  00AE               	movwf	printf@c
   992  05F3  08AE               	movf	printf@c,f
   993  05F4  1903               	btfsc	3,2
   994  05F5  0008               	return
   995                           
   996                           ;doprnt.c: 547: if(c != '%')
   997  05F6  082E               	movf	printf@c,w
   998  05F7  3A25               	xorlw	37
   999  05F8  1903               	skipnz
  1000  05F9  2DFD               	goto	l1670
  1001                           
  1002                           ;doprnt.c: 549: {
  1003                           ;doprnt.c: 550: (putch(c) );
  1004  05FA  082E               	movf	printf@c,w
  1005  05FB  2206               	fcall	_putch
  1006                           
  1007                           ;doprnt.c: 551: continue;
  1008  05FC  2DE8               	goto	l1726
  1009  05FD                     l1670:	
  1010                           
  1011                           ;doprnt.c: 552: }
  1012                           ;doprnt.c: 557: flag = 0;
  1013  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  1014  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  1015  05FF  01A7               	clrf	printf@flag
  1016                           
  1017                           ;doprnt.c: 644: switch(c = *f++) {
  1018  0600  2E08               	goto	l1676
  1019  0601                     l237:	
  1020                           ;doprnt.c: 721: case 'X':
  1021                           
  1022                           ;doprnt.c: 647: goto alldone;
  1023                           
  1024                           ;doprnt.c: 646: case 0:
  1025                           
  1026                           
  1027                           ;doprnt.c: 727: case 'x':
  1028                           ;doprnt.c: 730: flag |= 0x80;
  1029  0601  17A7               	bsf	printf@flag,7
  1030                           
  1031                           ;doprnt.c: 732: break;
  1032  0602  2E1C               	goto	l1678
  1033  0603                     l1672:	
  1034                           ;doprnt.c: 826: case 'u':
  1035                           
  1036                           ;doprnt.c: 822: continue;
  1037                           
  1038                           ;doprnt.c: 811: default:
  1039                           
  1040                           
  1041                           ;doprnt.c: 827: flag |= 0xC0;
  1042  0603  30C0               	movlw	192
  1043  0604  00A2               	movwf	??_printf
  1044  0605  0822               	movf	??_printf,w
  1045  0606  04A7               	iorwf	printf@flag,f
  1046                           
  1047                           ;doprnt.c: 831: }
  1048                           
  1049                           ;doprnt.c: 828: break;
  1050  0607  2E1C               	goto	l1678
  1051  0608                     l1676:	
  1052  0608  3001               	movlw	1
  1053  0609  07A9               	addwf	printf@f,f
  1054  060A  30FF               	movlw	-1
  1055  060B  0729               	addwf	printf@f,w
  1056  060C  0084               	movwf	4
  1057  060D  2001               	fcall	stringdir
  1058  060E  00AE               	movwf	printf@c
  1059                           
  1060                           ; Switch size 1, requested type "space"
  1061                           ; Number of cases is 4, Range of values is 0 to 120
  1062                           ; switch strategies available:
  1063                           ; Name         Instructions Cycles
  1064                           ; simple_byte           13     7 (average)
  1065                           ; direct_byte          127     6 (fixed)
  1066                           ; jumptable            260     6 (fixed)
  1067                           ;	Chosen strategy is simple_byte
  1068  060F  3A00               	xorlw	0	; case 0
  1069  0610  1903               	skipnz
  1070  0611  2EC5               	goto	l259
  1071  0612  3A58               	xorlw	88	; case 88
  1072  0613  1903               	skipnz
  1073  0614  2E01               	goto	l237
  1074  0615  3A2D               	xorlw	45	; case 117
  1075  0616  1903               	skipnz
  1076  0617  2E03               	goto	l1672
  1077  0618  3A0D               	xorlw	13	; case 120
  1078  0619  1903               	skipnz
  1079  061A  2E01               	goto	l237
  1080  061B  2DE8               	goto	l1726
  1081  061C                     l1678:	
  1082                           
  1083                           ;doprnt.c: 1282: {
  1084                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1085  061C  0826               	movf	printf@ap,w
  1086  061D  0084               	movwf	4
  1087  061E  1383               	bcf	3,7	;select IRP bank0
  1088  061F  0800               	movf	0,w
  1089  0620  00AA               	movwf	printf@_val
  1090  0621  0A84               	incf	4,f
  1091  0622  0800               	movf	0,w
  1092  0623  00AB               	movwf	printf@_val+1
  1093  0624  3002               	movlw	2
  1094  0625  00A2               	movwf	??_printf
  1095  0626  0822               	movf	??_printf,w
  1096  0627  07A6               	addwf	printf@ap,f
  1097                           
  1098                           ;doprnt.c: 1296: }
  1099                           ;doprnt.c: 1303: switch((unsigned char)(flag & (0xC0))) {
  1100  0628  2E61               	goto	l1708
  1101  0629                     l242:	
  1102                           ;doprnt.c: 1311: case 0xC0:
  1103                           
  1104                           
  1105                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1106  0629  01AE               	clrf	printf@c
  1107  062A  0AAE               	incf	printf@c,f
  1108  062B                     L2:	
  1109  062B  082E               	movf	printf@c,w
  1110  062C  3A05               	xorlw	5
  1111  062D  1903               	btfsc	3,2
  1112  062E  2E6A               	goto	l1710
  1113                           
  1114                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1115  062F  082E               	movf	printf@c,w
  1116  0630  00A2               	movwf	??_printf
  1117  0631  0722               	addwf	??_printf,w
  1118  0632  3E01               	addlw	low (_dpowers-__stringbase)
  1119  0633  0084               	movwf	4
  1120  0634  2001               	fcall	stringdir
  1121  0635  00A3               	movwf	??_printf+1
  1122  0636  2001               	fcall	stringdir
  1123  0637  00A4               	movwf	??_printf+2
  1124  0638  0824               	movf	??_printf+2,w
  1125  0639  022B               	subwf	printf@_val+1,w
  1126  063A  1D03               	skipz
  1127  063B  2E3E               	goto	u1455
  1128  063C  0823               	movf	??_printf+1,w
  1129  063D  022A               	subwf	printf@_val,w
  1130  063E                     u1455:	
  1131  063E  1C03               	btfss	3,0
  1132  063F  2E6A               	goto	l1710
  1133                           
  1134                           ;doprnt.c: 1316: break;
  1135  0640  3001               	movlw	1
  1136  0641  00A2               	movwf	??_printf
  1137  0642  0822               	movf	??_printf,w
  1138  0643  07AE               	addwf	printf@c,f
  1139  0644  2E2B               	goto	L2
  1140  0645                     l247:	
  1141                           ;doprnt.c: 1323: case 0x80:
  1142                           
  1143                           ;doprnt.c: 1318: break;
  1144                           
  1145                           
  1146                           ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1147  0645  01AE               	clrf	printf@c
  1148  0646  0AAE               	incf	printf@c,f
  1149  0647                     L3:	
  1150  0647  082E               	movf	printf@c,w
  1151  0648  3A04               	xorlw	4
  1152  0649  1903               	btfsc	3,2
  1153  064A  2E6A               	goto	l1710
  1154                           
  1155                           ;doprnt.c: 1326: if(_val._val < hexpowers[c])
  1156  064B  082E               	movf	printf@c,w
  1157  064C  00A2               	movwf	??_printf
  1158  064D  0722               	addwf	??_printf,w
  1159  064E  3E0B               	addlw	low (_hexpowers-__stringbase)
  1160  064F  0084               	movwf	4
  1161  0650  2001               	fcall	stringdir
  1162  0651  00A3               	movwf	??_printf+1
  1163  0652  2001               	fcall	stringdir
  1164  0653  00A4               	movwf	??_printf+2
  1165  0654  0824               	movf	??_printf+2,w
  1166  0655  022B               	subwf	printf@_val+1,w
  1167  0656  1D03               	skipz
  1168  0657  2E5A               	goto	u1485
  1169  0658  0823               	movf	??_printf+1,w
  1170  0659  022A               	subwf	printf@_val,w
  1171  065A                     u1485:	
  1172  065A  1C03               	btfss	3,0
  1173  065B  2E6A               	goto	l1710
  1174                           
  1175                           ;doprnt.c: 1327: break;
  1176  065C  3001               	movlw	1
  1177  065D  00A2               	movwf	??_printf
  1178  065E  0822               	movf	??_printf,w
  1179  065F  07AE               	addwf	printf@c,f
  1180  0660  2E47               	goto	L3
  1181  0661                     l1708:	
  1182                           ;doprnt.c: 1345: }
  1183                           
  1184                           ;doprnt.c: 1329: break;
  1185                           
  1186  0661  0827               	movf	printf@flag,w
  1187  0662  39C0               	andlw	192
  1188                           
  1189                           ; Switch size 1, requested type "space"
  1190                           ; Number of cases is 2, Range of values is 128 to 192
  1191                           ; switch strategies available:
  1192                           ; Name         Instructions Cycles
  1193                           ; simple_byte            7     4 (average)
  1194                           ; direct_byte           74     9 (fixed)
  1195                           ; jumptable            263     9 (fixed)
  1196                           ;	Chosen strategy is simple_byte
  1197  0663  3A80               	xorlw	128	; case 128
  1198  0664  1903               	skipnz
  1199  0665  2E45               	goto	l247
  1200  0666  3A40               	xorlw	64	; case 192
  1201  0667  1903               	skipnz
  1202  0668  2E29               	goto	l242
  1203  0669  2E6A               	goto	l1710
  1204  066A                     l1710:	
  1205                           
  1206                           ;doprnt.c: 1431: {
  1207                           ;doprnt.c: 1478: }
  1208                           ;doprnt.c: 1481: prec = c;
  1209  066A  082E               	movf	printf@c,w
  1210  066B  00A2               	movwf	??_printf
  1211  066C  0822               	movf	??_printf,w
  1212  066D  00A8               	movwf	printf@prec
  1213                           
  1214                           ;doprnt.c: 1483: while(prec--) {
  1215  066E  2EB1               	goto	l1724
  1216  066F                     l1712:	
  1217                           ;doprnt.c: 1487: {
  1218                           ;doprnt.c: 1495: case 0xC0:
  1219                           
  1220                           ;doprnt.c: 1485: switch((unsigned char)(flag & (0xC0)))
  1221                           
  1222                           
  1223                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1224  066F  300A               	movlw	10
  1225  0670  00F8               	movwf	___lwmod@divisor
  1226  0671  3000               	movlw	0
  1227  0672  00F9               	movwf	___lwmod@divisor+1
  1228  0673  0828               	movf	printf@prec,w
  1229  0674  00A2               	movwf	??_printf
  1230  0675  0722               	addwf	??_printf,w
  1231  0676  3E01               	addlw	low (_dpowers-__stringbase)
  1232  0677  0084               	movwf	4
  1233  0678  2001               	fcall	stringdir
  1234  0679  00F0               	movwf	___lwdiv@divisor
  1235  067A  2001               	fcall	stringdir
  1236  067B  00F1               	movwf	___lwdiv@divisor+1
  1237  067C  082B               	movf	printf@_val+1,w
  1238  067D  01F3               	clrf	___lwdiv@dividend+1
  1239  067E  07F3               	addwf	___lwdiv@dividend+1,f
  1240  067F  082A               	movf	printf@_val,w
  1241  0680  01F2               	clrf	___lwdiv@dividend
  1242  0681  07F2               	addwf	___lwdiv@dividend,f
  1243  0682  2356               	fcall	___lwdiv
  1244  0683  0871               	movf	?___lwdiv+1,w
  1245  0684  01FB               	clrf	___lwmod@dividend+1
  1246  0685  07FB               	addwf	___lwmod@dividend+1,f
  1247  0686  0870               	movf	?___lwdiv,w
  1248  0687  01FA               	clrf	___lwmod@dividend
  1249  0688  07FA               	addwf	___lwmod@dividend,f
  1250  0689  22B7               	fcall	___lwmod
  1251  068A  0878               	movf	?___lwmod,w
  1252  068B  3E30               	addlw	48
  1253  068C  1283               	bcf	3,5	;RP0=0, select bank0
  1254  068D  1303               	bcf	3,6	;RP1=0, select bank0
  1255  068E  00A3               	movwf	??_printf+1
  1256  068F  0823               	movf	??_printf+1,w
  1257  0690  2EAE               	goto	L1
  1258  0691                     l1714:	
  1259                           ;doprnt.c: 1506: case 0x80:
  1260                           
  1261                           ;doprnt.c: 1500: break;
  1262                           
  1263                           
  1264                           ;doprnt.c: 1508: {
  1265                           ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
  1266  0691  0828               	movf	printf@prec,w
  1267  0692  00A2               	movwf	??_printf
  1268  0693  0722               	addwf	??_printf,w
  1269  0694  3E0B               	addlw	low (_hexpowers-__stringbase)
  1270  0695  0084               	movwf	4
  1271  0696  2001               	fcall	stringdir
  1272  0697  00F0               	movwf	___lwdiv@divisor
  1273  0698  2001               	fcall	stringdir
  1274  0699  00F1               	movwf	___lwdiv@divisor+1
  1275  069A  082B               	movf	printf@_val+1,w
  1276  069B  01F3               	clrf	___lwdiv@dividend+1
  1277  069C  07F3               	addwf	___lwdiv@dividend+1,f
  1278  069D  082A               	movf	printf@_val,w
  1279  069E  01F2               	clrf	___lwdiv@dividend
  1280  069F  07F2               	addwf	___lwdiv@dividend,f
  1281  06A0  2356               	fcall	___lwdiv
  1282  06A1  0870               	movf	?___lwdiv,w
  1283  06A2  390F               	andlw	15
  1284  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  1285  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  1286  06A5  00A3               	movwf	??_printf+1
  1287  06A6  0823               	movf	??_printf+1,w
  1288  06A7  00A5               	movwf	printf@idx
  1289                           
  1290                           ;doprnt.c: 1513: c = "0123456789ABCDEF"[idx];
  1291  06A8  0825               	movf	printf@idx,w
  1292  06A9  3E25               	addlw	low (STR_5-__stringbase)
  1293  06AA  0084               	movwf	4
  1294  06AB  2001               	fcall	stringdir
  1295  06AC  00A2               	movwf	??_printf
  1296  06AD  0822               	movf	??_printf,w
  1297  06AE                     L1:	
  1298  06AE  00AE               	movwf	printf@c
  1299  06AF                     l1722:	
  1300                           ;doprnt.c: 1532: }
  1301                           
  1302                           ;doprnt.c: 1517: }
  1303                           ;doprnt.c: 1519: break;
  1304                           
  1305                           
  1306                           ;doprnt.c: 1533: (putch(c) );
  1307  06AF  082E               	movf	printf@c,w
  1308  06B0  2206               	fcall	_putch
  1309  06B1                     l1724:	
  1310  06B1  30FF               	movlw	-1
  1311  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  1312  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  1313  06B4  00A2               	movwf	??_printf
  1314  06B5  0822               	movf	??_printf,w
  1315  06B6  07A8               	addwf	printf@prec,f
  1316  06B7  0828               	movf	printf@prec,w
  1317  06B8  3AFF               	xorlw	-1
  1318  06B9  1903               	btfsc	3,2
  1319  06BA  2DE8               	goto	l1726
  1320  06BB  0827               	movf	printf@flag,w
  1321  06BC  39C0               	andlw	192
  1322                           
  1323                           ; Switch size 1, requested type "space"
  1324                           ; Number of cases is 2, Range of values is 128 to 192
  1325                           ; switch strategies available:
  1326                           ; Name         Instructions Cycles
  1327                           ; simple_byte            7     4 (average)
  1328                           ; direct_byte           74     9 (fixed)
  1329                           ; jumptable            263     9 (fixed)
  1330                           ;	Chosen strategy is simple_byte
  1331  06BD  3A80               	xorlw	128	; case 128
  1332  06BE  1903               	skipnz
  1333  06BF  2E91               	goto	l1714
  1334  06C0  3A40               	xorlw	64	; case 192
  1335  06C1  1903               	skipnz
  1336  06C2  2E6F               	goto	l1712
  1337  06C3  2EAF               	goto	l1722
  1338  06C4  2EAF               	goto	l1722
  1339  06C5                     l259:	
  1340                           ;doprnt.c: 1549: return 0;
  1341                           ;	Return value of _printf is never used
  1342                           
  1343                           ;doprnt.c: 1534: }
  1344                           ;doprnt.c: 1542: }
  1345                           ;doprnt.c: 1544: alldone:
  1346                           
  1347  06C5  0008               	return
  1348  06C6                     __end_of_printf:	
  1349                           
  1350                           	psect	text2
  1351  0206                     __ptext2:	
  1352 ;; *************** function _putch *****************
  1353 ;; Defined at:
  1354 ;;		line 8 in file "UART.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;  data            1    wreg     unsigned char 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  data            1    0[COMMON] unsigned char 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;		None               void
  1361 ;; Registers used:
  1362 ;;		wreg
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1368 ;;      Params:         0       0       0       0
  1369 ;;      Locals:         1       0       0       0
  1370 ;;      Temps:          0       0       0       0
  1371 ;;      Totals:         1       0       0       0
  1372 ;;Total ram usage:        1 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_printf
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           
  1382                           ;psect for function _putch
  1383  0206                     _putch:	
  1384                           
  1385                           ;incstack = 0
  1386                           ; Regs used in _putch: [wreg]
  1387                           ;putch@data stored from wreg
  1388  0206  00F0               	movwf	putch@data
  1389  0207                     l37:	
  1390                           ;UART.c: 11: continue;
  1391                           
  1392                           ;UART.c: 10: while(!TXIF)
  1393                           
  1394  0207  1283               	bcf	3,5	;RP0=0, select bank0
  1395  0208  1303               	bcf	3,6	;RP1=0, select bank0
  1396  0209  1E0C               	btfss	12,4	;volatile
  1397  020A  2A07               	goto	l37
  1398                           
  1399                           ;UART.c: 12: TXREG = data;
  1400  020B  0870               	movf	putch@data,w
  1401  020C  0099               	movwf	25	;volatile
  1402  020D  0008               	return
  1403  020E                     __end_of_putch:	
  1404                           
  1405                           	psect	text3
  1406  02B7                     __ptext3:	
  1407 ;; *************** function ___lwmod *****************
  1408 ;; Defined at:
  1409 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  divisor         2    8[COMMON] unsigned int 
  1412 ;;  dividend        2   10[COMMON] unsigned int 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  counter         1   13[COMMON] unsigned char 
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  2    8[COMMON] unsigned int 
  1417 ;; Registers used:
  1418 ;;		wreg, status,2, status,0
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1424 ;;      Params:         4       0       0       0
  1425 ;;      Locals:         1       0       0       0
  1426 ;;      Temps:          1       0       0       0
  1427 ;;      Totals:         6       0       0       0
  1428 ;;Total ram usage:        6 bytes
  1429 ;; Hardware stack levels used:    1
  1430 ;; This function calls:
  1431 ;;		Nothing
  1432 ;; This function is called by:
  1433 ;;		_printf
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           
  1438                           ;psect for function ___lwmod
  1439  02B7                     ___lwmod:	
  1440                           
  1441                           ;incstack = 0
  1442                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1443  02B7  0879               	movf	___lwmod@divisor+1,w
  1444  02B8  0478               	iorwf	___lwmod@divisor,w
  1445  02B9  1903               	skipnz
  1446  02BA  2AE4               	goto	l1586
  1447  02BB  01FD               	clrf	___lwmod@counter
  1448  02BC  0AFD               	incf	___lwmod@counter,f
  1449  02BD                     l1576:	
  1450  02BD  1BF9               	btfsc	___lwmod@divisor+1,7
  1451  02BE  2ACB               	goto	l1578
  1452  02BF  3001               	movlw	1
  1453  02C0                     u1305:	
  1454  02C0  1003               	clrc
  1455  02C1  0DF8               	rlf	___lwmod@divisor,f
  1456  02C2  0DF9               	rlf	___lwmod@divisor+1,f
  1457  02C3  3EFF               	addlw	-1
  1458  02C4  1D03               	skipz
  1459  02C5  2AC0               	goto	u1305
  1460  02C6  3001               	movlw	1
  1461  02C7  00FC               	movwf	??___lwmod
  1462  02C8  087C               	movf	??___lwmod,w
  1463  02C9  07FD               	addwf	___lwmod@counter,f
  1464  02CA  2ABD               	goto	l1576
  1465  02CB                     l1578:	
  1466  02CB  0879               	movf	___lwmod@divisor+1,w
  1467  02CC  027B               	subwf	___lwmod@dividend+1,w
  1468  02CD  1D03               	skipz
  1469  02CE  2AD1               	goto	u1325
  1470  02CF  0878               	movf	___lwmod@divisor,w
  1471  02D0  027A               	subwf	___lwmod@dividend,w
  1472  02D1                     u1325:	
  1473  02D1  1C03               	skipc
  1474  02D2  2AD9               	goto	l1582
  1475  02D3  0878               	movf	___lwmod@divisor,w
  1476  02D4  02FA               	subwf	___lwmod@dividend,f
  1477  02D5  0879               	movf	___lwmod@divisor+1,w
  1478  02D6  1C03               	skipc
  1479  02D7  03FB               	decf	___lwmod@dividend+1,f
  1480  02D8  02FB               	subwf	___lwmod@dividend+1,f
  1481  02D9                     l1582:	
  1482  02D9  3001               	movlw	1
  1483  02DA                     u1335:	
  1484  02DA  1003               	clrc
  1485  02DB  0CF9               	rrf	___lwmod@divisor+1,f
  1486  02DC  0CF8               	rrf	___lwmod@divisor,f
  1487  02DD  3EFF               	addlw	-1
  1488  02DE  1D03               	skipz
  1489  02DF  2ADA               	goto	u1335
  1490  02E0  3001               	movlw	1
  1491  02E1  02FD               	subwf	___lwmod@counter,f
  1492  02E2  1D03               	btfss	3,2
  1493  02E3  2ACB               	goto	l1578
  1494  02E4                     l1586:	
  1495  02E4  087B               	movf	___lwmod@dividend+1,w
  1496  02E5  01F9               	clrf	?___lwmod+1
  1497  02E6  07F9               	addwf	?___lwmod+1,f
  1498  02E7  087A               	movf	___lwmod@dividend,w
  1499  02E8  01F8               	clrf	?___lwmod
  1500  02E9  07F8               	addwf	?___lwmod,f
  1501  02EA  0008               	return
  1502  02EB                     __end_of___lwmod:	
  1503                           
  1504                           	psect	text4
  1505  0356                     __ptext4:	
  1506 ;; *************** function ___lwdiv *****************
  1507 ;; Defined at:
  1508 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;  divisor         2    0[COMMON] unsigned int 
  1511 ;;  dividend        2    2[COMMON] unsigned int 
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  quotient        2    5[COMMON] unsigned int 
  1514 ;;  counter         1    7[COMMON] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  2    0[COMMON] unsigned int 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1524 ;;      Params:         4       0       0       0
  1525 ;;      Locals:         3       0       0       0
  1526 ;;      Temps:          1       0       0       0
  1527 ;;      Totals:         8       0       0       0
  1528 ;;Total ram usage:        8 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_printf
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           
  1538                           ;psect for function ___lwdiv
  1539  0356                     ___lwdiv:	
  1540                           
  1541                           ;incstack = 0
  1542                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1543  0356  01F5               	clrf	___lwdiv@quotient
  1544  0357  01F6               	clrf	___lwdiv@quotient+1
  1545  0358  0871               	movf	___lwdiv@divisor+1,w
  1546  0359  0470               	iorwf	___lwdiv@divisor,w
  1547  035A  1903               	skipnz
  1548  035B  2B8D               	goto	l1564
  1549  035C  01F7               	clrf	___lwdiv@counter
  1550  035D  0AF7               	incf	___lwdiv@counter,f
  1551  035E                     l1552:	
  1552  035E  1BF1               	btfsc	___lwdiv@divisor+1,7
  1553  035F  2B6C               	goto	l1554
  1554  0360  3001               	movlw	1
  1555  0361                     u1235:	
  1556  0361  1003               	clrc
  1557  0362  0DF0               	rlf	___lwdiv@divisor,f
  1558  0363  0DF1               	rlf	___lwdiv@divisor+1,f
  1559  0364  3EFF               	addlw	-1
  1560  0365  1D03               	skipz
  1561  0366  2B61               	goto	u1235
  1562  0367  3001               	movlw	1
  1563  0368  00F4               	movwf	??___lwdiv
  1564  0369  0874               	movf	??___lwdiv,w
  1565  036A  07F7               	addwf	___lwdiv@counter,f
  1566  036B  2B5E               	goto	l1552
  1567  036C                     l1554:	
  1568  036C  3001               	movlw	1
  1569  036D                     u1255:	
  1570  036D  1003               	clrc
  1571  036E  0DF5               	rlf	___lwdiv@quotient,f
  1572  036F  0DF6               	rlf	___lwdiv@quotient+1,f
  1573  0370  3EFF               	addlw	-1
  1574  0371  1D03               	skipz
  1575  0372  2B6D               	goto	u1255
  1576  0373  0871               	movf	___lwdiv@divisor+1,w
  1577  0374  0273               	subwf	___lwdiv@dividend+1,w
  1578  0375  1D03               	skipz
  1579  0376  2B79               	goto	u1265
  1580  0377  0870               	movf	___lwdiv@divisor,w
  1581  0378  0272               	subwf	___lwdiv@dividend,w
  1582  0379                     u1265:	
  1583  0379  1C03               	skipc
  1584  037A  2B82               	goto	l1560
  1585  037B  0870               	movf	___lwdiv@divisor,w
  1586  037C  02F2               	subwf	___lwdiv@dividend,f
  1587  037D  0871               	movf	___lwdiv@divisor+1,w
  1588  037E  1C03               	skipc
  1589  037F  03F3               	decf	___lwdiv@dividend+1,f
  1590  0380  02F3               	subwf	___lwdiv@dividend+1,f
  1591  0381  1475               	bsf	___lwdiv@quotient,0
  1592  0382                     l1560:	
  1593  0382  3001               	movlw	1
  1594  0383                     u1275:	
  1595  0383  1003               	clrc
  1596  0384  0CF1               	rrf	___lwdiv@divisor+1,f
  1597  0385  0CF0               	rrf	___lwdiv@divisor,f
  1598  0386  3EFF               	addlw	-1
  1599  0387  1D03               	skipz
  1600  0388  2B83               	goto	u1275
  1601  0389  3001               	movlw	1
  1602  038A  02F7               	subwf	___lwdiv@counter,f
  1603  038B  1D03               	btfss	3,2
  1604  038C  2B6C               	goto	l1554
  1605  038D                     l1564:	
  1606  038D  0876               	movf	___lwdiv@quotient+1,w
  1607  038E  01F1               	clrf	?___lwdiv+1
  1608  038F  07F1               	addwf	?___lwdiv+1,f
  1609  0390  0875               	movf	___lwdiv@quotient,w
  1610  0391  01F0               	clrf	?___lwdiv
  1611  0392  07F0               	addwf	?___lwdiv,f
  1612  0393  0008               	return
  1613  0394                     __end_of___lwdiv:	
  1614                           
  1615                           	psect	text5
  1616  025C                     __ptext5:	
  1617 ;; *************** function _UART_init *****************
  1618 ;; Defined at:
  1619 ;;		line 14 in file "UART.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;		None
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;		None
  1624 ;; Return value:  Size  Location     Type
  1625 ;;		None               void
  1626 ;; Registers used:
  1627 ;;		wreg
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1633 ;;      Params:         0       0       0       0
  1634 ;;      Locals:         0       0       0       0
  1635 ;;      Temps:          0       0       0       0
  1636 ;;      Totals:         0       0       0       0
  1637 ;;Total ram usage:        0 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_main
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function _UART_init
  1648  025C                     _UART_init:	
  1649                           
  1650                           ;UART.c: 17: TRISBbits.TRISB1 = 1;
  1651                           
  1652                           ;incstack = 0
  1653                           ; Regs used in _UART_init: [wreg]
  1654  025C  1683               	bsf	3,5	;RP0=1, select bank1
  1655  025D  1303               	bcf	3,6	;RP1=0, select bank1
  1656  025E  1486               	bsf	6,1	;volatile
  1657                           
  1658                           ;UART.c: 18: TRISBbits.TRISB2 = 1;
  1659  025F  1506               	bsf	6,2	;volatile
  1660                           
  1661                           ;UART.c: 22: TXSTAbits.CSRC = 1;
  1662  0260  1798               	bsf	24,7	;volatile
  1663                           
  1664                           ;UART.c: 23: TXSTAbits.TXEN = 1;
  1665  0261  1698               	bsf	24,5	;volatile
  1666                           
  1667                           ;UART.c: 24: TXSTAbits.SYNC = 0;
  1668  0262  1218               	bcf	24,4	;volatile
  1669                           
  1670                           ;UART.c: 27: RCSTAbits.SPEN = 1;
  1671  0263  1283               	bcf	3,5	;RP0=0, select bank0
  1672  0264  1303               	bcf	3,6	;RP1=0, select bank0
  1673  0265  1798               	bsf	24,7	;volatile
  1674                           
  1675                           ;UART.c: 28: RCSTAbits.CREN = 1;
  1676  0266  1618               	bsf	24,4	;volatile
  1677                           
  1678                           ;UART.c: 31: TXSTAbits.BRGH = 0;
  1679  0267  1683               	bsf	3,5	;RP0=1, select bank1
  1680  0268  1303               	bcf	3,6	;RP1=0, select bank1
  1681  0269  1118               	bcf	24,2	;volatile
  1682                           
  1683                           ;UART.c: 32: SPBRG = 25;
  1684  026A  3019               	movlw	25
  1685  026B  0099               	movwf	25	;volatile
  1686  026C  0008               	return
  1687  026D                     __end_of_UART_init:	
  1688                           
  1689                           	psect	text6
  1690  0297                     __ptext6:	
  1691 ;; *************** function _SPI_init *****************
  1692 ;; Defined at:
  1693 ;;		line 32 in file "SPI.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;  mode            1    wreg     unsigned char 
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  mode            1    1[COMMON] unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;		None               void
  1700 ;; Registers used:
  1701 ;;		wreg, status,2, status,0
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1707 ;;      Params:         0       0       0       0
  1708 ;;      Locals:         1       0       0       0
  1709 ;;      Temps:          1       0       0       0
  1710 ;;      Totals:         2       0       0       0
  1711 ;;Total ram usage:        2 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; This function calls:
  1714 ;;		Nothing
  1715 ;; This function is called by:
  1716 ;;		_main
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           
  1721                           ;psect for function _SPI_init
  1722  0297                     _SPI_init:	
  1723                           
  1724                           ;incstack = 0
  1725                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  1726                           ;SPI_init@mode stored from wreg
  1727  0297  00F1               	movwf	SPI_init@mode
  1728                           
  1729                           ;SPI.c: 34: _mode = mode;
  1730  0298  0871               	movf	SPI_init@mode,w
  1731  0299  00F0               	movwf	??_SPI_init
  1732  029A  0870               	movf	??_SPI_init,w
  1733  029B  1283               	bcf	3,5	;RP0=0, select bank0
  1734  029C  1303               	bcf	3,6	;RP1=0, select bank0
  1735  029D  00EA               	movwf	__mode
  1736                           
  1737                           ;SPI.c: 35: TRISB &= ~(1<<7 | 1<<6);
  1738  029E  303F               	movlw	63
  1739  029F  00F0               	movwf	??_SPI_init
  1740  02A0  0870               	movf	??_SPI_init,w
  1741  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  1742  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  1743  02A3  0586               	andwf	6,f	;volatile
  1744                           
  1745                           ;SPI.c: 36: TRISB |= (1<<5);
  1746  02A4  1686               	bsf	6,5	;volatile
  1747                           
  1748                           ;SPI.c: 37: if(mode == 2 || mode == 3)
  1749  02A5  0871               	movf	SPI_init@mode,w
  1750  02A6  3A02               	xorlw	2
  1751  02A7  1903               	skipnz
  1752  02A8  2AAD               	goto	l63
  1753  02A9  0871               	movf	SPI_init@mode,w
  1754  02AA  3A03               	xorlw	3
  1755  02AB  1D03               	skipz
  1756  02AC  2AB1               	goto	l1604
  1757  02AD                     l63:	
  1758                           
  1759                           ;SPI.c: 38: PORTB |= (1<<7);
  1760  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  1761  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  1762  02AF  1786               	bsf	6,7	;volatile
  1763  02B0  0008               	return
  1764  02B1                     l1604:	
  1765                           
  1766                           ;SPI.c: 39: else
  1767                           ;SPI.c: 40: PORTB &= ~(1<<7);
  1768  02B1  307F               	movlw	127
  1769  02B2  00F0               	movwf	??_SPI_init
  1770  02B3  0870               	movf	??_SPI_init,w
  1771  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  1772  02B5  0586               	andwf	6,f	;volatile
  1773  02B6  0008               	return
  1774  02B7                     __end_of_SPI_init:	
  1775                           
  1776                           	psect	text7
  1777  024C                     __ptext7:	
  1778 ;; *************** function _MFRC522_isCard *****************
  1779 ;; Defined at:
  1780 ;;		line 475 in file "main.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  TagType         1    wreg     PTR unsigned char 
  1783 ;;		 -> main@TagType(1), 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  TagType         1   31[BANK0 ] PTR unsigned char 
  1786 ;;		 -> main@TagType(1), 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      unsigned char 
  1789 ;; Registers used:
  1790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1796 ;;      Params:         0       0       0       0
  1797 ;;      Locals:         0       1       0       0
  1798 ;;      Temps:          0       1       0       0
  1799 ;;      Totals:         0       2       0       0
  1800 ;;Total ram usage:        2 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    5
  1803 ;; This function calls:
  1804 ;;		_MFRC522_Request
  1805 ;; This function is called by:
  1806 ;;		_main
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           
  1811                           ;psect for function _MFRC522_isCard
  1812  024C                     _MFRC522_isCard:	
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in _MFRC522_isCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1816                           ;MFRC522_isCard@TagType stored from wreg
  1817  024C  1283               	bcf	3,5	;RP0=0, select bank0
  1818  024D  1303               	bcf	3,6	;RP1=0, select bank0
  1819  024E  00BF               	movwf	MFRC522_isCard@TagType
  1820                           
  1821                           ;main.c: 477: if (MFRC522_Request( 0x26, TagType ) == 0)
  1822  024F  083F               	movf	MFRC522_isCard@TagType,w
  1823  0250  00BE               	movwf	??_MFRC522_isCard
  1824  0251  083E               	movf	??_MFRC522_isCard,w
  1825  0252  00B5               	movwf	MFRC522_Request@TagType
  1826  0253  3026               	movlw	38
  1827  0254  22EB               	fcall	_MFRC522_Request
  1828  0255  3800               	iorlw	0
  1829  0256  1D03               	skipz
  1830  0257  2A5A               	goto	l1644
  1831                           
  1832                           ;main.c: 478: return 1;
  1833  0258  3001               	movlw	1
  1834  0259  0008               	return
  1835  025A                     l1644:	
  1836                           
  1837                           ;main.c: 479: else
  1838                           ;main.c: 480: return 0;
  1839  025A  3000               	movlw	0
  1840  025B  0008               	return
  1841  025C                     __end_of_MFRC522_isCard:	
  1842                           
  1843                           	psect	text8
  1844  02EB                     __ptext8:	
  1845 ;; *************** function _MFRC522_Request *****************
  1846 ;; Defined at:
  1847 ;;		line 285 in file "main.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;  reqMode         1    wreg     unsigned char 
  1850 ;;  TagType         1   21[BANK0 ] PTR unsigned char 
  1851 ;;		 -> main@TagType(1), 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  reqMode         1   26[BANK0 ] unsigned char 
  1854 ;;  backBits        2   28[BANK0 ] unsigned int 
  1855 ;;  _status         1   27[BANK0 ] unsigned char 
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      unsigned char 
  1858 ;; Registers used:
  1859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1865 ;;      Params:         0       1       0       0
  1866 ;;      Locals:         0       4       0       0
  1867 ;;      Temps:          0       4       0       0
  1868 ;;      Totals:         0       9       0       0
  1869 ;;Total ram usage:        9 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    4
  1872 ;; This function calls:
  1873 ;;		_MFRC522_ToCard
  1874 ;;		_MFRC522_Wr
  1875 ;; This function is called by:
  1876 ;;		_MFRC522_isCard
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           
  1881                           ;psect for function _MFRC522_Request
  1882  02EB                     _MFRC522_Request:	
  1883                           
  1884                           ;incstack = 0
  1885                           ; Regs used in _MFRC522_Request: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1886                           ;MFRC522_Request@reqMode stored from wreg
  1887  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  1888  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  1889  02ED  00BA               	movwf	MFRC522_Request@reqMode
  1890                           
  1891                           ;main.c: 287: char _status;
  1892                           ;main.c: 288: unsigned backBits;
  1893                           ;main.c: 289: MFRC522_Wr( 0x0D, 0x07 );
  1894  02EE  3007               	movlw	7
  1895  02EF  00B6               	movwf	??_MFRC522_Request
  1896  02F0  0836               	movf	??_MFRC522_Request,w
  1897  02F1  00FA               	movwf	MFRC522_Wr@value
  1898  02F2  300D               	movlw	13
  1899  02F3  222D               	fcall	_MFRC522_Wr
  1900                           
  1901                           ;main.c: 290: TagType[0] = reqMode;
  1902  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  1903  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  1904  02F6  083A               	movf	MFRC522_Request@reqMode,w
  1905  02F7  00B6               	movwf	??_MFRC522_Request
  1906  02F8  0835               	movf	MFRC522_Request@TagType,w
  1907  02F9  0084               	movwf	4
  1908  02FA  0836               	movf	??_MFRC522_Request,w
  1909  02FB  1383               	bcf	3,7	;select IRP bank0
  1910  02FC  0080               	movwf	0
  1911                           
  1912                           ;main.c: 291: _status = MFRC522_ToCard( 0x0C, TagType, 1, TagType, &backBits );
  1913  02FD  0835               	movf	MFRC522_Request@TagType,w
  1914  02FE  00B6               	movwf	??_MFRC522_Request
  1915  02FF  0836               	movf	??_MFRC522_Request,w
  1916  0300  00A3               	movwf	MFRC522_ToCard@sendData
  1917  0301  01A4               	clrf	MFRC522_ToCard@sendLen
  1918  0302  0AA4               	incf	MFRC522_ToCard@sendLen,f
  1919  0303  0835               	movf	MFRC522_Request@TagType,w
  1920  0304  00B7               	movwf	??_MFRC522_Request+1
  1921  0305  0837               	movf	??_MFRC522_Request+1,w
  1922  0306  00A5               	movwf	MFRC522_ToCard@backData
  1923  0307  303C               	movlw	MFRC522_Request@backBits& (0+255)
  1924  0308  00B8               	movwf	??_MFRC522_Request+2
  1925  0309  0838               	movf	??_MFRC522_Request+2,w
  1926  030A  00A6               	movwf	MFRC522_ToCard@backLen
  1927  030B  300C               	movlw	12
  1928  030C  26C6               	fcall	_MFRC522_ToCard
  1929  030D  1283               	bcf	3,5	;RP0=0, select bank0
  1930  030E  1303               	bcf	3,6	;RP1=0, select bank0
  1931  030F  00B9               	movwf	??_MFRC522_Request+3
  1932  0310  0839               	movf	??_MFRC522_Request+3,w
  1933  0311  00BB               	movwf	MFRC522_Request@_status
  1934                           
  1935                           ;main.c: 292: if ( (_status != 0) || (backBits != 0x10) )
  1936  0312  08BB               	movf	MFRC522_Request@_status,f
  1937  0313  1D03               	skipz
  1938  0314  2B1A               	goto	l1480
  1939  0315  3010               	movlw	16
  1940  0316  063C               	xorwf	MFRC522_Request@backBits,w
  1941  0317  043D               	iorwf	MFRC522_Request@backBits+1,w
  1942  0318  1903               	skipnz
  1943  0319  2B1E               	goto	l137
  1944  031A                     l1480:	
  1945                           
  1946                           ;main.c: 293: {
  1947                           ;main.c: 294: _status = 2;
  1948  031A  3002               	movlw	2
  1949  031B  00B6               	movwf	??_MFRC522_Request
  1950  031C  0836               	movf	??_MFRC522_Request,w
  1951  031D  00BB               	movwf	MFRC522_Request@_status
  1952  031E                     l137:	
  1953                           
  1954                           ;main.c: 295: }
  1955                           ;main.c: 296: return _status;
  1956  031E  083B               	movf	MFRC522_Request@_status,w
  1957  031F  0008               	return
  1958  0320                     __end_of_MFRC522_Request:	
  1959                           
  1960                           	psect	text9
  1961  03EF                     __ptext9:	
  1962 ;; *************** function _MFRC522_SelectTag *****************
  1963 ;; Defined at:
  1964 ;;		line 324 in file "main.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;  serNum          1    wreg     PTR unsigned char 
  1967 ;;		 -> main@UID(6), 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  serNum          1   37[BANK0 ] PTR unsigned char 
  1970 ;;		 -> main@UID(6), 
  1971 ;;  buffer          9   26[BANK0 ] unsigned char [9]
  1972 ;;  recvBits        2   38[BANK0 ] unsigned int 
  1973 ;;  i               1   40[BANK0 ] unsigned char 
  1974 ;;  size            1   36[BANK0 ] unsigned char 
  1975 ;;  _status         1   35[BANK0 ] unsigned char 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      unsigned char 
  1978 ;; Registers used:
  1979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1985 ;;      Params:         0       0       0       0
  1986 ;;      Locals:         0      15       0       0
  1987 ;;      Temps:          0       5       0       0
  1988 ;;      Totals:         0      20       0       0
  1989 ;;Total ram usage:       20 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    4
  1992 ;; This function calls:
  1993 ;;		_MFRC522_CRC
  1994 ;;		_MFRC522_ToCard
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           
  2001                           ;psect for function _MFRC522_SelectTag
  2002  03EF                     _MFRC522_SelectTag:	
  2003                           
  2004                           ;incstack = 0
  2005                           ; Regs used in _MFRC522_SelectTag: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2006                           ;MFRC522_SelectTag@serNum stored from wreg
  2007  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2008  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2009  03F1  00C5               	movwf	MFRC522_SelectTag@serNum
  2010                           
  2011                           ;main.c: 326: char i;
  2012                           ;main.c: 327: char _status;
  2013                           ;main.c: 328: char size;
  2014                           ;main.c: 329: unsigned recvBits;
  2015                           ;main.c: 330: char buffer[9];
  2016                           ;main.c: 334: buffer[0] = 0x93;
  2017  03F2  3093               	movlw	147
  2018  03F3  00B5               	movwf	??_MFRC522_SelectTag
  2019  03F4  0835               	movf	??_MFRC522_SelectTag,w
  2020  03F5  00BA               	movwf	MFRC522_SelectTag@buffer
  2021                           
  2022                           ;main.c: 335: buffer[1] = 0x70;
  2023  03F6  3070               	movlw	112
  2024  03F7  00B5               	movwf	??_MFRC522_SelectTag
  2025  03F8  0835               	movf	??_MFRC522_SelectTag,w
  2026  03F9  00BB               	movwf	MFRC522_SelectTag@buffer+1
  2027                           
  2028                           ;main.c: 337: for ( i=2; i < 7; i++ )
  2029  03FA  3002               	movlw	2
  2030  03FB  00B5               	movwf	??_MFRC522_SelectTag
  2031  03FC  0835               	movf	??_MFRC522_SelectTag,w
  2032  03FD  00C8               	movwf	MFRC522_SelectTag@i
  2033  03FE  3007               	movlw	7
  2034  03FF  0248               	subwf	MFRC522_SelectTag@i,w
  2035  0400  1803               	btfsc	3,0
  2036  0401  2C18               	goto	l1622
  2037  0402                     l1614:	
  2038                           
  2039                           ;main.c: 338: {
  2040                           ;main.c: 339: buffer[i] = *serNum++;
  2041  0402  0845               	movf	MFRC522_SelectTag@serNum,w
  2042  0403  0084               	movwf	4
  2043  0404  1383               	bcf	3,7	;select IRP bank0
  2044  0405  0800               	movf	0,w
  2045  0406  00B5               	movwf	??_MFRC522_SelectTag
  2046  0407  0848               	movf	MFRC522_SelectTag@i,w
  2047  0408  3E3A               	addlw	MFRC522_SelectTag@buffer& (0+255)
  2048  0409  0084               	movwf	4
  2049  040A  0835               	movf	??_MFRC522_SelectTag,w
  2050  040B  0080               	movwf	0
  2051  040C  3001               	movlw	1
  2052  040D  00B5               	movwf	??_MFRC522_SelectTag
  2053  040E  0835               	movf	??_MFRC522_SelectTag,w
  2054  040F  07C5               	addwf	MFRC522_SelectTag@serNum,f
  2055  0410  3001               	movlw	1
  2056  0411  00B5               	movwf	??_MFRC522_SelectTag
  2057  0412  0835               	movf	??_MFRC522_SelectTag,w
  2058  0413  07C8               	addwf	MFRC522_SelectTag@i,f
  2059  0414  3007               	movlw	7
  2060  0415  0248               	subwf	MFRC522_SelectTag@i,w
  2061  0416  1C03               	skipc
  2062  0417  2C02               	goto	l1614
  2063  0418                     l1622:	
  2064                           
  2065                           ;main.c: 340: }
  2066                           ;main.c: 342: MFRC522_CRC( buffer, 7, &buffer[7] );
  2067  0418  3007               	movlw	7
  2068  0419  00B5               	movwf	??_MFRC522_SelectTag
  2069  041A  0835               	movf	??_MFRC522_SelectTag,w
  2070  041B  00A3               	movwf	MFRC522_CRC@length
  2071  041C  3041               	movlw	(MFRC522_SelectTag@buffer+7)& (0+255)
  2072  041D  00B6               	movwf	??_MFRC522_SelectTag+1
  2073  041E  0836               	movf	??_MFRC522_SelectTag+1,w
  2074  041F  00A4               	movwf	MFRC522_CRC@dataOut
  2075  0420  303A               	movlw	MFRC522_SelectTag@buffer& (0+255)
  2076  0421  2394               	fcall	_MFRC522_CRC
  2077                           
  2078                           ;main.c: 344: _status = MFRC522_ToCard( 0x0C, buffer, 9, buffer, &recvBits );
  2079  0422  303A               	movlw	MFRC522_SelectTag@buffer& (0+255)
  2080  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2081  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2082  0425  00B5               	movwf	??_MFRC522_SelectTag
  2083  0426  0835               	movf	??_MFRC522_SelectTag,w
  2084  0427  00A3               	movwf	MFRC522_ToCard@sendData
  2085  0428  3009               	movlw	9
  2086  0429  00B6               	movwf	??_MFRC522_SelectTag+1
  2087  042A  0836               	movf	??_MFRC522_SelectTag+1,w
  2088  042B  00A4               	movwf	MFRC522_ToCard@sendLen
  2089  042C  303A               	movlw	MFRC522_SelectTag@buffer& (0+255)
  2090  042D  00B7               	movwf	??_MFRC522_SelectTag+2
  2091  042E  0837               	movf	??_MFRC522_SelectTag+2,w
  2092  042F  00A5               	movwf	MFRC522_ToCard@backData
  2093  0430  3046               	movlw	MFRC522_SelectTag@recvBits& (0+255)
  2094  0431  00B8               	movwf	??_MFRC522_SelectTag+3
  2095  0432  0838               	movf	??_MFRC522_SelectTag+3,w
  2096  0433  00A6               	movwf	MFRC522_ToCard@backLen
  2097  0434  300C               	movlw	12
  2098  0435  26C6               	fcall	_MFRC522_ToCard
  2099  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2100  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2101  0438  00B9               	movwf	??_MFRC522_SelectTag+4
  2102  0439  0839               	movf	??_MFRC522_SelectTag+4,w
  2103  043A  00C3               	movwf	MFRC522_SelectTag@_status
  2104                           
  2105                           ;main.c: 345: if ( (_status == 0) && (recvBits == 0x18) )
  2106  043B  08C3               	movf	MFRC522_SelectTag@_status,f
  2107  043C  1D03               	skipz
  2108  043D  2C48               	goto	l1630
  2109  043E  3018               	movlw	24
  2110  043F  0646               	xorwf	MFRC522_SelectTag@recvBits,w
  2111  0440  0447               	iorwf	MFRC522_SelectTag@recvBits+1,w
  2112  0441  1D03               	skipz
  2113  0442  2C48               	goto	l1630
  2114                           
  2115                           ;main.c: 346: {
  2116                           ;main.c: 347: size = buffer[0];
  2117  0443  083A               	movf	MFRC522_SelectTag@buffer,w
  2118  0444  00B5               	movwf	??_MFRC522_SelectTag
  2119  0445  0835               	movf	??_MFRC522_SelectTag,w
  2120  0446  00C4               	movwf	MFRC522_SelectTag@size
  2121                           
  2122                           ;main.c: 348: }
  2123  0447  2C49               	goto	l1632
  2124  0448                     l1630:	
  2125                           
  2126                           ;main.c: 349: else
  2127                           ;main.c: 350: {
  2128                           ;main.c: 351: size = 0;
  2129  0448  01C4               	clrf	MFRC522_SelectTag@size
  2130  0449                     l1632:	
  2131                           
  2132                           ;main.c: 352: }
  2133                           ;main.c: 353: return size;
  2134  0449  0844               	movf	MFRC522_SelectTag@size,w
  2135  044A  0008               	return
  2136  044B                     __end_of_MFRC522_SelectTag:	
  2137                           
  2138                           	psect	text10
  2139  0394                     __ptext10:	
  2140 ;; *************** function _MFRC522_CRC *****************
  2141 ;; Defined at:
  2142 ;;		line 298 in file "main.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;  dataIn          1    wreg     PTR unsigned char 
  2145 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2146 ;;  length          1    3[BANK0 ] unsigned char 
  2147 ;;  dataOut         1    4[BANK0 ] PTR unsigned char 
  2148 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  dataIn          1    8[BANK0 ] PTR unsigned char 
  2151 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2152 ;;  i               1    7[BANK0 ] unsigned char 
  2153 ;;  n               1    6[BANK0 ] unsigned char 
  2154 ;; Return value:  Size  Location     Type
  2155 ;;		None               void
  2156 ;; Registers used:
  2157 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2163 ;;      Params:         0       2       0       0
  2164 ;;      Locals:         0       3       0       0
  2165 ;;      Temps:          0       1       0       0
  2166 ;;      Totals:         0       6       0       0
  2167 ;;Total ram usage:        6 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    3
  2170 ;; This function calls:
  2171 ;;		_MFRC522_Clear_Bit
  2172 ;;		_MFRC522_Rd
  2173 ;;		_MFRC522_Set_Bit
  2174 ;;		_MFRC522_Wr
  2175 ;; This function is called by:
  2176 ;;		_MFRC522_SelectTag
  2177 ;;		_MFRC522_Halt
  2178 ;;		_MFRC522_Write
  2179 ;;		_MFRC522_Read
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           
  2184                           ;psect for function _MFRC522_CRC
  2185  0394                     _MFRC522_CRC:	
  2186                           
  2187                           ;incstack = 0
  2188                           ; Regs used in _MFRC522_CRC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2189                           ;MFRC522_CRC@dataIn stored from wreg
  2190  0394  1283               	bcf	3,5	;RP0=0, select bank0
  2191  0395  1303               	bcf	3,6	;RP1=0, select bank0
  2192  0396  00A8               	movwf	MFRC522_CRC@dataIn
  2193                           
  2194                           ;main.c: 300: char i, n;
  2195                           ;main.c: 301: MFRC522_Clear_Bit( 0x05, 0x04 );
  2196  0397  3004               	movlw	4
  2197  0398  00A5               	movwf	??_MFRC522_CRC
  2198  0399  0825               	movf	??_MFRC522_CRC,w
  2199  039A  00FD               	movwf	MFRC522_Clear_Bit@mask
  2200  039B  3005               	movlw	5
  2201  039C  223C               	fcall	_MFRC522_Clear_Bit
  2202                           
  2203                           ;main.c: 302: MFRC522_Set_Bit( 0x0A, 0x80 );
  2204  039D  3080               	movlw	128
  2205  039E  1283               	bcf	3,5	;RP0=0, select bank0
  2206  039F  1303               	bcf	3,6	;RP1=0, select bank0
  2207  03A0  00A5               	movwf	??_MFRC522_CRC
  2208  03A1  0825               	movf	??_MFRC522_CRC,w
  2209  03A2  00FD               	movwf	MFRC522_Set_Bit@mask
  2210  03A3  300A               	movlw	10
  2211  03A4  221F               	fcall	_MFRC522_Set_Bit
  2212                           
  2213                           ;main.c: 305: for ( i = 0; i < length; i++ )
  2214  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2215  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2216  03A7  01A7               	clrf	MFRC522_CRC@i
  2217  03A8                     l1494:	
  2218  03A8  0823               	movf	MFRC522_CRC@length,w
  2219  03A9  0227               	subwf	MFRC522_CRC@i,w
  2220  03AA  1803               	btfsc	3,0
  2221  03AB  2BC0               	goto	l1496
  2222                           
  2223                           ;main.c: 306: {
  2224                           ;main.c: 307: MFRC522_Wr( 0x09, *dataIn++ );
  2225  03AC  0828               	movf	MFRC522_CRC@dataIn,w
  2226  03AD  0084               	movwf	4
  2227  03AE  1383               	bcf	3,7	;select IRP bank0
  2228  03AF  0800               	movf	0,w
  2229  03B0  00A5               	movwf	??_MFRC522_CRC
  2230  03B1  0825               	movf	??_MFRC522_CRC,w
  2231  03B2  00FA               	movwf	MFRC522_Wr@value
  2232  03B3  3009               	movlw	9
  2233  03B4  222D               	fcall	_MFRC522_Wr
  2234  03B5  3001               	movlw	1
  2235  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  2236  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  2237  03B8  00A5               	movwf	??_MFRC522_CRC
  2238  03B9  0825               	movf	??_MFRC522_CRC,w
  2239  03BA  07A8               	addwf	MFRC522_CRC@dataIn,f
  2240  03BB  3001               	movlw	1
  2241  03BC  00A5               	movwf	??_MFRC522_CRC
  2242  03BD  0825               	movf	??_MFRC522_CRC,w
  2243  03BE  07A7               	addwf	MFRC522_CRC@i,f
  2244  03BF  2BA8               	goto	l1494
  2245  03C0                     l1496:	
  2246                           
  2247                           ;main.c: 308: }
  2248                           ;main.c: 310: MFRC522_Wr( 0x01, 0x03 );
  2249  03C0  3003               	movlw	3
  2250  03C1  00A5               	movwf	??_MFRC522_CRC
  2251  03C2  0825               	movf	??_MFRC522_CRC,w
  2252  03C3  00FA               	movwf	MFRC522_Wr@value
  2253  03C4  3001               	movlw	1
  2254  03C5  222D               	fcall	_MFRC522_Wr
  2255                           
  2256                           ;main.c: 312: i = 0xFF;
  2257  03C6  30FF               	movlw	255
  2258  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  2259  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  2260  03C9  00A5               	movwf	??_MFRC522_CRC
  2261  03CA  0825               	movf	??_MFRC522_CRC,w
  2262  03CB  00A7               	movwf	MFRC522_CRC@i
  2263  03CC                     l1500:	
  2264                           ;main.c: 314: do
  2265                           
  2266                           
  2267                           ;main.c: 315: {
  2268                           ;main.c: 316: n = MFRC522_Rd( 0x05 );
  2269  03CC  3005               	movlw	5
  2270  03CD  226D               	fcall	_MFRC522_Rd
  2271  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  2272  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  2273  03D0  00A5               	movwf	??_MFRC522_CRC
  2274  03D1  0825               	movf	??_MFRC522_CRC,w
  2275  03D2  00A6               	movwf	MFRC522_CRC@n
  2276                           
  2277                           ;main.c: 317: i--;
  2278  03D3  3001               	movlw	1
  2279  03D4  02A7               	subwf	MFRC522_CRC@i,f
  2280                           
  2281                           ;main.c: 318: }
  2282                           ;main.c: 319: while( i && !(n & 0x04) );
  2283  03D5  0827               	movf	MFRC522_CRC@i,w
  2284  03D6  1D03               	skipz
  2285  03D7  1926               	btfsc	MFRC522_CRC@n,2
  2286  03D8  2BDA               	goto	l1508
  2287  03D9  2BCC               	goto	l1500
  2288  03DA                     l1508:	
  2289                           
  2290                           ;main.c: 321: dataOut[0] = MFRC522_Rd( 0x22 );
  2291  03DA  3022               	movlw	34
  2292  03DB  226D               	fcall	_MFRC522_Rd
  2293  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  2294  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  2295  03DE  00A5               	movwf	??_MFRC522_CRC
  2296  03DF  0824               	movf	MFRC522_CRC@dataOut,w
  2297  03E0  0084               	movwf	4
  2298  03E1  0825               	movf	??_MFRC522_CRC,w
  2299  03E2  1383               	bcf	3,7	;select IRP bank0
  2300  03E3  0080               	movwf	0
  2301                           
  2302                           ;main.c: 322: dataOut[1] = MFRC522_Rd( 0x21 );
  2303  03E4  3021               	movlw	33
  2304  03E5  226D               	fcall	_MFRC522_Rd
  2305  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  2306  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  2307  03E8  00A5               	movwf	??_MFRC522_CRC
  2308  03E9  0A24               	incf	MFRC522_CRC@dataOut,w
  2309  03EA  0084               	movwf	4
  2310  03EB  0825               	movf	??_MFRC522_CRC,w
  2311  03EC  1383               	bcf	3,7	;select IRP bank0
  2312  03ED  0080               	movwf	0
  2313  03EE  0008               	return
  2314  03EF                     __end_of_MFRC522_CRC:	
  2315                           
  2316                           	psect	text11
  2317  0281                     __ptext11:	
  2318 ;; *************** function _MFRC522_ReadCardSerial *****************
  2319 ;; Defined at:
  2320 ;;		line 482 in file "main.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;  str             1    wreg     PTR unsigned char 
  2323 ;;		 -> main@UID(6), 
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;  str             1   34[BANK0 ] PTR unsigned char 
  2326 ;;		 -> main@UID(6), 
  2327 ;;  _status         1   33[BANK0 ] unsigned char 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      unsigned char 
  2330 ;; Registers used:
  2331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2337 ;;      Params:         0       0       0       0
  2338 ;;      Locals:         0       2       0       0
  2339 ;;      Temps:          0       1       0       0
  2340 ;;      Totals:         0       3       0       0
  2341 ;;Total ram usage:        3 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    5
  2344 ;; This function calls:
  2345 ;;		_MFRC522_AntiColl
  2346 ;; This function is called by:
  2347 ;;		_main
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           
  2352                           ;psect for function _MFRC522_ReadCardSerial
  2353  0281                     _MFRC522_ReadCardSerial:	
  2354                           
  2355                           ;incstack = 0
  2356                           ; Regs used in _MFRC522_ReadCardSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  2357                           ;MFRC522_ReadCardSerial@str stored from wreg
  2358  0281  1283               	bcf	3,5	;RP0=0, select bank0
  2359  0282  1303               	bcf	3,6	;RP1=0, select bank0
  2360  0283  00C2               	movwf	MFRC522_ReadCardSerial@str
  2361                           
  2362                           ;main.c: 484: char _status;
  2363                           ;main.c: 485: _status = MFRC522_AntiColl( str );
  2364  0284  0842               	movf	MFRC522_ReadCardSerial@str,w
  2365  0285  244B               	fcall	_MFRC522_AntiColl
  2366  0286  1283               	bcf	3,5	;RP0=0, select bank0
  2367  0287  1303               	bcf	3,6	;RP1=0, select bank0
  2368  0288  00C0               	movwf	??_MFRC522_ReadCardSerial
  2369  0289  0840               	movf	??_MFRC522_ReadCardSerial,w
  2370  028A  00C1               	movwf	MFRC522_ReadCardSerial@_status
  2371                           
  2372                           ;main.c: 486: str[5] = 0;
  2373  028B  0842               	movf	MFRC522_ReadCardSerial@str,w
  2374  028C  3E05               	addlw	5
  2375  028D  0084               	movwf	4
  2376  028E  1383               	bcf	3,7	;select IRP bank0
  2377  028F  0180               	clrf	0
  2378                           
  2379                           ;main.c: 487: if (_status == 0)
  2380  0290  08C1               	movf	MFRC522_ReadCardSerial@_status,f
  2381  0291  1D03               	skipz
  2382  0292  2A95               	goto	l1660
  2383                           
  2384                           ;main.c: 488: return 1;
  2385  0293  3001               	movlw	1
  2386  0294  0008               	return
  2387  0295                     l1660:	
  2388                           
  2389                           ;main.c: 489: else
  2390                           ;main.c: 490: return 0;
  2391  0295  3000               	movlw	0
  2392  0296  0008               	return
  2393  0297                     __end_of_MFRC522_ReadCardSerial:	
  2394                           
  2395                           	psect	text12
  2396  044B                     __ptext12:	
  2397 ;; *************** function _MFRC522_AntiColl *****************
  2398 ;; Defined at:
  2399 ;;		line 445 in file "main.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;  serNum          1    wreg     PTR unsigned char 
  2402 ;;		 -> main@UID(6), 
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  serNum          1   31[BANK0 ] PTR unsigned char 
  2405 ;;		 -> main@UID(6), 
  2406 ;;  unLen           2   27[BANK0 ] unsigned int 
  2407 ;;  i               1   30[BANK0 ] unsigned char 
  2408 ;;  _status         1   29[BANK0 ] unsigned char 
  2409 ;;  serNumCheck     1   26[BANK0 ] unsigned char 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      unsigned char 
  2412 ;; Registers used:
  2413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2419 ;;      Params:         0       0       0       0
  2420 ;;      Locals:         0       6       0       0
  2421 ;;      Temps:          0       5       0       0
  2422 ;;      Totals:         0      11       0       0
  2423 ;;Total ram usage:       11 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:    4
  2426 ;; This function calls:
  2427 ;;		_MFRC522_Clear_Bit
  2428 ;;		_MFRC522_ToCard
  2429 ;;		_MFRC522_Wr
  2430 ;; This function is called by:
  2431 ;;		_MFRC522_ReadCardSerial
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           
  2436                           ;psect for function _MFRC522_AntiColl
  2437  044B                     _MFRC522_AntiColl:	
  2438                           
  2439                           ;incstack = 0
  2440                           ; Regs used in _MFRC522_AntiColl: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2441                           ;MFRC522_AntiColl@serNum stored from wreg
  2442  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2443  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2444  044D  00BF               	movwf	MFRC522_AntiColl@serNum
  2445                           
  2446                           ;main.c: 447: char _status;
  2447                           ;main.c: 448: char i;
  2448                           ;main.c: 449: char serNumCheck = 0;
  2449  044E  01BA               	clrf	MFRC522_AntiColl@serNumCheck
  2450                           
  2451                           ;main.c: 450: unsigned unLen;
  2452                           ;main.c: 451: MFRC522_Wr( 0x0D, 0x00 );
  2453  044F  01FA               	clrf	MFRC522_Wr@value
  2454  0450  300D               	movlw	13
  2455  0451  222D               	fcall	_MFRC522_Wr
  2456                           
  2457                           ;main.c: 452: serNum[0] = 0x93;
  2458  0452  3093               	movlw	147
  2459  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2460  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2461  0455  00B5               	movwf	??_MFRC522_AntiColl
  2462  0456  083F               	movf	MFRC522_AntiColl@serNum,w
  2463  0457  0084               	movwf	4
  2464  0458  0835               	movf	??_MFRC522_AntiColl,w
  2465  0459  1383               	bcf	3,7	;select IRP bank0
  2466  045A  0080               	movwf	0
  2467                           
  2468                           ;main.c: 453: serNum[1] = 0x20;
  2469  045B  3020               	movlw	32
  2470  045C  00B5               	movwf	??_MFRC522_AntiColl
  2471  045D  0A3F               	incf	MFRC522_AntiColl@serNum,w
  2472  045E  0084               	movwf	4
  2473  045F  0835               	movf	??_MFRC522_AntiColl,w
  2474  0460  0080               	movwf	0
  2475                           
  2476                           ;main.c: 454: MFRC522_Clear_Bit( 0x08, 0x08 );
  2477  0461  3008               	movlw	8
  2478  0462  00B5               	movwf	??_MFRC522_AntiColl
  2479  0463  0835               	movf	??_MFRC522_AntiColl,w
  2480  0464  00FD               	movwf	MFRC522_Clear_Bit@mask
  2481  0465  3008               	movlw	8
  2482  0466  223C               	fcall	_MFRC522_Clear_Bit
  2483                           
  2484                           ;main.c: 455: _status = MFRC522_ToCard( 0x0C, serNum, 2, serNum, &unLen );
  2485  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2486  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2487  0469  083F               	movf	MFRC522_AntiColl@serNum,w
  2488  046A  00B5               	movwf	??_MFRC522_AntiColl
  2489  046B  0835               	movf	??_MFRC522_AntiColl,w
  2490  046C  00A3               	movwf	MFRC522_ToCard@sendData
  2491  046D  3002               	movlw	2
  2492  046E  00B6               	movwf	??_MFRC522_AntiColl+1
  2493  046F  0836               	movf	??_MFRC522_AntiColl+1,w
  2494  0470  00A4               	movwf	MFRC522_ToCard@sendLen
  2495  0471  083F               	movf	MFRC522_AntiColl@serNum,w
  2496  0472  00B7               	movwf	??_MFRC522_AntiColl+2
  2497  0473  0837               	movf	??_MFRC522_AntiColl+2,w
  2498  0474  00A5               	movwf	MFRC522_ToCard@backData
  2499  0475  303B               	movlw	MFRC522_AntiColl@unLen& (0+255)
  2500  0476  00B8               	movwf	??_MFRC522_AntiColl+3
  2501  0477  0838               	movf	??_MFRC522_AntiColl+3,w
  2502  0478  00A6               	movwf	MFRC522_ToCard@backLen
  2503  0479  300C               	movlw	12
  2504  047A  26C6               	fcall	_MFRC522_ToCard
  2505  047B  1283               	bcf	3,5	;RP0=0, select bank0
  2506  047C  1303               	bcf	3,6	;RP1=0, select bank0
  2507  047D  00B9               	movwf	??_MFRC522_AntiColl+4
  2508  047E  0839               	movf	??_MFRC522_AntiColl+4,w
  2509  047F  00BD               	movwf	MFRC522_AntiColl@_status
  2510                           
  2511                           ;main.c: 456: if (_status == 0)
  2512  0480  08BD               	movf	MFRC522_AntiColl@_status,f
  2513  0481  1D03               	skipz
  2514  0482  2CA6               	goto	l191
  2515                           
  2516                           ;main.c: 457: {
  2517                           ;main.c: 458: for ( i=0; i < 4; i++ )
  2518  0483  01BE               	clrf	MFRC522_AntiColl@i
  2519  0484  3004               	movlw	4
  2520  0485  023E               	subwf	MFRC522_AntiColl@i,w
  2521  0486  1803               	btfsc	3,0
  2522  0487  2C9A               	goto	l1536
  2523  0488                     l1530:	
  2524                           
  2525                           ;main.c: 459: {
  2526                           ;main.c: 460: serNumCheck ^= serNum[i];
  2527  0488  083E               	movf	MFRC522_AntiColl@i,w
  2528  0489  073F               	addwf	MFRC522_AntiColl@serNum,w
  2529  048A  00B5               	movwf	??_MFRC522_AntiColl
  2530  048B  0835               	movf	??_MFRC522_AntiColl,w
  2531  048C  0084               	movwf	4
  2532  048D  1383               	bcf	3,7	;select IRP bank0
  2533  048E  0800               	movf	0,w
  2534  048F  00B6               	movwf	??_MFRC522_AntiColl+1
  2535  0490  0836               	movf	??_MFRC522_AntiColl+1,w
  2536  0491  06BA               	xorwf	MFRC522_AntiColl@serNumCheck,f
  2537  0492  3001               	movlw	1
  2538  0493  00B5               	movwf	??_MFRC522_AntiColl
  2539  0494  0835               	movf	??_MFRC522_AntiColl,w
  2540  0495  07BE               	addwf	MFRC522_AntiColl@i,f
  2541  0496  3004               	movlw	4
  2542  0497  023E               	subwf	MFRC522_AntiColl@i,w
  2543  0498  1C03               	skipc
  2544  0499  2C88               	goto	l1530
  2545  049A                     l1536:	
  2546                           
  2547                           ;main.c: 461: }
  2548                           ;main.c: 463: if ( serNumCheck != serNum[4] )
  2549  049A  083F               	movf	MFRC522_AntiColl@serNum,w
  2550  049B  3E04               	addlw	4
  2551  049C  0084               	movwf	4
  2552  049D  1383               	bcf	3,7	;select IRP bank0
  2553  049E  0800               	movf	0,w
  2554  049F  063A               	xorwf	MFRC522_AntiColl@serNumCheck,w
  2555  04A0  1903               	skipnz
  2556  04A1  2CA6               	goto	l191
  2557                           
  2558                           ;main.c: 464: {
  2559                           ;main.c: 465: _status = 2;
  2560  04A2  3002               	movlw	2
  2561  04A3  00B5               	movwf	??_MFRC522_AntiColl
  2562  04A4  0835               	movf	??_MFRC522_AntiColl,w
  2563  04A5  00BD               	movwf	MFRC522_AntiColl@_status
  2564  04A6                     l191:	
  2565                           
  2566                           ;main.c: 466: }
  2567                           ;main.c: 467: }
  2568                           ;main.c: 468: return _status;
  2569  04A6  083D               	movf	MFRC522_AntiColl@_status,w
  2570  04A7  0008               	return
  2571  04A8                     __end_of_MFRC522_AntiColl:	
  2572                           
  2573                           	psect	text13
  2574  06C6                     __ptext13:	
  2575 ;; *************** function _MFRC522_ToCard *****************
  2576 ;; Defined at:
  2577 ;;		line 182 in file "main.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  command         1    wreg     unsigned char 
  2580 ;;  sendData        1    3[BANK0 ] PTR unsigned char 
  2581 ;;		 -> main@UID(6), main@TagType(1), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  2582 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2583 ;;  sendLen         1    4[BANK0 ] unsigned char 
  2584 ;;  backData        1    5[BANK0 ] PTR unsigned char 
  2585 ;;		 -> main@UID(6), main@TagType(1), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  2586 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  2587 ;;  backLen         1    6[BANK0 ] PTR unsigned int 
  2588 ;;		 -> MFRC522_AntiColl@unLen(2), MFRC522_Read@unLen(2), MFRC522_Write@recvBits(2), MFRC522_Auth@recvBits(2), 
  2589 ;;		 -> MFRC522_Halt@unLen(2), MFRC522_SelectTag@recvBits(2), MFRC522_Request@backBits(2), 
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;  command         1   17[BANK0 ] unsigned char 
  2592 ;;  i               2   18[BANK0 ] unsigned int 
  2593 ;;  n               1   20[BANK0 ] unsigned char 
  2594 ;;  irqEn           1   16[BANK0 ] unsigned char 
  2595 ;;  lastBits        1   15[BANK0 ] unsigned char 
  2596 ;;  _status         1   14[BANK0 ] unsigned char 
  2597 ;;  waitIRq         1   13[BANK0 ] unsigned char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  1    wreg      unsigned char 
  2600 ;; Registers used:
  2601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2607 ;;      Params:         0       4       0       0
  2608 ;;      Locals:         0       8       0       0
  2609 ;;      Temps:          0       6       0       0
  2610 ;;      Totals:         0      18       0       0
  2611 ;;Total ram usage:       18 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    3
  2614 ;; This function calls:
  2615 ;;		_MFRC522_Clear_Bit
  2616 ;;		_MFRC522_Rd
  2617 ;;		_MFRC522_Set_Bit
  2618 ;;		_MFRC522_Wr
  2619 ;; This function is called by:
  2620 ;;		_MFRC522_Request
  2621 ;;		_MFRC522_SelectTag
  2622 ;;		_MFRC522_AntiColl
  2623 ;;		_MFRC522_Halt
  2624 ;;		_MFRC522_Auth
  2625 ;;		_MFRC522_Write
  2626 ;;		_MFRC522_Read
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           
  2631                           ;psect for function _MFRC522_ToCard
  2632  06C6                     _MFRC522_ToCard:	
  2633                           
  2634                           ;incstack = 0
  2635                           ; Regs used in _MFRC522_ToCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2636                           ;MFRC522_ToCard@command stored from wreg
  2637  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  2638  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  2639  06C8  00B1               	movwf	MFRC522_ToCard@command
  2640                           
  2641                           ;main.c: 184: char _status = 2;
  2642  06C9  3002               	movlw	2
  2643  06CA  00A7               	movwf	??_MFRC522_ToCard
  2644  06CB  0827               	movf	??_MFRC522_ToCard,w
  2645  06CC  00AE               	movwf	MFRC522_ToCard@_status
  2646                           
  2647                           ;main.c: 185: char irqEn = 0x00;
  2648  06CD  01B0               	clrf	MFRC522_ToCard@irqEn
  2649                           
  2650                           ;main.c: 186: char waitIRq = 0x00;
  2651  06CE  01AD               	clrf	MFRC522_ToCard@waitIRq
  2652                           
  2653                           ;main.c: 187: char lastBits;
  2654                           ;main.c: 188: char n;
  2655                           ;main.c: 189: unsigned i;
  2656                           ;main.c: 191: switch (command)
  2657  06CF  2EDF               	goto	l1392
  2658  06D0                     l1386:	
  2659                           ;main.c: 192: {
  2660                           ;main.c: 193: case 0x0E:
  2661                           
  2662                           
  2663                           ;main.c: 194: {
  2664                           ;main.c: 195: irqEn = 0x12;
  2665  06D0  3012               	movlw	18
  2666  06D1  00A7               	movwf	??_MFRC522_ToCard
  2667  06D2  0827               	movf	??_MFRC522_ToCard,w
  2668  06D3  00B0               	movwf	MFRC522_ToCard@irqEn
  2669                           
  2670                           ;main.c: 196: waitIRq = 0x10;
  2671  06D4  3010               	movlw	16
  2672  06D5  2EDB               	goto	L4
  2673  06D6                     l1388:	
  2674                           ;main.c: 198: }
  2675                           ;main.c: 199: case 0x0C:
  2676                           
  2677                           ;main.c: 197: break;
  2678                           
  2679                           
  2680                           ;main.c: 200: {
  2681                           ;main.c: 201: irqEn = 0x77;
  2682  06D6  3077               	movlw	119
  2683  06D7  00A7               	movwf	??_MFRC522_ToCard
  2684  06D8  0827               	movf	??_MFRC522_ToCard,w
  2685  06D9  00B0               	movwf	MFRC522_ToCard@irqEn
  2686                           
  2687                           ;main.c: 202: waitIRq = 0x30;
  2688  06DA  3030               	movlw	48
  2689  06DB                     L4:	
  2690  06DB  00A7               	movwf	??_MFRC522_ToCard
  2691  06DC  0827               	movf	??_MFRC522_ToCard,w
  2692  06DD  00AD               	movwf	MFRC522_ToCard@waitIRq
  2693                           
  2694                           ;main.c: 207: }
  2695                           
  2696                           ;main.c: 206: break;
  2697                           
  2698                           ;main.c: 204: }
  2699                           ;main.c: 205: default:
  2700                           
  2701                           ;main.c: 203: break;
  2702  06DE  2EE7               	goto	l1394
  2703  06DF                     l1392:	
  2704  06DF  0831               	movf	MFRC522_ToCard@command,w
  2705                           
  2706                           ; Switch size 1, requested type "space"
  2707                           ; Number of cases is 2, Range of values is 12 to 14
  2708                           ; switch strategies available:
  2709                           ; Name         Instructions Cycles
  2710                           ; simple_byte            7     4 (average)
  2711                           ; direct_byte           12     9 (fixed)
  2712                           ; jumptable            263     9 (fixed)
  2713                           ;	Chosen strategy is simple_byte
  2714  06E0  3A0C               	xorlw	12	; case 12
  2715  06E1  1903               	skipnz
  2716  06E2  2ED6               	goto	l1388
  2717  06E3  3A02               	xorlw	2	; case 14
  2718  06E4  1903               	skipnz
  2719  06E5  2ED0               	goto	l1386
  2720  06E6  2EE7               	goto	l1394
  2721  06E7                     l1394:	
  2722                           
  2723                           ;main.c: 208: MFRC522_Wr( 0x02, irqEn | 0x80 );
  2724  06E7  0830               	movf	MFRC522_ToCard@irqEn,w
  2725  06E8  3880               	iorlw	128
  2726  06E9  00A7               	movwf	??_MFRC522_ToCard
  2727  06EA  0827               	movf	??_MFRC522_ToCard,w
  2728  06EB  00FA               	movwf	MFRC522_Wr@value
  2729  06EC  3002               	movlw	2
  2730  06ED  222D               	fcall	_MFRC522_Wr
  2731                           
  2732                           ;main.c: 209: MFRC522_Clear_Bit( 0x04, 0x80 );
  2733  06EE  3080               	movlw	128
  2734  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  2735  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  2736  06F1  00A7               	movwf	??_MFRC522_ToCard
  2737  06F2  0827               	movf	??_MFRC522_ToCard,w
  2738  06F3  00FD               	movwf	MFRC522_Clear_Bit@mask
  2739  06F4  3004               	movlw	4
  2740  06F5  223C               	fcall	_MFRC522_Clear_Bit
  2741                           
  2742                           ;main.c: 210: MFRC522_Set_Bit( 0x0A, 0x80 );
  2743  06F6  3080               	movlw	128
  2744  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  2745  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  2746  06F9  00A7               	movwf	??_MFRC522_ToCard
  2747  06FA  0827               	movf	??_MFRC522_ToCard,w
  2748  06FB  00FD               	movwf	MFRC522_Set_Bit@mask
  2749  06FC  300A               	movlw	10
  2750  06FD  221F               	fcall	_MFRC522_Set_Bit
  2751                           
  2752                           ;main.c: 211: MFRC522_Wr( 0x01, 0x00 );
  2753  06FE  01FA               	clrf	MFRC522_Wr@value
  2754  06FF  3001               	movlw	1
  2755  0700  222D               	fcall	_MFRC522_Wr
  2756                           
  2757                           ;main.c: 216: for ( i=0; i < sendLen; i++ )
  2758  0701  1283               	bcf	3,5	;RP0=0, select bank0
  2759  0702  1303               	bcf	3,6	;RP1=0, select bank0
  2760  0703  01B2               	clrf	MFRC522_ToCard@i
  2761  0704  01B3               	clrf	MFRC522_ToCard@i+1
  2762  0705                     l1402:	
  2763  0705  0824               	movf	MFRC522_ToCard@sendLen,w
  2764  0706  00A7               	movwf	??_MFRC522_ToCard
  2765  0707  01A8               	clrf	??_MFRC522_ToCard+1
  2766  0708  0828               	movf	??_MFRC522_ToCard+1,w
  2767  0709  0233               	subwf	MFRC522_ToCard@i+1,w
  2768  070A  1D03               	skipz
  2769  070B  2F0E               	goto	u995
  2770  070C  0827               	movf	??_MFRC522_ToCard,w
  2771  070D  0232               	subwf	MFRC522_ToCard@i,w
  2772  070E                     u995:	
  2773  070E  1803               	btfsc	3,0
  2774  070F  2F25               	goto	l1404
  2775                           
  2776                           ;main.c: 217: {
  2777                           ;main.c: 218: MFRC522_Wr( 0x09, sendData[i] );
  2778  0710  0832               	movf	MFRC522_ToCard@i,w
  2779  0711  0723               	addwf	MFRC522_ToCard@sendData,w
  2780  0712  00A7               	movwf	??_MFRC522_ToCard
  2781  0713  0827               	movf	??_MFRC522_ToCard,w
  2782  0714  0084               	movwf	4
  2783  0715  1383               	bcf	3,7	;select IRP bank0
  2784  0716  0800               	movf	0,w
  2785  0717  00A8               	movwf	??_MFRC522_ToCard+1
  2786  0718  0828               	movf	??_MFRC522_ToCard+1,w
  2787  0719  00FA               	movwf	MFRC522_Wr@value
  2788  071A  3009               	movlw	9
  2789  071B  222D               	fcall	_MFRC522_Wr
  2790  071C  3001               	movlw	1
  2791  071D  1283               	bcf	3,5	;RP0=0, select bank0
  2792  071E  1303               	bcf	3,6	;RP1=0, select bank0
  2793  071F  07B2               	addwf	MFRC522_ToCard@i,f
  2794  0720  1803               	skipnc
  2795  0721  0AB3               	incf	MFRC522_ToCard@i+1,f
  2796  0722  3000               	movlw	0
  2797  0723  07B3               	addwf	MFRC522_ToCard@i+1,f
  2798  0724  2F05               	goto	l1402
  2799  0725                     l1404:	
  2800                           
  2801                           ;main.c: 219: }
  2802                           ;main.c: 221: MFRC522_Wr( 0x01, command );
  2803  0725  0831               	movf	MFRC522_ToCard@command,w
  2804  0726  00A7               	movwf	??_MFRC522_ToCard
  2805  0727  0827               	movf	??_MFRC522_ToCard,w
  2806  0728  00FA               	movwf	MFRC522_Wr@value
  2807  0729  3001               	movlw	1
  2808  072A  222D               	fcall	_MFRC522_Wr
  2809                           
  2810                           ;main.c: 222: if (command == 0x0C )
  2811  072B  1283               	bcf	3,5	;RP0=0, select bank0
  2812  072C  1303               	bcf	3,6	;RP1=0, select bank0
  2813  072D  0831               	movf	MFRC522_ToCard@command,w
  2814  072E  3A0C               	xorlw	12
  2815  072F  1D03               	skipz
  2816  0730  2F37               	goto	l1410
  2817                           
  2818                           ;main.c: 223: {
  2819                           ;main.c: 224: MFRC522_Set_Bit( 0x0D, 0x80 );
  2820  0731  3080               	movlw	128
  2821  0732  00A7               	movwf	??_MFRC522_ToCard
  2822  0733  0827               	movf	??_MFRC522_ToCard,w
  2823  0734  00FD               	movwf	MFRC522_Set_Bit@mask
  2824  0735  300D               	movlw	13
  2825  0736  221F               	fcall	_MFRC522_Set_Bit
  2826  0737                     l1410:	
  2827                           
  2828                           ;main.c: 225: }
  2829                           ;main.c: 228: i = 0xFFFF;
  2830  0737  30FF               	movlw	255
  2831  0738  1283               	bcf	3,5	;RP0=0, select bank0
  2832  0739  1303               	bcf	3,6	;RP1=0, select bank0
  2833  073A  00B2               	movwf	MFRC522_ToCard@i
  2834  073B  30FF               	movlw	255
  2835  073C  00B3               	movwf	MFRC522_ToCard@i+1
  2836  073D                     l1412:	
  2837                           ;main.c: 229: do
  2838                           
  2839                           
  2840                           ;main.c: 230: {
  2841                           ;main.c: 233: n = MFRC522_Rd( 0x04 );
  2842  073D  3004               	movlw	4
  2843  073E  226D               	fcall	_MFRC522_Rd
  2844  073F  1283               	bcf	3,5	;RP0=0, select bank0
  2845  0740  1303               	bcf	3,6	;RP1=0, select bank0
  2846  0741  00A7               	movwf	??_MFRC522_ToCard
  2847  0742  0827               	movf	??_MFRC522_ToCard,w
  2848  0743  00B4               	movwf	MFRC522_ToCard@n
  2849                           
  2850                           ;main.c: 234: i--;
  2851  0744  3001               	movlw	1
  2852  0745  02B2               	subwf	MFRC522_ToCard@i,f
  2853  0746  3000               	movlw	0
  2854  0747  1C03               	skipc
  2855  0748  03B3               	decf	MFRC522_ToCard@i+1,f
  2856  0749  02B3               	subwf	MFRC522_ToCard@i+1,f
  2857                           
  2858                           ;main.c: 235: }
  2859                           ;main.c: 236: while ( i && !(n & 0x01) && !( n & waitIRq ) );
  2860  074A  0833               	movf	MFRC522_ToCard@i+1,w
  2861  074B  0432               	iorwf	MFRC522_ToCard@i,w
  2862  074C  1D03               	btfss	3,2
  2863  074D  1834               	btfsc	MFRC522_ToCard@n,0
  2864  074E  2F53               	goto	l1418
  2865  074F  0834               	movf	MFRC522_ToCard@n,w
  2866  0750  052D               	andwf	MFRC522_ToCard@waitIRq,w
  2867  0751  1903               	btfsc	3,2
  2868  0752  2F3D               	goto	l1412
  2869  0753                     l1418:	
  2870                           
  2871                           ;main.c: 237: MFRC522_Clear_Bit( 0x0D, 0x80 );
  2872  0753  3080               	movlw	128
  2873  0754  00A7               	movwf	??_MFRC522_ToCard
  2874  0755  0827               	movf	??_MFRC522_ToCard,w
  2875  0756  00FD               	movwf	MFRC522_Clear_Bit@mask
  2876  0757  300D               	movlw	13
  2877  0758  223C               	fcall	_MFRC522_Clear_Bit
  2878                           
  2879                           ;main.c: 238: if (i != 0)
  2880  0759  1283               	bcf	3,5	;RP0=0, select bank0
  2881  075A  1303               	bcf	3,6	;RP1=0, select bank0
  2882  075B  0833               	movf	MFRC522_ToCard@i+1,w
  2883  075C  0432               	iorwf	MFRC522_ToCard@i,w
  2884  075D  1903               	skipnz
  2885  075E  2FF7               	goto	l122
  2886                           
  2887                           ;main.c: 239: {
  2888                           ;main.c: 240: if( !( MFRC522_Rd( 0x06 ) & 0x1B ) )
  2889  075F  3006               	movlw	6
  2890  0760  226D               	fcall	_MFRC522_Rd
  2891  0761  391B               	andlw	27
  2892  0762  1D03               	btfss	3,2
  2893  0763  2FF1               	goto	l1458
  2894                           
  2895                           ;main.c: 241: {
  2896                           ;main.c: 242: _status = 0;
  2897  0764  1283               	bcf	3,5	;RP0=0, select bank0
  2898  0765  1303               	bcf	3,6	;RP1=0, select bank0
  2899  0766  01AE               	clrf	MFRC522_ToCard@_status
  2900                           
  2901                           ;main.c: 243: if ( n & irqEn & 0x01 )
  2902  0767  0830               	movf	MFRC522_ToCard@irqEn,w
  2903  0768  0534               	andwf	MFRC522_ToCard@n,w
  2904  0769  00A7               	movwf	??_MFRC522_ToCard
  2905  076A  1C27               	btfss	??_MFRC522_ToCard,0
  2906  076B  2F6E               	goto	l1430
  2907                           
  2908                           ;main.c: 244: {
  2909                           ;main.c: 245: _status = 1;
  2910  076C  01AE               	clrf	MFRC522_ToCard@_status
  2911  076D  0AAE               	incf	MFRC522_ToCard@_status,f
  2912  076E                     l1430:	
  2913                           
  2914                           ;main.c: 246: }
  2915                           ;main.c: 247: if ( command == 0x0C )
  2916  076E  0831               	movf	MFRC522_ToCard@command,w
  2917  076F  3A0C               	xorlw	12
  2918  0770  1D03               	skipz
  2919  0771  2FF7               	goto	l122
  2920                           
  2921                           ;main.c: 248: {
  2922                           ;main.c: 249: n = MFRC522_Rd( 0x0A );
  2923  0772  300A               	movlw	10
  2924  0773  226D               	fcall	_MFRC522_Rd
  2925  0774  1283               	bcf	3,5	;RP0=0, select bank0
  2926  0775  1303               	bcf	3,6	;RP1=0, select bank0
  2927  0776  00A7               	movwf	??_MFRC522_ToCard
  2928  0777  0827               	movf	??_MFRC522_ToCard,w
  2929  0778  00B4               	movwf	MFRC522_ToCard@n
  2930                           
  2931                           ;main.c: 250: lastBits = MFRC522_Rd( 0x0C ) & 0x07;
  2932  0779  300C               	movlw	12
  2933  077A  226D               	fcall	_MFRC522_Rd
  2934  077B  3907               	andlw	7
  2935  077C  1283               	bcf	3,5	;RP0=0, select bank0
  2936  077D  1303               	bcf	3,6	;RP1=0, select bank0
  2937  077E  00A7               	movwf	??_MFRC522_ToCard
  2938  077F  0827               	movf	??_MFRC522_ToCard,w
  2939  0780  00AF               	movwf	MFRC522_ToCard@lastBits
  2940                           
  2941                           ;main.c: 251: if (lastBits)
  2942  0781  082F               	movf	MFRC522_ToCard@lastBits,w
  2943  0782  1903               	btfsc	3,2
  2944  0783  2FA8               	goto	l1438
  2945                           
  2946                           ;main.c: 252: {
  2947                           ;main.c: 253: *backLen = (n-1) * 8 + lastBits;
  2948  0784  0834               	movf	MFRC522_ToCard@n,w
  2949  0785  00A7               	movwf	??_MFRC522_ToCard
  2950  0786  01A8               	clrf	??_MFRC522_ToCard+1
  2951  0787  1003               	clrc
  2952  0788  0DA7               	rlf	??_MFRC522_ToCard,f
  2953  0789  0DA8               	rlf	??_MFRC522_ToCard+1,f
  2954  078A  1003               	clrc
  2955  078B  0DA7               	rlf	??_MFRC522_ToCard,f
  2956  078C  0DA8               	rlf	??_MFRC522_ToCard+1,f
  2957  078D  1003               	clrc
  2958  078E  0DA7               	rlf	??_MFRC522_ToCard,f
  2959  078F  0DA8               	rlf	??_MFRC522_ToCard+1,f
  2960  0790  082F               	movf	MFRC522_ToCard@lastBits,w
  2961  0791  0727               	addwf	??_MFRC522_ToCard,w
  2962  0792  00A9               	movwf	??_MFRC522_ToCard+2
  2963  0793  3000               	movlw	0
  2964  0794  1803               	skipnc
  2965  0795  3001               	movlw	1
  2966  0796  0728               	addwf	??_MFRC522_ToCard+1,w
  2967  0797  00AA               	movwf	??_MFRC522_ToCard+3
  2968  0798  0829               	movf	??_MFRC522_ToCard+2,w
  2969  0799  3EF8               	addlw	248
  2970  079A  00AB               	movwf	??_MFRC522_ToCard+4
  2971  079B  082A               	movf	??_MFRC522_ToCard+3,w
  2972  079C  1803               	skipnc
  2973  079D  3E01               	addlw	1
  2974  079E  3EFF               	addlw	255
  2975  079F  00AC               	movwf	??_MFRC522_ToCard+5
  2976  07A0  0826               	movf	MFRC522_ToCard@backLen,w
  2977  07A1  0084               	movwf	4
  2978  07A2  082B               	movf	??_MFRC522_ToCard+4,w
  2979  07A3  1383               	bcf	3,7	;select IRP bank0
  2980  07A4  0080               	movwf	0
  2981  07A5  0A84               	incf	4,f
  2982  07A6  082C               	movf	??_MFRC522_ToCard+5,w
  2983  07A7  2FBB               	goto	L5
  2984  07A8                     l1438:	
  2985                           ;main.c: 254: }
  2986                           
  2987                           
  2988                           ;main.c: 255: else
  2989                           ;main.c: 256: {
  2990                           ;main.c: 257: *backLen = n * 8;
  2991  07A8  0834               	movf	MFRC522_ToCard@n,w
  2992  07A9  00A7               	movwf	??_MFRC522_ToCard
  2993  07AA  01A8               	clrf	??_MFRC522_ToCard+1
  2994  07AB  1003               	clrc
  2995  07AC  0DA7               	rlf	??_MFRC522_ToCard,f
  2996  07AD  0DA8               	rlf	??_MFRC522_ToCard+1,f
  2997  07AE  1003               	clrc
  2998  07AF  0DA7               	rlf	??_MFRC522_ToCard,f
  2999  07B0  0DA8               	rlf	??_MFRC522_ToCard+1,f
  3000  07B1  1003               	clrc
  3001  07B2  0DA7               	rlf	??_MFRC522_ToCard,f
  3002  07B3  0DA8               	rlf	??_MFRC522_ToCard+1,f
  3003  07B4  0826               	movf	MFRC522_ToCard@backLen,w
  3004  07B5  0084               	movwf	4
  3005  07B6  0827               	movf	??_MFRC522_ToCard,w
  3006  07B7  1383               	bcf	3,7	;select IRP bank0
  3007  07B8  0080               	movwf	0
  3008  07B9  0A84               	incf	4,f
  3009  07BA  0828               	movf	??_MFRC522_ToCard+1,w
  3010  07BB                     L5:	
  3011  07BB  0080               	movwf	0
  3012                           
  3013                           ;main.c: 258: }
  3014                           ;main.c: 259: if (n == 0)
  3015  07BC  08B4               	movf	MFRC522_ToCard@n,f
  3016  07BD  1D03               	skipz
  3017  07BE  2FC1               	goto	l1444
  3018                           
  3019                           ;main.c: 260: {
  3020                           ;main.c: 261: n = 1;
  3021  07BF  01B4               	clrf	MFRC522_ToCard@n
  3022  07C0  0AB4               	incf	MFRC522_ToCard@n,f
  3023  07C1                     l1444:	
  3024                           
  3025                           ;main.c: 262: }
  3026                           ;main.c: 263: if (n > 16)
  3027  07C1  3011               	movlw	17
  3028  07C2  0234               	subwf	MFRC522_ToCard@n,w
  3029  07C3  1C03               	skipc
  3030  07C4  2FC9               	goto	l1448
  3031                           
  3032                           ;main.c: 264: {
  3033                           ;main.c: 265: n = 16;
  3034  07C5  3010               	movlw	16
  3035  07C6  00A7               	movwf	??_MFRC522_ToCard
  3036  07C7  0827               	movf	??_MFRC522_ToCard,w
  3037  07C8  00B4               	movwf	MFRC522_ToCard@n
  3038  07C9                     l1448:	
  3039                           
  3040                           ;main.c: 266: }
  3041                           ;main.c: 268: for (i=0; i < n; i++)
  3042  07C9  01B2               	clrf	MFRC522_ToCard@i
  3043  07CA  01B3               	clrf	MFRC522_ToCard@i+1
  3044  07CB                     l1454:	
  3045  07CB  0834               	movf	MFRC522_ToCard@n,w
  3046  07CC  00A7               	movwf	??_MFRC522_ToCard
  3047  07CD  01A8               	clrf	??_MFRC522_ToCard+1
  3048  07CE  0828               	movf	??_MFRC522_ToCard+1,w
  3049  07CF  0233               	subwf	MFRC522_ToCard@i+1,w
  3050  07D0  1D03               	skipz
  3051  07D1  2FD4               	goto	u1115
  3052  07D2  0827               	movf	??_MFRC522_ToCard,w
  3053  07D3  0232               	subwf	MFRC522_ToCard@i,w
  3054  07D4                     u1115:	
  3055  07D4  1803               	btfsc	3,0
  3056  07D5  2FEA               	goto	l1456
  3057                           
  3058                           ;main.c: 269: {
  3059                           ;main.c: 270: backData[i] = MFRC522_Rd( 0x09 );
  3060  07D6  3009               	movlw	9
  3061  07D7  226D               	fcall	_MFRC522_Rd
  3062  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  3063  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  3064  07DA  00A7               	movwf	??_MFRC522_ToCard
  3065  07DB  0832               	movf	MFRC522_ToCard@i,w
  3066  07DC  0725               	addwf	MFRC522_ToCard@backData,w
  3067  07DD  00A8               	movwf	??_MFRC522_ToCard+1
  3068  07DE  0828               	movf	??_MFRC522_ToCard+1,w
  3069  07DF  0084               	movwf	4
  3070  07E0  0827               	movf	??_MFRC522_ToCard,w
  3071  07E1  1383               	bcf	3,7	;select IRP bank0
  3072  07E2  0080               	movwf	0
  3073  07E3  3001               	movlw	1
  3074  07E4  07B2               	addwf	MFRC522_ToCard@i,f
  3075  07E5  1803               	skipnc
  3076  07E6  0AB3               	incf	MFRC522_ToCard@i+1,f
  3077  07E7  3000               	movlw	0
  3078  07E8  07B3               	addwf	MFRC522_ToCard@i+1,f
  3079  07E9  2FCB               	goto	l1454
  3080  07EA                     l1456:	
  3081                           
  3082                           ;main.c: 271: }
  3083                           ;main.c: 273: backData[i] = 0;
  3084  07EA  0832               	movf	MFRC522_ToCard@i,w
  3085  07EB  0725               	addwf	MFRC522_ToCard@backData,w
  3086  07EC  00A7               	movwf	??_MFRC522_ToCard
  3087  07ED  0827               	movf	??_MFRC522_ToCard,w
  3088  07EE  0084               	movwf	4
  3089  07EF  0180               	clrf	0
  3090                           
  3091                           ;main.c: 274: }
  3092                           ;main.c: 275: }
  3093  07F0  2FF7               	goto	l122
  3094  07F1                     l1458:	
  3095                           
  3096                           ;main.c: 276: else
  3097                           ;main.c: 277: {
  3098                           ;main.c: 278: _status = 2;
  3099  07F1  3002               	movlw	2
  3100  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  3101  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  3102  07F4  00A7               	movwf	??_MFRC522_ToCard
  3103  07F5  0827               	movf	??_MFRC522_ToCard,w
  3104  07F6  00AE               	movwf	MFRC522_ToCard@_status
  3105  07F7                     l122:	
  3106                           
  3107                           ;main.c: 279: }
  3108                           ;main.c: 280: }
  3109                           ;main.c: 283: return _status;
  3110  07F7  082E               	movf	MFRC522_ToCard@_status,w
  3111  07F8  0008               	return
  3112  07F9                     __end_of_MFRC522_ToCard:	
  3113                           
  3114                           	psect	text14
  3115  023C                     __ptext14:	
  3116 ;; *************** function _MFRC522_Clear_Bit *****************
  3117 ;; Defined at:
  3118 ;;		line 140 in file "main.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  addr            1    wreg     unsigned char 
  3121 ;;  mask            1   13[COMMON] unsigned char 
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;  addr            1    2[BANK0 ] unsigned char 
  3124 ;; Return value:  Size  Location     Type
  3125 ;;		None               void
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3133 ;;      Params:         1       0       0       0
  3134 ;;      Locals:         0       1       0       0
  3135 ;;      Temps:          0       2       0       0
  3136 ;;      Totals:         1       3       0       0
  3137 ;;Total ram usage:        4 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    2
  3140 ;; This function calls:
  3141 ;;		_MFRC522_Rd
  3142 ;;		_MFRC522_Wr
  3143 ;; This function is called by:
  3144 ;;		_MFRC522_ToCard
  3145 ;;		_MFRC522_CRC
  3146 ;;		_MFRC522_AntiColl
  3147 ;;		_MFRC522_AntennaOff
  3148 ;;		_MFRC522_Halt
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           
  3153                           ;psect for function _MFRC522_Clear_Bit
  3154  023C                     _MFRC522_Clear_Bit:	
  3155                           
  3156                           ;incstack = 0
  3157                           ; Regs used in _MFRC522_Clear_Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3158                           ;MFRC522_Clear_Bit@addr stored from wreg
  3159  023C  1283               	bcf	3,5	;RP0=0, select bank0
  3160  023D  1303               	bcf	3,6	;RP1=0, select bank0
  3161  023E  00A2               	movwf	MFRC522_Clear_Bit@addr
  3162                           
  3163                           ;main.c: 142: MFRC522_Wr( addr, MFRC522_Rd( addr ) & (~mask) );
  3164  023F  097D               	comf	MFRC522_Clear_Bit@mask,w
  3165  0240  00A0               	movwf	??_MFRC522_Clear_Bit
  3166  0241  0822               	movf	MFRC522_Clear_Bit@addr,w
  3167  0242  226D               	fcall	_MFRC522_Rd
  3168  0243  1283               	bcf	3,5	;RP0=0, select bank0
  3169  0244  1303               	bcf	3,6	;RP1=0, select bank0
  3170  0245  0520               	andwf	??_MFRC522_Clear_Bit,w
  3171  0246  00A1               	movwf	??_MFRC522_Clear_Bit+1
  3172  0247  0821               	movf	??_MFRC522_Clear_Bit+1,w
  3173  0248  00FA               	movwf	MFRC522_Wr@value
  3174  0249  0822               	movf	MFRC522_Clear_Bit@addr,w
  3175  024A  222D               	fcall	_MFRC522_Wr
  3176  024B  0008               	return
  3177  024C                     __end_of_MFRC522_Clear_Bit:	
  3178                           
  3179                           	psect	text15
  3180  0320                     __ptext15:	
  3181 ;; *************** function _MFRC522_Init *****************
  3182 ;; Defined at:
  3183 ;;		line 160 in file "main.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;		None
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;		None               void
  3190 ;; Registers used:
  3191 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3197 ;;      Params:         0       0       0       0
  3198 ;;      Locals:         0       0       0       0
  3199 ;;      Temps:          0       1       0       0
  3200 ;;      Totals:         0       1       0       0
  3201 ;;Total ram usage:        1 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    4
  3204 ;; This function calls:
  3205 ;;		_MFRC522_AntennaOn
  3206 ;;		_MFRC522_Reset
  3207 ;;		_MFRC522_Wr
  3208 ;; This function is called by:
  3209 ;;		_main
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           
  3214                           ;psect for function _MFRC522_Init
  3215  0320                     _MFRC522_Init:	
  3216                           
  3217                           ;main.c: 162: TRISAbits.TRISA1 = 0;
  3218                           
  3219                           ;incstack = 0
  3220                           ; Regs used in _MFRC522_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3221  0320  1683               	bsf	3,5	;RP0=1, select bank1
  3222  0321  1303               	bcf	3,6	;RP1=0, select bank1
  3223  0322  1085               	bcf	5,1	;volatile
  3224                           
  3225                           ;main.c: 163: TRISAbits.TRISA0 = 0;
  3226  0323  1005               	bcf	5,0	;volatile
  3227                           
  3228                           ;main.c: 164: PORTAbits.RA1 = 1;
  3229  0324  1283               	bcf	3,5	;RP0=0, select bank0
  3230  0325  1303               	bcf	3,6	;RP1=0, select bank0
  3231  0326  1485               	bsf	5,1	;volatile
  3232                           
  3233                           ;main.c: 165: PORTAbits.RA0 = 1;
  3234  0327  1405               	bsf	5,0	;volatile
  3235                           
  3236                           ;main.c: 167: MFRC522_Reset();
  3237  0328  21FF               	fcall	_MFRC522_Reset
  3238                           
  3239                           ;main.c: 169: MFRC522_Wr( 0x2A, 0x8D );
  3240  0329  308D               	movlw	141
  3241  032A  1283               	bcf	3,5	;RP0=0, select bank0
  3242  032B  1303               	bcf	3,6	;RP1=0, select bank0
  3243  032C  00A3               	movwf	??_MFRC522_Init
  3244  032D  0823               	movf	??_MFRC522_Init,w
  3245  032E  00FA               	movwf	MFRC522_Wr@value
  3246  032F  302A               	movlw	42
  3247  0330  222D               	fcall	_MFRC522_Wr
  3248                           
  3249                           ;main.c: 170: MFRC522_Wr( 0x2B, 0x3E );
  3250  0331  303E               	movlw	62
  3251  0332  1283               	bcf	3,5	;RP0=0, select bank0
  3252  0333  1303               	bcf	3,6	;RP1=0, select bank0
  3253  0334  00A3               	movwf	??_MFRC522_Init
  3254  0335  0823               	movf	??_MFRC522_Init,w
  3255  0336  00FA               	movwf	MFRC522_Wr@value
  3256  0337  302B               	movlw	43
  3257  0338  222D               	fcall	_MFRC522_Wr
  3258                           
  3259                           ;main.c: 171: MFRC522_Wr( 0x2D, 30 );
  3260  0339  301E               	movlw	30
  3261  033A  1283               	bcf	3,5	;RP0=0, select bank0
  3262  033B  1303               	bcf	3,6	;RP1=0, select bank0
  3263  033C  00A3               	movwf	??_MFRC522_Init
  3264  033D  0823               	movf	??_MFRC522_Init,w
  3265  033E  00FA               	movwf	MFRC522_Wr@value
  3266  033F  302D               	movlw	45
  3267  0340  222D               	fcall	_MFRC522_Wr
  3268                           
  3269                           ;main.c: 172: MFRC522_Wr( 0x2C, 0 );
  3270  0341  01FA               	clrf	MFRC522_Wr@value
  3271  0342  302C               	movlw	44
  3272  0343  222D               	fcall	_MFRC522_Wr
  3273                           
  3274                           ;main.c: 174: MFRC522_Wr( 0x15, 0x40 );
  3275  0344  3040               	movlw	64
  3276  0345  1283               	bcf	3,5	;RP0=0, select bank0
  3277  0346  1303               	bcf	3,6	;RP1=0, select bank0
  3278  0347  00A3               	movwf	??_MFRC522_Init
  3279  0348  0823               	movf	??_MFRC522_Init,w
  3280  0349  00FA               	movwf	MFRC522_Wr@value
  3281  034A  3015               	movlw	21
  3282  034B  222D               	fcall	_MFRC522_Wr
  3283                           
  3284                           ;main.c: 175: MFRC522_Wr( 0x11, 0x3D );
  3285  034C  303D               	movlw	61
  3286  034D  1283               	bcf	3,5	;RP0=0, select bank0
  3287  034E  1303               	bcf	3,6	;RP1=0, select bank0
  3288  034F  00A3               	movwf	??_MFRC522_Init
  3289  0350  0823               	movf	??_MFRC522_Init,w
  3290  0351  00FA               	movwf	MFRC522_Wr@value
  3291  0352  3011               	movlw	17
  3292  0353  222D               	fcall	_MFRC522_Wr
  3293                           
  3294                           ;main.c: 180: MFRC522_AntennaOn();
  3295  0354  2216               	fcall	_MFRC522_AntennaOn
  3296  0355  0008               	return
  3297  0356                     __end_of_MFRC522_Init:	
  3298                           
  3299                           	psect	text16
  3300  01FF                     __ptext16:	
  3301 ;; *************** function _MFRC522_Reset *****************
  3302 ;; Defined at:
  3303 ;;		line 148 in file "main.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;		None
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;		None
  3308 ;; Return value:  Size  Location     Type
  3309 ;;		None               void
  3310 ;; Registers used:
  3311 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3317 ;;      Params:         0       0       0       0
  3318 ;;      Locals:         0       0       0       0
  3319 ;;      Temps:          1       0       0       0
  3320 ;;      Totals:         1       0       0       0
  3321 ;;Total ram usage:        1 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    2
  3324 ;; This function calls:
  3325 ;;		_MFRC522_Wr
  3326 ;; This function is called by:
  3327 ;;		_MFRC522_Init
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _MFRC522_Reset
  3333  01FF                     _MFRC522_Reset:	
  3334                           
  3335                           ;main.c: 150: MFRC522_Wr( 0x01, 0x0F );
  3336                           
  3337                           ;incstack = 0
  3338                           ; Regs used in _MFRC522_Reset: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3339  01FF  300F               	movlw	15
  3340  0200  00FD               	movwf	??_MFRC522_Reset
  3341  0201  087D               	movf	??_MFRC522_Reset,w
  3342  0202  00FA               	movwf	MFRC522_Wr@value
  3343  0203  3001               	movlw	1
  3344  0204  222D               	fcall	_MFRC522_Wr
  3345  0205  0008               	return
  3346  0206                     __end_of_MFRC522_Reset:	
  3347                           
  3348                           	psect	text17
  3349  0216                     __ptext17:	
  3350 ;; *************** function _MFRC522_AntennaOn *****************
  3351 ;; Defined at:
  3352 ;;		line 152 in file "main.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;		None
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;		None               void
  3359 ;; Registers used:
  3360 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3366 ;;      Params:         0       0       0       0
  3367 ;;      Locals:         0       0       0       0
  3368 ;;      Temps:          0       1       0       0
  3369 ;;      Totals:         0       1       0       0
  3370 ;;Total ram usage:        1 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    3
  3373 ;; This function calls:
  3374 ;;		_MFRC522_Set_Bit
  3375 ;; This function is called by:
  3376 ;;		_MFRC522_Init
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           
  3381                           ;psect for function _MFRC522_AntennaOn
  3382  0216                     _MFRC522_AntennaOn:	
  3383                           
  3384                           ;main.c: 154: MFRC522_Set_Bit( 0x14, 0x03 );
  3385                           
  3386                           ;incstack = 0
  3387                           ; Regs used in _MFRC522_AntennaOn: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3388  0216  3003               	movlw	3
  3389  0217  1283               	bcf	3,5	;RP0=0, select bank0
  3390  0218  1303               	bcf	3,6	;RP1=0, select bank0
  3391  0219  00A2               	movwf	??_MFRC522_AntennaOn
  3392  021A  0822               	movf	??_MFRC522_AntennaOn,w
  3393  021B  00FD               	movwf	MFRC522_Set_Bit@mask
  3394  021C  3014               	movlw	20
  3395  021D  221F               	fcall	_MFRC522_Set_Bit
  3396  021E  0008               	return
  3397  021F                     __end_of_MFRC522_AntennaOn:	
  3398                           
  3399                           	psect	text18
  3400  021F                     __ptext18:	
  3401 ;; *************** function _MFRC522_Set_Bit *****************
  3402 ;; Defined at:
  3403 ;;		line 144 in file "main.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  addr            1    wreg     unsigned char 
  3406 ;;  mask            1   13[COMMON] unsigned char 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  addr            1    1[BANK0 ] unsigned char 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;		None               void
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3418 ;;      Params:         1       0       0       0
  3419 ;;      Locals:         0       1       0       0
  3420 ;;      Temps:          0       1       0       0
  3421 ;;      Totals:         1       2       0       0
  3422 ;;Total ram usage:        3 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    2
  3425 ;; This function calls:
  3426 ;;		_MFRC522_Rd
  3427 ;;		_MFRC522_Wr
  3428 ;; This function is called by:
  3429 ;;		_MFRC522_AntennaOn
  3430 ;;		_MFRC522_ToCard
  3431 ;;		_MFRC522_CRC
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           
  3436                           ;psect for function _MFRC522_Set_Bit
  3437  021F                     _MFRC522_Set_Bit:	
  3438                           
  3439                           ;incstack = 0
  3440                           ; Regs used in _MFRC522_Set_Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3441                           ;MFRC522_Set_Bit@addr stored from wreg
  3442  021F  1283               	bcf	3,5	;RP0=0, select bank0
  3443  0220  1303               	bcf	3,6	;RP1=0, select bank0
  3444  0221  00A1               	movwf	MFRC522_Set_Bit@addr
  3445                           
  3446                           ;main.c: 146: MFRC522_Wr( addr, MFRC522_Rd( addr ) | mask );
  3447  0222  0821               	movf	MFRC522_Set_Bit@addr,w
  3448  0223  226D               	fcall	_MFRC522_Rd
  3449  0224  047D               	iorwf	MFRC522_Set_Bit@mask,w
  3450  0225  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0226  1303               	bcf	3,6	;RP1=0, select bank0
  3452  0227  00A0               	movwf	??_MFRC522_Set_Bit
  3453  0228  0820               	movf	??_MFRC522_Set_Bit,w
  3454  0229  00FA               	movwf	MFRC522_Wr@value
  3455  022A  0821               	movf	MFRC522_Set_Bit@addr,w
  3456  022B  222D               	fcall	_MFRC522_Wr
  3457  022C  0008               	return
  3458  022D                     __end_of_MFRC522_Set_Bit:	
  3459                           
  3460                           	psect	text19
  3461  022D                     __ptext19:	
  3462 ;; *************** function _MFRC522_Wr *****************
  3463 ;; Defined at:
  3464 ;;		line 124 in file "main.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  addr            1    wreg     unsigned char 
  3467 ;;  value           1   10[COMMON] unsigned char 
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;  addr            1   12[COMMON] unsigned char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;		None               void
  3472 ;; Registers used:
  3473 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3479 ;;      Params:         1       0       0       0
  3480 ;;      Locals:         1       0       0       0
  3481 ;;      Temps:          1       0       0       0
  3482 ;;      Totals:         3       0       0       0
  3483 ;;Total ram usage:        3 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    1
  3486 ;; This function calls:
  3487 ;;		_SPI_transfer
  3488 ;; This function is called by:
  3489 ;;		_MFRC522_Clear_Bit
  3490 ;;		_MFRC522_Set_Bit
  3491 ;;		_MFRC522_Reset
  3492 ;;		_MFRC522_Init
  3493 ;;		_MFRC522_ToCard
  3494 ;;		_MFRC522_Request
  3495 ;;		_MFRC522_CRC
  3496 ;;		_MFRC522_AntiColl
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           
  3501                           ;psect for function _MFRC522_Wr
  3502  022D                     _MFRC522_Wr:	
  3503                           
  3504                           ;incstack = 0
  3505                           ; Regs used in _MFRC522_Wr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3506                           ;MFRC522_Wr@addr stored from wreg
  3507  022D  00FC               	movwf	MFRC522_Wr@addr
  3508                           
  3509                           ;main.c: 126: PORTAbits.RA1 = 0;
  3510  022E  1283               	bcf	3,5	;RP0=0, select bank0
  3511  022F  1303               	bcf	3,6	;RP1=0, select bank0
  3512  0230  1085               	bcf	5,1	;volatile
  3513                           
  3514                           ;main.c: 127: SPI_transfer( ( addr << 1 ) & 0x7E );
  3515  0231  087C               	movf	MFRC522_Wr@addr,w
  3516  0232  00FB               	movwf	??_MFRC522_Wr
  3517  0233  077B               	addwf	??_MFRC522_Wr,w
  3518  0234  397E               	andlw	126
  3519  0235  24A8               	fcall	_SPI_transfer
  3520                           
  3521                           ;main.c: 128: SPI_transfer( value );
  3522  0236  087A               	movf	MFRC522_Wr@value,w
  3523  0237  24A8               	fcall	_SPI_transfer
  3524                           
  3525                           ;main.c: 129: PORTAbits.RA1 = 1;
  3526  0238  1283               	bcf	3,5	;RP0=0, select bank0
  3527  0239  1303               	bcf	3,6	;RP1=0, select bank0
  3528  023A  1485               	bsf	5,1	;volatile
  3529  023B  0008               	return
  3530  023C                     __end_of_MFRC522_Wr:	
  3531                           
  3532                           	psect	text20
  3533  026D                     __ptext20:	
  3534 ;; *************** function _MFRC522_Rd *****************
  3535 ;; Defined at:
  3536 ;;		line 131 in file "main.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;  addr            1    wreg     unsigned char 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  addr            1    8[COMMON] unsigned char 
  3541 ;;  value           1    9[COMMON] unsigned char 
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  1    wreg      unsigned char 
  3544 ;; Registers used:
  3545 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3551 ;;      Params:         0       0       0       0
  3552 ;;      Locals:         2       0       0       0
  3553 ;;      Temps:          1       0       0       0
  3554 ;;      Totals:         3       0       0       0
  3555 ;;Total ram usage:        3 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    1
  3558 ;; This function calls:
  3559 ;;		_SPI_transfer
  3560 ;; This function is called by:
  3561 ;;		_MFRC522_Clear_Bit
  3562 ;;		_MFRC522_Set_Bit
  3563 ;;		_MFRC522_ToCard
  3564 ;;		_MFRC522_CRC
  3565 ;;		_MFRC522_Auth
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           
  3570                           ;psect for function _MFRC522_Rd
  3571  026D                     _MFRC522_Rd:	
  3572                           
  3573                           ;incstack = 0
  3574                           ; Regs used in _MFRC522_Rd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3575                           ;MFRC522_Rd@addr stored from wreg
  3576  026D  00F8               	movwf	MFRC522_Rd@addr
  3577                           
  3578                           ;main.c: 133: char value;
  3579                           ;main.c: 134: PORTAbits.RA1 = 0;
  3580  026E  1283               	bcf	3,5	;RP0=0, select bank0
  3581  026F  1303               	bcf	3,6	;RP1=0, select bank0
  3582  0270  1085               	bcf	5,1	;volatile
  3583                           
  3584                           ;main.c: 135: SPI_transfer( (( addr << 1 ) & 0x7E) | 0x80 );
  3585  0271  0878               	movf	MFRC522_Rd@addr,w
  3586  0272  00F7               	movwf	??_MFRC522_Rd
  3587  0273  0777               	addwf	??_MFRC522_Rd,w
  3588  0274  397E               	andlw	126
  3589  0275  3880               	iorlw	128
  3590  0276  24A8               	fcall	_SPI_transfer
  3591                           
  3592                           ;main.c: 136: value = SPI_transfer( 0x00 );
  3593  0277  3000               	movlw	0
  3594  0278  24A8               	fcall	_SPI_transfer
  3595  0279  00F7               	movwf	??_MFRC522_Rd
  3596  027A  0877               	movf	??_MFRC522_Rd,w
  3597  027B  00F9               	movwf	MFRC522_Rd@value
  3598                           
  3599                           ;main.c: 137: PORTAbits.RA1 = 1;
  3600  027C  1283               	bcf	3,5	;RP0=0, select bank0
  3601  027D  1303               	bcf	3,6	;RP1=0, select bank0
  3602  027E  1485               	bsf	5,1	;volatile
  3603                           
  3604                           ;main.c: 138: return value;
  3605  027F  0879               	movf	MFRC522_Rd@value,w
  3606  0280  0008               	return
  3607  0281                     __end_of_MFRC522_Rd:	
  3608                           
  3609                           	psect	text21
  3610  04A8                     __ptext21:	
  3611 ;; *************** function _SPI_transfer *****************
  3612 ;; Defined at:
  3613 ;;		line 43 in file "SPI.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  data            1    wreg     unsigned char 
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  data            1    1[COMMON] unsigned char 
  3618 ;;  i               2    4[COMMON] int 
  3619 ;;  i               2    2[COMMON] int 
  3620 ;;  byte            1    6[COMMON] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      unsigned char 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0, btemp+1
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3630 ;;      Params:         0       0       0       0
  3631 ;;      Locals:         6       0       0       0
  3632 ;;      Temps:          1       0       0       0
  3633 ;;      Totals:         7       0       0       0
  3634 ;;Total ram usage:        7 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_MFRC522_Wr
  3640 ;;		_MFRC522_Rd
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           
  3645                           ;psect for function _SPI_transfer
  3646  04A8                     _SPI_transfer:	
  3647                           
  3648                           ;incstack = 0
  3649                           ; Regs used in _SPI_transfer: [wreg+status,2+status,0+btemp+1]
  3650                           ;SPI_transfer@data stored from wreg
  3651  04A8  00F1               	movwf	SPI_transfer@data
  3652                           
  3653                           ;SPI.c: 45: unsigned char byte;
  3654                           ;SPI.c: 46: byte = data;
  3655  04A9  0871               	movf	SPI_transfer@data,w
  3656  04AA  00F0               	movwf	??_SPI_transfer
  3657  04AB  0870               	movf	??_SPI_transfer,w
  3658  04AC  00F6               	movwf	SPI_transfer@byte
  3659                           
  3660                           ;SPI.c: 47: if(_mode==1 || _mode==3)
  3661  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  3662  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  3663  04AF  086A               	movf	__mode,w
  3664  04B0  3A01               	xorlw	1
  3665  04B1  1903               	skipnz
  3666  04B2  2CB7               	goto	l1304
  3667  04B3  086A               	movf	__mode,w
  3668  04B4  3A03               	xorlw	3
  3669  04B5  1D03               	skipz
  3670  04B6  2CEF               	goto	l1330
  3671  04B7                     l1304:	
  3672                           
  3673                           ;SPI.c: 48: {
  3674                           ;SPI.c: 49: for(int i=0;i<8;i++)
  3675  04B7  01F2               	clrf	SPI_transfer@i
  3676  04B8  01F3               	clrf	SPI_transfer@i+1
  3677  04B9                     L6:	
  3678  04B9  0873               	movf	SPI_transfer@i+1,w
  3679  04BA  3A80               	xorlw	128
  3680  04BB  00FF               	movwf	127
  3681  04BC  3080               	movlw	128
  3682  04BD  027F               	subwf	127,w
  3683  04BE  1D03               	skipz
  3684  04BF  2CC2               	goto	u915
  3685  04C0  3008               	movlw	8
  3686  04C1  0272               	subwf	SPI_transfer@i,w
  3687  04C2                     u915:	
  3688  04C2  1803               	btfsc	3,0
  3689  04C3  2D31               	goto	l1356
  3690                           
  3691                           ;SPI.c: 50: {
  3692                           ;SPI.c: 51: if(byte & 0x80) PORTB |= (1<<6);
  3693  04C4  1FF6               	btfss	SPI_transfer@byte,7
  3694  04C5  2CCA               	goto	l1312
  3695  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  3696  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  3697  04C8  1706               	bsf	6,6	;volatile
  3698  04C9  2CD0               	goto	l1314
  3699  04CA                     l1312:	
  3700                           
  3701                           ;SPI.c: 52: else PORTB &= ~(1<<6);
  3702  04CA  30BF               	movlw	191
  3703  04CB  00F0               	movwf	??_SPI_transfer
  3704  04CC  0870               	movf	??_SPI_transfer,w
  3705  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  3706  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  3707  04CF  0586               	andwf	6,f	;volatile
  3708  04D0                     l1314:	
  3709                           
  3710                           ;SPI.c: 53: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3711  04D0  300D               	movlw	13
  3712  04D1  00F0               	movwf	??_SPI_transfer
  3713  04D2                     u1807:	
  3714  04D2  0BF0               	decfsz	??_SPI_transfer,f
  3715  04D3  2CD2               	goto	u1807
  3716                           
  3717                           ;SPI.c: 54: PORTB ^= (1<<7);
  3718  04D4  3080               	movlw	128
  3719  04D5  00F0               	movwf	??_SPI_transfer
  3720  04D6  0870               	movf	??_SPI_transfer,w
  3721  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  3722  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  3723  04D9  0686               	xorwf	6,f	;volatile
  3724                           
  3725                           ;SPI.c: 55: byte <<= 1;
  3726  04DA  1003               	clrc
  3727  04DB  0DF6               	rlf	SPI_transfer@byte,f
  3728                           
  3729                           ;SPI.c: 56: if((PORTB & (1<<5))) byte |= 0x01;
  3730  04DC  1A86               	btfsc	6,5	;volatile
  3731  04DD  1476               	bsf	SPI_transfer@byte,0
  3732                           
  3733                           ;SPI.c: 57: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3734  04DE  300D               	movlw	13
  3735  04DF  00F0               	movwf	??_SPI_transfer
  3736  04E0                     u1817:	
  3737  04E0  0BF0               	decfsz	??_SPI_transfer,f
  3738  04E1  2CE0               	goto	u1817
  3739                           
  3740                           ;SPI.c: 58: PORTB ^= (1<<7);
  3741  04E2  3080               	movlw	128
  3742  04E3  00F0               	movwf	??_SPI_transfer
  3743  04E4  0870               	movf	??_SPI_transfer,w
  3744  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  3745  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  3746  04E7  0686               	xorwf	6,f	;volatile
  3747  04E8  3001               	movlw	1
  3748  04E9  07F2               	addwf	SPI_transfer@i,f
  3749  04EA  1803               	skipnc
  3750  04EB  0AF3               	incf	SPI_transfer@i+1,f
  3751  04EC  3000               	movlw	0
  3752  04ED  07F3               	addwf	SPI_transfer@i+1,f
  3753  04EE  2CB9               	goto	L6
  3754  04EF                     l1330:	
  3755                           ;SPI.c: 59: }
  3756                           ;SPI.c: 60: }
  3757                           
  3758                           
  3759                           ;SPI.c: 61: else
  3760                           ;SPI.c: 62: {
  3761                           ;SPI.c: 63: for(int i=0;i<8;i++)
  3762  04EF  01F4               	clrf	SPI_transfer@i_213
  3763  04F0  01F5               	clrf	SPI_transfer@i_213+1
  3764  04F1  0875               	movf	SPI_transfer@i_213+1,w
  3765  04F2  3A80               	xorlw	128
  3766  04F3  00FF               	movwf	127
  3767  04F4  3080               	movlw	128
  3768  04F5  027F               	subwf	127,w
  3769  04F6  1D03               	skipz
  3770  04F7  2CFA               	goto	u955
  3771  04F8  3008               	movlw	8
  3772  04F9  0274               	subwf	SPI_transfer@i_213,w
  3773  04FA                     u955:	
  3774  04FA  1803               	btfsc	3,0
  3775  04FB  2D31               	goto	l1356
  3776  04FC                     l77:	
  3777                           
  3778                           ;SPI.c: 64: {
  3779                           ;SPI.c: 65: if(byte & 0x80)PORTB |= (1<<6);
  3780  04FC  1FF6               	btfss	SPI_transfer@byte,7
  3781  04FD  2D02               	goto	l1338
  3782  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  3783  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  3784  0500  1706               	bsf	6,6	;volatile
  3785  0501  2D08               	goto	l1340
  3786  0502                     l1338:	
  3787                           
  3788                           ;SPI.c: 66: else PORTB &= ~(1<<6);
  3789  0502  30BF               	movlw	191
  3790  0503  00F0               	movwf	??_SPI_transfer
  3791  0504  0870               	movf	??_SPI_transfer,w
  3792  0505  1283               	bcf	3,5	;RP0=0, select bank0
  3793  0506  1303               	bcf	3,6	;RP1=0, select bank0
  3794  0507  0586               	andwf	6,f	;volatile
  3795  0508                     l1340:	
  3796                           
  3797                           ;SPI.c: 67: byte <<= 1;
  3798  0508  1003               	clrc
  3799  0509  0DF6               	rlf	SPI_transfer@byte,f
  3800                           
  3801                           ;SPI.c: 68: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3802  050A  300D               	movlw	13
  3803  050B  00F0               	movwf	??_SPI_transfer
  3804  050C                     u1827:	
  3805  050C  0BF0               	decfsz	??_SPI_transfer,f
  3806  050D  2D0C               	goto	u1827
  3807                           
  3808                           ;SPI.c: 69: PORTB ^= (1<<7);
  3809  050E  3080               	movlw	128
  3810  050F  00F0               	movwf	??_SPI_transfer
  3811  0510  0870               	movf	??_SPI_transfer,w
  3812  0511  1283               	bcf	3,5	;RP0=0, select bank0
  3813  0512  1303               	bcf	3,6	;RP1=0, select bank0
  3814  0513  0686               	xorwf	6,f	;volatile
  3815                           
  3816                           ;SPI.c: 70: if((PORTB & (1<<5))) byte |= 0x01;
  3817  0514  1A86               	btfsc	6,5	;volatile
  3818  0515  1476               	bsf	SPI_transfer@byte,0
  3819                           
  3820                           ;SPI.c: 71: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3821  0516  300D               	movlw	13
  3822  0517  00F0               	movwf	??_SPI_transfer
  3823  0518                     u1837:	
  3824  0518  0BF0               	decfsz	??_SPI_transfer,f
  3825  0519  2D18               	goto	u1837
  3826                           
  3827                           ;SPI.c: 72: PORTB ^= (1<<7);
  3828  051A  3080               	movlw	128
  3829  051B  00F0               	movwf	??_SPI_transfer
  3830  051C  0870               	movf	??_SPI_transfer,w
  3831  051D  1283               	bcf	3,5	;RP0=0, select bank0
  3832  051E  1303               	bcf	3,6	;RP1=0, select bank0
  3833  051F  0686               	xorwf	6,f	;volatile
  3834  0520  3001               	movlw	1
  3835  0521  07F4               	addwf	SPI_transfer@i_213,f
  3836  0522  1803               	skipnc
  3837  0523  0AF5               	incf	SPI_transfer@i_213+1,f
  3838  0524  3000               	movlw	0
  3839  0525  07F5               	addwf	SPI_transfer@i_213+1,f
  3840  0526  0875               	movf	SPI_transfer@i_213+1,w
  3841  0527  3A80               	xorlw	128
  3842  0528  00FF               	movwf	127
  3843  0529  3080               	movlw	128
  3844  052A  027F               	subwf	127,w
  3845  052B  1D03               	skipz
  3846  052C  2D2F               	goto	u985
  3847  052D  3008               	movlw	8
  3848  052E  0274               	subwf	SPI_transfer@i_213,w
  3849  052F                     u985:	
  3850  052F  1C03               	skipc
  3851  0530  2CFC               	goto	l77
  3852  0531                     l1356:	
  3853                           
  3854                           ;SPI.c: 73: }
  3855                           ;SPI.c: 74: }
  3856                           ;SPI.c: 75: return byte;
  3857  0531  0876               	movf	SPI_transfer@byte,w
  3858  0532  0008               	return
  3859  0533                     __end_of_SPI_transfer:	
  3860  007E                     btemp	set	126	;btemp
  3861  007E                     wtemp	set	126
  3862  007E                     wtemp0	set	126
  3863  0080                     wtemp1	set	128
  3864  0082                     wtemp2	set	130
  3865  0084                     wtemp3	set	132
  3866  0086                     wtemp4	set	134
  3867  0088                     wtemp5	set	136
  3868  007F                     wtemp6	set	127
  3869  007E                     ttemp	set	126
  3870  007E                     ttemp0	set	126
  3871  0081                     ttemp1	set	129
  3872  0084                     ttemp2	set	132
  3873  0087                     ttemp3	set	135
  3874  007F                     ttemp4	set	127
  3875  007E                     ltemp	set	126
  3876  007E                     ltemp0	set	126
  3877  0082                     ltemp1	set	130
  3878  0086                     ltemp2	set	134
  3879  0080                     ltemp3	set	128


Data Sizes:
    Strings     48
    Constant    18
    Data        0
    BSS         18
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     56      75
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_4(CODE[3]), STR_3(CODE[4]), STR_2(CODE[9]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S364$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    MFRC522_ReadCardSerial@str	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_isCard@TagType	PTR unsigned char  size(1) Largest target is 1
		 -> main@TagType(BANK0[1]), 

    MFRC522_AntiColl@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_SelectTag@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_CRC@dataOut	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_CRC@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_Request@TagType	PTR unsigned char  size(1) Largest target is 1
		 -> main@TagType(BANK0[1]), 

    MFRC522_ToCard@backData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[1]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_ToCard@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> MFRC522_AntiColl@unLen(BANK0[2]), MFRC522_Read@unLen(COMMON[2]), MFRC522_Write@recvBits(COMMON[2]), MFRC522_Auth@recvBits(COMMON[2]), 
		 -> MFRC522_Halt@unLen(COMMON[2]), MFRC522_SelectTag@recvBits(BANK0[2]), MFRC522_Request@backBits(BANK0[2]), 

    MFRC522_ToCard@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[1]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 


Critical Paths under _main in COMMON

    _printf->___lwmod
    ___lwmod->___lwdiv
    _MFRC522_CRC->_MFRC522_Clear_Bit
    _MFRC522_CRC->_MFRC522_Set_Bit
    _MFRC522_AntiColl->_MFRC522_Clear_Bit
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_ToCard->_MFRC522_Set_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Init->_MFRC522_Reset
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_SPI_transfer

Critical Paths under _main in BANK0

    _main->_MFRC522_SelectTag
    _MFRC522_isCard->_MFRC522_Request
    _MFRC522_Request->_MFRC522_ToCard
    _MFRC522_SelectTag->_MFRC522_ToCard
    _MFRC522_CRC->_MFRC522_Clear_Bit
    _MFRC522_ReadCardSerial->_MFRC522_AntiColl
    _MFRC522_AntiColl->_MFRC522_ToCard
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_Init->_MFRC522_AntennaOn
    _MFRC522_AntennaOn->_MFRC522_Set_Bit

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0   37844
                                             41 BANK0     15    15      0
                       _MFRC522_Init
             _MFRC522_ReadCardSerial
                  _MFRC522_SelectTag
                     _MFRC522_isCard
                           _SPI_init
                          _UART_init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              15    13      2    1291
                                              0 BANK0     15    13      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     374
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MFRC522_isCard                                       2     2      0    8608
                                             30 BANK0      2     2      0
                    _MFRC522_Request
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Request                                      9     8      1    8559
                                             21 BANK0      9     8      1
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_SelectTag                                   20    20      0   13196
                                             21 BANK0     20    20      0
                        _MFRC522_CRC
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (2) _MFRC522_CRC                                          6     4      2    5620
                                              3 BANK0      6     4      2
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_ReadCardSerial                               3     3      0   10538
                                             32 BANK0      3     3      0
                   _MFRC522_AntiColl
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntiColl                                    11    11      0   10444
                                             21 BANK0     11    11      0
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_ToCard                                      18    14      4    7194
                                              3 BANK0     18    14      4
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    4     3      1    1797
                                             13 COMMON     1     0      1
                                              0 BANK0      3     3      0
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Init                                         1     1      0    3898
                                              3 BANK0      1     1      0
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Reset                                        1     1      0    1130
                                             13 COMMON     1     1      0
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntennaOn                                    1     1      0    1638
                                              2 BANK0      1     1      0
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      3     2      1    1638
                                             13 COMMON     1     0      1
                                              0 BANK0      2     2      0
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           3     2      1    1130
                                             10 COMMON     3     2      1
                         _MFRC522_Rd (ARG)
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           3     3      0     230
                                              7 COMMON     3     3      0
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _SPI_transfer                                         7     7      0     185
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MFRC522_Init
     _MFRC522_AntennaOn
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
     _MFRC522_Reset
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_Wr
       _MFRC522_Rd (ARG)
         _SPI_transfer
       _SPI_transfer (ARG)
   _MFRC522_ReadCardSerial
     _MFRC522_AntiColl
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_SelectTag
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _MFRC522_isCard
     _MFRC522_Request
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
         _SPI_transfer (ARG)
   _SPI_init
   _UART_init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     38      4B       3       93.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      59       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      59      10        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Apr 12 17:28:20 2015

                              pc 0002                      __CFG_CP$OFF 0000                     MFRC522_CRC@i 0027  
                   MFRC522_CRC@n 0026                               l37 0207                               l63 02AD  
                             l77 04FC                               fsr 0004                      main@TagType 0057  
                            l122 07F7                              l208 0549                              l137 031E  
                            l242 0629                              l237 0601                              l191 04A6  
                            l247 0645                              l259 06C5                     __CFG_CPD$OFF 0000  
                            u915 04C2                              u955 04FA                              u985 052F  
                            u995 070E                              fsr0 0004                              indf 0000  
                   __CFG_FOSC$HS 0000                   ??_MFRC522_Init 0023                     __CFG_LVP$OFF 0000  
          __size_of_SPI_transfer 008B                             l1312 04CA                             l1304 04B7  
                           l1314 04D0                             l1330 04EF                             l1410 0737  
                           l1402 0705                             l1340 0508                             l1412 073D  
                           l1404 0725                             l1500 03CC                             l1430 076E  
                           l1338 0502                             l1418 0753                             l1530 0488  
                           l1356 0531                             l1444 07C1                             l1508 03DA  
                           l1604 02B1                             l1454 07CB                             l1438 07A8  
                           l1630 0448                             l1622 0418                             l1614 0402  
                           l1710 066A                             l1456 07EA                             l1448 07C9  
                           l1392 06DF                             l1536 049A                             l1632 0449  
                           l1480 031A                             l1560 0382                             l1552 035E  
                           l1712 066F                             l1458 07F1                             l1394 06E7  
                           l1386 06D0                             l1554 036C                             l1714 0691  
                           l1722 06AF                             l1388 06D6                             l1660 0295  
                           l1644 025A                             l1564 038D                             l1724 06B1  
                           l1708 0661                             l1494 03A8                             l1582 02D9  
                           l1670 05FD                             l1726 05E8                             l1496 03C0  
                           l1576 02BD                             l1672 0603                             l1578 02CB  
                           l1586 02E4                             l1676 0608                             l1678 061C  
                           l1870 05A5                             l1856 057C                             l1876 05C7  
                           l1878 05D0                             STR_1 0019                             STR_2 003C  
                           STR_3 0045                             STR_4 0028                             STR_5 002B  
                           u1115 07D4                             u1305 02C0                             u1235 0361  
                           u1325 02D1                             u1255 036D                             u1335 02DA  
                           u1265 0379                             u1275 0383                             u1455 063E  
                           u1715 0547                             u1485 065A                             u1725 057A  
                           u1807 04D2                             u1817 04E0                             u1827 050C  
                           u1755 05A3                             u1837 0518                             u1765 05C5  
                           u1777 0552                             u1787 0562                             u1797 05D9  
                           _RCIF 0065                             _TXIF 0064                             _main 0533  
          MFRC522_AntiColl@unLen 003B                             btemp 007E                             ltemp 007E  
                           start 0000                             ttemp 007E                             wtemp 007E  
               _MFRC522_AntiColl 044B                    __CFG_MCLRE$ON 0000                   MFRC522_Rd@addr 0078  
                ??_MFRC522_Reset 007D                   MFRC522_Wr@addr 007C                            ?_main 0070  
        ?_MFRC522_ReadCardSerial 0070                    __CFG_WDTE$OFF 0000                  __end_of___lwdiv 0394  
                __end_of___lwmod 02EB                 SPI_transfer@data 0071                            _RCREG 001A  
               SPI_transfer@byte 0076                     _SPI_transfer 04A8                            _SPBRG 0099  
                          _PORTB 0006                            _TRISB 0086                            _TXREG 0019  
            __size_of_MFRC522_Rd 0014              __size_of_MFRC522_Wr 000F                            __mode 006A  
             __size_of_UART_init 0011        MFRC522_SelectTag@recvBits 0046                  __end_of_dpowers 0011  
                          _count 0068           MFRC522_AntiColl@serNum 003F                            _putch 0206  
                          main@i 0053                   __CFG_BOREN$OFF 0000                            pclath 000A  
                          ltemp0 007E                 __end_of_SPI_init 02B7                            ltemp1 0082  
                          ltemp2 0086                            ltemp3 0080                _MFRC522_Clear_Bit 023C  
                          ttemp0 007E                            ttemp1 0081                            ttemp2 0084  
                          ttemp3 0087                            ttemp4 007F                            status 0003  
                          wtemp0 007E                            wtemp1 0080                            wtemp2 0082  
                          wtemp3 0084                            wtemp4 0086                            wtemp5 0088  
                          wtemp6 007F               ?_MFRC522_Clear_Bit 007D          MFRC522_SelectTag@buffer 003A  
        MFRC522_SelectTag@serNum 0045                _MFRC522_AntennaOn 0216                  __initialization 07F9  
                   __end_of_main 05E1               ?_MFRC522_AntennaOn 0070              ??_MFRC522_Clear_Bit 0020  
      MFRC522_ReadCardSerial@str 0042                  MFRC522_Rd@value 0079   __end_of_MFRC522_ReadCardSerial 0297  
               ??_MFRC522_ToCard 0027         __size_of_MFRC522_Set_Bit 000E         __size_of_MFRC522_Request 0035  
                         ??_main 0049              ??_MFRC522_AntennaOn 0022                  MFRC522_ToCard@i 0032  
                MFRC522_ToCard@n 0034                 ??_MFRC522_isCard 003E            MFRC522_ToCard@backLen 0026  
                MFRC522_Wr@value 007A        __end_of_MFRC522_Clear_Bit 024C            MFRC522_ToCard@_status 002E  
          MFRC522_ToCard@command 0031                SPI_transfer@i_213 0074                           ?_putch 0070  
              _MFRC522_SelectTag 03EF            MFRC522_ToCard@sendLen 0024               ?_MFRC522_SelectTag 0070  
          MFRC522_ToCard@waitIRq 002D        __end_of_MFRC522_AntennaOn 021F                   __CFG_PWRTE$OFF 0000  
           __size_of_MFRC522_CRC 005B              ??_MFRC522_SelectTag 0035                __end_of_UART_init 026D  
           __end_of_MFRC522_Init 0356          MFRC522_AntiColl@_status 003D                        ??___lwdiv 0074  
                      ??___lwmod 007C                           _buffer 0058                           _printf 05E1  
      __end_of_MFRC522_SelectTag 044B         MFRC522_SelectTag@_status 0043          __end_of__initialization 07FE  
         MFRC522_Request@TagType 0035                     ??_MFRC522_Rd 0077                     ??_MFRC522_Wr 007B  
          MFRC522_isCard@TagType 003F                     SPI_init@mode 0071                   __pcstackCOMMON 0070  
                  __end_of_putch 020E           MFRC522_Request@_status 003B                        ?_SPI_init 0070  
         MFRC522_Request@reqMode 003A         __end_of_MFRC522_AntiColl 04A8                ??_MFRC522_Set_Bit 0020  
             __end_of_MFRC522_Rd 0281               __end_of_MFRC522_Wr 023C                ??_MFRC522_Request 0036  
     __size_of_MFRC522_Clear_Bit 0010                          ??_putch 0070                       __pbssBANK0 0058  
         MFRC522_ToCard@backData 0025       __size_of_MFRC522_AntennaOn 0009                MFRC522_CRC@dataIn 0028  
                     __pmaintext 0533                MFRC522_CRC@length 0023               MFRC522_SelectTag@i 0048  
                        ?_printf 0020           MFRC522_ToCard@lastBits 002F                       ??_SPI_init 0070  
         MFRC522_ToCard@sendData 0023       __size_of_MFRC522_SelectTag 005C                       __stringtab 0001  
          __size_of_MFRC522_Init 0036                          ___lwdiv 0356                          ___lwmod 02B7  
          __end_of_MFRC522_Reset 0206                          __ptext1 05E1                          __ptext2 0206  
                        __ptext3 02B7                          __ptext4 0356                          __ptext5 025C  
                        __ptext6 0297                          __ptext7 024C                          __ptext8 02EB  
                        __ptext9 03EF                  __size_of_printf 00E5                __end_of_hexpowers 0019  
                        _dpowers 0007                          main@UID 004D                          clrloop0 020F  
                   _MFRC522_Init 0320             end_of_initialization 07FE    MFRC522_ReadCardSerial@_status 0041  
                      _RCSTAbits 0018                          printf@c 002E                          printf@f 0029  
                      _PORTAbits 0005                        _PORTBbits 0006                        _UART_init 025C  
                      _TRISAbits 0085                        _TRISBbits 0086                    ??_MFRC522_CRC 0025  
                      _TXSTAbits 0098                  _MFRC522_Set_Bit 021F          MFRC522_Request@backBits 003C  
            MFRC522_ToCard@irqEn 0030                  _MFRC522_Request 02EB                       ?_UART_init 0070  
                 __end_of_printf 06C6              start_initialization 07F9                __size_of_SPI_init 0020  
              ?_MFRC522_AntiColl 0070                MFRC522_AntiColl@i 003E          __size_of_MFRC522_ToCard 0133  
             ??_MFRC522_AntiColl 0035          __size_of_MFRC522_isCard 0010         ??_MFRC522_ReadCardSerial 0040  
            __end_of_MFRC522_CRC 03EF                         ??_printf 0022                    ?_SPI_transfer 0070  
                      ___latbits 0000                    __pcstackBANK0 0020              __end_of__stringdata 0049  
                  SPI_transfer@i 0072                        __pnvBANK0 006A          __end_of_MFRC522_Set_Bit 022D  
             MFRC522_CRC@dataOut 0024          __end_of_MFRC522_Request 0320                 ___lwdiv@dividend 0072  
            MFRC522_Set_Bit@addr 0021              MFRC522_Set_Bit@mask 007D                         ?___lwdiv 0070  
                       ?___lwmod 0078                        __pstrings 0001                      ??_UART_init 0070  
                 ??_SPI_transfer 0070                        _hexpowers 0011                 ___lwdiv@quotient 0075  
                 __size_of_putch 0008                      _MFRC522_CRC 0394                        clear_ram0 020E  
__size_of_MFRC522_ReadCardSerial 0016                      __stringbase 0006                      __stringdata 0019  
                      main@i_342 0055                         _SPI_init 0297                       printf@_val 002A  
                     printf@flag 0027                       printf@prec 0028                   _MFRC522_ToCard 06C6  
                 _MFRC522_isCard 024C            MFRC522_SelectTag@size 0044           __size_of_MFRC522_Reset 0007  
               ?_MFRC522_Set_Bit 007D            MFRC522_Clear_Bit@addr 0022                 ?_MFRC522_Request 0035  
          MFRC522_Clear_Bit@mask 007D                 __size_of___lwdiv 003E                 __size_of___lwmod 0034  
             __end_of__stringtab 0007           __end_of_MFRC522_ToCard 07F9           _MFRC522_ReadCardSerial 0281  
                ___lwdiv@divisor 0070                  ___lwdiv@counter 0077                         __ptext10 0394  
                       __ptext11 0281                         __ptext20 026D                         __ptext12 044B  
                       __ptext21 04A8                         __ptext13 06C6                         __ptext14 023C  
                       __ptext15 0320                         __ptext16 01FF                         __ptext17 0216  
                       __ptext18 021F                         __ptext19 022D           __end_of_MFRC522_isCard 025C  
    MFRC522_AntiColl@serNumCheck 003A                    __size_of_main 00AE             __end_of_SPI_transfer 0533  
                     _MFRC522_Rd 026D                       _MFRC522_Wr 022D        __size_of_MFRC522_AntiColl 005D  
                      printf@idx 0025                         main@size 004C                    _MFRC522_Reset 01FF  
                      putch@data 0070                  ?_MFRC522_ToCard 0023                  ?_MFRC522_isCard 0070  
               ___lwmod@dividend 007A                        stringcode 0001                         printf@ap 0026  
                 ?_MFRC522_Reset 0070                  ___lwmod@divisor 0078                  ___lwmod@counter 007D  
                       stringdir 0001                         stringtab 0001                    ?_MFRC522_Init 0070  
                   ?_MFRC522_CRC 0023                      ?_MFRC522_Rd 0070                      ?_MFRC522_Wr 007A  
